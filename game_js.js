// Generated by Haxe 3.4.7
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Analytics = function() { };
$hxClasses["Analytics"] = Analytics;
Analytics.__name__ = ["Analytics"];
Analytics.init = function() {
	if(!Analytics.enabled) {
		return;
	}
	if(window.document.location.hostname == "localhost" || window.document.location.hostname == "127.0.0.1") {
		console.log("game is running locally");
		Config.enableCheats = true;
		return;
	}
	jsFunctions.loadJS("https://www.googletagmanager.com/gtag/js?id=UA-48290579-2",function() {
		Analytics.ready = true;
		jsFunctions.initGA();
		Analytics.sendEvent("game","playVersion",null,"VERSION1.1",true);
		Analytics.sendEvent("game","playOnSite",null,window.location.hostname,true);
		var _g = 0;
		var _g1 = Analytics.capturedErrors;
		while(_g < _g1.length) {
			var err = _g1[_g];
			++_g;
			jsFunctions.gaSendError(err);
		}
		Analytics.capturedErrors = [];
	});
	Analytics.useAltEarlyGame = true;
	Analytics.didABTest = false;
	if(Analytics.useAltEarlyGame) {
		Config.earlyGameFix1 = true;
		Config.earlyGameFix2 = true;
	}
};
Analytics.sendErrorEvent = function(errorMessage) {
	if(Analytics.errorsReported > 3) {
		return;
	}
	Analytics.errorsReported++;
	if(!Analytics.ready) {
		Analytics.capturedErrors.push(errorMessage);
	} else {
		jsFunctions.gaSendError(errorMessage);
	}
};
Analytics.sendEvent = function(category,action,value,label,nonInteraction) {
	if(nonInteraction == null) {
		nonInteraction = false;
	}
	if(label == null) {
		label = "";
	}
	if(!Analytics.ready) {
		return;
	}
	jsFunctions.gaSendEvent(category,action,label,value,nonInteraction);
};
Analytics.update = function(timeMod) {
	Analytics.sessionTime += timeMod / 60;
	if(Analytics.sessionTime > 1800. && !Analytics.reportedLongPlaytime) {
		common_Storage.getItem("lptReported",function(err,res) {
			if(err == null) {
				if(res != "reported") {
					common_Storage.setItem("lptReported","reported",function() {
						Analytics.sendEvent("playtime",Analytics.didABTest ? Analytics.useAltEarlyGame ? "altEarlyGame" : "standardEarlyGame" : "noABTest");
					});
				}
			}
		});
		Analytics.reportedLongPlaytime = true;
	}
};
var Audio = function(game) {
	this.isPaused = false;
	this.playSecondMusicOnceLoaded = false;
	this.music1EverFinished = false;
	this.music4 = null;
	this.music3 = null;
	this.music2 = null;
	var _gthis = this;
	Audio.instance = this;
	this.game = game;
	this.music1 = PIXI.sound.Sound.from({ url : "audio/BTFE_BackgroundMusic_1.{ogg,mp3}", preload : true, singleInstance : true, loaded : function() {
		if(Settings.musicOn) {
			_gthis.music1.play($bind(_gthis,_gthis.firstMusicCompleteCallback));
			if(_gthis.isPaused) {
				_gthis.music1.pause();
			}
		}
	}});
	this.music2 = null;
	if(Settings.musicOn) {
		this.loadSecondMusic();
	}
	this.buildSound = PIXI.sound.Sound.from({ url : "audio/BTFE_BuildingBuild.{ogg,mp3}", preload : true});
	this.buildingClickSound = PIXI.sound.Sound.from({ url : "audio/BTFE_BuildingClick.{ogg,mp3}", preload : true});
	this.buildingUpgradeSound = PIXI.sound.Sound.from({ url : "audio/BTFE_BuildingUpgrade.{ogg,mp3}", preload : true});
	this.buttonSound = PIXI.sound.Sound.from({ url : "audio/BTFE_Button.{ogg,mp3}", preload : true});
	this.buttonFailSound = PIXI.sound.Sound.from({ url : "audio/BTFE_ButtonFail.{ogg,mp3}", preload : true});
	this.music = this.music1;
};
$hxClasses["Audio"] = Audio;
Audio.__name__ = ["Audio"];
Audio.get = function() {
	return Audio.instance;
};
Audio.prototype = {
	loadSecondMusic: function() {
		var _gthis = this;
		this.music2 = PIXI.sound.Sound.from({ url : "audio/BTFE_BackgroundMusic_2.{ogg,mp3}", preload : true, singleInstance : false, loaded : function() {
			if(Settings.musicOn && _gthis.music == _gthis.music1 && !_gthis.music.isPlaying && !_gthis.music.paused && _gthis.playSecondMusicOnceLoaded) {
				_gthis.music = _gthis.music2;
				_gthis.music2.play($bind(_gthis,_gthis.startNextMusic));
				if(_gthis.isPaused) {
					_gthis.music2.pause();
				}
				_gthis.playSecondMusicOnceLoaded = false;
			}
		}});
	}
	,loadThirdMusic: function() {
		this.music3 = PIXI.sound.Sound.from({ url : "audio/BTFE_BackgroundMusic_3.{ogg,mp3}", preload : true, singleInstance : false});
	}
	,loadFourthMusic: function() {
		this.music4 = PIXI.sound.Sound.from({ url : "audio/BTFE_BackgroundMusic_4.{ogg,mp3}", preload : true, singleInstance : false});
	}
	,startNextMusic: function() {
		if(this.music2 != null && this.music2.isLoaded || this.music3 != null && this.music3.isLoaded || this.music4 != null && this.music4.isLoaded) {
			var possibleOptions = [];
			if(this.music2 != null && this.music2.isLoaded) {
				possibleOptions.push(this.music2);
			}
			if(this.music3 != null && this.music3.isLoaded) {
				possibleOptions.push(this.music3);
			} else if(this.music3 == null) {
				this.loadThirdMusic();
			}
			if(this.music4 != null && this.music4.isLoaded) {
				possibleOptions.push(this.music4);
			} else if(this.music3 != null && this.music3.isLoaded && this.music4 == null) {
				this.loadFourthMusic();
			}
			if(possibleOptions.length > 1 && this.music != null) {
				HxOverrides.remove(possibleOptions,this.music);
			}
			var newMusic = random_Random.fromArray(possibleOptions);
			this.music = newMusic;
			this.music.play($bind(this,this.startNextMusic));
			if(this.isPaused) {
				this.music.pause();
			}
		} else {
			this.playSecondMusicOnceLoaded = true;
		}
	}
	,firstMusicCompleteCallback: function(audio) {
		if(!Settings.musicOn) {
			return;
		}
		this.music1EverFinished = true;
		this.startNextMusic();
	}
	,changeMusicEnabledness: function(musicIsOn) {
		Settings.musicOn = musicIsOn;
		Settings.save();
		if(!Settings.musicOn) {
			if(this.music.isPlaying) {
				this.music.stop();
			}
		} else {
			if(!this.music.isPlaying) {
				if(this.music1EverFinished) {
					this.startNextMusic();
				} else if(this.music1.isLoaded) {
					this.music1.play($bind(this,this.firstMusicCompleteCallback));
				}
			}
			if(this.music2 == null) {
				this.loadSecondMusic();
			}
		}
	}
	,changeSoundEnabledness: function(soundIsOn) {
		Settings.soundOn = soundIsOn;
		Settings.save();
	}
	,pauseMusic: function() {
		if(this.music != null && this.music.isPlaying && !this.music.paused) {
			this.music.pause();
		}
		this.isPaused = true;
	}
	,resumeMusic: function() {
		if(this.music != null && this.music.paused && Settings.musicOn) {
			this.music.resume();
		}
		this.isPaused = false;
	}
	,playSound: function(sound) {
		if(Settings.soundOn && sound.isLoaded) {
			sound.play({ });
		}
	}
	,__class__: Audio
};
var BuilderType = $hxClasses["BuilderType"] = { __ename__ : ["BuilderType"], __constructs__ : ["Building","Decoration","WorldResource"] };
BuilderType.Building = function(buildingType,buildingInfo) { var $x = ["Building",0,buildingType,buildingInfo]; $x.__enum__ = BuilderType; $x.toString = $estr; return $x; };
BuilderType.Decoration = function(decorationInfo) { var $x = ["Decoration",1,decorationInfo]; $x.__enum__ = BuilderType; $x.toString = $estr; return $x; };
BuilderType.WorldResource = function(resourceInfo) { var $x = ["WorldResource",2,resourceInfo]; $x.__enum__ = BuilderType; $x.toString = $estr; return $x; };
var BuildPossibility = $hxClasses["BuildPossibility"] = { __ename__ : ["BuildPossibility"], __constructs__ : ["BuildingInWorld","BuildingPositionImpossible","BuildingOK"] };
BuildPossibility.BuildingInWorld = ["BuildingInWorld",0];
BuildPossibility.BuildingInWorld.toString = $estr;
BuildPossibility.BuildingInWorld.__enum__ = BuildPossibility;
BuildPossibility.BuildingPositionImpossible = ["BuildingPositionImpossible",1];
BuildPossibility.BuildingPositionImpossible.toString = $estr;
BuildPossibility.BuildingPositionImpossible.__enum__ = BuildPossibility;
BuildPossibility.BuildingOK = ["BuildingOK",2];
BuildPossibility.BuildingOK.toString = $estr;
BuildPossibility.BuildingOK.__enum__ = BuildPossibility;
var Builder = function(city,stage,builderType) {
	this.buildablePositionsDisplayCacheValid = false;
	this.lastBuilt = -1;
	this.fixedSprite = null;
	this.fixedToPos = null;
	this.fixedToWorld = null;
	this.wasMouseHandled = true;
	this.isUniqueBuilding = false;
	this.city = city;
	this.builderType = builderType;
	switch(builderType[1]) {
	case 0:
		var buildingInfo = builderType[3];
		var buildingType = builderType[2];
		this.sprite = Resources.makeSprite(Reflect.field(buildingType,"spriteName"),new common_Rectangle(0,0,20,20));
		this.cost = Materials.fromBuildingInfo(buildingInfo);
		this.isUniqueBuilding = common_ArrayExtensions.contains(buildingInfo.specialInfo,"unique");
		break;
	case 1:
		var decorationInfo = builderType[2];
		this.sprite = Resources.makeSprite("" + decorationInfo.textureName + "@0,0,20,20");
		this.cost = Materials.fromDecorationInfo(decorationInfo);
		break;
	case 2:
		var resourceInfo = builderType[2];
		this.sprite = Resources.makeSprite("" + resourceInfo.textureName);
		this.cost = Materials.fromWorldResourceInfo(resourceInfo);
		break;
	}
	this.stage = stage;
	this.builderSecondaryHelpSprite = Resources.makeSprite("spr_insertbuildinghere");
	stage.addChild(this.sprite);
	stage.addChild(this.builderSecondaryHelpSprite);
	this.sprite.alpha = 0;
	this.builderSecondaryHelpSprite.alpha = 0;
	this.touchAlpha = 0;
	this.showContinuousTooltip();
};
$hxClasses["Builder"] = Builder;
Builder.__name__ = ["Builder"];
Builder.canRemoveFromLRPerspective = function(advancedMode,building,city) {
	if(advancedMode) {
		if(building.leftBuilding != null && pathfinder_DirectConnectionFinder.find(city,building.leftBuilding,function(bld) {
			return bld.worldPosition.y == 0;
		},function(bld1) {
			return bld1 == building;
		}) == null) {
			return false;
		}
		if(building.rightBuilding != null && pathfinder_DirectConnectionFinder.find(city,building.rightBuilding,function(bld2) {
			return bld2.worldPosition.y == 0;
		},function(bld3) {
			return bld3 == building;
		}) == null) {
			return false;
		}
		return true;
	}
	if(building.leftBuilding == null || building.leftBuilding.worldPosition.y == 0 || building.leftBuilding.bottomBuilding != null) {
		if(!(building.rightBuilding == null || building.rightBuilding.worldPosition.y == 0)) {
			return building.rightBuilding.bottomBuilding != null;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
Builder.prototype = {
	get_buildingToBuild: function() {
		var _g = this.builderType;
		if(_g[1] == 0) {
			var b = _g[2];
			return b;
		} else {
			return null;
		}
	}
	,fixBuilder: function(fixedToWorld,fixedToPos) {
		this.fixedToWorld = fixedToWorld;
		this.fixedToPos = fixedToPos;
		if(fixedToWorld == null || fixedToPos == null) {
			if(this.fixedSprite != null) {
				this.stage.removeChild(this.fixedSprite);
			}
		} else {
			this.fixedSprite = Resources.makeSprite("spr_forcedbuildinglocation");
			this.stage.addChild(this.fixedSprite);
			this.fixedSprite.position.set(fixedToWorld.rect.x + 20 * fixedToPos - 1,fixedToWorld.rect.y - 20 - 31);
		}
	}
	,invalidateCache: function() {
		this.buildablePositionsDisplayCacheValid = false;
	}
	,isCacheValid: function() {
		return this.buildablePositionsDisplayCacheValid;
	}
	,prevalidateCache: function() {
		this.buildablePositionsDisplayCacheValid = true;
	}
	,update: function(timeMod) {
		this.lastBuilt += timeMod;
		if(this.city.game.isMobile && !this.buildablePositionsDisplayCacheValid) {
			this.city.builderHighlightStage.removeChildren();
		}
		if(!this.wasMouseHandled) {
			this.sprite.alpha = 0;
		}
		if(this.touchAlpha > 0) {
			this.touchAlpha = Math.max(this.touchAlpha - timeMod / 30,0);
		}
		this.wasMouseHandled = false;
		if(this.city.game.mouse.rightPressed) {
			this.cancel();
		}
		this.showContinuousTooltip();
		if(this.city.buildingMode != BuildingMode.Destroy && this.buildingPrerequirementsValid()) {
			var prereqsvalid = this.city.game.isMobile && !this.city.game.mouse.hasSpecificClaim(this);
			if(prereqsvalid && !this.buildablePositionsDisplayCacheValid) {
				var higherCheckPositions = new haxe_ds_ObjectMap();
				var _g = 0;
				var _g1 = this.city.worlds;
				while(_g < _g1.length) {
					var world = _g1[_g];
					++_g;
					var bestY = 10000000;
					var bestWorld = null;
					var leftPos = world.rect.x - 20;
					var leftPosOnWorld = 0;
					var _g2 = 0;
					var _g3 = this.city.worlds;
					while(_g2 < _g3.length) {
						var world2 = _g3[_g2];
						++_g2;
						if(world2.rect.y < bestY && world2.rect.y > world.rect.y && leftPos >= world2.rect.x && leftPos < world2.rect.get_x2()) {
							bestWorld = world2;
							leftPosOnWorld = (leftPos - bestWorld.rect.x) / 20 | 0;
							bestY = world2.rect.y;
						}
					}
					if(bestWorld != null) {
						var worldHCPs = higherCheckPositions.h[bestWorld.__id__];
						if(worldHCPs == null) {
							worldHCPs = [];
							higherCheckPositions.set(bestWorld,worldHCPs);
						}
						worldHCPs.push({ world : bestWorld, x : leftPosOnWorld, checkUntil : ((bestWorld.rect.y - world.rect.y) / 20 | 0) + world.permanents[0].length});
					}
					var bestY1 = 10000000;
					var bestWorld1 = null;
					var rightPos = world.rect.x + world.rect.width;
					var rightPosOnWorld = 0;
					var _g21 = 0;
					var _g31 = this.city.worlds;
					while(_g21 < _g31.length) {
						var world21 = _g31[_g21];
						++_g21;
						if(world21.rect.y < bestY1 && world21.rect.y > world.rect.y && rightPos >= world21.rect.x && rightPos < world21.rect.get_x2()) {
							bestWorld1 = world21;
							bestY1 = world21.rect.y;
							rightPosOnWorld = (rightPos - bestWorld1.rect.x) / 20 | 0;
						}
					}
					if(bestWorld1 != null) {
						var worldHCPs1 = higherCheckPositions.h[bestWorld1.__id__];
						if(worldHCPs1 == null) {
							worldHCPs1 = [];
							higherCheckPositions.set(bestWorld1,worldHCPs1);
						}
						worldHCPs1.push({ world : bestWorld1, x : rightPosOnWorld, checkUntil : ((bestWorld1.rect.y - world.rect.y) / 20 | 0) + world.permanents[world.permanents.length - 1].length});
					}
				}
				var _g4 = 0;
				var _g11 = this.city.worlds;
				while(_g4 < _g11.length) {
					var world1 = _g11[_g4];
					++_g4;
					if(this.fixedToWorld != null && world1 != this.fixedToWorld) {
						continue;
					}
					var _g22 = this.builderType;
					switch(_g22[1]) {
					case 0:
						var buildingInfo = _g22[3];
						var buildingType = _g22[2];
						var _g32 = 0;
						var _g23 = world1.permanents.length;
						while(_g32 < _g23) {
							var x = [_g32++];
							if(this.fixedToPos != null && x[0] != this.fixedToPos) {
								continue;
							}
							var checkYPositionsTo = world1.permanents[x[0]].length + 1;
							if(x[0] >= 1) {
								var val2 = world1.permanents[x[0] - 1].length;
								if(val2 > checkYPositionsTo) {
									checkYPositionsTo = val2;
								} else {
									checkYPositionsTo = checkYPositionsTo;
								}
							}
							var worldPos = higherCheckPositions.h[world1.__id__];
							var anyHCP = worldPos == null ? null : common_ArrayExtensions.whereMax(worldPos,(function(x1) {
								return function(hcp) {
									return x1[0] == hcp.x;
								};
							})(x),(function() {
								return function(hcp1) {
									return hcp1.checkUntil;
								};
							})());
							if(anyHCP != null) {
								var val21 = anyHCP.checkUntil;
								if(val21 > checkYPositionsTo) {
									checkYPositionsTo = val21;
								} else {
									checkYPositionsTo = checkYPositionsTo;
								}
							}
							var _g5 = 0;
							var _g41 = checkYPositionsTo;
							while(_g5 < _g41) {
								var y = _g5++;
								if(this.canBuildBuilding(world1,x[0],y,buildingInfo) == BuildPossibility.BuildingOK) {
									var canBuildHereDisplay = Resources.makeSprite("spr_buildhereoutline");
									canBuildHereDisplay.position.set(world1.rect.x + x[0] * 20,world1.rect.y - (y + 1) * 20);
									this.city.builderHighlightStage.addChild(canBuildHereDisplay);
								}
							}
						}
						break;
					case 1:case 2:
						if(!world1.canBuildOnSurface()) {
							continue;
						}
						var _g33 = 0;
						var _g24 = world1.permanents.length;
						while(_g33 < _g24) {
							var x2 = _g33++;
							if(this.fixedToPos != null && x2 != this.fixedToPos) {
								continue;
							}
							var thesePermanents = world1.permanents[x2];
							if(thesePermanents.length == 0 || thesePermanents[0] == null) {
								var canBuildHereDisplay1 = Resources.makeSprite("spr_buildhereoutline");
								canBuildHereDisplay1.position.set(world1.rect.x + x2 * 20,world1.rect.y - 20);
								this.city.builderHighlightStage.addChild(canBuildHereDisplay1);
							}
						}
						break;
					}
				}
				this.buildablePositionsDisplayCacheValid = true;
			} else if(!prereqsvalid) {
				this.city.builderHighlightStage.removeChildren();
				this.buildablePositionsDisplayCacheValid = false;
			}
		} else if(this.buildablePositionsDisplayCacheValid) {
			this.city.builderHighlightStage.removeChildren();
			this.buildablePositionsDisplayCacheValid = false;
		}
	}
	,showContinuousTooltip: function() {
		if(this.city.game.isMobile) {
			var _g = this.builderType;
			switch(_g[1]) {
			case 0:
				var buildingInfo = _g[3];
				var buildingType = _g[2];
				this.city.gui.buildingButtons.showBuildingTooltip(buildingInfo,buildingType,this,true);
				break;
			case 1:
				var decorationInfo = _g[2];
				this.city.gui.buildingButtons.showDecorationTooltip(decorationInfo,this,true);
				break;
			case 2:
				var worldResourceInfo = _g[2];
				this.city.gui.buildingButtons.showWorldResourceTooltip(worldResourceInfo,this,true);
				break;
			}
		}
	}
	,handleMouse: function(mouse) {
		if(this.city.buildingMode == BuildingMode.Destroy) {
			return false;
		}
		this.wasMouseHandled = true;
		this.sprite.alpha = 0.2;
		var newX = Math.floor(mouse.get_cityX() / 20) * 20;
		var newY = Math.floor(mouse.get_cityY() / 20) * 20;
		this.sprite.position.set(newX,newY);
		this.builderSecondaryHelpSprite.position.set(newX,newY);
		this.sprite.tint = 16777215;
		this.builderSecondaryHelpSprite.alpha = 0;
		if(this.buildingPrerequirementsValid()) {
			var _g = 0;
			var _g1 = this.city.worlds;
			while(_g < _g1.length) {
				var world = _g1[_g];
				++_g;
				if(this.fixedToWorld != null && world != this.fixedToWorld) {
					continue;
				}
				var tmp;
				var val = mouse.get_cityX();
				var lower = world.rect.x;
				var upper = world.rect.get_x2();
				if(val >= lower && val < upper) {
					tmp = mouse.get_cityY() < world.rect.y;
				} else {
					tmp = false;
				}
				if(tmp) {
					var xPos = (mouse.get_cityX() - world.rect.x) / 20 | 0;
					if(this.fixedToPos != null && xPos != this.fixedToPos) {
						break;
					}
					var thesePermanents = world.permanents[xPos];
					var yPos = (world.rect.y - mouse.get_cityY() - 1) / 20 | 0;
					var _g2 = this.builderType;
					switch(_g2[1]) {
					case 0:
						var buildingInfo = _g2[3];
						var buildingType = _g2[2];
						var buildStatus = this.canBuildBuilding(world,xPos,yPos,buildingInfo);
						if(buildStatus == BuildPossibility.BuildingOK) {
							this.sprite.alpha = 0.5;
							var replaceBuilding = false;
							var insertBuilding = false;
							if(this.city.buildingMode == BuildingMode.Replace) {
								if(yPos != thesePermanents.length) {
									replaceBuilding = thesePermanents[yPos] != null;
								} else {
									replaceBuilding = false;
								}
							} else if(yPos != thesePermanents.length) {
								insertBuilding = thesePermanents[yPos] != null;
							} else {
								insertBuilding = false;
							}
							if(insertBuilding) {
								this.builderSecondaryHelpSprite.alpha = 1;
								this.sprite.tint = 12632256;
								this.builderSecondaryHelpSprite.texture = Resources.getTexture("spr_insertbuildinghere");
							} else if(replaceBuilding) {
								this.builderSecondaryHelpSprite.alpha = 1;
								this.sprite.tint = 16777215;
								this.builderSecondaryHelpSprite.texture = Resources.getTexture("spr_replacebuildinghere");
							}
							var claim = mouse.claimMouse(this,"" + xPos + " " + yPos,false);
							if(claim == MouseState.Confirmed) {
								var shouldPayCost = true;
								if(replaceBuilding) {
									if(yPos < thesePermanents.length && thesePermanents[yPos] != null) {
										var o = thesePermanents[yPos];
										shouldPayCost = (o == null ? null : js_Boot.getClass(o)) != this.get_buildingToBuild();
										if(shouldPayCost && thesePermanents[yPos].isBuilding) {
											thesePermanents[yPos].giveRecycleReward();
										}
										thesePermanents[yPos].destroyForReplacement();
									}
								} else if(insertBuilding) {
									var _g3 = yPos;
									var _g21 = thesePermanents.length;
									while(_g3 < _g21) {
										var i = _g3++;
										var permanent = thesePermanents[i];
										if(permanent == null) {
											break;
										}
										permanent.position.y -= 20;
										permanent.worldPosition.y += 1;
									}
								}
								var newBuilding = world.build(this.get_buildingToBuild(),xPos,yPos);
								this.city.game.audio.playSound(this.city.game.audio.buildSound);
								if(shouldPayCost) {
									this.city.materials.remove(this.cost);
								}
								this.city.connections.updateCityConnections();
								this.city.simulation.updatePathfinder(insertBuilding || replaceBuilding,newBuilding);
								this.city.progress.unlocks.research(this.get_buildingToBuild());
								if(insertBuilding) {
									var _g31 = yPos + 1;
									var _g22 = thesePermanents.length;
									while(_g31 < _g22) {
										var i1 = _g31++;
										var permanent1 = thesePermanents[i1];
										if(permanent1 != null) {
											permanent1.positionSprites();
										}
									}
								}
								newBuilding.postCreate();
								this.fixBuilder(null,null);
								if(this.lastBuilt < 0 || this.lastBuilt > 60) {
									this.city.progress.unlocks.checkBuildRelatedUnlocks();
									this.city.saveToBrowserStorage();
								} else {
									this.city.progress.unlocks.checkBuildRelatedUnlocksSoon();
								}
								this.lastBuilt = 0;
								return true;
							} else if(claim == MouseState.Active) {
								this.sprite.alpha = 0.8;
								return true;
							} else if(this.city.game.isMobile) {
								this.builderSecondaryHelpSprite.alpha = 0;
							}
						} else if(buildStatus == BuildPossibility.BuildingInWorld) {
							this.sprite.tint = 16744576;
							if(mouse.isTouch) {
								var claim1 = mouse.claimMouse(this,xPos,false);
								if(claim1 == MouseState.Active) {
									this.touchAlpha = 1;
									this.sprite.alpha = this.touchAlpha;
									return true;
								}
							}
						}
						break;
					case 1:
						var decorationInfo = _g2[2];
						if((thesePermanents.length == 0 || thesePermanents[0] == null) && yPos == 0) {
							this.sprite.alpha = 0.5;
							var claim2 = mouse.claimMouse(this,"" + xPos + " " + yPos,false);
							if(claim2 == MouseState.Confirmed) {
								var decorationHere = world.decorations[xPos];
								if(decorationInfo.textureName == "spr_removedecoration") {
									world.removeDecoration(xPos);
								} else if(decorationHere != null && decorationHere.textureName == decorationInfo.textureName) {
									if(++decorationHere.subImage >= decorationHere.textures.length) {
										decorationHere.subImage = 0;
									}
									decorationHere.sprite.texture = decorationHere.textures[decorationHere.subImage];
								} else {
									world.setDecoration(decorationInfo.textureName,xPos);
								}
								this.city.materials.remove(this.cost);
								return true;
							} else if(claim2 == MouseState.Active) {
								this.sprite.alpha = 0.8;
								return true;
							}
						}
						break;
					case 2:
						var resourceInfo = _g2[2];
						if((thesePermanents.length == 0 || thesePermanents[0] == null) && yPos == 0) {
							this.sprite.alpha = 0.5;
							var claim3 = mouse.claimMouse(this,"" + xPos + " " + yPos,false);
							if(claim3 == MouseState.Confirmed) {
								var newResource = world.createWorldResource(Type.resolveClass("worldResources." + resourceInfo.className),xPos);
								if(js_Boot.__instanceof(newResource,worldResources_LimitedWorldResource)) {
									var lwr = newResource;
									lwr.materialsLeft = 0;
									lwr.regrowProgress = resourceInfo.initialGrow;
									lwr.updateTexture();
								}
								this.city.materials.remove(this.cost);
								this.city.simulation.updatePathfinder(false);
								return true;
							} else if(claim3 == MouseState.Active) {
								this.sprite.alpha = 0.8;
								return true;
							}
						}
						break;
					}
				}
			}
		} else {
			this.sprite.tint = 16744576;
			this.sprite.alpha = 0.6;
		}
		if(this.city.cityView.isDraggingView) {
			this.sprite.alpha = 0;
		} else if(mouse.isTouch) {
			this.sprite.alpha = this.touchAlpha;
		}
		return false;
	}
	,buildingPrerequirementsValid: function() {
		var _gthis = this;
		if(this.get_buildingToBuild() != null && this.city.progress.unlocks.getUnlockState(this.get_buildingToBuild()) == progress_UnlockState.Researched) {
			this.cost.knowledge = 0;
		}
		var noUniqueProblem = !this.isUniqueBuilding || !common_ArrayExtensions.any(this.city.permanents,function(pm) {
			return pm["is"](_gthis.get_buildingToBuild());
		});
		if(this.city.materials.canAfford(this.cost)) {
			return noUniqueProblem;
		} else {
			return false;
		}
	}
	,canBuildBuilding: function(world,xPos,yPos,buildingInfo) {
		if(yPos == 0 && !world.canBuildOnSurface()) {
			return BuildPossibility.BuildingPositionImpossible;
		}
		var thesePermanents = world.permanents[xPos];
		var yPosTop = world.rect.y - 20 * (thesePermanents.length + 1);
		var buildingXPos = world.rect.x + 20 * xPos;
		var buildingYPos = world.rect.y - 20 * (yPos + 1);
		var noBuildingsYet = thesePermanents.length == 0;
		var topIsBuilding = !noBuildingsYet && thesePermanents[thesePermanents.length - 1].isBuilding;
		var bottomIsNotNoBuilding = noBuildingsYet || (thesePermanents[0] == null || thesePermanents[0].isBuilding);
		var topIsRooftopBuilding = topIsBuilding && thesePermanents[thesePermanents.length - 1].isRooftopBuilding;
		var yPosTopExcludingRooftop = topIsRooftopBuilding ? yPosTop + 20 : yPosTop;
		var specialAllowBridge = false;
		var deleteKeyPressed = this.city.game.keyboard.down[46];
		var shiftKeyPressed = this.city.game.keyboard.down[16];
		var mightDoBuildingAssociatedAction = !deleteKeyPressed && !shiftKeyPressed;
		var buildingCanInsertNow = this.city.buildingMode == BuildingMode.Insert && mightDoBuildingAssociatedAction;
		var buildingCanReplaceNow = this.city.buildingMode == BuildingMode.Replace && mightDoBuildingAssociatedAction;
		if(!buildingCanReplaceNow && yPos < thesePermanents.length && thesePermanents[yPos] != null && thesePermanents[yPos].isBuilding && thesePermanents[yPos].isRooftopBuilding) {
			buildingCanInsertNow = true;
		}
		var isBuildingHere = yPos < thesePermanents.length && thesePermanents[yPos] != null && thesePermanents[yPos].isBuilding;
		var potentialLeftPerm = null;
		var potentialRightPerm = null;
		var hasLeftAndRightBuilding = false;
		if((yPos >= thesePermanents.length || thesePermanents[yPos] == null) && yPos > 0 && !common_ArrayExtensions.contains(buildingInfo.specialInfo,"rooftop")) {
			potentialLeftPerm = this.city.getPermanentAtPos(buildingXPos - 20,buildingYPos);
			potentialRightPerm = this.city.getPermanentAtPos(buildingXPos + 20,buildingYPos);
			var advancedBuildingAllowed = this.city.upgrades.vars.advancedBuildingAllowed;
			var buildingOnLeft = potentialLeftPerm != null && potentialLeftPerm.isBuilding;
			var buildingOnRight = potentialRightPerm != null && potentialRightPerm.isBuilding;
			var possiblyCanCreateBridge = false;
			if(advancedBuildingAllowed) {
				if(!buildingOnLeft) {
					possiblyCanCreateBridge = buildingOnRight;
				} else {
					possiblyCanCreateBridge = true;
				}
			} else if(buildingOnLeft) {
				possiblyCanCreateBridge = buildingOnRight;
			} else {
				possiblyCanCreateBridge = false;
			}
			if(possiblyCanCreateBridge) {
				hasLeftAndRightBuilding = true;
				var potentialLeftBuilding = potentialLeftPerm;
				var potentialRightBuilding = potentialRightPerm;
				var anyHoleInLeftOrRight = false;
				if(advancedBuildingAllowed) {
					anyHoleInLeftOrRight = !(potentialLeftBuilding != null && !potentialLeftBuilding.isRooftopBuilding || potentialRightBuilding != null && !potentialRightBuilding.isRooftopBuilding);
				} else if(!potentialLeftBuilding.isRooftopBuilding) {
					anyHoleInLeftOrRight = potentialRightBuilding.isRooftopBuilding;
				} else {
					anyHoleInLeftOrRight = true;
				}
				if(!anyHoleInLeftOrRight) {
					if(!common_ArrayExtensions.any(this.city.worlds,function(w) {
						var tmp;
						var tmp1;
						if(w != world && buildingXPos >= w.rect.x) {
							var tmp2 = w.rect.get_x2();
							tmp1 = buildingXPos < tmp2;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							tmp = w.rect.y - buildingYPos > 0;
						} else {
							tmp = false;
						}
						if(tmp) {
							return w.rect.y - buildingYPos < world.rect.y - buildingYPos;
						} else {
							return false;
						}
					})) {
						specialAllowBridge = true;
					}
				}
			}
		}
		var nullInBetween = false;
		if(buildingCanInsertNow) {
			var _g1 = yPos;
			var _g = thesePermanents.length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				if(thesePermanents[i] == null) {
					nullInBetween = true;
					break;
				}
				if(thesePermanents[i].isBuilding) {
					var bld = thesePermanents[i];
					if(bld.isRooftopBuilding && thesePermanents[i + 1] != null) {
						return BuildPossibility.BuildingPositionImpossible;
					}
				}
			}
		}
		var isRooftopBuilding = common_ArrayExtensions.contains(buildingInfo.specialInfo,"rooftop");
		var isAdvancedBuildingMode = this.city.upgrades.vars.advancedBuildingAllowed;
		if(buildingCanReplaceNow && isBuildingHere && !isRooftopBuilding || (noBuildingsYet || topIsBuilding || specialAllowBridge) && (yPos != 0 || bottomIsNotNoBuilding) && ((buildingCanInsertNow || yPos < thesePermanents.length && thesePermanents[yPos] == null) && (buildingYPos >= yPosTopExcludingRooftop && buildingYPos < world.rect.y) && (yPos == 0 || hasLeftAndRightBuilding || yPos > 0 && thesePermanents[yPos] != null && thesePermanents[yPos].isBuilding || yPos > 0 && thesePermanents[yPos - 1] != null && thesePermanents[yPos - 1].isBuilding && !thesePermanents[yPos - 1].isRooftopBuilding) || !buildingCanInsertNow && mightDoBuildingAssociatedAction && (buildingYPos >= yPosTopExcludingRooftop && buildingYPos < yPosTopExcludingRooftop + 20) || buildingCanReplaceNow && (buildingYPos >= yPosTopExcludingRooftop && buildingYPos < world.rect.y) && !isRooftopBuilding || specialAllowBridge) && (yPos >= thesePermanents.length || thesePermanents[yPos] == null && specialAllowBridge || yPos == 0 || thesePermanents[yPos - 1] != null || buildingCanInsertNow) && (!isRooftopBuilding || yPos == thesePermanents.length || thesePermanents[yPos] == null || yPos == thesePermanents.length - 1 && buildingCanReplaceNow && thesePermanents[yPos].isBuilding && (yPos == 0 || thesePermanents[yPos].bottomBuilding != null && !thesePermanents[yPos].bottomBuilding.isRooftopBuilding) && Builder.canRemoveFromLRPerspective(isAdvancedBuildingMode,thesePermanents[yPos],this.city))) {
			var buildingYPosToUseForIntersectionCheck = specialAllowBridge || buildingCanReplaceNow ? buildingYPos : yPosTop;
			if(nullInBetween) {
				return BuildPossibility.BuildingOK;
			}
			if(yPos < thesePermanents.length && thesePermanents[yPos] == null) {
				return BuildPossibility.BuildingOK;
			}
			if(!common_ArrayExtensions.any(this.city.worlds,function(w1) {
				if(w1 != world && w1.mask != null) {
					if(w1.rect.intersects(new common_Rectangle(buildingXPos,buildingYPosToUseForIntersectionCheck,20,20))) {
						return w1.mask[(buildingXPos - w1.rect.x) / 20 | 0][(buildingYPosToUseForIntersectionCheck - w1.rect.y) / 20 | 0];
					} else {
						return false;
					}
				} else {
					return false;
				}
			})) {
				return BuildPossibility.BuildingOK;
			} else {
				return BuildPossibility.BuildingInWorld;
			}
		}
		return BuildPossibility.BuildingPositionImpossible;
	}
	,cancel: function() {
		this.stage.removeChild(this.sprite);
		this.stage.removeChild(this.builderSecondaryHelpSprite);
		if(this.fixedSprite != null) {
			this.fixedSprite.destroy();
		}
		this.city.builder = null;
	}
	,__class__: Builder
};
var ICreatableCityElement = function() { };
$hxClasses["ICreatableCityElement"] = ICreatableCityElement;
ICreatableCityElement.__name__ = ["ICreatableCityElement"];
var Permanent = function(game,id,city,world,position,worldPosition) {
	this.destroyed = false;
	this.highlightSprite = null;
	this.bonusEntertainmentCapacity = 0;
	this.bonusAttractiveness = 0;
	this.game = game;
	this.id = id;
	this.city = city;
	this.world = world;
	this.position = position;
	this.worldPosition = worldPosition;
	world.city.permanentsByID.h[id] = this;
	world.city.permanents.push(this);
	this.isBuilding = false;
	this.ancestors = [];
	var currClass = js_Boot.getClass(this);
	while(currClass != Permanent) {
		this.ancestors.push(currClass);
		currClass = Type.getSuperClass(currClass);
	}
	this.className = Type.getClassName(js_Boot.getClass(this));
	this.classID = PermanentMetaHelper.getClassID(this.className);
	if(js_Boot.__instanceof(this,buildings_IHousing) && !common_ArrayExtensions.contains(this.ancestors,buildings_House)) {
		this.ancestors.push(buildings_House);
	}
	if(this["is"](buildings_Work)) {
		world.city.workBuildings.push(this);
	}
};
$hxClasses["Permanent"] = Permanent;
Permanent.__name__ = ["Permanent"];
Permanent.__interfaces__ = [ICreatableCityElement];
Permanent.prototype = {
	get_name: function() {
		return "";
	}
	,get_typeID: function() {
		return 0;
	}
	,get_attractiveness: function() {
		return this.get_baseAttractiveness() + this.bonusAttractiveness;
	}
	,get_baseAttractiveness: function() {
		return 50;
	}
	,get_entertainmentCapacity: function() {
		return this.get_baseEntertainmentCapacity() + this.bonusEntertainmentCapacity;
	}
	,get_baseEntertainmentCapacity: function() {
		return 0;
	}
	,get_remainingCapacity: function() {
		return 0;
	}
	,get_connectedBuildingsType: function() {
		return this.className;
	}
	,destroyForReplacement: function() {
		Permanent.destroyingForReplacement = true;
		this.destroy();
		Permanent.destroyingForReplacement = false;
	}
	,destroy: function() {
		var thisPermanentStack = this.world.permanents[this.worldPosition.x];
		var disableMoveDown = false;
		if(Permanent.destroyingDisableMoveDown || Permanent.destroyingForReplacement) {
			thisPermanentStack[this.worldPosition.y] = null;
			disableMoveDown = true;
		} else if(this["is"](WorldResource) && thisPermanentStack.length > 1) {
			thisPermanentStack[0] = null;
			disableMoveDown = true;
		} else {
			HxOverrides.remove(thisPermanentStack,this);
		}
		HxOverrides.remove(this.city.permanents,this);
		this.city.permanentsByID.remove(this.id);
		if(this["is"](buildings_Work)) {
			HxOverrides.remove(this.world.city.workBuildings,this);
		}
		var _g = 0;
		var _g1 = this.city.simulation.citizens;
		while(_g < _g1.length) {
			var citizen = _g1[_g];
			++_g;
			if(citizen.inPermanent == this) {
				if(this.worldPosition.y == 0) {
					if(citizen.inPermanent != null && citizen.inPermanent.isBuilding) {
						var building = citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null;
						citizen.relativeX = building.worldPosition.x * 20 + building.doorX;
					} else {
						citizen.relativeX += citizen.inPermanent.worldPosition.x * 20;
					}
					if(citizen.inPermanent != null) {
						citizen.inPermanent.onCitizenLeave(citizen,null);
					}
					citizen.inBuildingSince = citizen.city.simulation.time.timeSinceStart;
					citizen.set_drawOnStage(citizen.foregroundStage);
					citizen.inPermanent = null;
					citizen.relativeY = 0;
					Citizen.shouldUpdateDraw = true;
				} else {
					if((citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).bottomBuilding != null) {
						citizen.inPermanent = (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).bottomBuilding;
						this.onCitizenLeave(citizen,(citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).bottomBuilding);
						citizen.inBuildingSince = citizen.city.simulation.time.timeSinceStart;
					} else if((citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).leftBuilding != null) {
						citizen.inPermanent = (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).leftBuilding;
						this.onCitizenLeave(citizen,(citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).leftBuilding);
						citizen.inBuildingSince = citizen.city.simulation.time.timeSinceStart;
					} else if((citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).rightBuilding != null) {
						citizen.inPermanent = (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).rightBuilding;
						this.onCitizenLeave(citizen,(citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).rightBuilding);
						citizen.inBuildingSince = citizen.city.simulation.time.timeSinceStart;
					} else {
						if(citizen.inPermanent != null && citizen.inPermanent.isBuilding) {
							var building1 = citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null;
							citizen.relativeX = building1.worldPosition.x * 20 + building1.doorX;
						} else {
							citizen.relativeX += citizen.inPermanent.worldPosition.x * 20;
						}
						if(citizen.inPermanent != null) {
							citizen.inPermanent.onCitizenLeave(citizen,null);
						}
						citizen.inBuildingSince = citizen.city.simulation.time.timeSinceStart;
						citizen.set_drawOnStage(citizen.foregroundStage);
						citizen.inPermanent = null;
						citizen.relativeY = 0;
						Citizen.shouldUpdateDraw = true;
					}
					citizen.setRelativeY(0);
				}
				if(citizen.recyclePathArray) {
					pooling_Int32ArrayPool.returnToPool(citizen.path);
					citizen.recyclePathArray = false;
				}
				citizen.path = null;
				citizen.nextPathPos = -1;
				citizen.pathEnd = -1;
				citizen.currentPathAction = null;
				if(!citizen.canViewSelfInBuilding) {
					citizen.delayCanViewSelfInBuilding = true;
				}
				citizen.canViewSelfInBuilding = true;
				citizen.verticalPathProgress = 0;
				citizen.pathEndFunction = null;
				citizen.requestingPathGoal = null;
				citizen.pathOnlyRelatedTo = null;
				citizen.pathWalkSpeed = 1;
				citizen.pathCanBeReconsidered = true;
				if(citizen.sprite.alpha > 0 && citizen.sprite.alpha < 1) {
					citizen.sprite.alpha = 1;
				}
			}
		}
		if(!disableMoveDown) {
			var _g11 = this.worldPosition.y;
			var _g2 = thisPermanentStack.length;
			while(_g11 < _g2) {
				var yy = _g11++;
				var thisPermanent = thisPermanentStack[yy];
				if(thisPermanent == null) {
					thisPermanentStack.splice(yy,0,null);
					break;
				}
				thisPermanent.worldPosition.y -= 1;
				thisPermanent.position.y = this.world.rect.y - (thisPermanent.worldPosition.y + 1) * 20;
				if(thisPermanent.isBuilding && thisPermanent.isRooftopBuilding && yy + 1 < thisPermanentStack.length) {
					thisPermanentStack.splice(yy + 1,0,null);
					break;
				}
			}
			var yy1 = thisPermanentStack.length - 1;
			var nullsOnStackTopAmount = 0;
			while(yy1 >= 0) {
				if(thisPermanentStack[yy1] == null) {
					++nullsOnStackTopAmount;
				} else {
					break;
				}
				--yy1;
			}
			if(nullsOnStackTopAmount > 0) {
				thisPermanentStack.splice(thisPermanentStack.length - nullsOnStackTopAmount,nullsOnStackTopAmount);
			}
		}
		if(!Permanent.destroyingForReplacement) {
			this.city.connections.updateCityConnections();
		}
		if(!disableMoveDown) {
			var _g12 = this.worldPosition.y;
			var _g3 = thisPermanentStack.length;
			while(_g12 < _g3) {
				var yy2 = _g12++;
				if(thisPermanentStack[yy2] != null) {
					thisPermanentStack[yy2].positionSprites();
				}
			}
		}
		if(!Permanent.destroyingForReplacement) {
			this.city.simulation.updatePathfinder(true,this);
		}
		if(this.city.gui.windowRelatedTo == this) {
			this.city.gui.closeWindow();
		}
		this.destroyed = true;
	}
	,postCreate: function() {
	}
	,onCityChange: function() {
	}
	,invalidatePathfindingRelatedInfo: function() {
	}
	,update: function(timeMod) {
	}
	,onClick: function() {
		var hasSpecial = this.city.specialAction != null && this.city.specialAction.get_specialActionID() == "ChangeCitizenVitalBuildings";
		if(hasSpecial) {
			this.city.specialAction.performPermanentAction(this);
			return;
		}
		this.showWindow();
		this.city.game.audio.playSound(this.city.game.audio.buildingClickSound);
	}
	,onHover: function(isActive) {
	}
	,showWindow: function() {
		gui_UpgradeWindowParts.hasMultiUpgradeModeOn = false;
		this.createWindow();
	}
	,reloadWindow: function() {
		this.city.gui.reloadWindow($bind(this,this.createWindow));
	}
	,createWindow: function() {
		var _gthis = this;
		this.city.gui.createWindow(this);
		this.city.gui.setWindowReload($bind(this,this.createWindow));
		this.city.gui.windowInner.addChild(new gui_TextElement(this.city.gui.windowInner,this.city.gui.innerWindowStage,this.get_name(),null,"Arial16"));
		this.createMainWindowPart();
		this.createWindowAddBottomButtons();
		this.selectedSprite = Resources.makeSprite("spr_selectedbuilding");
		this.selectedSprite.position.set(this.position.x - 1,this.position.y - 1);
		this.city.farForegroundStage.addChild(this.selectedSprite);
		this.city.gui.windowOnDestroy = function() {
			_gthis.city.farForegroundStage.removeChild(_gthis.selectedSprite);
			_gthis.selectedSprite = null;
		};
		this.city.gui.clearWindowStack();
		this.city.gui.addWindowToStack(function() {
			if(!_gthis.destroyed) {
				_gthis.createWindow();
			}
		});
	}
	,addWindowInfoLines: function() {
	}
	,createMainWindowPart: function() {
		this.addWindowInfoLines();
	}
	,createWindowAddBottomButtons: function() {
		this.city.gui.windowAddBottomButtons();
	}
	,positionSprites: function() {
		if(this.selectedSprite != null) {
			this.selectedSprite.position.set(this.position.x - 1,this.position.y - 1);
		}
		if(this.highlightSprite != null) {
			this.highlightSprite.position.set(this.position.x - 1,this.position.y - 1);
		}
	}
	,'is': function(permanentClass) {
		var _g = 0;
		var _g1 = this.ancestors;
		while(_g < _g1.length) {
			var anc = _g1[_g];
			++_g;
			if(permanentClass == anc) {
				return true;
			}
		}
		return false;
	}
	,onCitizenLeave: function(citizen,newPermanent) {
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(Permanent.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: Permanent
};
var Building = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.isMedical = false;
	this.isEntertainment = false;
	this.doorX = 13;
	Permanent.call(this,game,id,city,world,position,worldPosition);
	this.isBuilding = true;
	this.upgrades = [];
	this.buildingMode = null;
	this.adjecentBuildingEffects = [];
	this.stage = stage;
	this.bgStage = bgStage;
	this.drawer = Type.createInstance(this.get_drawerType(),[this,stage,bgStage,Reflect.field(js_Boot.getClass(this),"spriteName")]);
	var key = this.className;
	var _this = city.progress.resources.buildingInfo;
	this.info = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	this.isRooftopBuilding = common_ArrayExtensions.contains(this.info.specialInfo,"rooftop");
	city.simulation.jobAssigner.buildingsHaveWork = true;
	city.simulation.houseAssigner.shouldUpdateHouses = true;
	city.simulation.schoolAssigner.schoolsShouldBeUpdated = true;
	if(!Game.isLoading && this.get_possibleBuildingModes().length > 0) {
		this.buildingMode = Type.createInstance(this.get_possibleBuildingModes()[0],[stage,city.cityMidStage,bgStage,this]);
	}
};
$hxClasses["Building"] = Building;
Building.__name__ = ["Building"];
Building.__super__ = Permanent;
Building.prototype = $extend(Permanent.prototype,{
	get_name: function() {
		return this.info.name;
	}
	,get_possibleUpgrades: function() {
		return [];
	}
	,get_possibleBuildingModes: function() {
		return [];
	}
	,get_possibleCityUpgrades: function() {
		return [];
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		return true;
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_NormalBuildingDrawer;
	}
	,onBuild: function() {
	}
	,destroy: function() {
		if(this.isRooftopBuilding && this.worldPosition.y != this.world.permanents[this.worldPosition.x].length - 1) {
			Permanent.destroyingDisableMoveDown = true;
		}
		Permanent.prototype.destroy.call(this);
		Permanent.destroyingDisableMoveDown = false;
		this.drawer.destroy();
		Lambda.iter(this.upgrades,function(u) {
			u.destroy();
		});
		if(this.buildingMode != null) {
			this.buildingMode.destroy();
		}
		if(this.city.windowRelatedOnBuildOrDestroy != null) {
			this.city.windowRelatedOnBuildOrDestroy();
		}
	}
	,tryDestroy: function(warnIfNot) {
		if(warnIfNot == null) {
			warnIfNot = true;
		}
		var failedStructuralCheck = false;
		var advancedBuildingAllowed = this.city.upgrades.vars.advancedBuildingAllowed;
		if(!this.isRooftopBuilding) {
			var stackTopBuild = this;
			while(stackTopBuild.topBuilding != null && !stackTopBuild.topBuilding.isRooftopBuilding) stackTopBuild = stackTopBuild.topBuilding;
			failedStructuralCheck = !Builder.canRemoveFromLRPerspective(advancedBuildingAllowed,stackTopBuild,this.city);
			if(this.topBuilding != null && (this.topBuilding.isRooftopBuilding && this.bottomBuilding == null && this.worldPosition.y != 0)) {
				failedStructuralCheck = true;
			}
		}
		if(failedStructuralCheck) {
			if(warnIfNot) {
				this.city.gui.showSimpleWindow("You can't destroy this building as that would result in an invalid structure.",null,true,true);
			}
			return false;
		}
		this.giveRecycleReward();
		this.destroy();
		return true;
	}
	,giveRecycleReward: function() {
		if(this.info != null) {
			var mats = Materials.fromBuildingInfo(this.info);
			var _g = 0;
			var _g1 = this.upgrades;
			while(_g < _g1.length) {
				var ug = _g1[_g];
				++_g;
				var key = ug.className;
				var _this = Resources.buildingUpgradesInfo;
				var ugInfo = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				mats.add(Materials.fromBuildingUpgradesInfo(ugInfo));
			}
			mats.knowledge = 0;
			mats.multiply(this.city.upgrades.vars.recyclingAmount);
			this.city.materials.add(mats);
		}
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		if(!this.city.progress.story.disableDestroy) {
			var destroyButton;
			var isConfirmButton = false;
			destroyButton = this.city.gui.windowAddBottomButtons([{ text : "Destroy", action : function() {
				if(isConfirmButton) {
					_gthis.city.gui.closeWindow();
					_gthis.tryDestroy(true);
				} else {
					destroyButton.setText("Really Destroy?");
					isConfirmButton = true;
				}
			}, onHover : function() {
				if(!isConfirmButton) {
					_gthis.city.gui.tooltip.setText(destroyButton,_gthis.game.isMobile ? "Destroy This Building" : "Destroy This Building\nTip: you can also Delete+Click on buildings to quickly destroy them.");
				}
			}}])[0];
		} else {
			this.city.gui.windowAddBottomButtons();
		}
	}
	,positionSprites: function() {
		Permanent.prototype.positionSprites.call(this);
		this.drawer.positionSprites();
		Lambda.iter(this.upgrades,function(u) {
			u.reposition();
		});
		if(this.buildingMode != null) {
			this.buildingMode.reposition();
		}
	}
	,changeMainTexture: function(textureName) {
		this.drawer.changeMainTexture(textureName);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Permanent.prototype.save.call(this,queue,shouldSaveDefinition);
		var value = this.upgrades.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var _g = 0;
		var _g1 = this.upgrades;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			queue.addString(u.className);
			u.save(queue);
		}
		var value1 = this.buildingMode != null ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		if(this.buildingMode != null) {
			queue.addString(this.buildingMode.className);
			this.buildingMode.save(queue);
		}
	}
	,load: function(queue,definition) {
		Permanent.prototype.load.call(this,queue,definition);
		var intToRead = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var upgradeLen = intToRead;
		var _g1 = 0;
		var _g = upgradeLen;
		while(_g1 < _g) {
			var i = _g1++;
			var upgrade;
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead1;
				var stringLength = queue.bytes.getInt32(readPos);
				upgrade = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead2;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				upgrade = str;
			}
			var upgrade1 = Type.createInstance(Type.resolveClass(upgrade),[this.stage,this.city.cityMidStage,this.bgStage,this]);
			upgrade1.load(queue);
			this.upgrades.push(upgrade1);
		}
		var intToRead3 = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		if(intToRead3 == 1) {
			var tmp;
			var byteToRead1 = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead1 == 1) {
				var intToRead4 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos1 = intToRead4;
				var stringLength1 = queue.bytes.getInt32(readPos1);
				tmp = queue.bytes.getString(readPos1 + 4,stringLength1);
			} else {
				var intToRead5 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len1 = intToRead5;
				var str1 = queue.bytes.getString(queue.readStart,len1);
				queue.readStart += len1;
				tmp = str1;
			}
			this.buildingMode = Type.createInstance(Type.resolveClass(tmp),[this.stage,this.city.cityMidStage,this.bgStage,this]);
			this.buildingMode.load(queue);
		} else {
			this.buildingMode = null;
		}
	}
	,createMainWindowPart: function() {
		Permanent.prototype.createMainWindowPart.call(this);
		gui_CreateBuildingUpgrades.createMainWindowPart(this,this.city);
	}
	,getTotalAdjacentBuildingEffects: function(effectType) {
		var total = 0.0;
		var _g = 0;
		var _g1 = this.adjecentBuildingEffects;
		while(_g < _g1.length) {
			var ae = _g1[_g];
			++_g;
			if(ae.name == effectType) {
				total += ae.intensity;
			}
		}
		return total;
	}
	,getEffectsOfAdjecentBuildings: function(effectType) {
		var total = 0.0;
		if(this.leftBuilding != null) {
			var total1 = 0.0;
			var _g = 0;
			var _g1 = this.leftBuilding.adjecentBuildingEffects;
			while(_g < _g1.length) {
				var ae = _g1[_g];
				++_g;
				if(ae.name == effectType) {
					total1 += ae.intensity;
				}
			}
			total += total1;
		}
		if(this.rightBuilding != null) {
			var total2 = 0.0;
			var _g2 = 0;
			var _g11 = this.rightBuilding.adjecentBuildingEffects;
			while(_g2 < _g11.length) {
				var ae1 = _g11[_g2];
				++_g2;
				if(ae1.name == effectType) {
					total2 += ae1.intensity;
				}
			}
			total += total2;
		}
		if(this.topBuilding != null) {
			var total3 = 0.0;
			var _g3 = 0;
			var _g12 = this.topBuilding.adjecentBuildingEffects;
			while(_g3 < _g12.length) {
				var ae2 = _g12[_g3];
				++_g3;
				if(ae2.name == effectType) {
					total3 += ae2.intensity;
				}
			}
			total += total3;
		}
		if(this.bottomBuilding != null) {
			var total4 = 0.0;
			var _g4 = 0;
			var _g13 = this.bottomBuilding.adjecentBuildingEffects;
			while(_g4 < _g13.length) {
				var ae3 = _g13[_g4];
				++_g4;
				if(ae3.name == effectType) {
					total4 += ae3.intensity;
				}
			}
			total += total4;
		}
		return total;
	}
	,onClick: function() {
		var hasSpecial = this.city.specialAction != null && this.city.specialAction.get_specialActionID() == "ChangeCitizenVitalBuildings";
		if(hasSpecial) {
			this.city.specialAction.performPermanentAction(this);
			return;
		}
		if(this.game.keyboard.down[46] || this.city.buildingMode == BuildingMode.Destroy) {
			if(!this.city.progress.story.disableDestroy) {
				if(this.city.gui.windowRelatedTo == this) {
					this.city.gui.closeWindow();
				}
				if(this.tryDestroy(true)) {
					this.city.game.audio.playSound(this.city.game.audio.buttonFailSound);
				}
			} else {
				this.city.gui.showSimpleWindow("Your citizens don't want to destroy buildings right now!",null,true);
			}
		} else if(this.game.keyboard.down[16]) {
			this.city.createOrRemoveBuilder(js_Boot.getClass(this),true);
		} else {
			this.showWindow();
			this.city.game.audio.playSound(this.city.game.audio.buildingClickSound);
		}
	}
	,onHover: function(isActive) {
		Permanent.prototype.onHover.call(this,isActive);
		if(this.game.keyboard.down[46] || this.city.buildingMode == BuildingMode.Destroy) {
			var destroySprite = new PIXI.Sprite(Resources.getTexture("spr_destroying"));
			destroySprite.position.set(this.position.x,this.position.y);
			this.city.furtherForegroundTempStage.addChild(destroySprite);
			destroySprite.alpha = isActive ? 1 : !this.game.isMobile ? 0.5 : 0;
		}
	}
	,hasHolesBelowInBuildingStack: function() {
		var _g1 = 0;
		var _g = this.worldPosition.y;
		while(_g1 < _g) {
			var yy = _g1++;
			var thisPerm = this.world.permanents[this.worldPosition.x][yy];
			if(thisPerm == null || !thisPerm.isBuilding) {
				return true;
			}
		}
		return false;
	}
	,getGlobalGoal: function() {
		return null;
	}
	,couldStandHere: function() {
		if(this.get_drawerType() == buildings_buildingDrawers_AllDirMergingBuildingDrawer) {
			if(this.bottomBuilding != null) {
				return !this.bottomBuilding["is"](js_Boot.getClass(this));
			} else {
				return true;
			}
		} else {
			return true;
		}
	}
	,__class__: Building
});
var BuildingMode = $hxClasses["BuildingMode"] = { __ename__ : ["BuildingMode"], __constructs__ : ["Normal","Insert","Replace","Destroy"] };
BuildingMode.Normal = ["Normal",0];
BuildingMode.Normal.toString = $estr;
BuildingMode.Normal.__enum__ = BuildingMode;
BuildingMode.Insert = ["Insert",1];
BuildingMode.Insert.toString = $estr;
BuildingMode.Insert.__enum__ = BuildingMode;
BuildingMode.Replace = ["Replace",2];
BuildingMode.Replace.toString = $estr;
BuildingMode.Replace.__enum__ = BuildingMode;
BuildingMode.Destroy = ["Destroy",3];
BuildingMode.Destroy.toString = $estr;
BuildingMode.Destroy.__enum__ = BuildingMode;
var BuildingUpgrade = function(stage,building) {
	this.stage = stage;
	this.building = building;
	this.className = Type.getClassName(js_Boot.getClass(this));
	building.bonusAttractiveness += this.get_bonusAttractiveness();
	if(stage != null) {
		this.textures = Resources.getTexturesByWidth(this.get_textureName(),20);
		this.spriteIndex = random_Random.getInt(this.get_availableTextures());
		this.sprite = new PIXI.Sprite(this.textures[this.spriteIndex]);
		this.reposition();
		if(this.get_canCacheSprite()) {
			stage.cacheableChildren.push(this.sprite);
			stage.isInvalid = true;
		} else {
			stage.addChild(this.sprite);
		}
	} else {
		this.textures = [];
	}
};
$hxClasses["BuildingUpgrade"] = BuildingUpgrade;
BuildingUpgrade.__name__ = ["BuildingUpgrade"];
BuildingUpgrade.__interfaces__ = [ICreatableCityElement];
BuildingUpgrade.prototype = {
	get_textureName: function() {
		return "";
	}
	,get_hasChangeableAppearance: function() {
		return this.textures.length > 1;
	}
	,get_bonusAttractiveness: function() {
		return 0;
	}
	,get_canCacheSprite: function() {
		return true;
	}
	,get_availableTextures: function() {
		return this.textures.length;
	}
	,set_onUpdate: function(to) {
		if(!common_ArrayExtensions.contains(this.building.city.simulation.buildingUpgradesToUpdate,this)) {
			this.building.city.simulation.buildingUpgradesToUpdate.push(this);
		}
		this.onUpdate = to;
		return this.onUpdate;
	}
	,changeAppearance: function() {
		if(this.textures.length <= 1) {
			return;
		}
		if((this.spriteIndex += 1) >= this.get_availableTextures()) {
			this.spriteIndex = 0;
		}
		this.sprite.texture = this.textures[this.spriteIndex];
		if(this.get_canCacheSprite()) {
			this.stage.isInvalid = true;
		}
	}
	,reposition: function() {
		if(this.stage != null) {
			this.sprite.position.set(this.building.position.x,this.building.position.y);
			if(this.get_canCacheSprite()) {
				this.stage.isInvalid = true;
			}
		}
	}
	,postLoad: function() {
		if(this.stage != null) {
			this.sprite.texture = this.textures[this.spriteIndex];
			if(this.get_canCacheSprite()) {
				this.stage.isInvalid = true;
			}
		}
	}
	,destroy: function() {
		this.building.bonusAttractiveness -= this.get_bonusAttractiveness();
		if(this.stage != null) {
			if(this.get_canCacheSprite()) {
				var _this = this.stage;
				var child = this.sprite;
				HxOverrides.remove(_this.cacheableChildren,child);
				_this.isInvalid = true;
				if(child.parent != null) {
					child.parent.removeChild(child);
				}
			} else {
				this.stage.removeChild(this.sprite);
			}
		}
	}
	,update: function(timeMod) {
		this.onUpdate(timeMod);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(BuildingUpgrade.saveDefinition);
		}
		var value = this.spriteIndex;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["spriteIndex"] != null ? loadMap.existsReserved("spriteIndex") : loadMap.h.hasOwnProperty("spriteIndex")) {
			this.spriteIndex = __map_reserved["spriteIndex"] != null ? loadMap.getReserved("spriteIndex") : loadMap.h["spriteIndex"];
		}
		this.postLoad();
	}
	,__class__: BuildingUpgrade
};
var LifeAction = $hxClasses["LifeAction"] = { __ename__ : ["LifeAction"], __constructs__ : ["Work","School","Nothing"] };
LifeAction.Work = ["Work",0];
LifeAction.Work.toString = $estr;
LifeAction.Work.__enum__ = LifeAction;
LifeAction.School = ["School",1];
LifeAction.School.toString = $estr;
LifeAction.School.__enum__ = LifeAction;
LifeAction.Nothing = ["Nothing",2];
LifeAction.Nothing.toString = $estr;
LifeAction.Nothing.__enum__ = LifeAction;
var Citizen = function(city,simulation1,foregroundStage,inBuildingStage,inBuildingStageNonParticle,adultTextures,childrenTextures,onWorld,worldX,startAge,startInPermanent) {
	if(startAge == null) {
		startAge = 0;
	}
	this.dynamicUnsavedVars = { };
	this.likesNightclubs = false;
	this.hasDied = false;
	this.hobby = null;
	this.isForcedHome = false;
	this.wantsNightEntertainmentIn = 0;
	this.pathCanBeReconsidered = true;
	this.recyclePathArray = false;
	this.pathWalkSpeed = 1;
	this.pathOnlyRelatedTo = null;
	this.pathEndFunction = null;
	this.currentPathActionTimerXY = 0;
	this.verticalPathProgress = 0;
	this.delayCanViewSelfInBuilding = false;
	this.canViewSelfInBuilding = true;
	this.inBuildingSince = 0;
	this.inPermanent = null;
	this.accessorySprite = null;
	this.educationLevel = 0;
	this.lastInfrequentUpdateAge = 0;
	this.hasWorkTools = false;
	this.currentAction = LifeAction.Nothing;
	this.hasBuildingInited = false;
	this.city = city;
	this.simulation = simulation1;
	this.spriteIndexActual = random_Random.getInt(childrenTextures.length);
	this.nameIndex = random_Random.getInt(1,Resources.citizenNames.length == 0 ? 8000 : Resources.citizenNames.length);
	this.spriteIndex = this.spriteIndexActual + (this.nameIndex << 14);
	this.onWorld = onWorld;
	this.relativeX = worldX;
	this.relativeY = 0;
	this.foregroundStage = foregroundStage;
	this.inBuildingStageNonParticle = inBuildingStageNonParticle;
	this.inBuildingStage = inBuildingStage;
	this.adultTextures = adultTextures;
	this.childrenTextures = childrenTextures;
	simulation1.houseAssigner.shouldUpdateHouses = true;
	simulation1.schoolAssigner.schoolsShouldBeUpdated = true;
	this.bornOn = simulation1.time.timeSinceStart - startAge * 1440;
	this.lastInfrequentUpdateAge = this.get_age();
	this.dieAgeModifier = random_Random.getInt(-5,5);
	this.setPreferences();
	this.addedToStage = null;
	this.sprite = new PIXI.Sprite();
	this.setCurrentTexture();
	Citizen.spriteCitizens.set(this.sprite,this);
	this.sprite.anchor.y = 1;
	Citizen.shouldUpdateDraw = true;
	if(!Game.isLoading && this.get_age() >= 16) {
		this.addToWorkers();
	}
	if(startInPermanent != null) {
		if(this.inPermanent != null) {
			this.inPermanent.onCitizenLeave(this,startInPermanent);
		}
		this.inBuildingSince = this.city.simulation.time.timeSinceStart;
		this.inPermanent = startInPermanent;
		this.hasBuildingInited = false;
		this.set_drawOnStage(inBuildingStage);
		this.canViewSelfInBuilding = false;
	} else {
		this.set_drawOnStage(foregroundStage);
	}
	this.entertainment = new simulation_CitizenEntertainment(this);
	this.wantsNightEntertainmentIn = random_Random.getInt(5);
	this.pathWalkSpeed = 1;
	this.inBuildingSince = city.simulation.time.timeSinceStart;
};
$hxClasses["Citizen"] = Citizen;
Citizen.__name__ = ["Citizen"];
Citizen.prototype = {
	get_stepsInBuilding: function() {
		return (this.city.simulation.time.timeSinceStart - this.inBuildingSince) / this.city.simulation.time.minutesPerTick;
	}
	,get_worldX: function() {
		return (this.inPermanent == null ? 0 : this.inPermanent.worldPosition.x * 20) + this.relativeX;
	}
	,get_workTimePreference: function() {
		return this.actualWorkTimePreference * (this.job == null ? 1 : this.job.workTimePreferenceMod);
	}
	,get_educationSpeedModifier: function() {
		return 1 + this.educationLevel / 2;
	}
	,get_age: function() {
		return (this.simulation.time.timeSinceStart - this.bornOn) / 1440;
	}
	,set_drawOnStage: function(val) {
		var prevVal = this.drawOnStage;
		this.drawOnStage = val;
		if(prevVal != val) {
			this.sprite.alpha = 1;
		}
		return this.drawOnStage;
	}
	,setHobby: function(hobby) {
		this.hobby = hobby;
		this.likesNightclubs = false;
	}
	,postLoad: function() {
		if(isNaN(this.relativeX)) {
			this.relativeX = 0;
		}
		this.entertainment.setAgeRelatedEntertainment();
	}
	,tryRemove: function() {
		if(this.fullyBeingControlled) {
			return;
		}
		this.city.simulation.babyMaker.onCitizenDeath();
		HxOverrides.remove(this.simulation.jobAssigner.citizensWithoutJob,this);
		if(this.job != null) {
			HxOverrides.remove(this.job.workers,this);
			this.simulation.jobAssigner.buildingsHaveWork = true;
		}
		if(this.home != null) {
			HxOverrides.remove(this.home.residents,this);
			this.simulation.houseAssigner.shouldUpdateHouses = true;
		}
		if(this.school != null) {
			HxOverrides.remove(this.school.students,this);
			this.simulation.schoolAssigner.schoolsShouldBeUpdated = true;
		}
		if(this.addedToStage != null) {
			this.swapRemoveFromStage();
		}
		Citizen.spriteCitizens.remove(this.sprite);
		HxOverrides.remove(this.simulation.citizens,this);
		if(this.hobby != null) {
			this.hobby.onDie();
		}
		this.hasDied = true;
		if(this.isForcedHome) {
			HxOverrides.remove(this.simulation.houseAssigner.citizensWithFixedHomes,this);
		}
	}
	,setPreferences: function() {
		this.actualWorkTimePreference = random_Random.getFloat(-1,1);
		this.likesNightclubs = this.spriteIndex % 5 == 0 ? false : true;
	}
	,update: function(timeMod) {
		var _gthis = this;
		if(!this.fullyBeingControlled) {
			Citizen.shouldUpdateDraw = false;
			if(this.delayCanViewSelfInBuilding) {
				this.delayCanViewSelfInBuilding = false;
				Citizen.shouldUpdateDraw = true;
			}
			this.updatePath(timeMod);
			if(this.path == null && !this.isRequestingPath) {
				_gthis.updateDailyLife(timeMod);
			}
			if(Citizen.shouldUpdateDraw) {
				this.actuallyUpdateDraw();
			}
		}
	}
	,shouldWorkNow: function() {
		if(this.job != null) {
			var this1 = this.simulation.time.timeSinceStart / 60 % 24;
			var start = this.job.startTime + this.get_workTimePreference();
			var end = this.job.endTime + this.get_workTimePreference();
			if(start < end) {
				if(this1 >= start) {
					return this1 < end;
				} else {
					return false;
				}
			} else if(!(this1 >= start)) {
				return this1 < end;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,shouldSchoolNow: function() {
		if(this.school != null) {
			var this1 = this.simulation.time.timeSinceStart / 60 % 24;
			var start = this.school.schoolStartTime;
			var end = this.school.schoolEndTime;
			if(start < end) {
				if(this1 >= start) {
					return this1 < end;
				} else {
					return false;
				}
			} else if(!(this1 >= start)) {
				return this1 < end;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,updateDailyLife: function(timeMod) {
		var time = this.simulation.time.timeSinceStart / 60 % 24;
		if(this.currentAction == LifeAction.School) {
			var start = this.school.schoolStartTime;
			var end = this.school.schoolEndTime;
			if(start < end ? time >= start && time < end : time >= start || time < end) {
				this.school.beAtSchool(this,timeMod);
			} else {
				this.currentAction = LifeAction.Nothing;
			}
		} else if(this.currentAction == LifeAction.Work) {
			var tmp = this.job;
			var start1 = this.job.startTime + this.get_workTimePreference();
			var end1 = this.job.endTime + this.get_workTimePreference();
			tmp.work(this,timeMod,!(start1 < end1 ? time >= start1 && time < end1 : time >= start1 || time < end1));
		} else if(this.hobby != null && this.hobby.isActive()) {
			this.hobby.update(timeMod);
		} else if(this.shouldWorkNow()) {
			if(this.inPermanent == this.job) {
				this.currentAction = LifeAction.Work;
			} else {
				var _this = this.entertainment;
				if(_this.citizen.inPermanent != null && _this.citizen.inPermanent.isBuilding && _this.citizen.inPermanent.isEntertainment ? _this.citizen.inPermanent.finishEntertainment(_this.citizen,timeMod) : true) {
					this.simulation.pathfinder.findPath(this,this.job.get_firstBuildingToGoTo());
				}
			}
		} else if(this.shouldSchoolNow()) {
			if(this.inPermanent == this.school) {
				this.currentAction = LifeAction.School;
			} else {
				var _this1 = this.entertainment;
				if(_this1.citizen.inPermanent != null && _this1.citizen.inPermanent.isBuilding && _this1.citizen.inPermanent.isEntertainment ? _this1.citizen.inPermanent.finishEntertainment(_this1.citizen,timeMod) : true) {
					if(this.school.workers.length == 0) {
						this.leaveSchool();
					} else {
						this.simulation.pathfinder.findPath(this,this.school);
					}
				}
			}
		} else {
			var busy = this.entertainment.updateEntertainment(timeMod);
			if(!busy) {
				var tmp1;
				if(this.home != null) {
					if(this.job == null) {
						var start2 = 8 + this.get_workTimePreference();
						var end2 = 21 + this.get_workTimePreference();
						tmp1 = !(start2 < end2 ? time >= start2 && time < end2 : time >= start2 || time < end2);
					} else {
						tmp1 = true;
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					if(this.inPermanent != this.home) {
						this.simulation.pathfinder.findPath(this,this.home);
					} else {
						var startTime;
						var endTime;
						if(this.job == null) {
							startTime = 8;
							endTime = 21;
						} else {
							startTime = this.job.startTime;
							endTime = this.job.endTime;
						}
						var tmp2;
						var this1 = this.simulation.time.timeSinceStart / 60 % 24;
						var this2 = startTime;
						var newTime = this2;
						newTime += this.get_workTimePreference() - 1;
						newTime %= 24;
						var start3 = newTime;
						var this3 = endTime;
						var newTime1 = this3;
						newTime1 += this.get_workTimePreference() + 1;
						newTime1 %= 24;
						var end3 = newTime1;
						if(!(start3 < end3 ? this1 >= start3 && this1 < end3 : this1 >= start3 || this1 < end3)) {
							tmp2 = this.get_stepsInBuilding() < 240;
						} else {
							tmp2 = true;
						}
						if(tmp2) {
							this.canViewSelfInBuilding = true;
							this.home.walkAround(this,this.get_stepsInBuilding());
						} else {
							this.canViewSelfInBuilding = false;
						}
					}
				} else {
					this.wander(timeMod);
				}
			}
		}
	}
	,tryFinishWork: function(timeMod) {
		if(this.currentAction == LifeAction.Work) {
			this.job.work(this,timeMod,true);
		}
		return this.currentAction != LifeAction.Work;
	}
	,evictFromHome: function() {
		if(this.home == null) {
			return;
		}
		HxOverrides.remove(this.home.residents,this);
		this.home = null;
		this.simulation.houseAssigner.shouldUpdateHouses = true;
	}
	,leaveSchool: function() {
		if(this.school == null) {
			return;
		}
		HxOverrides.remove(this.school.students,this);
		this.school = null;
		this.simulation.schoolAssigner.schoolsShouldBeUpdated = true;
		if(this.currentAction == LifeAction.School) {
			this.currentAction = LifeAction.Nothing;
		}
	}
	,loseJob: function(instantReplace) {
		if(instantReplace == null) {
			instantReplace = false;
		}
		if(this.job == null) {
			return;
		}
		HxOverrides.remove(this.job.workers,this);
		this.job = null;
		if(!instantReplace) {
			this.simulation.jobAssigner.buildingsHaveWork = true;
			this.simulation.jobAssigner.citizensWithoutJob.push(this);
		}
		this.hasWorkTools = false;
		if(this.currentAction == LifeAction.Work) {
			this.currentAction = LifeAction.Nothing;
		}
	}
	,infrequentUpdate: function() {
		this.setCurrentTexture();
		if(this.lastInfrequentUpdateAge < 16 && this.get_age() >= 16 && this.job == null) {
			this.addToWorkers();
		}
		this.lastInfrequentUpdateAge = this.get_age();
		if(this.get_age() >= 75 + this.dieAgeModifier && !this.city.progress.story.disableDying) {
			this.tryRemove();
		}
		var notInFestival = true;
		var _g = 0;
		var _g1 = this.city.simulation.festivalManager.festivals;
		while(_g < _g1.length) {
			var fest = _g1[_g];
			++_g;
			if(fest.isInvolvedWithFestival(this)) {
				notInFestival = false;
			}
		}
		if(this.path != null && this.pathCanBeReconsidered && notInFestival) {
			var shouldActuallyWorkNow = this.currentAction != LifeAction.Work && this.shouldWorkNow();
			var shouldActuallySchoolNow = this.currentAction != LifeAction.School && this.shouldSchoolNow();
			if(shouldActuallyWorkNow && this.pathDestination != this.job || shouldActuallySchoolNow && this.pathDestination != this.school) {
				if(this.recyclePathArray) {
					pooling_Int32ArrayPool.returnToPool(this.path);
					this.recyclePathArray = false;
				}
				this.path = null;
				this.nextPathPos = -1;
				this.pathEnd = -1;
				this.currentPathAction = null;
				this.verticalPathProgress = 0;
				this.pathEndFunction = null;
				this.requestingPathGoal = null;
				this.pathOnlyRelatedTo = null;
				this.pathWalkSpeed = 1;
				this.pathCanBeReconsidered = true;
				if(this.sprite.alpha > 0 && this.sprite.alpha < 1) {
					this.sprite.alpha = 1;
				}
			}
		}
	}
	,addToWorkers: function() {
		this.simulation.jobAssigner.citizensWithoutJob.push(this);
		this.simulation.jobAssigner.buildingsHaveWork = true;
		if(this.school != null) {
			this.leaveSchool();
		}
	}
	,midDayUpdate: function() {
		if(this.wantsNightEntertainmentIn > 0) {
			this.wantsNightEntertainmentIn--;
		}
		this.dieAgeModifier += 0.2 * (this.simulation.happiness.medicalHappiness / 100.0);
		if(this.city.simulation.happiness.happiness < 10 && this.home == null && this.city.materials.food < 1) {
			if(this.job == null) {
				this.dieAgeModifier -= 10;
			}
			this.dieAgeModifier -= 1;
		}
		if(this.home != null) {
			this.dieAgeModifier += this.home.yearsToLiveLongerPerYearIfLivingHere;
		}
		this.dieAgeModifier += this.city.upgrades.vars.extendAgeBy;
	}
	,updatePath: function(timeMod) {
		var _gthis = this;
		if(this.path != null) {
			if(this.currentPathAction == null) {
				while(this.path[this.nextPathPos] == 12) {
					this.pathWalkSpeed = 1 * this.path[this.nextPathPos + 1] / 100;
					this.nextPathPos += 2;
				}
				this.currentPathAction = this.path[this.nextPathPos];
				if(this.currentPathAction == 0 || this.currentPathAction == 1 || this.currentPathAction == 9) {
					this.canViewSelfInBuilding = false;
					Citizen.shouldUpdateDraw = true;
				} else if(this.pathOnlyRelatedTo != null || this.currentPathAction != 4 && this.currentPathAction != 8) {
					this.canViewSelfInBuilding = (this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null) != null ? this.inPermanent.get_walkThroughCanViewSelfInThisBuilding() : true;
					Citizen.shouldUpdateDraw = true;
				}
				if(this.currentPathAction != 4 && this.currentPathAction != 8 && this.currentPathAction != 9) {
					this.relativeY = 0;
				}
				this.currentPathActionTimerXY = 0;
				if(this.currentPathAction == 5 || this.currentPathAction == 7 || this.currentPathAction == 11 || this.currentPathAction == 13) {
					this.currentPathActionPermanent = this.city.findPermanentByID(this.path[this.nextPathPos + 1]);
				} else if(this.currentPathAction == 4 || this.currentPathAction == 9 || this.currentPathAction == 8) {
					this.currentPathActionTimerXY = this.path[this.nextPathPos + 1];
				}
			}
			var reachedActionGoal = false;
			var _g = this.currentPathAction;
			switch(_g) {
			case 0:
				this.verticalPathProgress += timeMod;
				if(this.verticalPathProgress >= 20) {
					var permanent = (this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null).topBuilding;
					if(this.inPermanent != null) {
						this.inPermanent.onCitizenLeave(this,permanent);
					}
					this.inBuildingSince = this.city.simulation.time.timeSinceStart;
					this.inPermanent = permanent;
					this.hasBuildingInited = false;
					this.verticalPathProgress -= 20;
					reachedActionGoal = true;
				}
				break;
			case 1:
				this.verticalPathProgress += timeMod;
				if(this.verticalPathProgress >= 20) {
					var permanent1 = (this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null).bottomBuilding;
					if(this.inPermanent != null) {
						this.inPermanent.onCitizenLeave(this,permanent1);
					}
					this.inBuildingSince = this.city.simulation.time.timeSinceStart;
					this.inPermanent = permanent1;
					this.hasBuildingInited = false;
					this.verticalPathProgress -= 20;
					reachedActionGoal = true;
				}
				break;
			case 2:
				this.relativeX -= timeMod * this.pathWalkSpeed;
				if(this.relativeX < -2) {
					var permanent2 = (this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null).leftBuilding;
					if(this.inPermanent != null) {
						this.inPermanent.onCitizenLeave(this,permanent2);
					}
					this.inBuildingSince = this.city.simulation.time.timeSinceStart;
					this.inPermanent = permanent2;
					this.hasBuildingInited = false;
					this.onWorld = this.inPermanent.world;
					this.relativeX += 20;
					reachedActionGoal = true;
				} else {
					Citizen.shouldUpdateDraw = true;
				}
				break;
			case 3:
				this.relativeX += timeMod * this.pathWalkSpeed;
				if(this.relativeX > 20) {
					var permanent3 = (this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null).rightBuilding;
					if(this.inPermanent != null) {
						this.inPermanent.onCitizenLeave(this,permanent3);
					}
					this.inBuildingSince = this.city.simulation.time.timeSinceStart;
					this.inPermanent = permanent3;
					this.hasBuildingInited = false;
					this.onWorld = this.inPermanent.world;
					this.relativeX -= 20;
					reachedActionGoal = true;
				} else {
					Citizen.shouldUpdateDraw = true;
				}
				break;
			case 4:
				var x = this.currentPathActionTimerXY;
				var spd = this.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				if(Math.abs(x - this.relativeX) < spd) {
					this.relativeX = x;
					reachedActionGoal = true;
				} else {
					var num = x - this.relativeX;
					this.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
					reachedActionGoal = false;
				}
				break;
			case 5:
				if(this.inPermanent != null) {
					if(this.inPermanent != null && this.inPermanent.isBuilding) {
						var x1 = (this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null).doorX;
						var spd1 = this.pathWalkSpeed * timeMod;
						Citizen.shouldUpdateDraw = true;
						var tmp;
						if(Math.abs(x1 - this.relativeX) < spd1) {
							this.relativeX = x1;
							tmp = true;
						} else {
							var num1 = x1 - this.relativeX;
							this.relativeX += (num1 > 0 ? 1 : num1 < 0 ? -1 : 0) * spd1;
							tmp = false;
						}
						if(tmp) {
							if(this.inPermanent != null && this.inPermanent.isBuilding) {
								var building = this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null;
								this.relativeX = building.worldPosition.x * 20 + building.doorX;
							} else {
								this.relativeX += this.inPermanent.worldPosition.x * 20;
							}
							if(this.inPermanent != null) {
								this.inPermanent.onCitizenLeave(this,null);
							}
							this.inBuildingSince = this.city.simulation.time.timeSinceStart;
							this.set_drawOnStage(this.foregroundStage);
							this.inPermanent = null;
							this.relativeY = 0;
							Citizen.shouldUpdateDraw = true;
						}
					} else {
						if(this.inPermanent != null && this.inPermanent.isBuilding) {
							var building1 = this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null;
							this.relativeX = building1.worldPosition.x * 20 + building1.doorX;
						} else {
							this.relativeX += this.inPermanent.worldPosition.x * 20;
						}
						if(this.inPermanent != null) {
							this.inPermanent.onCitizenLeave(this,null);
						}
						this.inBuildingSince = this.city.simulation.time.timeSinceStart;
						this.set_drawOnStage(this.foregroundStage);
						this.inPermanent = null;
						this.relativeY = 0;
						Citizen.shouldUpdateDraw = true;
					}
				} else if(this.currentPathActionPermanent.isBuilding) {
					var currentPathActionBuilding = this.currentPathActionPermanent;
					var x2 = currentPathActionBuilding.worldPosition.x * 20 + currentPathActionBuilding.doorX;
					var spd2 = this.pathWalkSpeed * timeMod;
					Citizen.shouldUpdateDraw = true;
					if(Math.abs(x2 - this.relativeX) < spd2) {
						this.relativeX = x2;
						reachedActionGoal = true;
					} else {
						var num2 = x2 - this.relativeX;
						this.relativeX += (num2 > 0 ? 1 : num2 < 0 ? -1 : 0) * spd2;
						reachedActionGoal = false;
					}
					if(reachedActionGoal) {
						var permanent4 = this.currentPathActionPermanent;
						if(this.inPermanent != null) {
							this.inPermanent.onCitizenLeave(this,permanent4);
						}
						this.inBuildingSince = this.city.simulation.time.timeSinceStart;
						this.inPermanent = permanent4;
						this.hasBuildingInited = false;
						this.set_drawOnStage(this.inBuildingStage);
						this.relativeX = currentPathActionBuilding.doorX;
					}
				} else {
					var permanentX = this.currentPathActionPermanent.worldPosition.x * 20;
					var num3 = permanentX + 10. - this.relativeX;
					this.relativeX += (num3 > 0 ? 1 : num3 < 0 ? -1 : 0) * (timeMod * this.pathWalkSpeed);
					if(this.relativeX > permanentX && this.relativeX < permanentX + 20 - 2) {
						var permanent5 = this.currentPathActionPermanent;
						if(this.inPermanent != null) {
							this.inPermanent.onCitizenLeave(this,permanent5);
						}
						this.inBuildingSince = this.city.simulation.time.timeSinceStart;
						this.inPermanent = permanent5;
						this.hasBuildingInited = false;
						this.relativeX -= this.inPermanent.worldPosition.x * 20;
						reachedActionGoal = true;
					}
				}
				Citizen.shouldUpdateDraw = true;
				break;
			case 7:
				if(this.currentPathActionTimerXY > 0) {
					this.currentPathActionTimerXY += 0.1 * timeMod;
					if(this.currentPathActionTimerXY >= 1) {
						this.sprite.alpha = 1;
						if(this.inPermanent["is"](buildings_Misdirector)) {
							if(this.recyclePathArray) {
								pooling_Int32ArrayPool.returnToPool(this.path);
								this.recyclePathArray = false;
							}
							this.path = null;
							this.nextPathPos = -1;
							this.pathEnd = -1;
							this.currentPathAction = null;
							if(!this.canViewSelfInBuilding) {
								this.delayCanViewSelfInBuilding = true;
							}
							this.canViewSelfInBuilding = true;
							this.verticalPathProgress = 0;
							this.pathEndFunction = null;
							this.requestingPathGoal = null;
							this.pathOnlyRelatedTo = null;
							this.pathWalkSpeed = 1;
							this.pathCanBeReconsidered = true;
							if(this.sprite.alpha > 0 && this.sprite.alpha < 1) {
								this.sprite.alpha = 1;
							}
							this.waitAndMoveAndWaitRandom(30,45,3,16,120,180,null,false,true);
							this.pathCanBeReconsidered = false;
							var misdirector = this.inPermanent;
							misdirector.giveReward();
						} else {
							reachedActionGoal = true;
						}
					} else {
						this.sprite.alpha = this.currentPathActionTimerXY;
					}
				} else {
					var x3 = this.inPermanent.teleportX;
					var spd3 = this.pathWalkSpeed * timeMod;
					Citizen.shouldUpdateDraw = true;
					var tmp1;
					if(Math.abs(x3 - this.relativeX) < spd3) {
						this.relativeX = x3;
						tmp1 = true;
					} else {
						var num4 = x3 - this.relativeX;
						this.relativeX += (num4 > 0 ? 1 : num4 < 0 ? -1 : 0) * spd3;
						tmp1 = false;
					}
					if(tmp1) {
						this.inPermanent.createTeleportParticle();
						this.inPermanent.timesUsed += 1;
						if(this.city.misdirector != null && this.city.misdirector.get_misdirectChance() > 0 && random_Random.getFloat() < this.city.misdirector.get_misdirectChance()) {
							this.currentPathActionPermanent = this.city.misdirector;
						}
						var permanent6 = this.currentPathActionPermanent;
						if(this.inPermanent != null) {
							this.inPermanent.onCitizenLeave(this,permanent6);
						}
						this.inBuildingSince = this.city.simulation.time.timeSinceStart;
						this.inPermanent = permanent6;
						this.hasBuildingInited = false;
						this.inPermanent.timesUsedTo += 1;
						this.onWorld = this.currentPathActionPermanent.world;
						this.relativeX = this.inPermanent.teleportX;
						this.currentPathActionTimerXY = 0.1 * timeMod;
						this.sprite.alpha = this.currentPathActionTimerXY;
					}
				}
				Citizen.shouldUpdateDraw = true;
				break;
			case 8:
				var reachedActionGoal1 = this;
				reachedActionGoal = (reachedActionGoal1.currentPathActionTimerXY -= timeMod) <= 0.5 * (timeMod - 0.6666666666666666666);
				break;
			case 9:
				var spd4 = timeMod;
				if(Math.abs(this.currentPathActionTimerXY - this.relativeY) < spd4) {
					this.relativeY = this.currentPathActionTimerXY;
					reachedActionGoal = true;
				} else {
					var num5 = this.currentPathActionTimerXY - this.relativeY;
					this.relativeY += (num5 > 0 ? 1 : num5 < 0 ? -1 : 0) * spd4;
				}
				break;
			case 10:
				reachedActionGoal = true;
				break;
			case 11:
				if(this.inPermanent == this.currentPathActionPermanent) {
					reachedActionGoal = true;
				} else {
					var inLandingSite = this.inPermanent;
					var destination = this.currentPathActionPermanent;
					if(inLandingSite.currentlyLandedSaucer != null && (inLandingSite.currentlyLandedSaucer.destination == destination || inLandingSite.currentlyLandedSaucer.destination.estimatedFlyingDistanceTo(destination) < inLandingSite.estimatedFlyingDistanceTo(destination))) {
						var fs = inLandingSite.currentlyLandedSaucer;
						fs.addPassenger(this);
						this.fullyBeingControlled = true;
						this.canViewSelfInBuilding = false;
						this.inTransportationThing = fs;
						if(inLandingSite.currentlyLandedSaucer.destination != destination) {
							if(inLandingSite.estimatedFlyingDistanceTo(destination) < inLandingSite.estimatedFlyingDistanceTo(inLandingSite.currentlyLandedSaucer.destination)) {
								var route = this.simulation.flyingPathfinder.findRoute(inLandingSite,destination);
								if(route != null) {
									fs.setDestination(destination,route);
								}
							}
						}
					} else if(inLandingSite.hasFlyingSaucer) {
						var route1 = this.simulation.flyingPathfinder.findRoute(inLandingSite,destination);
						if(route1 != null) {
							var fs1 = new simulation_FlyingSaucer(this.simulation,this.city.farForegroundStage,route1,inLandingSite,this.currentPathActionPermanent);
							this.simulation.flyingSaucers.push(fs1);
							fs1.addPassenger(this);
							this.fullyBeingControlled = true;
							this.canViewSelfInBuilding = false;
							this.inTransportationThing = fs1;
							this.inPermanent.removeFlyingSaucer();
							var halfWidth = 10. | 0;
							this.relativeX = random_Random.getInt(halfWidth - 3,halfWidth + 4);
						} else {
							if(this.recyclePathArray) {
								pooling_Int32ArrayPool.returnToPool(this.path);
								this.recyclePathArray = false;
							}
							this.path = null;
							this.nextPathPos = -1;
							this.pathEnd = -1;
							this.currentPathAction = null;
							if(!this.canViewSelfInBuilding) {
								this.delayCanViewSelfInBuilding = true;
							}
							this.canViewSelfInBuilding = true;
							this.verticalPathProgress = 0;
							this.pathEndFunction = null;
							this.requestingPathGoal = null;
							this.pathOnlyRelatedTo = null;
							this.pathWalkSpeed = 1;
							this.pathCanBeReconsidered = true;
							if(this.sprite.alpha > 0 && this.sprite.alpha < 1) {
								this.sprite.alpha = 1;
							}
							return;
						}
					} else {
						this.relativeY = -1;
					}
				}
				Citizen.shouldUpdateDraw = true;
				break;
			case 12:
				break;
			case 13:
				var diff = 20 * (this.currentPathActionPermanent.worldPosition.y - this.inPermanent.worldPosition.y);
				if(this.inPermanent == this.currentPathActionPermanent) {
					if(this.currentPathActionTimerXY > 3) {
						if(this.nextPathPos + 2 < this.pathEnd) {
							if(this.path[this.nextPathPos + 2] == 0 || this.path[this.nextPathPos + 2] == 1) {
								var x4 = this.relativeX > 10 ? 18 : 0;
								var spd5 = this.pathWalkSpeed * timeMod;
								Citizen.shouldUpdateDraw = true;
								var tmp2;
								if(Math.abs(x4 - this.relativeX) < spd5) {
									this.relativeX = x4;
									tmp2 = true;
								} else {
									var num6 = x4 - this.relativeX;
									this.relativeX += (num6 > 0 ? 1 : num6 < 0 ? -1 : 0) * spd5;
									tmp2 = false;
								}
								if(tmp2) {
									reachedActionGoal = true;
								}
							} else {
								reachedActionGoal = true;
							}
						} else {
							reachedActionGoal = true;
						}
					} else {
						this.currentPathActionTimerXY += timeMod;
					}
				} else if(this.currentPathActionTimerXY > 0) {
					if(Math.abs(this.verticalPathProgress) < Math.abs(diff)) {
						this.verticalPathProgress += timeMod * 20 * (diff > 0 ? 1 : diff < 0 ? -1 : 0);
						this.canViewSelfInBuilding = false;
					}
					if(Math.abs(this.verticalPathProgress) >= Math.abs(diff)) {
						if(this.currentPathActionPermanent.openDoor()) {
							var permanent7 = this.currentPathActionPermanent;
							if(this.inPermanent != null) {
								this.inPermanent.onCitizenLeave(this,permanent7);
							}
							this.inBuildingSince = this.city.simulation.time.timeSinceStart;
							this.inPermanent = permanent7;
							this.hasBuildingInited = false;
							this.inPermanent.timesUsedTo += 1;
							this.verticalPathProgress = 0;
							this.canViewSelfInBuilding = true;
							this.relativeX += random_Random.getInt(-2,3);
						}
					}
				} else {
					this.canViewSelfInBuilding = true;
					var spd6 = this.pathWalkSpeed * timeMod;
					Citizen.shouldUpdateDraw = true;
					var tmp3;
					if(Math.abs(9. - this.relativeX) < spd6) {
						this.relativeX = 9.;
						tmp3 = true;
					} else {
						var num7 = 9. - this.relativeX;
						this.relativeX += (num7 > 0 ? 1 : num7 < 0 ? -1 : 0) * spd6;
						tmp3 = false;
					}
					if(tmp3) {
						if(this.inPermanent.openDoor()) {
							this.inPermanent.timesUsed += 1;
							this.currentPathActionTimerXY = 1;
							this.canViewSelfInBuilding = false;
						}
					}
				}
				Citizen.shouldUpdateDraw = true;
				break;
			}
			if(reachedActionGoal) {
				if(this.nextPathPos + 2 >= this.pathEnd) {
					var pathEnd = _gthis.pathEndFunction;
					if(_gthis.recyclePathArray) {
						pooling_Int32ArrayPool.returnToPool(_gthis.path);
						_gthis.recyclePathArray = false;
					}
					_gthis.path = null;
					_gthis.nextPathPos = -1;
					_gthis.pathEnd = -1;
					_gthis.currentPathAction = null;
					if(!_gthis.canViewSelfInBuilding) {
						_gthis.delayCanViewSelfInBuilding = true;
					}
					_gthis.canViewSelfInBuilding = true;
					_gthis.verticalPathProgress = 0;
					_gthis.pathEndFunction = null;
					_gthis.requestingPathGoal = null;
					_gthis.pathOnlyRelatedTo = null;
					_gthis.pathWalkSpeed = 1;
					_gthis.pathCanBeReconsidered = true;
					if(_gthis.sprite.alpha > 0 && _gthis.sprite.alpha < 1) {
						_gthis.sprite.alpha = 1;
					}
					if(pathEnd != null) {
						pathEnd();
					}
				} else {
					this.nextPathPos += 2;
					this.currentPathAction = null;
					if(this.path[this.nextPathPos] == 13) {
						while(this.nextPathPos + 2 < this.pathEnd && this.path[this.nextPathPos + 2] == 13) this.nextPathPos += 2;
					}
					if(this.path[this.nextPathPos] == 10) {
						if(this.nextPathPos + 2 >= this.pathEnd) {
							var pathEnd1 = _gthis.pathEndFunction;
							if(_gthis.recyclePathArray) {
								pooling_Int32ArrayPool.returnToPool(_gthis.path);
								_gthis.recyclePathArray = false;
							}
							_gthis.path = null;
							_gthis.nextPathPos = -1;
							_gthis.pathEnd = -1;
							_gthis.currentPathAction = null;
							if(!_gthis.canViewSelfInBuilding) {
								_gthis.delayCanViewSelfInBuilding = true;
							}
							_gthis.canViewSelfInBuilding = true;
							_gthis.verticalPathProgress = 0;
							_gthis.pathEndFunction = null;
							_gthis.requestingPathGoal = null;
							_gthis.pathOnlyRelatedTo = null;
							_gthis.pathWalkSpeed = 1;
							_gthis.pathCanBeReconsidered = true;
							if(_gthis.sprite.alpha > 0 && _gthis.sprite.alpha < 1) {
								_gthis.sprite.alpha = 1;
							}
							if(pathEnd1 != null) {
								pathEnd1();
							}
						} else {
							this.canViewSelfInBuilding = true;
							this.nextPathPos += 2;
						}
					}
				}
				Citizen.shouldUpdateDraw = true;
			}
		}
	}
	,setRelativePos: function(x,y) {
		if(x != this.relativeX || y != this.relativeY) {
			this.relativeX = x;
			this.relativeY = y;
			Citizen.shouldUpdateDraw = true;
		}
	}
	,setRelativeY: function(y) {
		this.relativeY = y;
		Citizen.shouldUpdateDraw = true;
	}
	,setRelativeX: function(x) {
		this.relativeX = x;
		Citizen.shouldUpdateDraw = true;
	}
	,wander: function(timeMod) {
		if(this.inPermanent == null) {
			var val2 = (this.relativeX | 0) - 100;
			var val1 = (this.relativeX | 0) + 100;
			var val21 = this.onWorld.rect.width - 2;
			this.moveAndWait(random_Random.getInt(val2 > 0 ? val2 : 0,val21 < val1 ? val21 : val1),random_Random.getInt(30,60),null,false,false);
		} else {
			this.goDownTowardsWorldSurface(timeMod);
		}
	}
	,goDownTowardsWorldSurface: function(timeMod) {
		if(this.inPermanent.worldPosition.y == 0) {
			if(this.inPermanent != null && this.inPermanent.isBuilding) {
				var x = (this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null).doorX;
				var spd = this.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				var tmp;
				if(Math.abs(x - this.relativeX) < spd) {
					this.relativeX = x;
					tmp = true;
				} else {
					var num = x - this.relativeX;
					this.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
					tmp = false;
				}
				if(tmp) {
					if(this.inPermanent != null && this.inPermanent.isBuilding) {
						var building = this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null;
						this.relativeX = building.worldPosition.x * 20 + building.doorX;
					} else {
						this.relativeX += this.inPermanent.worldPosition.x * 20;
					}
					if(this.inPermanent != null) {
						this.inPermanent.onCitizenLeave(this,null);
					}
					this.inBuildingSince = this.city.simulation.time.timeSinceStart;
					this.set_drawOnStage(this.foregroundStage);
					this.inPermanent = null;
					this.relativeY = 0;
					Citizen.shouldUpdateDraw = true;
				}
			} else {
				if(this.inPermanent != null && this.inPermanent.isBuilding) {
					var building1 = this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null;
					this.relativeX = building1.worldPosition.x * 20 + building1.doorX;
				} else {
					this.relativeX += this.inPermanent.worldPosition.x * 20;
				}
				if(this.inPermanent != null) {
					this.inPermanent.onCitizenLeave(this,null);
				}
				this.inBuildingSince = this.city.simulation.time.timeSinceStart;
				this.set_drawOnStage(this.foregroundStage);
				this.inPermanent = null;
				this.relativeY = 0;
				Citizen.shouldUpdateDraw = true;
			}
		} else {
			var perm = this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null;
			var arr = [];
			while(perm.worldPosition.y != 0) {
				if(perm.bottomBuilding == null) {
					var lb = perm.leftBuilding;
					while(lb != null) lb = lb.leftBuilding;
					if(lb != null) {
						arr.push(2);
						arr.push(0);
						perm = perm.leftBuilding;
					} else if(perm.rightBuilding != null) {
						arr.push(3);
						arr.push(0);
						perm = perm.rightBuilding;
					}
				}
				if(perm.bottomBuilding != null) {
					arr.push(1);
					arr.push(0);
					perm = perm.bottomBuilding;
				} else {
					break;
				}
			}
			if(arr.length > 0) {
				this.setPath(new Int32Array(arr),0,arr.length);
			}
		}
	}
	,moveTowardsRandomInWorldCoords: function(xMin,xMax,then) {
		var moveToX = random_Random.getInt(xMin,xMax);
		if(this.inPermanent != null) {
			var moveDiff = moveToX - this.relativeX - this.inPermanent.position.x;
			if(moveDiff < -this.relativeX) {
				if((this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null).leftBuilding != null) {
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[4].length > 0 ? pool[4].splice(pool[4].length - 1,1)[0] : new Int32Array(4);
					arr[0] = 2;
					arr[1] = 0;
					arr[2] = 4;
					arr[3] = 18;
					this.setPath(arr,0,4,true);
				} else {
					var pool1 = pooling_Int32ArrayPool.pool;
					var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
					arr1[0] = 4;
					arr1[1] = 0;
					this.setPath(arr1,0,2,true);
					this.pathEndFunction = null;
					this.pathOnlyRelatedTo = this.inPermanent;
				}
			} else if(moveDiff >= 20 - this.relativeX) {
				if((this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null).rightBuilding != null) {
					var pool2 = pooling_Int32ArrayPool.pool;
					var arr2 = pool2[4].length > 0 ? pool2[4].splice(pool2[4].length - 1,1)[0] : new Int32Array(4);
					arr2[0] = 3;
					arr2[1] = 0;
					arr2[2] = 4;
					arr2[3] = 0;
					this.setPath(arr2,0,4,true);
				} else {
					var pool3 = pooling_Int32ArrayPool.pool;
					var arr3 = pool3[2].length > 0 ? pool3[2].splice(pool3[2].length - 1,1)[0] : new Int32Array(2);
					arr3[0] = 4;
					arr3[1] = 18;
					this.setPath(arr3,0,2,true);
					this.pathEndFunction = null;
					this.pathOnlyRelatedTo = this.inPermanent;
				}
			} else {
				var x = Math.floor(moveDiff + this.relativeX);
				var pool4 = pooling_Int32ArrayPool.pool;
				var arr4 = pool4[2].length > 0 ? pool4[2].splice(pool4[2].length - 1,1)[0] : new Int32Array(2);
				arr4[0] = 4;
				arr4[1] = x;
				this.setPath(arr4,0,2,true);
				this.pathEndFunction = null;
				this.pathOnlyRelatedTo = this.inPermanent;
			}
			this.pathEndFunction = then;
		} else {
			var moveToX1 = random_Random.getInt(xMin - this.onWorld.rect.x,xMax - this.onWorld.rect.x);
			var pool5 = pooling_Int32ArrayPool.pool;
			var arr5 = pool5[2].length > 0 ? pool5[2].splice(pool5[2].length - 1,1)[0] : new Int32Array(2);
			arr5[0] = 4;
			arr5[1] = moveToX1;
			this.setPath(arr5,0,2,true);
			this.pathEndFunction = then;
			this.pathOnlyRelatedTo = this.inPermanent;
		}
	}
	,moveAndWait: function(x,time,then,modifyWithHappiness,slowMove) {
		if(slowMove == null) {
			slowMove = false;
		}
		if(modifyWithHappiness == null) {
			modifyWithHappiness = false;
		}
		if(modifyWithHappiness) {
			time = time / this.simulation.happiness.actionSpeedModifier | 0;
		}
		if(slowMove) {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[6].length > 0 ? pool[6].splice(pool[6].length - 1,1)[0] : new Int32Array(6);
			arr[0] = 12;
			arr[1] = 50;
			arr[2] = 4;
			arr[3] = x;
			arr[4] = 8;
			arr[5] = time;
			this.setPath(arr,0,6,true);
		} else {
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[4].length > 0 ? pool1[4].splice(pool1[4].length - 1,1)[0] : new Int32Array(4);
			arr1[0] = 4;
			arr1[1] = x;
			arr1[2] = 8;
			arr1[3] = time;
			this.setPath(arr1,0,4,true);
		}
		this.pathEndFunction = then;
		this.pathOnlyRelatedTo = this.inPermanent;
	}
	,waitAndMoveAndWaitRandom: function(timeMin1,timeMin2,xMin,xMax,timeMin,timeMax,then,modifyWithHappiness,slowMove) {
		if(slowMove == null) {
			slowMove = false;
		}
		if(modifyWithHappiness == null) {
			modifyWithHappiness = false;
		}
		var time1 = random_Random.getInt(timeMin1,timeMin2);
		var time2 = random_Random.getInt(timeMin,timeMax);
		var x = random_Random.getInt(xMin,xMax);
		if(modifyWithHappiness) {
			time1 = time1 / this.simulation.happiness.actionSpeedModifier | 0;
			time2 = time2 / this.simulation.happiness.actionSpeedModifier | 0;
		}
		if(slowMove) {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[8].length > 0 ? pool[8].splice(pool[8].length - 1,1)[0] : new Int32Array(8);
			arr[0] = 8;
			arr[1] = time1;
			arr[2] = 12;
			arr[3] = 50;
			arr[4] = 4;
			arr[5] = x;
			arr[6] = 8;
			arr[7] = time2;
			this.setPath(arr,0,8,true);
		} else {
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[6].length > 0 ? pool1[6].splice(pool1[6].length - 1,1)[0] : new Int32Array(6);
			arr1[0] = 8;
			arr1[1] = time1;
			arr1[2] = 4;
			arr1[3] = x;
			arr1[4] = 8;
			arr1[5] = time2;
			this.setPath(arr1,0,6,true);
		}
		this.pathEndFunction = then;
		this.pathOnlyRelatedTo = this.inPermanent;
	}
	,changeFloorAndMoveRandom: function(xMin,xMax,then) {
		var yTo = this.isAtGroundLevel() ? 10 : 0;
		var pool = pooling_Int32ArrayPool.pool;
		var arr = pool[4].length > 0 ? pool[4].splice(pool[4].length - 1,1)[0] : new Int32Array(4);
		arr[0] = 9;
		arr[1] = yTo;
		arr[2] = 4;
		arr[3] = random_Random.getInt(xMin,xMax);
		this.setPath(arr,0,4,true);
		this.pathEndFunction = then;
		this.pathOnlyRelatedTo = this.inPermanent;
	}
	,isAtGroundLevel: function() {
		return this.relativeY < 5;
	}
	,changeFloor: function(then) {
		var yTo = this.isAtGroundLevel() ? 10 : 0;
		var pool = pooling_Int32ArrayPool.pool;
		var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
		arr[0] = 9;
		arr[1] = yTo;
		this.setPath(arr,0,2,true);
		this.pathEndFunction = then;
		this.pathOnlyRelatedTo = this.inPermanent;
	}
	,changeFloorAndWait: function(waitTime,then) {
		var yTo = this.relativeY == 0 ? 10 : 0;
		var pool = pooling_Int32ArrayPool.pool;
		var arr = pool[4].length > 0 ? pool[4].splice(pool[4].length - 1,1)[0] : new Int32Array(4);
		arr[0] = 9;
		arr[1] = yTo;
		arr[2] = 8;
		arr[3] = waitTime;
		this.setPath(arr,0,4,true);
		this.pathEndFunction = then;
		this.pathOnlyRelatedTo = this.inPermanent;
	}
	,changeFloorAndWaitRandom: function(minTime,maxTime,then) {
		var yTo = this.relativeY == 0 ? 10 : 0;
		var pool = pooling_Int32ArrayPool.pool;
		var arr = pool[4].length > 0 ? pool[4].splice(pool[4].length - 1,1)[0] : new Int32Array(4);
		arr[0] = 9;
		arr[1] = yTo;
		arr[2] = 8;
		arr[3] = random_Random.getInt(minTime,maxTime);
		this.setPath(arr,0,4,true);
		this.pathEndFunction = then;
		this.pathOnlyRelatedTo = this.inPermanent;
	}
	,swapRemoveFromStage: function() {
		var currentLastSprite = this.addedToStage.children[this.addedToStage.children.length - 1];
		this.addedToStage.children[this.stageChildIndex] = currentLastSprite;
		Citizen.spriteCitizens.h[currentLastSprite.__id__].stageChildIndex = this.stageChildIndex;
		this.addedToStage.children[this.addedToStage.children.length - 1] = this.sprite;
		this.addedToStage.removeChildAt(this.addedToStage.children.length - 1);
	}
	,actuallyUpdateDraw: function() {
		if(this.inPermanent != null) {
			this.sprite.position.x = this.inPermanent.position.x + this.relativeX;
			if(this.inPermanent != null && this.inPermanent.isBuilding) {
				if(this.sprite.alpha == 0 || this.sprite.alpha == 1) {
					this.sprite.alpha = this.canViewSelfInBuilding && !this.delayCanViewSelfInBuilding ? 1 : 0;
				}
				this.sprite.position.y = this.inPermanent.position.y + 20 - this.relativeY - 1;
			} else {
				this.sprite.position.y = this.inPermanent.position.y + 20 - this.relativeY;
			}
		} else {
			this.sprite.position.x = this.onWorld.rect.x + this.relativeX;
			this.sprite.position.y = this.onWorld.rect.y - this.relativeY;
		}
		this.updateCull();
	}
	,uncull: function() {
		if(this.addedToStage == null && this.drawOnStage != null) {
			this.stageChildIndex = this.drawOnStage.children.length;
			this.drawOnStage.addChild(this.sprite);
			this.addedToStage = this.drawOnStage;
		}
	}
	,updateCull: function() {
		var newStage;
		if(this.sprite.x >= this.city.cityCullX && this.sprite.y >= this.city.cityCullY && this.sprite.x < this.city.cityCullX2 && this.sprite.y < this.city.cityCullY2) {
			newStage = this.drawOnStage;
		} else {
			newStage = null;
		}
		if(newStage != this.addedToStage) {
			if(this.addedToStage != null) {
				this.swapRemoveFromStage();
			}
			if(newStage != null) {
				this.stageChildIndex = newStage.children.length;
				newStage.addChild(this.sprite);
			}
			this.addedToStage = newStage;
		}
	}
	,addToOnWorldStage: function() {
		this.set_drawOnStage(this.foregroundStage);
	}
	,addToWithAccessoryStage: function() {
		this.set_drawOnStage(this.inBuildingStageNonParticle);
	}
	,addToCorrectStage: function() {
		this.set_drawOnStage(this.inPermanent != null && this.inPermanent.isBuilding ? this.accessorySprite != null ? this.inBuildingStageNonParticle : this.inBuildingStage : this.foregroundStage);
	}
	,setPath: function(path,pathStartPos,pathLength,recyclePathArray) {
		if(recyclePathArray == null) {
			recyclePathArray = false;
		}
		if(this.path != null) {
			console.log("overwriting path");
			console.log(this);
		}
		if(path[pathStartPos] == -1) {
			this.isRequestingPath = false;
			if(this.requestingPathGoal == this.home) {
				this.evictFromHome();
			} else if(this.requestingPathGoal == this.job) {
				this.loseJob();
			} else if(this.requestingPathGoal == this.school) {
				this.leaveSchool();
			}
			if(this.pathOnFail != null) {
				this.pathOnFail();
			}
			if(this.recyclePathArray) {
				pooling_Int32ArrayPool.returnToPool(this.path);
				this.recyclePathArray = false;
			}
			this.path = null;
			this.nextPathPos = -1;
			this.pathEnd = -1;
			this.currentPathAction = null;
			this.verticalPathProgress = 0;
			this.pathEndFunction = null;
			this.requestingPathGoal = null;
			this.pathOnlyRelatedTo = null;
			this.pathWalkSpeed = 1;
			this.pathCanBeReconsidered = true;
			if(this.sprite.alpha > 0 && this.sprite.alpha < 1) {
				this.sprite.alpha = 1;
			}
			return;
		}
		this.pathDestination = this.requestingPathGoal;
		if(this.recyclePathArray) {
			pooling_Int32ArrayPool.returnToPool(this.path);
			this.recyclePathArray = false;
		}
		this.path = null;
		this.nextPathPos = -1;
		this.pathEnd = -1;
		this.currentPathAction = null;
		this.verticalPathProgress = 0;
		this.pathEndFunction = null;
		this.requestingPathGoal = null;
		this.pathOnlyRelatedTo = null;
		this.pathWalkSpeed = 1;
		this.pathCanBeReconsidered = true;
		if(this.sprite.alpha > 0 && this.sprite.alpha < 1) {
			this.sprite.alpha = 1;
		}
		if(pathLength != 0) {
			this.path = path;
			this.nextPathPos = pathStartPos;
			this.pathEnd = pathStartPos + pathLength;
		}
		this.isRequestingPath = false;
		this.recyclePathArray = recyclePathArray;
	}
	,setPathWithEnd: function(path,pathStartPos,pathLength,then,recyclePathArray) {
		if(recyclePathArray == null) {
			recyclePathArray = false;
		}
		this.setPath(path,pathStartPos,pathLength,recyclePathArray);
		this.pathEndFunction = then;
	}
	,setCurrentTexture: function() {
		var tmp = this.get_age() < 16 ? this.childrenTextures[this.spriteIndexActual] : this.adultTextures[this.spriteIndexActual];
		this.sprite.texture = tmp;
		this.actualSpriteHeight = this.get_age() < 16 ? 4 : this.spriteIndexActual == 6 || this.spriteIndexActual == 12 || this.spriteIndexActual == 16 || this.spriteIndexActual == 20 || this.spriteIndexActual == 26 ? 4 : 5;
	}
	,load: function(queue,definition) {
		this.loadBasics(queue,definition);
		this.nameIndex = this.spriteIndex >> 14;
		this.spriteIndexActual = this.spriteIndex - (this.nameIndex << 14);
		if(this.nameIndex == 0) {
			this.nameIndex = random_Random.getInt(1,8000);
		}
		this.likesNightclubs = this.spriteIndex % 5 == 0 ? false : true;
		this.setCurrentTexture();
	}
	,afterLoadingInPermanent: function() {
		this.addToCorrectStage();
		if(this.school == null && this.currentAction == LifeAction.School) {
			this.currentAction = LifeAction.Nothing;
		}
	}
	,getCityPosition: function() {
		var returnPoint = new common_FPoint(0,0);
		if(this.fullyBeingControlled && this.inTransportationThing != null) {
			returnPoint = new common_FPoint(this.inTransportationThing.position.x + 9,this.inTransportationThing.position.y + 16);
		} else if(this.inPermanent != null) {
			returnPoint.x = this.inPermanent.position.x + this.relativeX;
			if((this.inPermanent != null && this.inPermanent.isBuilding ? this.inPermanent : null) != null) {
				returnPoint.y = this.inPermanent.position.y + 20 - this.relativeY - 1;
			} else {
				returnPoint.y = this.inPermanent.position.y + 20 - this.relativeY;
			}
		} else {
			var _this_y;
			var _this_x;
			var _this_y1;
			var _this_x1;
			var _this = this.onWorld.rect;
			_this_x1 = _this.x;
			_this_y1 = _this.y;
			_this_x = _this_x1;
			_this_y = _this_y1;
			var otherPoint_y;
			var otherPoint_x = this.relativeX;
			otherPoint_y = -this.relativeY;
			returnPoint = new common_FPoint(_this_x + otherPoint_x,_this_y + otherPoint_y);
		}
		if(this.path != null) {
			if(this.currentPathAction == 0) {
				returnPoint.y -= this.verticalPathProgress;
			} else if(this.currentPathAction == 1) {
				returnPoint.y += this.verticalPathProgress;
			}
		}
		return returnPoint;
	}
	,onClick: function() {
		gui_FollowingCitizen.createWindow(this.city,this);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(Citizen.saveDefinition);
		}
		var value = this.hasBuildingInited ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.spriteIndex;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var value2 = this.relativeX;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
		var value3 = this.bornOn;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value3);
		queue.size += 8;
		var value4 = this.actualWorkTimePreference;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes4 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes4,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value4);
		queue.size += 8;
		queue.addString(this.currentAction[0]);
		var value5 = this.hasWorkTools ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes5 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes5,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value5);
		queue.size += 4;
		var value6 = this.lastInfrequentUpdateAge;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes6 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes6,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value6);
		queue.size += 8;
		var value7 = this.dieAgeModifier;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes7 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes7,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value7);
		queue.size += 8;
		var value8 = this.educationLevel;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes8 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes8,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value8);
		queue.size += 8;
	}
	,loadBasics: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["hasBuildingInited"] != null ? loadMap.existsReserved("hasBuildingInited") : loadMap.h.hasOwnProperty("hasBuildingInited")) {
			this.hasBuildingInited = __map_reserved["hasBuildingInited"] != null ? loadMap.getReserved("hasBuildingInited") : loadMap.h["hasBuildingInited"];
		}
		if(__map_reserved["spriteIndex"] != null ? loadMap.existsReserved("spriteIndex") : loadMap.h.hasOwnProperty("spriteIndex")) {
			this.spriteIndex = __map_reserved["spriteIndex"] != null ? loadMap.getReserved("spriteIndex") : loadMap.h["spriteIndex"];
		}
		if(__map_reserved["relativeX"] != null ? loadMap.existsReserved("relativeX") : loadMap.h.hasOwnProperty("relativeX")) {
			this.relativeX = __map_reserved["relativeX"] != null ? loadMap.getReserved("relativeX") : loadMap.h["relativeX"];
		}
		if(__map_reserved["bornOn"] != null ? loadMap.existsReserved("bornOn") : loadMap.h.hasOwnProperty("bornOn")) {
			this.bornOn = __map_reserved["bornOn"] != null ? loadMap.getReserved("bornOn") : loadMap.h["bornOn"];
		}
		if(__map_reserved["actualWorkTimePreference"] != null ? loadMap.existsReserved("actualWorkTimePreference") : loadMap.h.hasOwnProperty("actualWorkTimePreference")) {
			this.actualWorkTimePreference = __map_reserved["actualWorkTimePreference"] != null ? loadMap.getReserved("actualWorkTimePreference") : loadMap.h["actualWorkTimePreference"];
		}
		if(__map_reserved["currentAction"] != null ? loadMap.existsReserved("currentAction") : loadMap.h.hasOwnProperty("currentAction")) {
			this.currentAction = __map_reserved["currentAction"] != null ? loadMap.getReserved("currentAction") : loadMap.h["currentAction"];
		}
		if(__map_reserved["hasWorkTools"] != null ? loadMap.existsReserved("hasWorkTools") : loadMap.h.hasOwnProperty("hasWorkTools")) {
			this.hasWorkTools = __map_reserved["hasWorkTools"] != null ? loadMap.getReserved("hasWorkTools") : loadMap.h["hasWorkTools"];
		}
		if(__map_reserved["lastInfrequentUpdateAge"] != null ? loadMap.existsReserved("lastInfrequentUpdateAge") : loadMap.h.hasOwnProperty("lastInfrequentUpdateAge")) {
			this.lastInfrequentUpdateAge = __map_reserved["lastInfrequentUpdateAge"] != null ? loadMap.getReserved("lastInfrequentUpdateAge") : loadMap.h["lastInfrequentUpdateAge"];
		}
		if(__map_reserved["dieAgeModifier"] != null ? loadMap.existsReserved("dieAgeModifier") : loadMap.h.hasOwnProperty("dieAgeModifier")) {
			this.dieAgeModifier = __map_reserved["dieAgeModifier"] != null ? loadMap.getReserved("dieAgeModifier") : loadMap.h["dieAgeModifier"];
		}
		if(__map_reserved["educationLevel"] != null ? loadMap.existsReserved("educationLevel") : loadMap.h.hasOwnProperty("educationLevel")) {
			this.educationLevel = __map_reserved["educationLevel"] != null ? loadMap.getReserved("educationLevel") : loadMap.h["educationLevel"];
		}
		this.postLoad();
	}
	,__class__: Citizen
};
var GameState = function() { };
$hxClasses["GameState"] = GameState;
GameState.__name__ = ["GameState"];
GameState.prototype = {
	__class__: GameState
};
var City = function(game,stage,storyName,displayOnly,cityFile) {
	if(cityFile == null) {
		cityFile = "fpc_save";
	}
	if(displayOnly == null) {
		displayOnly = false;
	}
	this.previousCullRectangle = null;
	this.permanentNumberCached = null;
	this.updateConnectedBuildingSprites = false;
	this.isLoserState = false;
	this.skyColor = 0;
	this.saveRawDataToReuse = null;
	this.currentlySaving = false;
	this.secondsSinceAutoSave = 0.0;
	this.simulationSpeed = 1.0;
	this.windowRelatedOnBuildOrDestroy = null;
	this.zoomScale = 2;
	this.fixViewBottomYOn = null;
	this.specialAction = null;
	this.postCreateBuilder = null;
	this.misdirector = null;
	this.maxPermanentID = 0;
	this.worlds = [];
	this.hoverHighlightSetThisStep = false;
	this.cityCullX = 0;
	this.cityCullY = 0;
	this.cityCullX2 = 1;
	this.cityCullY2 = 1;
	this.zoomScale = Math.max(game.scaling,this.zoomScale);
	this.game = game;
	this.outerStage = stage;
	this.displayOnly = displayOnly;
	this.cityFile = cityFile;
	this.buildingMode = BuildingMode.Normal;
	this.materials = new Materials();
	this.permanentsByID = new haxe_ds_IntMap();
	this.permanents = [];
	this.workBuildings = [];
	this.upgrades = new cityUpgrades_CityUpgrades(this);
	this.teleporters = [];
	this.landingSites = [];
	this.connections = new simulation_CityConnections(this);
	this.progress = new progress_GameProgress(this,storyName);
	this.progress.init();
	this.viewPos = new common_FPoint(225,150);
	this.cityView = new CityView(this);
	this.sky = new PIXI.Graphics();
	this.updateSky(0);
	this.outerStage.addChild(this.sky);
	this.starStage = new PIXI.Container();
	this.outerStage.addChild(this.starStage);
	this.stars = new graphics_Stars(this.starStage,this);
	this.movingViewStage = new PIXI.Container();
	this.outerStage.addChild(this.movingViewStage);
	this.movingViewStage.position.set(game.addX,game.addY);
	this.mainMovingViewStage = new PIXI.Container();
	this.movingViewStage.addChild(this.mainMovingViewStage);
	this.cityBgStage = new graphics_CachingContainer(new common_Rectangle(-1024,-1024,2048,2048));
	this.mainMovingViewStage.addChild(this.cityBgStage);
	if(game.isMobile) {
		this.citizenInBuildingStage = new PIXI.Container();
	} else {
		this.citizenInBuildingStage = new PIXI.particles.ParticleContainer(10000,{ position : true, alpha : true, uvs : true, scale : false});
	}
	this.mainMovingViewStage.addChild(this.citizenInBuildingStage);
	this.citizenInBuildingStageNonParticle = new PIXI.Container();
	this.mainMovingViewStage.addChild(this.citizenInBuildingStageNonParticle);
	this.aboveCitizensInBuildingStage = new PIXI.Container();
	this.mainMovingViewStage.addChild(this.aboveCitizensInBuildingStage);
	var particleStage = new PIXI.Container();
	this.mainMovingViewStage.addChild(particleStage);
	this.particles = new graphics_Particles(particleStage);
	this.cityMidStage = new graphics_CachingContainer(new common_Rectangle(-1024,-1024,2048,2048));
	this.mainMovingViewStage.addChild(this.cityMidStage);
	this.cityStage = new graphics_CachingContainer(new common_Rectangle(-1024,-1024,2048,2048));
	this.mainMovingViewStage.addChild(this.cityStage);
	this.justAboveCityStage = new PIXI.Container();
	this.mainMovingViewStage.addChild(this.justAboveCityStage);
	this.builderStage = new PIXI.Container();
	this.mainMovingViewStage.addChild(this.builderStage);
	if(game.isMobile) {
		this.citizenForegroundStage = new PIXI.Container();
	} else {
		this.citizenForegroundStage = new PIXI.particles.ParticleContainer(5000,{ position : true, uvs : true, scale : false});
	}
	this.mainMovingViewStage.addChild(this.citizenForegroundStage);
	this.farForegroundStage = new PIXI.Container();
	this.mainMovingViewStage.addChild(this.farForegroundStage);
	this.furtherForegroundStage = new PIXI.Container();
	this.mainMovingViewStage.addChild(this.furtherForegroundStage);
	this.builderHighlightStage = new PIXI.Container();
	this.furtherForegroundStage.addChild(this.builderHighlightStage);
	this.hoverHighlightStage = new PIXI.Container();
	this.furtherForegroundStage.addChild(this.hoverHighlightStage);
	this.hoverHighlightStage2 = new PIXI.Container();
	this.furtherForegroundStage.addChild(this.hoverHighlightStage2);
	this.furtherForegroundTempStage = new PIXI.Container();
	this.furtherForegroundStage.addChild(this.furtherForegroundTempStage);
	this.simulation = new CitySimulation(this,this.citizenForegroundStage,this.citizenInBuildingStage,this.citizenInBuildingStageNonParticle);
	this.guiStage = new PIXI.Container();
	if(displayOnly) {
		this.guiStage.visible = false;
	}
	this.outerStage.addChild(this.guiStage);
	this.gui = new gui_CityGUI(game,this.guiStage,this);
	this.set_pauseGame(false);
	if(!Game.isLoading) {
		this.progress.story.makeWorlds(game,this.cityStage,this.cityMidStage,this.cityBgStage);
		this.createBottomWorld();
		this.progress.story.start();
		this.updateDrawCachingRectSize();
	}
	if(!Game.isLoading) {
		this.connections.updateCityConnections();
		this.simulation.pathfinder.sendPathfindingInfo();
	}
	worldResources_AlienRuins.alreadyFoundBonuses = [];
	this.simulation.time.updateSky();
	this.secondsSinceAutoSave = 0;
	this.resize();
	if(Config.enableCheats) {
		window.cheatMaterials = $bind(this,this.cheatMaterials);
		window.cheatPeople = $bind(this,this.cheatPeople);
		window.cheatUnlocks = $bind(this,this.cheatUnlocks);
		window.cheatSpeed = function() {
			Config.cheatSpeedEnabled = true;
		};
		window.cheatMaterialsZero = $bind(this,this.cheatMaterialsZero);
		window.cheatFood = $bind(this,this.cheatFood);
		window.cheatWood = $bind(this,this.cheatWood);
	}
	this.viewActions = new cityActions_ViewActions(this);
};
$hxClasses["City"] = City;
City.__name__ = ["City"];
City.__interfaces__ = [GameState];
City.prototype = {
	get_publicGUI: function() {
		return this.gui;
	}
	,get_displayWidth: function() {
		return Math.floor(this.game.rect.width * this.game.scaling / this.zoomScale);
	}
	,get_displayHeight: function() {
		return Math.floor(this.game.rect.height * this.game.scaling / this.zoomScale);
	}
	,set_pauseGame: function(val) {
		this.pauseGame = val;
		this.gui.pausedForWindow = false;
		return this.pauseGame;
	}
	,disableDisplayOnlyMode: function(newSaveFile) {
		this.displayOnly = false;
		this.guiStage.visible = true;
		this.cityFile = newSaveFile;
	}
	,setHoverHightlight: function(forThesePermanents,outlineColor) {
		var ind = 0;
		var ind2 = 0;
		if(this.hoverHighlightSetThisStep) {
			ind = this.hoverHighlightStage.children.length;
			ind2 = this.hoverHighlightStage2.children.length;
		}
		var _g = 0;
		var _g1 = this.permanents;
		while(_g < _g1.length) {
			var pm = _g1[_g];
			++_g;
			var desiredTexture = forThesePermanents(pm);
			if(desiredTexture != null) {
				if(ind >= this.hoverHighlightStage.children.length) {
					this.hoverHighlightStage.addChild(new PIXI.Sprite());
				}
				var thisSprite = this.hoverHighlightStage.children[ind];
				thisSprite.position.set(pm.position.x - 1,pm.position.y - 1);
				thisSprite.texture = desiredTexture;
				thisSprite.alpha = 0.5 + (Math.sin(this.gui.guiTimer / 10) + 1) / 4;
				++ind;
				if(ind2 >= this.hoverHighlightStage2.children.length) {
					this.hoverHighlightStage2.addChild(new PIXI.Sprite());
				}
				var thisSprite1 = this.hoverHighlightStage2.children[ind2];
				thisSprite1.position.set(pm.position.x - 1,pm.position.y - 1);
				thisSprite1.texture = Resources.getTexture("spr_whiteoutline");
				thisSprite1.tint = outlineColor;
				thisSprite1.alpha = 1;
				++ind2;
			}
		}
		if(ind < this.hoverHighlightStage.children.length) {
			this.hoverHighlightStage.removeChildren(ind);
		}
		if(ind2 < this.hoverHighlightStage2.children.length) {
			this.hoverHighlightStage2.removeChildren(ind2);
		}
		this.hoverHighlightSetThisStep = true;
	}
	,updateDrawCachingRectSize: function() {
		var cacheRect = new common_Rectangle(0,0,1024,1024);
		if(this.worlds.length > 0) {
			cacheRect = new common_Rectangle(common_ArrayExtensions.min(this.worlds,function(w) {
				return w.rect.x;
			}).rect.x,common_ArrayExtensions.max(this.worlds,function(w1) {
				return w1.rect.get_y2();
			}).rect.get_y2() - 2040,2046,2046);
		}
		this.cityStage.cacheWithinRect = cacheRect;
		this.cityBgStage.cacheWithinRect = cacheRect;
		this.cityMidStage.cacheWithinRect = cacheRect;
	}
	,stop: function() {
		if(!this.displayOnly) {
			this.saveToBrowserStorage();
		}
		this.simulation.stop();
		var _g = 0;
		var _g1 = this.worlds;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			w.cleanup();
		}
		this.cityStage.removeCache();
		this.cityBgStage.removeCache();
		this.cityMidStage.removeCache();
	}
	,pause: function() {
		if(!this.pauseGame) {
			this.pausedForUnfocused = true;
			this.set_pauseGame(true);
		}
	}
	,resume: function() {
		if(this.pauseGame && this.pausedForUnfocused) {
			this.pausedForUnfocused = false;
			this.set_pauseGame(false);
		}
	}
	,handleMouse: function(mouse) {
		if(this.displayOnly || this.pauseGame && this.pausedForUnfocused) {
			return false;
		}
		if((!this.pauseGame || this.gui.pausedForWindow) && !common_ArrayExtensions.contains(this.gui.windowStackMeta,"GameMenu") && mouse.pressed) {
			common_PokiHelpers.reportStartGameplay();
		}
		var scrollbarZoomHandled = false;
		if(!this.cityView.isDraggingView) {
			if(this.gui.handleMouse(mouse)) {
				return true;
			}
			this.cityView.handleScrollbarZoom(mouse);
			scrollbarZoomHandled = true;
			if(this.cityView.handleEarlyMouse(mouse)) {
				return true;
			}
			if(!this.isLoserState) {
				if(this.simulation.handleMouse(mouse)) {
					return true;
				}
				if(this.builder != null) {
					if(this.builder.handleMouse(mouse)) {
						return true;
					}
				}
				var _g = 0;
				var _g1 = this.worlds;
				while(_g < _g1.length) {
					var world = _g1[_g];
					++_g;
					if(world.handleMouse(mouse)) {
						return true;
					}
				}
			}
			if(mouse.pressed && mouse.disableCityMovement) {
				mouse.disableCityMovement = false;
			}
			if(this.cityView.handleMouse(mouse)) {
				return true;
			}
		}
		if(!scrollbarZoomHandled) {
			this.cityView.handleScrollbarZoom(mouse);
		}
		mouse.releaseAllClaims();
		return false;
	}
	,update: function(timeMod) {
		if(this.game.mouse.rightPressed && this.buildingMode == BuildingMode.Destroy) {
			this.buildingMode = BuildingMode.Normal;
		}
		if(!this.displayOnly && (this.game.keyboard.pressed[32] || this.game.keyboard.pressed[Keyboard.getLetterCode("P")])) {
			this.set_pauseGame(!this.pauseGame);
			if(this.pauseGame) {
				common_PokiHelpers.reportStopGameplay();
			}
		}
		if((!this.pauseGame || this.gui.pausedForWindow) && !common_ArrayExtensions.contains(this.gui.windowStackMeta,"GameMenu") && this.game.keyboard.anyKey()) {
			common_PokiHelpers.reportStartGameplay();
		}
		var usedSimulationSpeed = this.pauseGame ? 0 : this.simulationSpeed * 0.6666666666666666666;
		var _g = 0;
		var _g1 = this.worlds;
		while(_g < _g1.length) {
			var world = _g1[_g];
			++_g;
			world.update(timeMod * usedSimulationSpeed);
		}
		this.particles.update(timeMod * usedSimulationSpeed);
		if(this.builder != null) {
			this.builder.update(timeMod);
		} else if(this.game.isMobile) {
			this.builderHighlightStage.removeChildren();
		}
		if(!this.displayOnly) {
			this.gui.update(timeMod);
		}
		var nextWholeSimulationSpeed = Math.ceil(usedSimulationSpeed / 1.67);
		this.cityCullX = this.viewPos.x - this.get_displayWidth() / 2 - 5;
		this.cityCullY = this.viewPos.y - this.get_displayHeight() / 2 + 5;
		this.cityCullX2 = this.cityCullX + this.get_displayWidth() + 10;
		this.cityCullY2 = this.cityCullY + this.get_displayHeight() + 10;
		var _g11 = 0;
		var _g2 = nextWholeSimulationSpeed;
		while(_g11 < _g2) {
			var i = _g11++;
			this.simulation.update(timeMod * (usedSimulationSpeed / nextWholeSimulationSpeed));
		}
		this.simulation.prevTimeMod = timeMod * usedSimulationSpeed;
		if(nextWholeSimulationSpeed == 0) {
			this.simulation.updateWhilePaused();
		}
		this.stars.update();
		this.progress.update(timeMod);
		if(!this.displayOnly) {
			common_AdHelper.cityUpdate(this,this.game.mouse);
		}
		if(!this.displayOnly) {
			this.cityView.handleMouseMovement(timeMod);
			this.cityView.handleKeyboardMove(timeMod);
		}
		if(!this.displayOnly) {
			this.handleAutoSave(timeMod);
		}
		if(!this.displayOnly) {
			this.gui.lateUpdate();
		}
		if(this.updateConnectedBuildingSprites) {
			var _g3 = 0;
			var _g12 = this.permanents;
			while(_g3 < _g12.length) {
				var pm = _g12[_g3];
				++_g3;
				if(pm.isBuilding) {
					var bl = pm;
					var ambd = bl.drawer;
					ambd.positionSpritesMerging();
				}
			}
			this.updateConnectedBuildingSprites = false;
		}
		var cullRectangle = new common_FRectangle(this.viewPos.x - this.get_displayWidth() / 2 - 1,this.viewPos.y - this.get_displayHeight() / 2 - 1,this.get_displayWidth() + 2,this.get_displayHeight() + 2);
		if(this.previousCullRectangle == null || this.previousCullRectangle.x != cullRectangle.x || this.previousCullRectangle.y != cullRectangle.y || this.previousCullRectangle.width != cullRectangle.width || this.previousCullRectangle.height != cullRectangle.height) {
			this.simulation.recomputeCull();
			this.previousCullRectangle = cullRectangle.clone();
		}
		this.cityBgStage.preDraw(cullRectangle);
		this.cityStage.preDraw(cullRectangle);
		this.cityMidStage.preDraw(cullRectangle);
	}
	,uncull: function() {
		this.cityBgStage.uncull();
		this.cityStage.uncull();
		this.cityMidStage.uncull();
		this.simulation.uncull();
	}
	,postDraw: function() {
		this.simulation.lateUpdate();
		this.furtherForegroundTempStage.removeChildren();
		if(!this.hoverHighlightSetThisStep) {
			this.hoverHighlightStage.removeChildren();
			this.hoverHighlightStage2.removeChildren();
		} else {
			this.hoverHighlightSetThisStep = false;
		}
	}
	,resize: function() {
		if(this.displayOnly) {
			this.zoomScale = this.game.scaling;
		}
		var filterless = false;
		var usedScale = this.zoomScale;
		if(this.zoomScale % 1 < 0.001 || this.zoomScale % 1 > 0.999) {
			filterless = true;
			usedScale = Math.round(this.zoomScale);
		} else {
			usedScale = this.zoomScale;
		}
		this.sky.scale.x = this.sky.scale.y = usedScale;
		this.starStage.scale.x = this.starStage.scale.y = usedScale;
		this.starStage.position.set(usedScale * (this.get_displayWidth() - this.stars.maxStarX) / 2,usedScale * (this.get_displayHeight() - this.stars.maxStarY) / 2);
		this.movingViewStage.scale.x = this.movingViewStage.scale.y = usedScale;
		this.cityView.updateMovingView();
		this.gui.resize();
		this.stars.resize();
		this.simulation.time.updateSky();
	}
	,refocus: function() {
		if(this.game.isMobile) {
			this.cityStage.isInvalid = true;
			this.cityMidStage.isInvalid = true;
			this.cityBgStage.isInvalid = true;
		}
	}
	,updateSky: function(color) {
		this.sky.clear();
		this.skyColor = color;
		this.sky.beginFill(color);
		this.sky.drawRect(0,0,this.get_displayWidth() + 1,this.get_displayHeight() + 1);
		this.sky.endFill();
	}
	,getCityEdges: function() {
		var minX = 0;
		var maxX = 0;
		var minY = 0;
		var maxY = 1;
		var _g = 0;
		var _g1 = this.worlds;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			if(w.rect.height == 0) {
				continue;
			}
			var val2 = w.rect.x;
			if(val2 < minX) {
				minX = val2;
			} else {
				minX = minX;
			}
			var val21 = w.rect.get_x2();
			if(val21 > maxX) {
				maxX = val21;
			} else {
				maxX = maxX;
			}
			var val22 = w.rect.y - 20 * common_ArrayExtensions.max(w.permanents,function(permanents) {
				return permanents.length;
			}).length;
			if(val22 < minY) {
				minY = val22;
			} else {
				minY = minY;
			}
			var val23 = w.rect.get_y2();
			if(val23 > maxY) {
				maxY = val23;
			} else {
				maxY = maxY;
			}
		}
		return { minX : minX, maxX : maxX, minY : minY, maxY : maxY};
	}
	,getPermanentAtPos: function(xx,yy) {
		var _g = 0;
		var _g1 = this.worlds;
		while(_g < _g1.length) {
			var thisWorld = _g1[_g];
			++_g;
			var perms = thisWorld.permanents;
			var preRelY = thisWorld.rect.y - (yy + 1);
			var relX = (xx - thisWorld.rect.x) / 20 | 0;
			var relY = preRelY < 0 ? -1 : preRelY / 20 | 0;
			if(relX >= 0 && relX < perms.length) {
				var thesePerms = thisWorld.permanents[relX];
				if(relY >= 0 && relY < thesePerms.length) {
					return thesePerms[relY];
				}
			}
		}
		return null;
	}
	,fixViewBottom: function(onY) {
		this.fixViewBottomYOn = onY;
	}
	,createOrRemoveBuilder: function(buildingType,neverRemove) {
		if(neverRemove == null) {
			neverRemove = false;
		}
		var canPrevalidatePossibly = false;
		if(this.builder != null && this.builder.get_buildingToBuild() == buildingType) {
			if(!neverRemove) {
				this.builder.cancel();
			}
			return;
		}
		if(this.builder != null) {
			canPrevalidatePossibly = this.builder.isCacheValid();
		}
		var this1 = this.progress.resources.buildingInfo;
		var key = Type.getClassName(buildingType);
		var _this = this1;
		var newBuildingInfo = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var canPrevalidateCache = false;
		if(this.builder != null) {
			var _g = this.builder.builderType;
			if(_g[1] == 0) {
				var info = _g[3];
				canPrevalidateCache = common_ArrayExtensions.contains(newBuildingInfo.specialInfo,"rooftop") == common_ArrayExtensions.contains(info.specialInfo,"rooftop");
			}
			this.builder.cancel();
		}
		if(this.specialAction != null) {
			this.specialAction.deactivate();
		}
		this.builder = new Builder(this,this.builderStage,BuilderType.Building(buildingType,newBuildingInfo));
		if(canPrevalidateCache && canPrevalidatePossibly) {
			this.builder.prevalidateCache();
		}
		if(this.postCreateBuilder != null) {
			this.postCreateBuilder();
		}
	}
	,createOrRemoveDecorationBuilder: function(decorationInfo) {
		var tmp;
		if(this.builder != null) {
			var _g = this.builder.builderType;
			var tmp1;
			if(_g[1] == 1) {
				var d = _g[2];
				tmp1 = d.name;
			} else {
				tmp1 = "";
			}
			tmp = tmp1 == decorationInfo.name;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.builder.cancel();
			return;
		}
		if(this.builder != null) {
			this.builder.cancel();
		}
		if(this.specialAction != null) {
			this.specialAction.deactivate();
		}
		this.builder = new Builder(this,this.builderStage,BuilderType.Decoration(decorationInfo));
		if(this.postCreateBuilder != null) {
			this.postCreateBuilder();
		}
	}
	,createOrRemoveWorldResourceBuilder: function(resourceInfo) {
		var tmp;
		if(this.builder != null) {
			var _g = this.builder.builderType;
			var tmp1;
			if(_g[1] == 2) {
				var w = _g[2];
				tmp1 = w;
			} else {
				tmp1 = null;
			}
			tmp = tmp1 == resourceInfo;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.builder.cancel();
			return;
		}
		if(this.builder != null) {
			this.builder.cancel();
		}
		if(this.specialAction != null) {
			this.specialAction.deactivate();
		}
		this.builder = new Builder(this,this.builderStage,BuilderType.WorldResource(resourceInfo));
		if(this.postCreateBuilder != null) {
			this.postCreateBuilder();
		}
	}
	,activateSpecialCityAction: function(newSpecialAction) {
		if(this.builder != null) {
			this.builder.cancel();
		}
		if(this.specialAction != null) {
			this.specialAction.deactivate();
		}
		this.specialAction = newSpecialAction;
		this.specialAction.activate();
	}
	,findPermanentByID: function(id) {
		return this.permanentsByID.h[id];
	}
	,handleAutoSave: function(timeMod) {
		this.secondsSinceAutoSave += timeMod / 60;
		if(this.secondsSinceAutoSave > 1.95 && !this.currentlySaving && !this.isLoserState) {
			this.saveToBrowserStorage(this.cityFile);
		}
	}
	,saveToBrowserStorage: function(fileName) {
		var _gthis = this;
		if(fileName == null) {
			fileName = this.cityFile;
		}
		var saveFile = this.saveToUIntArray();
		this.currentlySaving = true;
		common_Storage.setItem(fileName,saveFile,function() {
			_gthis.secondsSinceAutoSave = 0;
			_gthis.currentlySaving = false;
		});
		gamesave_SaveMetaData.saveMetaData(fileName,this);
	}
	,saveToString: function() {
		return this.save().toBase64();
	}
	,saveToUIntArray: function() {
		return this.save().getData();
	}
	,save: function() {
		var queue = new gamesave_ResizingBytesQueue(this.saveRawDataToReuse);
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			var tmp = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes = tmp;
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,-1234);
		queue.size += 4;
		queue.addString(this.progress.story.storyName);
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			var tmp1 = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes = tmp1;
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,27);
		queue.size += 4;
		Settings.saveToCitySave(queue);
		var value = this.worlds.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			var tmp2 = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes = tmp2;
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		Lambda.iter(this.worlds,function(w) {
			w.save(queue);
		});
		this.progress.save(queue);
		this.simulation.save(queue);
		this.saveBasics(queue);
		this.materials.save(queue);
		this.upgrades.save(queue);
		this.saveRawDataToReuse = queue.bytes;
		return queue;
	}
	,createBottomWorld: function() {
		var boundaries = this.getCityEdges();
		this.worlds.push(new World(this.game,this,this.cityStage,this.cityMidStage,this.cityBgStage,new common_Rectangle(boundaries.minX - 20,boundaries.maxY + 40,boundaries.maxX - boundaries.minX,0),0));
	}
	,activateLoserState: function() {
		if(this.builder != null) {
			this.builder.cancel();
		}
		this.set_pauseGame(true);
		this.gui.activateLoserState();
		this.isLoserState = true;
	}
	,load: function(queue) {
		if(queue.bytes.getInt32(queue.readStart) == -1234) {
			var intToRead = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead1;
				var stringLength = queue.bytes.getInt32(readPos);
				queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead2;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
			}
		}
		var intToRead3 = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		queue.version = intToRead3;
		if(queue.version >= 14) {
			Settings.loadFromCitySave(queue);
		}
		var intToRead4 = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var num = intToRead4;
		var _g1 = 0;
		var _g = num;
		while(_g1 < _g) {
			var i = _g1++;
			this.worlds.push(World.fromLoad(queue,this.game,this,this.cityStage,this.cityMidStage,this.cityBgStage));
		}
		if(queue.version < 24) {
			this.createBottomWorld();
		}
		this.updateDrawCachingRectSize();
		this.progress.load(queue);
		this.simulation.load(queue);
		this.loadBasics(queue);
		this.materials.load(queue);
		if(queue.version >= 4) {
			this.upgrades.load(queue);
		}
		this.cityView.updateMovingViewStagePosition();
		this.connections.updateCityConnections();
		this.simulation.updatePathfinder(false);
		this.resize();
		var _g2 = 0;
		var _g11 = this.permanents;
		while(_g2 < _g11.length) {
			var pm = _g11[_g2];
			++_g2;
			pm.postCreate();
		}
		this.simulation.afterLoad();
	}
	,getAmountOfPermanentsPerType: function() {
		if(this.permanentNumberCached != null) {
			return this.permanentNumberCached;
		}
		var permanentNumber = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = this.permanents;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var t = Type.getClassName(b == null ? null : js_Boot.getClass(b));
			if(__map_reserved[t] != null ? permanentNumber.existsReserved(t) : permanentNumber.h.hasOwnProperty(t)) {
				var tmp = t;
				var tmp1 = __map_reserved[tmp] != null ? permanentNumber.getReserved(tmp) : permanentNumber.h[tmp];
				var v = tmp1 + 1;
				if(__map_reserved[tmp] != null) {
					permanentNumber.setReserved(tmp,v);
				} else {
					permanentNumber.h[tmp] = v;
				}
			} else if(__map_reserved[t] != null) {
				permanentNumber.setReserved(t,1);
			} else {
				permanentNumber.h[t] = 1;
			}
		}
		this.permanentNumberCached = permanentNumber;
		return permanentNumber;
	}
	,cheatMaterials: function() {
		this.materials.add(new Materials(10000,10000,10000,10000,10000,10000,10000));
	}
	,cheatMaterialsZero: function() {
		this.materials.remove(this.materials);
	}
	,cheatFood: function(food) {
		this.materials.set_food(food);
	}
	,cheatWood: function(wood) {
		this.materials.wood = wood;
	}
	,cheatPeople: function() {
		var _gthis = this;
		var _g = 0;
		while(_g < 100) {
			var i = _g++;
			this.simulation.createCitizen(this.worlds.filter(function(w) {
				return common_ArrayExtensions.any(_gthis.simulation.citizens,function(ct) {
					return ct.onWorld == w;
				});
			})[0],20,null,0);
		}
	}
	,cheatUnlocks: function() {
		var _this = Resources.buildingInfo;
		var building = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(building.hasNext()) {
			var building1 = building.next();
			this.progress.unlocks.unlock(Type.resolveClass("buildings." + building1.className));
			this.progress.unlocks.fullyUnlock(Type.resolveClass("buildings." + building1.className));
		}
	}
	,saveBasics: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(City.saveDefinition);
		}
		var value = this.maxPermanentID;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		queue.addFPoint(this.viewPos);
		var value1 = this.zoomScale;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
	}
	,loadBasics: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["maxPermanentID"] != null ? loadMap.existsReserved("maxPermanentID") : loadMap.h.hasOwnProperty("maxPermanentID")) {
			this.maxPermanentID = __map_reserved["maxPermanentID"] != null ? loadMap.getReserved("maxPermanentID") : loadMap.h["maxPermanentID"];
		}
		if(__map_reserved["viewPos"] != null ? loadMap.existsReserved("viewPos") : loadMap.h.hasOwnProperty("viewPos")) {
			this.viewPos = __map_reserved["viewPos"] != null ? loadMap.getReserved("viewPos") : loadMap.h["viewPos"];
		}
		if(__map_reserved["zoomScale"] != null ? loadMap.existsReserved("zoomScale") : loadMap.h.hasOwnProperty("zoomScale")) {
			this.zoomScale = __map_reserved["zoomScale"] != null ? loadMap.getReserved("zoomScale") : loadMap.h["zoomScale"];
		}
	}
	,__class__: City
};
var CitySimulation = function(city,foregroundStage,inBuildingStage,inBuildingStageNonParticle) {
	this.infrequentUpdateStart = 0;
	this.adultTextures = [];
	this.childrenTextures = [];
	this.citizens = [];
	this.city = city;
	this.foregroundStage = foregroundStage;
	this.inBuildingStageNonParticle = inBuildingStageNonParticle;
	this.inBuildingStage = inBuildingStage;
	this.time = new CityTime(city,this);
	this.childrenTextures = Resources.getTexturesByWidth("spr_children",2);
	this.adultTextures = Resources.getTexturesByWidth("spr_humans",2);
	this.jobAssigner = new simulation_JobAssigner(city,this);
	this.houseAssigner = new simulation_HouseAssigner(city,this);
	this.schoolAssigner = new simulation_SchoolAssigner(city,this);
	this.pathfinder = new pathfinder_PathfinderManager(city);
	this.permanentFinder = new pathfinder_PermanentFinder(city);
	this.flyingPathfinder = new pathfinder_FlyingPathfinder(city);
	this.happiness = new simulation_Happiness(city,this);
	this.babyMaker = new simulation_BabyMaker(city,this);
	this.stats = new simulation_Stats(city,this);
	this.bonuses = new simulation_BonusResults();
	this.flyingSaucers = [];
	this.citizenSpawners = [];
	this.eating = new simulation_Eating(this);
	this.resourcePriorityManager = new simulation_ResourcePriorityManager(city);
	this.fishes = new simulation_FishManager(this);
	this.buildingUpgradesToUpdate = [];
	if(!Game.isLoading) {
		this.initPossibleHobbies();
	} else {
		this.possibleCitizenHobbies = [];
	}
	this.boostManager = new simulation_BoostManager(this);
	this.festivalManager = new simulation_festival_FestivalManager(city,this);
	this.citizenUpdater = new simulation_CitizenUpdater(this);
};
$hxClasses["CitySimulation"] = CitySimulation;
CitySimulation.__name__ = ["CitySimulation"];
CitySimulation.prototype = {
	stop: function() {
		this.pathfinder.terminate();
	}
	,initPossibleHobbies: function() {
		this.possibleCitizenHobbies = [{ hobbyClass : simulation_citizenSpecialActions_ClimbIntoTree, minimumCitizenAmount : 1},{ hobbyClass : simulation_citizenSpecialActions_MoveToEdge, minimumCitizenAmount : 2},{ hobbyClass : simulation_citizenSpecialActions_WatchStars, minimumCitizenAmount : 5},{ hobbyClass : simulation_citizenSpecialActions_Protester, minimumCitizenAmount : 6},{ hobbyClass : simulation_citizenSpecialActions_DanceOnBall, minimumCitizenAmount : 35},{ hobbyClass : simulation_citizenSpecialActions_ClimbOntoRuins, minimumCitizenAmount : 80}];
	}
	,update: function(timeMod) {
		var previousHour = ((this.time.timeSinceStart | 0) / 60 | 0) % 24;
		this.time.update(timeMod);
		if(previousHour >= 23 && ((this.time.timeSinceStart | 0) / 60 | 0) % 24 < 1) {
			this.stats.midnightUpdate();
		}
		this.stats.update(timeMod);
		this.permanentFinder.preUpdate();
		this.pathfinder.distributePaths();
		var i = this.flyingSaucers.length;
		while(--i >= 0) this.flyingSaucers[i].update(timeMod);
		var i1 = this.citizenSpawners.length;
		while(--i1 >= 0) this.citizenSpawners[i1].update(timeMod);
		this.festivalManager.update(timeMod);
		if(this.citizens.length > 0) {
			if(this.festivalManager.hasFestival()) {
				this.festivalManager.updateFestivalCitizens(timeMod);
			} else {
				this.citizenUpdater.update(timeMod);
			}
			if(previousHour < 12 && ((this.time.timeSinceStart | 0) / 60 | 0) % 24 >= 12) {
				var _g = 0;
				var _g1 = this.citizens;
				while(_g < _g1.length) {
					var citizen = _g1[_g];
					++_g;
					citizen.midDayUpdate();
				}
			}
			var val1 = this.citizens.length;
			var val2 = Math.ceil(this.infrequentUpdateStart + this.citizens.length / 60);
			var i2 = val2 < val1 ? val2 : val1;
			var minNumber = Math.ceil(this.infrequentUpdateStart);
			while(--i2 >= minNumber) this.citizens[i2].infrequentUpdate();
			this.infrequentUpdateStart += this.citizens.length / 60;
			if(this.infrequentUpdateStart >= this.citizens.length) {
				this.infrequentUpdateStart = 0;
			}
		}
		this.fishes.update(timeMod);
		this.babyMaker.update(timeMod);
		this.pathfinder.requestAllPaths();
		var _g2 = 0;
		var _g11 = this.city.permanents;
		while(_g2 < _g11.length) {
			var permanent = _g11[_g2];
			++_g2;
			permanent.update(timeMod);
		}
		var _g3 = 0;
		var _g12 = this.buildingUpgradesToUpdate;
		while(_g3 < _g12.length) {
			var bu = _g12[_g3];
			++_g3;
			bu.update(timeMod);
		}
		this.boostManager.update(timeMod);
	}
	,lateUpdate: function() {
		var timeMod = this.prevTimeMod;
		this.jobAssigner.assignJobs();
		this.schoolAssigner.assignSchools();
		this.houseAssigner.assignHouses();
		this.happiness.update(timeMod);
		this.eating.update(timeMod);
	}
	,updateWhilePaused: function() {
		this.stats.update(0);
		this.boostManager.update(0);
		this.prevTimeMod = 0;
		var _g = 0;
		var _g1 = this.citizens;
		while(_g < _g1.length) {
			var citizen = _g1[_g];
			++_g;
			citizen.actuallyUpdateDraw();
		}
	}
	,recomputeCull: function() {
		var _g = 0;
		var _g1 = this.citizens;
		while(_g < _g1.length) {
			var citizen = _g1[_g];
			++_g;
			citizen.updateCull();
		}
	}
	,createCitizen: function(onWorld,age,startInPermanent,startX) {
		if(age == null) {
			age = 0;
		}
		var _gthis = this;
		if(startX == null) {
			if(startInPermanent == null) {
				startX = random_Random.getInt(onWorld.rect.width - 2);
			} else {
				startX = random_Random.getInt(20);
			}
		}
		var newCitizen = new Citizen(this.city,this,this.foregroundStage,this.inBuildingStage,this.inBuildingStageNonParticle,this.adultTextures,this.childrenTextures,onWorld,startX,age,startInPermanent);
		this.citizens.push(newCitizen);
		var isPossibleHobby = function(hobby) {
			return _gthis.citizens.length >= hobby.minimumCitizenAmount;
		};
		if(this.possibleCitizenHobbies.length > 0 && common_ArrayExtensions.any(this.possibleCitizenHobbies,isPossibleHobby)) {
			var hobby1 = random_Random.fromArray(this.possibleCitizenHobbies.filter(isPossibleHobby));
			newCitizen.setHobby(Type.createInstance(hobby1.hobbyClass,[newCitizen]));
			HxOverrides.remove(this.possibleCitizenHobbies,hobby1);
		}
		return newCitizen;
	}
	,updatePathfinder: function(invalidate,invalidateRelatedTo) {
		if(invalidate) {
			this.pathfinder.invalidateAllPaths();
			var _g = 0;
			var _g1 = this.citizens;
			while(_g < _g1.length) {
				var citizen = _g1[_g];
				++_g;
				if(citizen.path != null && (citizen.pathOnlyRelatedTo == null || invalidateRelatedTo == null || invalidateRelatedTo == citizen.pathOnlyRelatedTo)) {
					if(citizen.recyclePathArray) {
						pooling_Int32ArrayPool.returnToPool(citizen.path);
						citizen.recyclePathArray = false;
					}
					citizen.path = null;
					citizen.nextPathPos = -1;
					citizen.pathEnd = -1;
					citizen.currentPathAction = null;
					citizen.verticalPathProgress = 0;
					citizen.pathEndFunction = null;
					citizen.requestingPathGoal = null;
					citizen.pathOnlyRelatedTo = null;
					citizen.pathWalkSpeed = 1;
					citizen.pathCanBeReconsidered = true;
					if(citizen.sprite.alpha > 0 && citizen.sprite.alpha < 1) {
						citizen.sprite.alpha = 1;
					}
				}
			}
			var _g2 = 0;
			var _g11 = this.city.permanents;
			while(_g2 < _g11.length) {
				var permanent = _g11[_g2];
				++_g2;
				permanent.invalidatePathfindingRelatedInfo();
			}
			this.permanentFinder.invalidatePathfindingRelatedInfo();
			this.permanentFinder.requestQueryLimiting(true);
		}
		var _g3 = 0;
		var _g12 = this.city.permanents;
		while(_g3 < _g12.length) {
			var permanent1 = _g12[_g3];
			++_g3;
			permanent1.onCityChange();
		}
		var _g4 = 0;
		var _g13 = this.city.worlds;
		while(_g4 < _g13.length) {
			var world = _g13[_g4];
			++_g4;
			world.onCityChange();
		}
		var _g5 = 0;
		var _g14 = this.fishes.fishes;
		while(_g5 < _g14.length) {
			var fish = _g14[_g5];
			++_g5;
			if(fish.inPermanent != invalidateRelatedTo) {
				fish.pushBackIntoPermanent();
			}
		}
		this.city.permanentNumberCached = null;
		this.pathfinder.sendPathfindingInfo();
	}
	,handleMouse: function(mouse) {
		var hasSpecial = this.city.specialAction != null && this.city.specialAction.get_specialActionID() == "FollowCitizenAction";
		if(this.city.game.keyboard.down[17] || hasSpecial) {
			var _g = mouse.claimMouse(this,null,false);
			switch(_g[1]) {
			case 0:
				return true;
			case 1:
				var nearestCitizen = null;
				var currentDist = 10.0;
				if(this.city.game.isMobile) {
					currentDist = 25.0;
				}
				var _g1 = 0;
				var _g11 = this.citizens;
				while(_g1 < _g11.length) {
					var citizen = _g11[_g1];
					++_g1;
					var cityPos = citizen.getCityPosition();
					var xDist = cityPos.x + 1 - mouse.get_cityX();
					var yDist = cityPos.y - 3 - mouse.get_cityY();
					var distanceToMouse = Math.sqrt(xDist * xDist + yDist * yDist);
					if(distanceToMouse < currentDist) {
						currentDist = distanceToMouse;
						nearestCitizen = citizen;
					}
				}
				if(nearestCitizen != null) {
					nearestCitizen.onClick();
					if(this.city.specialAction != null) {
						this.city.specialAction.deactivate();
					}
				}
				return true;
			case 2:
				return hasSpecial;
			}
		}
		return false;
	}
	,save: function(queue) {
		this.time.save(queue);
		var value = this.citizenSpawners.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			var tmp = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes = tmp;
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		Lambda.iter(this.citizenSpawners,function(s) {
			s.save(queue);
		});
		queue.addString(Citizen.saveDefinition);
		var value1 = this.citizens.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			var tmp1 = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes = tmp1;
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var _g = 0;
		var _g1 = this.citizens;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			var value2 = this.city.worlds.indexOf(c.onWorld);
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes2 = queue.bytes;
				var tmp2 = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes = tmp2;
				queue.bytes.blit(0,oldBytes2,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value2);
			queue.size += 4;
			c.save(queue,false);
			var value3 = c.inPermanent != null ? c.inPermanent.id : -1;
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes3 = queue.bytes;
				var tmp3 = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes = tmp3;
				queue.bytes.blit(0,oldBytes3,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value3);
			queue.size += 4;
			var value4 = c.job == null ? -1 : c.job.id;
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes4 = queue.bytes;
				var tmp4 = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes = tmp4;
				queue.bytes.blit(0,oldBytes4,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value4);
			queue.size += 4;
			var value5 = c.home == null ? -1 : c.home.id;
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes5 = queue.bytes;
				var tmp5 = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes = tmp5;
				queue.bytes.blit(0,oldBytes5,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value5);
			queue.size += 4;
			var value6 = c.school == null ? -1 : c.school.id;
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes6 = queue.bytes;
				var tmp6 = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes = tmp6;
				queue.bytes.blit(0,oldBytes6,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value6);
			queue.size += 4;
		}
		this.happiness.save(queue);
		this.bonuses.save(queue);
		this.jobAssigner.save(queue);
		this.eating.save(queue);
		this.stats.save(queue);
		var _g11 = 0;
		var _g2 = this.citizens.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var citizen = this.citizens[i];
			if(citizen.hobby != null) {
				if(queue.size + 4 > queue.bytes.length) {
					var oldBytes7 = queue.bytes;
					var tmp7 = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
					queue.bytes = tmp7;
					queue.bytes.blit(0,oldBytes7,0,queue.size);
				}
				queue.bytes.setInt32(queue.size,i);
				queue.size += 4;
				var o = citizen.hobby;
				var tmp8 = Type.getClassName(o == null ? null : js_Boot.getClass(o));
				queue.addString(tmp8);
			}
		}
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes8 = queue.bytes;
			var tmp9 = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes = tmp9;
			queue.bytes.blit(0,oldBytes8,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,-1);
		queue.size += 4;
		this.babyMaker.save(queue);
		this.resourcePriorityManager.save(queue);
		this.boostManager.save(queue);
		this.houseAssigner.save(queue);
		this.fishes.save(queue);
		this.festivalManager.save(queue);
	}
	,load: function(queue) {
		this.time.load(queue);
		var intToRead = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var spawnerNumber = intToRead;
		var _g1 = 0;
		var _g = spawnerNumber;
		while(_g1 < _g) {
			var i = _g1++;
			this.citizenSpawners.push(simulation_SpawnFlyingSaucer.fromLoad(queue,this.city.simulation,this.city.farForegroundStage));
		}
		var citizenDefinition;
		var byteToRead = queue.bytes.b[queue.readStart];
		queue.readStart += 1;
		if(byteToRead == 1) {
			var intToRead1 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var readPos = intToRead1;
			var stringLength = queue.bytes.getInt32(readPos);
			citizenDefinition = queue.bytes.getString(readPos + 4,stringLength);
		} else {
			var intToRead2 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var len = intToRead2;
			var str = queue.bytes.getString(queue.readStart,len);
			queue.readStart += len;
			citizenDefinition = str;
		}
		var intToRead3 = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var num = intToRead3;
		var _g11 = 0;
		var _g2 = num;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var c = this.city.worlds;
			var intToRead4 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var c1 = this.createCitizen(c[intToRead4]);
			c1.load(queue,citizenDefinition);
			var intToRead5 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var inPermanentInt = intToRead5;
			if(inPermanentInt != -1) {
				c1.inPermanent = this.city.findPermanentByID(inPermanentInt);
			}
			var intToRead6 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var jobInt = intToRead6;
			if(jobInt != -1) {
				c1.job = this.city.findPermanentByID(jobInt);
				if(c1.job != null) {
					c1.job.workers.push(c1);
				}
			} else if(c1.get_age() > 16) {
				this.jobAssigner.citizensWithoutJob.push(c1);
			}
			var intToRead7 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var homeInt = intToRead7;
			if(homeInt != -1) {
				c1.home = this.city.findPermanentByID(homeInt);
				if(c1.home != null) {
					c1.home.residents.push(c1);
				}
			}
			var intToRead8 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var schoolInt = intToRead8;
			if(schoolInt != -1) {
				c1.school = this.city.findPermanentByID(schoolInt);
				if(c1.school != null) {
					c1.school.students.push(c1);
				}
			}
			c1.afterLoadingInPermanent();
		}
		this.jobAssigner.buildingsHaveWork = true;
		this.houseAssigner.shouldUpdateHouses = true;
		this.schoolAssigner.schoolsShouldBeUpdated = true;
		this.happiness.load(queue);
		this.bonuses.load(queue);
		this.jobAssigner.load(queue);
		this.eating.load(queue);
		if(queue.version >= 2) {
			this.stats.load(queue);
		}
		if(queue.version >= 3) {
			this.initPossibleHobbies();
			var i2;
			while(true) {
				var intToRead9 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				i2 = intToRead9;
				if(!(i2 != -1)) {
					break;
				}
				var cls;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead10 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead10;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					cls = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead11 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead11;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					cls = str1;
				}
				var cls1 = [Type.resolveClass(cls)];
				this.citizens[i2].setHobby(Type.createInstance(cls1[0],[this.citizens[i2]]));
				HxOverrides.remove(this.possibleCitizenHobbies,Lambda.find(this.possibleCitizenHobbies,(function(cls2) {
					return function(h) {
						return h.hobbyClass == cls2[0];
					};
				})(cls1)));
			}
		}
		if(queue.version >= 9) {
			this.babyMaker.load(queue);
		}
		if(queue.version >= 10) {
			this.resourcePriorityManager.load(queue);
		}
		if(queue.version >= 16) {
			this.boostManager.load(queue);
		}
		if(queue.version >= 17) {
			this.houseAssigner.load(queue);
		}
		if(queue.version >= 19) {
			this.fishes.load(queue);
		}
		if(queue.version >= 21) {
			this.festivalManager.load(queue);
		}
	}
	,afterLoad: function() {
		this.festivalManager.afterLoad();
	}
	,uncull: function() {
		var _g = 0;
		var _g1 = this.citizens;
		while(_g < _g1.length) {
			var citizen = _g1[_g];
			++_g;
			citizen.uncull();
		}
	}
	,__class__: CitySimulation
};
var CityTime = function(city,simulation) {
	this.skyColors = [{ color : 2626656, time : 0},{ color : 2626656, time : 4},{ color : 12541833, time : 6},{ color : 12541833, time : 6.5},{ color : 11389183, time : 8.5},{ color : 11389183, time : 11},{ color : 12247804, time : 13},{ color : 12247804, time : 17},{ color : 8872356, time : 20.5},{ color : 8872356, time : 21},{ color : 2626656, time : 23},{ color : 2626656, time : 24}];
	this.minutesPerTick = 0.5;
	this.city = city;
	this.simulation = simulation;
	this.timeSinceStart = 120;
};
$hxClasses["CityTime"] = CityTime;
CityTime.__name__ = ["CityTime"];
CityTime.getBasicTimeString = function(time) {
	if(time > 2880) {
		return "" + Math.floor(time / 1440) + " days";
	}
	if(time > 1440) {
		return "one day";
	}
	if(time > 60) {
		return "" + Math.floor(time / 60) + " hours";
	}
	return "one hour";
};
CityTime.prototype = {
	update: function(timeMod) {
		this.timeSinceStart += timeMod * this.minutesPerTick;
		this.updateSky();
	}
	,updateSky: function() {
		var currentColor = this.getCurrentColor(this.skyColors);
		if(currentColor != null) {
			this.city.updateSky(currentColor);
		}
	}
	,getCurrentColor: function(colors) {
		var rgb = function(col) {
			return { r : col / 65536 | 0, g : (col / 256 | 0) % 256, b : col % 256};
		};
		var _g1 = 0;
		var _g = colors.length;
		while(_g1 < _g) {
			var i = _g1++;
			var thisCol = colors[i];
			var nextCol = colors[i + 1];
			if(this.timeSinceStart / 60 % 24 < nextCol.time) {
				var thisColColor = rgb(thisCol.color);
				var nextColColor = rgb(nextCol.color);
				var lerpVal = (this.timeSinceStart / 60 % 24 - thisCol.time) / (nextCol.time - thisCol.time);
				var val1 = thisColColor.r;
				var val11 = thisColColor.g;
				var val12 = thisColColor.b;
				return (val1 + lerpVal * (nextColColor.r - val1) | 0) * 256 * 256 + (val11 + lerpVal * (nextColColor.g - val11) | 0) * 256 + (val12 + lerpVal * (nextColColor.b - val12) | 0);
			}
		}
		return null;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(CityTime.saveDefinition);
		}
		var value = this.timeSinceStart;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["timeSinceStart"] != null ? loadMap.existsReserved("timeSinceStart") : loadMap.h.hasOwnProperty("timeSinceStart")) {
			this.timeSinceStart = __map_reserved["timeSinceStart"] != null ? loadMap.getReserved("timeSinceStart") : loadMap.h["timeSinceStart"];
		}
	}
	,__class__: CityTime
};
var CityView = function(city) {
	this.remZoomScrollBarMovement = 0;
	this.isDraggingViewTwoPointer = false;
	this.isDraggingView = false;
	this.city = city;
	this.dragPreviousMousePos = new common_FPoint(0,0);
	this.dragDir = new common_FPoint(0,0);
	this.dragDirRemaining = new common_FPoint(0,0);
	this.dragPointerIdentifiers = [0,1];
	this.dragPreviousCityPointerPositions = [null,null];
	this.dragInitialPointerPositions = [null,null];
};
$hxClasses["CityView"] = CityView;
CityView.__name__ = ["CityView"];
CityView.prototype = {
	get_game: function() {
		return this.city.game;
	}
	,handleEarlyMouse: function(mouse) {
		if(mouse.weakClaimForScroll("doCityViewScroll")) {
			if(!mouse.disableCityMovement) {
				this.startViewDrag();
				return true;
			}
		}
		return false;
	}
	,handleMouse: function(mouse) {
		if(!this.isDraggingView && !mouse.disableCityMovement) {
			if(mouse.down) {
				this.startViewDrag();
				return true;
			} else if(mouse.pointerDown.length >= 2) {
				this.startViewDrag();
				return true;
			}
		}
		return false;
	}
	,handleKeyboardMove: function(timeMod) {
		var keyboardXMove = 0.0;
		var keyboardYMove = 0.0;
		var keyboardMoveSpeed = 2.0 + 12.0 / this.city.zoomScale;
		if(this.get_game().keyboard.down[37]) {
			keyboardXMove -= keyboardMoveSpeed * timeMod;
		}
		if(this.get_game().keyboard.down[39]) {
			keyboardXMove += keyboardMoveSpeed * timeMod;
		}
		if(this.get_game().keyboard.down[38]) {
			keyboardYMove -= keyboardMoveSpeed * timeMod;
		}
		if(this.get_game().keyboard.down[40]) {
			keyboardYMove += keyboardMoveSpeed * timeMod;
		}
		if(keyboardXMove != 0 || keyboardYMove != 0) {
			this.city.viewPos.x += keyboardXMove;
			this.city.viewPos.y += keyboardYMove;
			this.updateMovingView();
		}
		if(this.get_game().keyboard.pressed[187] || this.get_game().keyboard.pressed[61]) {
			this.zoomIn();
		}
		if(this.get_game().keyboard.pressed[189] || this.get_game().keyboard.pressed[173]) {
			this.zoomOut();
		}
	}
	,updateMovingView: function() {
		var edges = this.city.getCityEdges();
		var minX = edges.minX;
		var maxX = edges.maxX;
		var minY = edges.minY;
		var maxY = edges.maxY;
		var val = this.city.viewPos.x - this.get_game().addX;
		this.city.viewPos.x = (val < minX ? minX : val > maxX ? maxX : val) + this.get_game().addX;
		var tmp;
		if(this.city.fixViewBottomYOn == null) {
			var val1 = this.city.viewPos.y - this.get_game().addY;
			tmp = (val1 < minY ? minY : val1 > maxY ? maxY : val1) + this.get_game().addY;
		} else {
			tmp = this.city.fixViewBottomYOn - (this.get_game().rect.height / 2 | 0) + this.get_game().addY;
		}
		this.city.viewPos.y = tmp;
		this.updateMovingViewStagePosition();
	}
	,updateMovingViewStagePosition: function() {
		if(this.city.viewIsControlled) {
			this.city.movingViewStage.position.set((-this.city.viewPos.x + this.get_game().addX) * this.city.zoomScale + (this.get_game().rect.width / 2 | 0) * this.get_game().scaling,(-this.city.viewPos.y + this.get_game().addY) * this.city.zoomScale + this.get_game().scaling * (this.get_game().rect.height / 2 | 0));
		} else {
			this.city.movingViewStage.position.set(Math.floor((-this.city.viewPos.x + this.get_game().addX) * this.city.zoomScale + (this.get_game().rect.width / 2 | 0) * this.get_game().scaling),Math.floor((-this.city.viewPos.y + this.get_game().addY) * this.city.zoomScale + this.get_game().scaling * (this.get_game().rect.height / 2 | 0)));
		}
	}
	,handleMouseMovement: function(timeMod) {
		var _gthis = this;
		var mouse = this.get_game().mouse;
		if(!this.city.viewIsControlled || mouse.pointerDown.length >= 2) {
			if(mouse.middlePressed) {
				if(!this.city.viewIsControlled) {
					this.startViewDrag();
				}
			} else if(this.isDraggingView) {
				var shouldBeTwoPointerDrag = mouse.pointerDown.length >= 2;
				if(mouse.pointerDown.length == 0 && !mouse.middleDown && !mouse.down) {
					this.isDraggingView = false;
					this.isDraggingViewTwoPointer = false;
				} else if(shouldBeTwoPointerDrag != this.isDraggingViewTwoPointer) {
					this.startViewDrag();
				} else if(this.isDraggingViewTwoPointer) {
					if(common_ArrayExtensions.any(mouse.pointerDown,function(d) {
						return !common_ArrayExtensions.contains(_gthis.dragPointerIdentifiers,d);
					}) || common_ArrayExtensions.any(this.dragPointerIdentifiers,function(d1) {
						return !common_ArrayExtensions.contains(mouse.pointerDown,d1);
					})) {
						this.startViewDrag();
					} else {
						var _g = [];
						var _g2 = 0;
						var _g1 = this.dragPointerIdentifiers.length;
						while(_g2 < _g1) {
							var i = _g2++;
							_g.push(null);
						}
						var currentPointerCityPositions = _g;
						var _g11 = [];
						var _g3 = 0;
						var _g21 = this.dragPointerIdentifiers.length;
						while(_g3 < _g21) {
							var i1 = _g3++;
							_g11.push(null);
						}
						var currentPointerPositions = _g11;
						var _g31 = 0;
						var _g22 = this.dragPointerIdentifiers.length;
						while(_g31 < _g22) {
							var i2 = _g31++;
							currentPointerCityPositions[i2] = mouse.pointerCityPosition.h[this.dragPointerIdentifiers[i2]];
							currentPointerPositions[i2] = mouse.pointerPosition.h[this.dragPointerIdentifiers[i2]];
						}
						if(common_ArrayExtensions.contains(currentPointerCityPositions,null)) {
							this.startViewDrag();
						} else {
							var _this = common_ArrayExtensions.sumFPoint(currentPointerPositions);
							var withFloat = 1 / currentPointerCityPositions.length;
							var newCenterPointerPos = new common_FPoint(_this.x * withFloat,_this.y * withFloat);
							var _this1 = common_ArrayExtensions.sumFPoint(this.dragInitialPointerPositions);
							var withFloat1 = 1 / this.dragInitialPointerPositions.length;
							var initialCenterPointerPos = new common_FPoint(_this1.x * withFloat1,_this1.y * withFloat1);
							var newPointerDistance = Math.max(1,common_ArrayExtensions.sum(currentPointerPositions,function(pnt) {
								return common_FPoint.distance(newCenterPointerPos,new common_FPoint(pnt.x,pnt.y));
							}));
							var initialPointerDistance = Math.max(1,common_ArrayExtensions.sum(this.dragInitialPointerPositions,function(pnt1) {
								return common_FPoint.distance(initialCenterPointerPos,new common_FPoint(pnt1.x,pnt1.y));
							}));
							var val = newPointerDistance / initialPointerDistance * this.originalTwoFingerDragZoom;
							var minVal = this.get_game().scaling / 2;
							var maxVal = 7 * (this.get_game().scaling / 2);
							this.setZoom(val < minVal ? minVal : val > maxVal ? maxVal : val,mouse);
							if(!this.city.viewIsControlled) {
								var _g32 = 0;
								var _g23 = this.dragPointerIdentifiers.length;
								while(_g32 < _g23) {
									var i3 = _g32++;
									currentPointerCityPositions[i3] = mouse.pointerCityPosition.h[this.dragPointerIdentifiers[i3]];
								}
								var newCenterPosition_y;
								var newCenterPosition_x;
								var _this2 = common_ArrayExtensions.sumFPoint(currentPointerCityPositions);
								var withFloat2 = 1 / currentPointerCityPositions.length;
								newCenterPosition_x = _this2.x * withFloat2;
								newCenterPosition_y = _this2.y * withFloat2;
								var oldCenterPosition_y;
								var oldCenterPosition_x;
								var _this3 = common_ArrayExtensions.sumFPoint(this.dragPreviousCityPointerPositions);
								var withFloat3 = 1 / this.dragPreviousCityPointerPositions.length;
								oldCenterPosition_x = _this3.x * withFloat3;
								oldCenterPosition_y = _this3.y * withFloat3;
								var thisDragDir_y;
								var thisDragDir_x = oldCenterPosition_x - newCenterPosition_x;
								thisDragDir_y = oldCenterPosition_y - newCenterPosition_y;
								this.dragDir.x = this.dragDir.x * 0.4 + 0.6 * thisDragDir_x;
								this.dragDir.y = this.dragDir.y * 0.4 + 0.6 * thisDragDir_y;
								var _this4 = this.city.viewPos;
								var val1 = new common_FPoint(_this4.x + thisDragDir_x,_this4.y + thisDragDir_y);
								this.city.viewPos = val1;
								this.updateMovingView();
							}
							var _g33 = 0;
							var _g24 = this.dragPointerIdentifiers.length;
							while(_g33 < _g24) {
								var i4 = _g33++;
								var tmp = this.dragPreviousCityPointerPositions;
								var tmp1 = this.get_game();
								tmp[i4] = mouse.calcCityFPositionForPointer(tmp1,this.city,this.dragPointerIdentifiers[i4]);
							}
						}
					}
				} else {
					var scaledCityPos;
					if(!mouse.down && mouse.pointerDown.length > 0) {
						scaledCityPos = mouse.pointerCityScaledPosition.h[mouse.pointerDown[0]];
					} else {
						scaledCityPos = mouse.cityScaledPosition;
					}
					var thisDragDir_y1;
					var thisDragDir_x1;
					var _this5 = this.dragPreviousMousePos;
					thisDragDir_x1 = _this5.x - scaledCityPos.x;
					thisDragDir_y1 = _this5.y - scaledCityPos.y;
					this.dragDir.x = this.dragDir.x * 0.4 + 0.6 * thisDragDir_x1;
					this.dragDir.y = this.dragDir.y * 0.4 + 0.6 * thisDragDir_y1;
					var _this6 = this.city.viewPos;
					var val2 = new common_FPoint(_this6.x + thisDragDir_x1,_this6.y + thisDragDir_y1);
					this.city.viewPos = val2;
					this.dragPreviousMousePos = scaledCityPos;
					this.updateMovingView();
				}
			}
			if(!this.isDraggingView) {
				if(mouse.pressed || this.dragDir.get_length() < 0.5) {
					this.dragDir.x = 0;
					this.dragDir.y = 0;
					this.dragDirRemaining.x = 0;
					this.dragDirRemaining.y = 0;
				} else {
					var dragSpeedTimeout = mouse.isTouch ? 0.933 : 0.8;
					this.dragDir.x *= dragSpeedTimeout;
					this.dragDir.y *= dragSpeedTimeout;
					var stepDragDir_y;
					var stepDragDir_x = this.dragDir.x + this.dragDirRemaining.x;
					stepDragDir_y = this.dragDir.y + this.dragDirRemaining.y;
					this.dragDirRemaining.x += this.dragDir.x - stepDragDir_x;
					this.dragDirRemaining.y += this.dragDir.y - stepDragDir_y;
					var _this7 = this.city.viewPos;
					var val3 = new common_FPoint(_this7.x + stepDragDir_x,_this7.y + stepDragDir_y);
					this.city.viewPos = val3;
					this.updateMovingView();
				}
			}
		} else {
			this.isDraggingView = false;
			this.isDraggingViewTwoPointer = false;
		}
	}
	,startViewDrag: function() {
		var mouse = this.get_game().mouse;
		if(mouse.pointerDown.length >= 2) {
			this.dragPointerIdentifiers = mouse.pointerDown.slice();
			var _g = [];
			var _g2 = 0;
			var _g1 = this.dragPointerIdentifiers.length;
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(null);
			}
			this.dragPreviousCityPointerPositions = _g;
			var _g11 = [];
			var _g3 = 0;
			var _g21 = this.dragPointerIdentifiers.length;
			while(_g3 < _g21) {
				var i1 = _g3++;
				_g11.push(null);
			}
			this.dragInitialPointerPositions = _g11;
			var _g31 = 0;
			var _g22 = this.dragPointerIdentifiers.length;
			while(_g31 < _g22) {
				var i2 = _g31++;
				this.dragPreviousCityPointerPositions[i2] = mouse.pointerCityPosition.h[this.dragPointerIdentifiers[i2]];
				this.dragInitialPointerPositions[i2] = mouse.pointerPosition.h[this.dragPointerIdentifiers[i2]];
			}
			this.isDraggingViewTwoPointer = true;
			this.originalTwoFingerDragZoom = this.city.zoomScale;
		} else {
			if(!mouse.down && mouse.pointerDown.length > 0) {
				this.dragPreviousMousePos = mouse.pointerCityScaledPosition.h[mouse.pointerDown[0]];
			} else {
				this.dragPreviousMousePos = mouse.cityScaledPosition;
			}
			this.isDraggingViewTwoPointer = false;
		}
		this.dragDir = new common_FPoint(0,0);
		this.isDraggingView = true;
	}
	,zoomIn: function(mouse) {
		if(this.city.zoomScale < Math.max(7,7 * (this.get_game().scaling / 2))) {
			this.setZoom(Math.round(this.city.zoomScale + 1),mouse);
		}
	}
	,zoomOut: function(mouse) {
		if(this.city.zoomScale > 1) {
			this.setZoom(Math.round(this.city.zoomScale - 1),mouse);
		}
	}
	,setZoom: function(newZoomScale,mouse) {
		var oldCityPos = new common_FPoint(0,0);
		if(mouse != null && this.isDraggingView && this.isDraggingViewTwoPointer) {
			oldCityPos = common_Point.mean(mouse.calcCityPositionForPointer(this.get_game(),this.city,this.dragPointerIdentifiers[0]),mouse.calcCityPositionForPointer(this.get_game(),this.city,this.dragPointerIdentifiers[1]));
		}
		var oldZoomScale = this.city.zoomScale;
		this.city.zoomScale = newZoomScale;
		this.city.resize();
		if(mouse != null) {
			if(this.isDraggingView && this.isDraggingViewTwoPointer) {
				var _g1 = 0;
				var _g = this.dragPointerIdentifiers.length;
				while(_g1 < _g) {
					var i = _g1++;
					var this1 = mouse.pointerCityPosition;
					var k = this.dragPointerIdentifiers[i];
					var v = mouse.calcCityFPositionForPointer(this.get_game(),this.city,this.dragPointerIdentifiers[i]);
					this1.h[k] = v;
				}
			} else {
				var newCityPosition = mouse.calcCityPosition(this.get_game(),this.city);
				this.city.viewPos.x += mouse.cityPosition.x - newCityPosition.x;
				this.city.viewPos.y += mouse.cityPosition.y - newCityPosition.y;
			}
		}
		this.updateMovingView();
	}
	,handleScrollbarZoom: function(mouse) {
		if(mouse.isTouch) {
			return;
		}
		if(Math.abs(this.remZoomScrollBarMovement) < 0.75) {
			this.remZoomScrollBarMovement = 0;
		} else {
			var num = this.remZoomScrollBarMovement;
			this.remZoomScrollBarMovement -= (num > 0 ? 1 : num < 0 ? -1 : 0) * 0.75;
		}
		this.remZoomScrollBarMovement += mouse.scrollBarMovement + mouse.scrollBarMovementPages * this.get_game().rect.height * this.get_game().scaling;
		if(this.remZoomScrollBarMovement >= 15) {
			this.zoomOut(mouse);
			this.remZoomScrollBarMovement = 0;
		} else if(this.remZoomScrollBarMovement <= -15) {
			this.zoomIn(mouse);
			this.remZoomScrollBarMovement = 0;
		}
	}
	,__class__: CityView
};
var Config = function() { };
$hxClasses["Config"] = Config;
Config.__name__ = ["Config"];
Config.get_enableCrossPromo = function() {
	return false;
};
Config.init = function() {
	var _g = 5;
	if(_g == 1) {
		common_KongTools.init();
	}
};
Config.checkSitelock = function() {
	if(Config.siteLockUrls == null) {
		return true;
	}
	return common_ArrayExtensions.any(Config.siteLockUrls,function(slu) {
		return window.location.hostname.indexOf(slu) != -1;
	});
};
Config.gameInit = function(game) {
	var _g = 5;
	switch(_g) {
	case 3:
		common_AdHelper.init(game);
		break;
	case 6:
		common_AdHelper.init(game);
		break;
	case 7:
		common_AdHelper.init(game);
		break;
	}
};
Config.doPlay = function() {
	var _g = 5;
	if(_g == 4) {
		try {
			if(parent.cmgGameEvent) {
				parent.cmgGameEvent("start");
				console.log("coolmath: play event");
			}
		} catch( e ) {
		}
	}
};
Config.showSplashScreen = function(application) {
	var _g = 5;
	switch(_g) {
	case 3:
		jsFunctions.loadJS("site-specific/armorgames/intro.js",function() {
			var playArmorIntro = playArmorGamesIntro;
			playArmorIntro(application.canvas,function() {
				Config.splashScreenDone = true;
			});
		});
		break;
	case 4:
		if(application.renderer != null) {
			application.renderer.backgroundColor = 2368548;
		}
		Config.splashScreen = new common_Splash(application.stage,"site-specific/coolmath/coolmath-splash.png",800,600,application.width,application.height,150.,function() {
			Config.splashScreenDone = true;
			Config.splashScreen = null;
			if(application.renderer != null) {
				application.renderer.backgroundColor = 0;
			}
		});
		break;
	default:
		Config.splashScreenDone = true;
	}
};
Config.resizeSplash = function(application) {
	var _g = 5;
	switch(_g) {
	case 3:
		var resizeArmorIntroFunc = window.resizeArmorGamesIntro;
		if(resizeArmorIntroFunc != null) {
			resizeArmorIntroFunc();
		}
		break;
	case 4:
		if(Config.splashScreen != null) {
			Config.splashScreen.resize(application.width,application.height);
		}
		break;
	default:
	}
};
Config.update = function(timeMod) {
	if(Config.splashScreen != null) {
		Config.splashScreen.update(timeMod);
	}
	var _g = 5;
	switch(_g) {
	case 1:
		common_KongTools.update();
		break;
	case 3:
		common_AdHelper.update(timeMod);
		break;
	case 6:
		common_AdHelper.update(timeMod);
		Config.lastInput += timeMod;
		break;
	case 7:
		common_AdHelper.update(timeMod);
		break;
	}
};
Config.onCitySwitch = function() {
	var _g = 5;
	if(_g == 3) {
		common_AdHelper.showNonRewardedInterstitialIfAllowed();
	}
};
Config.waitForInitialization = function(then) {
	var _g = 5;
	switch(_g) {
	case 6:
		var pokiLoading = window.createLoadingTextP("Loading...");
		jsFunctions.loadJS("//game-cdn.poki.com/scripts/v2/poki-sdk.js",function() {
			var _xy32 = undefined;
			var uu24aa = function() {
				var _0x6e40=["bG9jYWxob3N0","LnBva2kuY29t","LnBva2ktZ2RuLmNvbQ==","host","location","length","indexOf","aHR0cHM6Ly9wb2tpLmNvbS9zaXRlbG9jaw==","href","top"];(function checkInit(){_xy32=true;var _0x6588x2=[_0x6e40[0],_0x6e40[1],_0x6e40[2]];var _0x6588x3=false;var _0x6588x4=window[_0x6e40[4]][_0x6e40[3]];for(var _0x6588x5=0;_0x6588x5< _0x6588x2[_0x6e40[5]];_0x6588x5++){var _0x6588x6=atob(_0x6588x2[_0x6588x5]);if(_0x6588x4[_0x6e40[6]](_0x6588x6,_0x6588x4[_0x6e40[5]]- _0x6588x6[_0x6e40[5]])!==  -1){_0x6588x3= true;break}};if(!_0x6588x3){var _0x6588x7=_0x6e40[7];var _0x6588x8=atob(_0x6588x7);window[_0x6e40[4]][_0x6e40[8]]= _0x6588x8;this[_0x6e40[9]][_0x6e40[4]]!== this[_0x6e40[4]]&& (this[_0x6e40[9]][_0x6e40[4]]= this[_0x6e40[4]])}})();
			};
			PokiSDK.init().then(function() {
				uu24aa();
				window.removeLoadingTextP(pokiLoading);
				var _zxy32 = _xy32;
				if(_zxy32) {
					then();
				}
			})["catch"](function() {
				uu24aa();
				window.removeLoadingTextP(pokiLoading);
				var _zxy32 = _xy32;
				common_PokiHelpers.isAdBlockEnabled = true;
				if(_zxy32) {
					then();
				}
			});
		});
		return;
	case 7:
		return;
	}
	then();
};
Config.handleInput = function(mouse,keyboard) {
	if(5 == 6) {
		if(!Config.noInputYet) {
			Config.hadFullStepWithInput = true;
		}
		if(mouse.released || keyboard.anyKey()) {
			if(Config.noInputYet) {
				var activeObj = mouse.getActiveObject();
				if(activeObj == null || (!js_Boot.__instanceof(activeObj,PIXI.extras.BitmapText) || !activeObj.___PokiDoNotSeeAsInput)) {
					common_AdHelper.showNonRewardedInterstitialIfAllowed();
					Config.noInputYet = false;
				}
			}
			Config.lastInput = 0;
		}
		if(mouse.moved) {
			Config.lastInput = 0;
		}
	}
};
Config.callLoadStart = function() {
	var _g = 5;
	if(_g == 6) {
		PokiSDK.gameLoadingStart();
	}
};
Config.callLoadFinish = function() {
	var _g = 5;
	if(_g == 6) {
		PokiSDK.gameLoadingFinished();
	}
};
Config.callLoadProgress = function(pcDone) {
	var _g = 5;
	if(_g == 6) {
		PokiSDK.gameLoadingProgress({ percentageDone : pcDone});
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var GUI = function(game,outerStage) {
	this.guiTimer = 0;
	this.windowPosition = gui_WindowPosition.Center;
	this.overlayElements = [];
	this.game = game;
	this.outerStage = outerStage;
	this.stage = new PIXI.Container();
	outerStage.addChild(this.stage);
	this.windowStage = new PIXI.Container();
	outerStage.addChild(this.windowStage);
	this.prevWindowStack = [];
	this.windowStackMeta = [];
	this.gameHelpStage = new PIXI.Container();
	outerStage.addChild(this.gameHelpStage);
	this.tooltipStage = new PIXI.Container();
	outerStage.addChild(this.tooltipStage);
	this.tooltip = new gui_Tooltip(game,null,this.tooltipStage);
};
$hxClasses["GUI"] = GUI;
GUI.__name__ = ["GUI"];
GUI.prototype = {
	get_windowHeight: function() {
		return this.game.rect.height - 40;
	}
	,get_keyboard: function() {
		return this.game.keyboard;
	}
	,update: function(timeMod) {
		this.guiTimer += timeMod;
		this.tooltip.update(timeMod);
		var _g = 0;
		var _g1 = this.overlayElements;
		while(_g < _g1.length) {
			var overlayElement = _g1[_g];
			++_g;
			overlayElement.update(timeMod);
		}
		if(this.game.keyboard.pressed[27]) {
			if(this.window != null) {
				this.goPreviousWindow();
			} else {
				this.onEscapePressWithoutWindow();
			}
		}
		if(this.window != null) {
			this.window.update();
		}
		if(this.game.keyboard.down[17] && this.game.keyboard.pressed[121]) {
			this.stage.visible = !this.stage.visible;
		}
	}
	,onEscapePressWithoutWindow: function() {
	}
	,lateUpdate: function() {
		if(this.windowOnLateUpdate != null && this.window != null) {
			this.windowOnLateUpdate();
		}
	}
	,handleMouse: function(mouse) {
		if(this.window != null && this.window.handleMouse(mouse)) {
			return true;
		}
		return false;
	}
	,createWindowInCurrentContext: function(relatedTo,windowBackground) {
		this.createWindow(relatedTo,windowBackground);
	}
	,createWindow: function(relatedTo,windowBackground) {
		this.closeWindow(true);
		this.game.mouse.releaseAllClaims(true);
		var windowBackground1 = new gui_NinePatch(windowBackground == null ? Resources.getTexture("spr_9p_window") : windowBackground,1,4,4);
		this.window = new gui_GUIContainer(this,this.windowStage,null,new common_Point(this.game.rect.width / 2 | 0,this.game.rect.height / 2 | 0),new common_FPoint(0.5,0.5),null,windowBackground1);
		this.window.direction = gui_GUIContainerDirection.Vertical;
		this.windowScrollableOuter = new gui_ContainerWithScrollbar(500,this.get_windowHeight(),this,this.windowStage,this.window);
		this.window.addChild(this.windowScrollableOuter);
		this.windowInner = new gui_GUIContainer(this,this.innerWindowStage,this.windowScrollableOuter,new common_Point(0,0),null,null,null,{ top : 2, right : 2, bottom : 2, left : 2});
		this.windowInner.direction = gui_GUIContainerDirection.Vertical;
		this.windowScrollableOuter.setInnerContainer(this.windowInner);
		this.innerWindowStage = this.windowScrollableOuter.scrollable.stage;
		this.windowRelatedTo = relatedTo;
		this.windowOnLateUpdate = null;
		this.windowPosition = gui_WindowPosition.Center;
		this.windowIsOnStack = false;
	}
	,addWindowToStack: function(windowCreate,onlyIfNotThere,metaData) {
		if(metaData == null) {
			metaData = "";
		}
		if(onlyIfNotThere == null) {
			onlyIfNotThere = true;
		}
		if(this.prevWindowStack.length == 0 || this.prevWindowStack[this.prevWindowStack.length - 1] != windowCreate) {
			this.prevWindowStack.push(windowCreate);
			this.windowStackMeta.push(metaData);
		}
		this.windowIsOnStack = true;
	}
	,clearWindowStack: function() {
		this.prevWindowStack = [];
		this.windowStackMeta = [];
		this.windowIsOnStack = false;
	}
	,setWindowReload: function(func) {
		this.windowReload = func;
	}
	,windowAddBottomButtons: function(extraButtons,textOnCloseButton,closeAction) {
		if(textOnCloseButton == null) {
			textOnCloseButton = "Close";
		}
		var bottomButtons = new gui_GUIContainer(this,this.innerWindowStage,this.windowInner);
		bottomButtons.fillSecondarySize = true;
		this.windowInner.addChild(bottomButtons);
		var addedButtons = [];
		if(extraButtons != null) {
			var _g = 0;
			while(_g < extraButtons.length) {
				var button = extraButtons[_g];
				++_g;
				addedButtons.push(bottomButtons.addChild(new gui_TextButton(this,this.innerWindowStage,bottomButtons,button.action,button.text,null,button.onHover)));
				bottomButtons.addChild(new gui_GUISpacing(bottomButtons,new common_Point(2,2)));
			}
		}
		bottomButtons.addChild(new gui_GUIFiller(bottomButtons,0));
		if(closeAction == null) {
			closeAction = $bind(this,this.goPreviousWindow);
		}
		bottomButtons.addChild(new gui_TextButton(this,this.innerWindowStage,bottomButtons,closeAction,textOnCloseButton));
		return addedButtons;
	}
	,goPreviousWindow: function() {
		this.closeWindow();
		if(this.prevWindowStack.length > 0) {
			if(this.windowIsOnStack) {
				this.prevWindowStack.pop();
				this.windowStackMeta.pop();
				if(this.prevWindowStack.length > 0) {
					this.windowStackMeta.pop();
					(this.prevWindowStack.pop())();
				}
			}
		}
	}
	,closeWindow: function(inProcessOfOpeningAnother) {
		if(inProcessOfOpeningAnother == null) {
			inProcessOfOpeningAnother = false;
		}
		if(this.window != null) {
			this.window.destroy();
			if(this.windowOnDestroy != null) {
				this.windowOnDestroy();
			}
			this.windowOnDestroy = null;
			this.window = null;
			this.windowRelatedTo = null;
			this.windowReload = null;
			this.windowOnLateUpdate = null;
		}
	}
	,windowAddTitleText: function(text,textUpdateFunction) {
		if(text == null) {
			text = "";
		}
		return this.windowAddInfoText(text,textUpdateFunction,"Arial16");
	}
	,windowAddInfoText: function(text,textUpdateFunction,font) {
		if(font == null) {
			font = "Arial";
		}
		if(text == null) {
			text = "";
		}
		return this.windowInner.addChild(new gui_TextElement(this.windowInner,this.innerWindowStage,text,textUpdateFunction,font,null,null,true));
	}
	,windowAddInfoTextClickable: function(onClick,text,textUpdateFunction,font) {
		if(font == null) {
			font = "Arial";
		}
		if(text == null) {
			text = "";
		}
		var textElem = new gui_TextElement(this.windowInner,this.innerWindowStage,text,textUpdateFunction,font,null,null,true);
		textElem.handleMouseFunction = function(mouse) {
			if(textElem.rect.contains(mouse.position)) {
				var _g = mouse.claimMouse(textElem);
				switch(_g[1]) {
				case 0:
					return true;
				case 1:
					onClick();
					return true;
				default:
					return false;
				}
			}
			return false;
		};
		return this.windowInner.addChild(textElem);
	}
	,resize: function() {
		this.outerStage.scale.x = this.outerStage.scale.y = this.game.scaling;
		if(this.window != null) {
			this.updateWindowPosition();
			this.windowScrollableOuter.scrollable.maxHeight = this.get_windowHeight();
			this.windowScrollableOuter.maxHeight = this.get_windowHeight();
			this.windowScrollableOuter.scrollable.updateSize();
		}
	}
	,showSimpleWindow: function(text,header,closeWindowIfAny,inAnyContext) {
		if(inAnyContext == null) {
			inAnyContext = false;
		}
		if(closeWindowIfAny == null) {
			closeWindowIfAny = false;
		}
		if(header == null) {
			header = "";
		}
		if(text == null) {
			text = "";
		}
		if(this.window != null) {
			if(closeWindowIfAny) {
				this.closeWindow();
			} else {
				return false;
			}
		}
		if(inAnyContext) {
			this.createWindowInCurrentContext();
		} else {
			this.createWindow();
		}
		if(header != "") {
			this.windowAddTitleText(header);
		}
		this.windowAddInfoText(text);
		this.windowAddBottomButtons();
		return true;
	}
	,reloadWindow: function(createWindowFunc) {
		if(createWindowFunc == null) {
			createWindowFunc = this.windowReload;
		}
		if(createWindowFunc == null) {
			return;
		}
		var _this = this.windowScrollableOuter.scrollable.scrollPosition;
		var scrollPosition = new common_Point(_this.x,_this.y);
		var windowStackLengthOrig = null;
		var windowStack1 = null;
		var windowStack1Meta = null;
		if(this.windowIsOnStack && this.windowStackMeta.length >= 1) {
			windowStackLengthOrig = this.prevWindowStack.length;
			windowStack1 = this.prevWindowStack.pop();
			windowStack1Meta = this.windowStackMeta.pop();
		}
		createWindowFunc();
		if(this.prevWindowStack.length < windowStackLengthOrig) {
			this.prevWindowStack.push(windowStack1);
			this.windowStackMeta.push(windowStack1Meta);
			this.windowIsOnStack = true;
		}
		this.windowScrollableOuter.forceSetScrollPosition(scrollPosition);
	}
	,setWindowPositioning: function(positioning) {
		this.windowPosition = positioning;
		this.updateWindowPosition();
	}
	,updateWindowPosition: function() {
		var _g = this.windowPosition;
		switch(_g[1]) {
		case 0:
			this.window.origin.x = 0.5;
			this.window.origin.y = 0;
			this.window.updatePosition(new common_Point(this.game.rect.width / 2 | 0,10));
			break;
		case 1:
			this.window.origin.x = 0.5;
			this.window.origin.y = 0.5;
			this.window.updatePosition(new common_Point(this.game.rect.width / 2 | 0,this.game.rect.height / 2 | 0));
			break;
		case 2:
			var offsetToTop = _g[2];
			this.window.origin.x = 0.5;
			this.window.origin.y = 0.5;
			this.window.updatePosition(new common_Point(this.game.rect.width / 2 | 0,(this.game.rect.height / 2 | 0) - offsetToTop));
			break;
		case 3:
			this.window.origin.x = 0;
			this.window.origin.y = 0;
			this.window.updatePosition(new common_Point(10,10));
			break;
		}
	}
	,__class__: GUI
};
var Game = function(application,stage,gameRect,addX,addY,scaling,isMobile) {
	this.tempSavedState = null;
	this.isLargeMobile = false;
	this.isMobile = false;
	this.setOnClickTo = null;
	this.onClick = null;
	this.state = null;
	var _gthis = this;
	this.application = application;
	this.stage = stage;
	this.keyboard = new Keyboard();
	this.audio = new Audio(this);
	this.isMobile = isMobile;
	this.currentlyPausedForReasons = [];
	this.resize(gameRect,addX,addY,scaling);
	this.initInteraction(stage);
	if(isMobile) {
		this.mouse.isTouch = true;
	}
	this.textHelper = new common_TextHelper(this);
	if(!Game.isLoading) {
		this.metaGame = new progress_MetaGame(function() {
			_gthis.createMainMenu();
		});
		this.addImportHandler();
	}
	Config.gameInit(this);
};
$hxClasses["Game"] = Game;
Game.__name__ = ["Game"];
Game.prototype = {
	get_preDPIAdjustScaling: function() {
		return this.scaling / this.application.pixelRatio;
	}
	,createMainMenu: function(withError) {
		this.stopState();
		var mainMenu = new MainMenu(this,this.stage);
		if(withError != null) {
			mainMenu.showError(withError);
		}
		this.state = mainMenu;
		this.afterStateSwitch();
	}
	,tempSaveState: function() {
		this.savedStateStages = this.stage.children.slice();
		this.tempSavedState = this.state;
		this.stage.removeChildren();
	}
	,restoreState: function() {
		this.stopState();
		var _g = 0;
		var _g1 = this.savedStateStages;
		while(_g < _g1.length) {
			var savedStage = _g1[_g];
			++_g;
			this.stage.addChild(savedStage);
		}
		this.state = this.tempSavedState;
		this.state.refocus();
		this.state.resize();
		this.afterStateSwitch();
	}
	,switchState: function(newState,stopCurrent) {
		if(stopCurrent == null) {
			stopCurrent = false;
		}
		if(stopCurrent) {
			this.stopState();
		}
		this.state = newState;
		this.afterStateSwitch();
	}
	,createNewGameState: function(storyName) {
		var _gthis = this;
		this.tempSaveState();
		var onDone = function() {
			_gthis.state = new NewGameCreator(_gthis,_gthis.stage,storyName);
			_gthis.afterStateSwitch();
			_gthis.mouse.releaseAllClaims(true);
		};
		var _this = Resources.storiesInfo;
		if(__map_reserved[storyName] != null ? _this.existsReserved(storyName) : _this.h.hasOwnProperty(storyName)) {
			onDone();
		} else {
			new progress_StoryLoader(storyName,function() {
				onDone();
			},function() {
				_gthis.createMainMenu("Something went wrong while trying to load content required for that scenario! Please check your internet connection and try again.");
				Analytics.sendEvent("game","newGameFailed",null,storyName);
			});
		}
	}
	,newCity: function(storyName,saveFileName,displayOnly) {
		if(displayOnly == null) {
			displayOnly = false;
		}
		var _gthis = this;
		this.stopState();
		var onDone = function() {
			_gthis.state = new City(_gthis,_gthis.stage,storyName,displayOnly,saveFileName);
			_gthis.afterStateSwitch();
			_gthis.mouse.releaseAllClaims(true);
			Config.doPlay();
			Analytics.sendEvent("game","newGame",null,storyName);
		};
		var _this = Resources.storiesInfo;
		if(__map_reserved[storyName] != null ? _this.existsReserved(storyName) : _this.h.hasOwnProperty(storyName)) {
			onDone();
		} else {
			new progress_StoryLoader(storyName,function() {
				onDone();
			},function() {
				_gthis.createMainMenu("Something went wrong while trying to load content required for that scenario! Please check your internet connection and try again.");
				Analytics.sendEvent("game","newGameFailed",null,storyName);
			});
		}
		Config.onCitySwitch();
	}
	,loadFromString: function(from,saveFileName) {
		try {
			var queue = gamesave_ResizingBytesQueue.fromBase64(from);
			this.load(queue,saveFileName);
		} catch( e ) {
			this.createMainMenu("That file doesn't look like a save file! Are you sure you have selected the right file?");
		}
	}
	,loadFromTypedArray: function(from,saveFileName) {
		var queue = gamesave_ResizingBytesQueue.fromData(from);
		this.load(queue,saveFileName);
	}
	,loadFromStorage: function(fileName) {
		var _gthis = this;
		this.stopState();
		common_Storage.getItem(fileName,function(err,savedCity) {
			if(err == null && savedCity != null) {
				_gthis.loadFromTypedArray(savedCity,fileName);
			} else {
				_gthis.createMainMenu("Unfortunately, something went wrong while trying to load your save file.");
			}
		},true);
	}
	,load: function(queue,saveFileName) {
		var _gthis = this;
		this.stopState();
		var storyName = "theLostShip";
		Game.isLoading = true;
		var onDone = function() {
			_gthis.newCity(storyName,saveFileName);
			var city = _gthis.state;
			city.load(queue);
			Game.isLoading = false;
		};
		if(queue.bytes.getInt32(queue.readStart) == -1234) {
			var intToRead = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead1;
				var stringLength = queue.bytes.getInt32(readPos);
				storyName = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead2;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				storyName = str;
			}
			var _this = Resources.storiesInfo;
			if(__map_reserved[storyName] != null ? _this.existsReserved(storyName) : _this.h.hasOwnProperty(storyName)) {
				onDone();
			} else {
				new progress_StoryLoader(storyName,function() {
					onDone();
				},function() {
					_gthis.createMainMenu("Something went wrong while trying to load content required for that save game! Please check your internet connection and try again.");
				});
			}
		} else {
			onDone();
		}
	}
	,resize: function(gameRect,addX,addY,scaling) {
		this.rect = gameRect;
		this.addX = addX;
		this.addY = addY;
		this.scaling = scaling;
		this.stage.hitArea = new PIXI.Rectangle(0,0,Infinity,Infinity);
		this.stage.interactiveChildren = false;
		if(this.state != null) {
			this.state.resize();
		}
	}
	,update: function(timeMod) {
		this.mouseBeginStep();
		this.mouse.timeMod = timeMod;
		this.keyboard.update();
		if(jsFunctions.crossPromoIsVisible() && this.keyboard.pressed[27]) {
			jsFunctions.crossPromoClose();
			this.keyboard.pressed[27] = false;
		}
		Config.handleInput(this.mouse,this.keyboard);
		this.mouse.preHandling();
		this.setOnClickTo = null;
		if(this.state != null && (!this.isMobile || !this.mouse.hasStrongClaim)) {
			this.state.handleMouse(this.mouse);
		}
		this.onClick = this.setOnClickTo;
		this.mouse.afterHandling();
		if(this.state != null) {
			this.state.update(timeMod);
		}
		this.mouseEndStep(timeMod);
		this.keyboard.postUpdate();
		Analytics.update(timeMod);
	}
	,postDraw: function() {
		if(this.state != null) {
			this.state.postDraw();
		}
	}
	,mouseBeginStep: function() {
		var mouseWasReleased = this.mouse.nextStepReleased;
		if(this.mouse.nextStepReleased) {
			this.mouse.down = false;
			this.mouse.nextStepReleased = false;
			this.mouse.released = true;
		}
		if(this.mouse.nextStepQuietReleased) {
			this.mouse.down = false;
			this.mouse.nextStepQuietReleased = false;
			this.mouse.released = false;
			this.mouse.releaseAllClaims(true);
		}
		if(this.mouse.nextStepDown) {
			if(!mouseWasReleased) {
				this.mouse.down = true;
			}
			this.mouse.pressed = true;
			this.mouse.nextStepDown = false;
		}
		var mouseWasReleased1 = this.mouse.nextStepRightReleased;
		if(this.mouse.nextStepRightReleased) {
			this.mouse.rightDown = false;
			this.mouse.nextStepRightReleased = false;
			this.mouse.rightReleased = true;
		}
		if(this.mouse.nextStepRightDown) {
			if(!mouseWasReleased1) {
				this.mouse.rightDown = true;
			}
			this.mouse.rightPressed = true;
			this.mouse.nextStepRightDown = false;
		}
		var mouseWasReleased2 = this.mouse.nextStepMiddleReleased;
		if(this.mouse.nextStepMiddleReleased) {
			this.mouse.middleDown = false;
			this.mouse.nextStepMiddleReleased = false;
			this.mouse.middleReleased = true;
		}
		if(this.mouse.nextStepMiddleDown) {
			if(!mouseWasReleased2) {
				this.mouse.middleDown = true;
			}
			this.mouse.middlePressed = true;
			this.mouse.nextStepMiddleDown = false;
		}
		this.mouse.scrollBarMovement = this.mouse.scrollBarNextMovement;
		this.mouse.scrollBarMovementPages = this.mouse.scrollBarNextMovementPages;
		this.mouse.scrollBarNextMovementPages = 0;
		this.mouse.scrollBarNextMovement = 0;
		if(this.isMobile && !this.mouse.down && !this.mouse.released && this.mouse.pointerDown.length == 0 && this.state != null && !this.state.get_publicGUI().tooltip.shown()) {
			this.mouse.position = new common_Point(-100000,-100000);
			this.mouse.unscaledPosition = new common_Point(-100000,-100000);
			this.mouse.cityScaledPosition = new common_FPoint(-100000,-100000);
			this.mouse.cityPosition = new common_Point(-100000,-100000);
		}
		if(this.mouse.prevPosition != null && (this.mouse.position.x != this.mouse.prevPosition.x || this.mouse.position.y != this.mouse.prevPosition.y)) {
			this.mouse.moved = true;
		} else {
			this.mouse.moved = false;
		}
	}
	,mouseEndStep: function(timeMod) {
		this.mouse.pressed = false;
		this.mouse.released = false;
		this.mouse.rightPressed = false;
		this.mouse.rightReleased = false;
		this.mouse.middlePressed = false;
		this.mouse.middleReleased = false;
		if(this.mouse.mouseDownTick > 0) {
			this.mouse.mouseDownTick -= timeMod;
		}
		this.mouse.prevPosition = this.mouse.position;
	}
	,initInteraction: function(stage) {
		var _gthis = this;
		var mouseUpFunc = function(e) {
			var origev = e.data.originalEvent;
			if(_gthis.isMobile || origev.pointerType == "touch") {
				if(_gthis.mouse.pointerDown.length == 1 && (_gthis.mouse.down || _gthis.mouse.nextStepDown)) {
					_gthis.mouse.nextStepReleased = true;
				}
				HxOverrides.remove(_gthis.mouse.pointerDown,e.data.identifier);
				_gthis.mouse.pointerUnscaledPosition.remove(e.data.identifier);
			} else {
				var button = e.data.originalEvent.button;
				if(button == null) {
					button = 0;
				}
				if(button == 1) {
					_gthis.mouse.nextStepMiddleReleased = true;
				} else if(button == 2) {
					_gthis.mouse.nextStepRightReleased = true;
				} else if(button == 0) {
					_gthis.mouse.nextStepReleased = true;
				}
			}
		};
		var pointerOutFunc = function(e1) {
			var origev1 = e1.data.originalEvent;
			if(_gthis.isMobile || origev1.pointerType == "touch") {
				if((_gthis.mouse.down || _gthis.mouse.nextStepDown) && _gthis.mouse.pointerDown.length == 1) {
					_gthis.mouse.nextStepReleased = true;
				}
				HxOverrides.remove(_gthis.mouse.pointerDown,e1.data.identifier);
				_gthis.mouse.pointerUnscaledPosition.remove(e1.data.identifier);
			}
		};
		var updatePointerPos = function(stageLocalPos) {
			_gthis.mouse.unscaledPosition = stageLocalPos;
			var withInt = _gthis.scaling;
			var updatePointerPos1 = new common_Point(stageLocalPos.x / withInt | 0,stageLocalPos.y / withInt | 0);
			_gthis.mouse.position = updatePointerPos1;
			if(js_Boot.__instanceof(_gthis.state,City)) {
				var cityState = _gthis.state;
				_gthis.mouse.cityScaledPosition = new common_FPoint(stageLocalPos.x / cityState.zoomScale,stageLocalPos.y / cityState.zoomScale);
				_gthis.mouse.cityPosition = _gthis.mouse.calcCityPosition(_gthis,cityState);
			}
		};
		var updateSecondaryPointerPos = function(stageLocalPos1,pointerID) {
			_gthis.mouse.pointerUnscaledPosition.h[pointerID] = stageLocalPos1;
			var this1 = _gthis.mouse.pointerPosition;
			var withInt1 = _gthis.scaling;
			var v = new common_Point(stageLocalPos1.x / withInt1 | 0,stageLocalPos1.y / withInt1 | 0);
			this1.h[pointerID] = v;
			if(js_Boot.__instanceof(_gthis.state,City)) {
				var cityState1 = _gthis.state;
				var this2 = _gthis.mouse.pointerCityScaledPosition;
				var v1 = new common_FPoint(stageLocalPos1.x / cityState1.zoomScale,stageLocalPos1.y / cityState1.zoomScale);
				this2.h[pointerID] = v1;
				var this3 = _gthis.mouse.pointerCityPosition;
				var v2 = _gthis.mouse.calcCityFPositionForPointer(_gthis,cityState1,pointerID);
				this3.h[pointerID] = v2;
			}
		};
		this.mouse = new Mouse();
		stage.interactive = true;
		stage.on("pointermove",function(e2) {
			var origev2 = e2.data.originalEvent;
			if(_gthis.isMobile || origev2.pointerType == "touch") {
				var point = e2.data.getLocalPosition(stage);
				var tmp = new common_Point(Math.floor(point.x),Math.floor(point.y));
				updateSecondaryPointerPos(tmp,e2.data.identifier);
			}
			var point1 = e2.data.getLocalPosition(stage);
			var tmp1 = new common_Point(Math.floor(point1.x),Math.floor(point1.y));
			updatePointerPos(tmp1);
			var buttons = e2.data.originalEvent.buttons;
			if(buttons != undefined) {
				if(typeof(buttons) == "number" && ((buttons | 0) === buttons)) {
					if((buttons & 1) != 1 && _gthis.mouse.down) {
						_gthis.mouse.nextStepReleased = true;
					}
					if((buttons & 2) != 2 && _gthis.mouse.rightDown) {
						_gthis.mouse.nextStepRightReleased = true;
					}
					if((buttons & 4) != 4 && _gthis.mouse.middleDown) {
						_gthis.mouse.nextStepMiddleReleased = true;
					}
				}
			}
		});
		if(this.isMobile) {
			stage.on("touchend",function(e3) {
				if(_gthis.onClick != null) {
					_gthis.onClick();
				} else if(_gthis.mouse.isTouch && (_gthis.rect.width < 500 || _gthis.rect.height < 230) && !jsFunctions.isAnyApple()) {
					jsFunctions.goFullscreen(false,function() {
						_gthis.mouse.nextStepReleased = true;
					});
				}
			});
		} else {
			stage.on("click",function(e4) {
				if(_gthis.onClick != null) {
					_gthis.onClick();
				}
			});
		}
		stage.on("pointerdown",function(e5) {
			var origev3 = e5.data.originalEvent;
			if(_gthis.isMobile || origev3.pointerType == "touch") {
				if(!common_ArrayExtensions.contains(_gthis.mouse.pointerDown,e5.data.identifier)) {
					_gthis.mouse.pointerDown.push(e5.data.identifier);
					var point2 = e5.data.getLocalPosition(stage);
					var tmp2 = new common_Point(Math.floor(point2.x),Math.floor(point2.y));
					updateSecondaryPointerPos(tmp2,e5.data.identifier);
					if(_gthis.mouse.pointerDown.length == 1) {
						var point3 = e5.data.getLocalPosition(stage);
						var tmp3 = new common_Point(Math.floor(point3.x),Math.floor(point3.y));
						updatePointerPos(tmp3);
						_gthis.mouse.nextStepDown = true;
						_gthis.mouse.nextStepReleased = false;
					} else {
						if(_gthis.mouse.down) {
							_gthis.mouse.nextStepQuietReleased = true;
						}
						_gthis.mouse.nextStepDown = false;
						_gthis.mouse.nextStepReleased = false;
					}
				}
			} else {
				var point4 = e5.data.getLocalPosition(stage);
				var tmp4 = new common_Point(Math.floor(point4.x),Math.floor(point4.y));
				updatePointerPos(tmp4);
				var button1 = origev3.button;
				if(button1 == null) {
					button1 = 0;
				}
				if(button1 == 1) {
					_gthis.mouse.nextStepMiddleDown = true;
					_gthis.mouse.nextStepMiddleReleased = false;
					e5.data.originalEvent.preventDefault();
				} else if(button1 == 2) {
					_gthis.mouse.nextStepRightReleased = false;
					_gthis.mouse.nextStepRightDown = true;
				} else if(button1 == 0) {
					_gthis.mouse.nextStepDown = true;
					_gthis.mouse.nextStepReleased = false;
				}
			}
		});
		window.document.addEventListener("mousedown",function(e6) {
			if(e6.button == 1) {
				e6.preventDefault();
			}
		},jsFunctions.getPassiveEventListenerVar());
		window.document.addEventListener("dragstart",function(e7) {
			e7.preventDefault();
			return false;
		});
		stage.on("pointerup",mouseUpFunc);
		stage.on("pointerupoutside",mouseUpFunc);
		stage.on("pointercancel",pointerOutFunc);
		window.addEventListener("wheel",function(e8) {
			var _g = e8.deltaMode;
			switch(_g) {
			case 0:
				_gthis.mouse.scrollBarNextMovement += e8.deltaY / _gthis.scaling;
				break;
			case 1:
				_gthis.mouse.scrollBarNextMovement += e8.deltaY * 10;
				break;
			case 2:
				_gthis.mouse.scrollBarNextMovementPages += e8.deltaY;
				break;
			}
			e8.preventDefault();
		},jsFunctions.getPassiveEventListenerVar());
	}
	,refocus: function() {
		if(this.state != null) {
			this.state.refocus();
		}
		this.mouse.pointerDown.splice(0,this.mouse.pointerDown.length);
		this.mouse.pointerUnscaledPosition = new haxe_ds_IntMap();
		this.mouse.releaseAllClaims(true);
		this.mouse.down = false;
		this.mouse.middleDown = false;
		this.mouse.rightDown = false;
	}
	,addImportHandler: function(onCancel) {
		var _gthis = this;
		var importButton = window.document.getElementById("importFile");
		importButton.addEventListener("change",function() {
			var file = importButton.files[0];
			var reader = new FileReader();
			reader.addEventListener("load",function(e) {
				var fileStr = e.target.result;
				var tmp = _gthis.state.get_publicGUI();
				gui_SaveLoadWindows.createSaveWindow(_gthis,tmp,"Which save slot would you like to import to?",function(fname) {
					_gthis.loadFromString(fileStr,fname);
				},function() {
					if(onCancel != null) {
						onCancel();
					}
				});
				importButton.value = "";
			});
			reader.readAsText(file);
		});
	}
	,stopState: function() {
		if(this.state != null) {
			this.state.stop();
			var _g = 0;
			var _g1 = this.stage.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.destroy({ children : true});
			}
			this.stage.removeChildren();
		}
		this.state = null;
	}
	,pause: function(reason) {
		if(this.currentlyPausedForReasons.length == 0) {
			this.actuallyPauseState();
		}
		if(!common_ArrayExtensions.contains(this.currentlyPausedForReasons,reason)) {
			this.currentlyPausedForReasons.push(reason);
		}
	}
	,actuallyPauseState: function() {
		if(this.state != null) {
			this.state.pause();
		}
		this.audio.pauseMusic();
	}
	,resume: function(reason) {
		HxOverrides.remove(this.currentlyPausedForReasons,reason);
		if(this.currentlyPausedForReasons.length == 0) {
			if(this.state != null) {
				this.state.resume();
			}
			this.audio.resumeMusic();
		}
	}
	,afterStateSwitch: function() {
		if(this.currentlyPausedForReasons.length > 0) {
			this.actuallyPauseState();
		}
	}
	,__class__: Game
};
var GameLoader = function(then,drawOnStage) {
	this.finalizedLoad = false;
	this.hasError = false;
	var _gthis = this;
	Settings.load();
	Config.callLoadStart();
	this.loader = new PIXI.loaders.Loader();
	this.loadingGraphics = new PIXI.Graphics();
	drawOnStage.addChild(this.loadingGraphics);
	var cacheBust = "?cache=" + "20200614154842";
	this.loader.add("sprites.json" + cacheBust);
	this.loader.add("fonts/standard.fnt" + cacheBust);
	this.loader.add("fonts/standard10.fnt" + cacheBust);
	this.loader.add("fonts/standard16.fnt" + cacheBust);
	this.loader.add("fonts/standard15.fnt" + cacheBust);
	this.loader.add("fonts/standard18.fnt" + cacheBust);
	this.loader.add("buildinginfo.json" + cacheBust);
	this.loader.add("buildingUpgradesInfo.json" + cacheBust);
	this.loader.add("buildingCategoriesInfo.json" + cacheBust);
	this.loader.add("decorationsInfo.json" + cacheBust);
	this.loader.add("buildableWorldResourcesInfo.json" + cacheBust);
	this.loader.add("cityUpgradesInfo.json" + cacheBust);
	this.loader.add("stories.json" + cacheBust);
	this.loader.add("js/pathfinder.js" + cacheBust);
	var stories = new haxe_ds_StringMap();
	var fileName = "stories/" + "theLostShip" + ".json";
	if(__map_reserved[fileName] != null) {
		stories.setReserved(fileName,"theLostShip");
	} else {
		stories.h[fileName] = "theLostShip";
	}
	_gthis.loader.add(fileName);
	var fileName1 = "stories/" + "displayCity" + ".json";
	if(__map_reserved[fileName1] != null) {
		stories.setReserved(fileName1,"displayCity");
	} else {
		stories.h[fileName1] = "displayCity";
	}
	_gthis.loader.add(fileName1);
	this.loader["use"](function(res,next) {
		if(res.error) {
			console.log(res.error);
			if(!_gthis.hasError) {
				js_Browser.alert("Unfortunately, something went wrong while loading the game. Please check your internet connection and reload the page. " + "If your internet connection is working fine, please report the technical details below. " + "Technical details:\n" + Std.string(res.error));
			}
			_gthis.hasError = true;
			return;
		}
		if(res.name == "buildingUpgradesInfo.json" + cacheBust) {
			Resources.buildingUpgradesInfo = new haxe_ds_StringMap();
			var buildingsUpgrades = res.data;
			var _g = 0;
			while(_g < buildingsUpgrades.length) {
				var buildingUpgrade = buildingsUpgrades[_g];
				++_g;
				var k = "buildingUpgrades." + buildingUpgrade.className;
				var _this = Resources.buildingUpgradesInfo;
				if(__map_reserved[k] != null) {
					_this.setReserved(k,buildingUpgrade);
				} else {
					_this.h[k] = buildingUpgrade;
				}
			}
		} else if(res.name == "buildinginfo.json" + cacheBust) {
			Resources.buildingInfo = new haxe_ds_StringMap();
			Resources.buildingInfoArray = res.data;
			var _g1 = 0;
			var _g11 = Resources.buildingInfoArray;
			while(_g1 < _g11.length) {
				var building = _g11[_g1];
				++_g1;
				var k1 = "buildings." + building.className;
				var _this1 = Resources.buildingInfo;
				if(__map_reserved[k1] != null) {
					_this1.setReserved(k1,building);
				} else {
					_this1.h[k1] = building;
				}
			}
		} else if(res.name == "buildableWorldResourcesInfo.json" + cacheBust) {
			Resources.worldResourcesInfo = res.data;
		} else if(res.name == "buildingCategoriesInfo.json" + cacheBust) {
			Resources.buildingCategoriesInfo = res.data;
		} else if(res.name == "decorationsInfo.json" + cacheBust) {
			Resources.decorationsInfo = res.data;
		} else if(res.name == "cityUpgradesInfo.json" + cacheBust) {
			Resources.cityUpgradesInfo = new haxe_ds_StringMap();
			var cityUpgrades = res.data;
			var _g2 = 0;
			while(_g2 < cityUpgrades.length) {
				var cityUpgrade = cityUpgrades[_g2];
				++_g2;
				var k2 = "cityUpgrades." + cityUpgrade.className;
				var _this2 = Resources.cityUpgradesInfo;
				if(__map_reserved[k2] != null) {
					_this2.setReserved(k2,cityUpgrade);
				} else {
					_this2.h[k2] = cityUpgrade;
				}
			}
		} else if(res.name == "stories.json" + cacheBust) {
			Resources.allStoriesInfo = res.data;
		} else if(res.name == "js/pathfinder.js" + cacheBust) {
			Resources.pathfinderCodeUrl = URL.createObjectURL(new Blob([res.data]));
		} else {
			var key = res.name;
			if(__map_reserved[key] != null ? stories.existsReserved(key) : stories.h.hasOwnProperty(key)) {
				var key1 = res.name;
				var storyName = __map_reserved[key1] != null ? stories.getReserved(key1) : stories.h[key1];
				var v = res.data;
				var _this3 = Resources.storiesInfo;
				if(__map_reserved[storyName] != null) {
					_this3.setReserved(storyName,v);
				} else {
					_this3.h[storyName] = v;
				}
			} else if(res.name == "shader.glsl") {
				Resources.shader = new PIXI.Filter("",res.data);
			}
		}
		next();
	});
	this.loader.load(function() {
		_gthis.resourcesLoaded = true;
		if(Settings.settingsLoaded && Config.splashScreenDone) {
			_gthis.postLoad();
		}
	});
	this.loaderThen = then;
};
$hxClasses["GameLoader"] = GameLoader;
GameLoader.__name__ = ["GameLoader"];
GameLoader.prototype = {
	postLoad: function() {
		this.finalizedLoad = true;
		Config.callLoadFinish();
		if (window.removeLoadingExplainer != undefined) window.removeLoadingExplainer();
		this.loadOptionals();
		this.loaderThen();
		this.loadingGraphics.destroy();
	}
	,loadOptionals: function() {
		var optionalLoader = new PIXI.loaders.Loader();
		optionalLoader.add("citizenNames.txt");
		optionalLoader["use"](function(res,next) {
			if(res.error) {
				console.log("error loading optionals");
				return;
			}
			if(res.name == "citizenNames.txt") {
				var loaderData = res.data;
				var splitData = loaderData.split("\n");
				splitData.splice(0,1 + splitData.indexOf("START"));
				Resources.citizenNames = splitData;
			}
			next();
		});
		optionalLoader.load(function() {
		});
	}
	,update: function(drawRectangle,scaling) {
		if(Config.splashScreenDone) {
			this.loadingGraphics.scale.x = this.loadingGraphics.scale.y = scaling;
			console.log(this.loader.progress + "% loaded");
			Config.callLoadProgress(this.loader.progress / 100);
			var val2 = drawRectangle.width / 3 | 0;
			var halfWidth = val2 < 100 ? val2 : 100;
			var halfHeight = 5;
			var width = halfWidth * 2;
			var height = halfHeight * 2;
			if(this.resourcesLoaded) {
				this.loadingGraphics.clear();
			} else {
				var tmp = this.hasError ? 6303792 : 6316128;
				var tmp1 = this.loadingGraphics.clear().beginFill(tmp);
				var tmp2 = drawRectangle.get_center().x - halfWidth;
				var tmp3 = drawRectangle.get_center().y - halfHeight;
				var tmp4 = this.hasError ? 16711680 : 16777215;
				tmp1.drawRect(tmp2,tmp3,width,height).endFill().beginFill(tmp4).drawRect(drawRectangle.get_center().x - halfWidth,drawRectangle.get_center().y - halfHeight,width * (this.loader.progress / 100),height).endFill();
			}
		}
		if(this.resourcesLoaded && !this.finalizedLoad) {
			if(Settings.settingsLoaded && Config.splashScreenDone) {
				this.postLoad();
			}
		}
	}
	,__class__: GameLoader
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Keyboard = function() {
	this.inputs = [];
	var _gthis = this;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var i = _g1++;
		_g.push(false);
	}
	this.nextPressed = _g;
	var _g11 = [];
	var _g2 = 0;
	while(_g2 < 256) {
		var i1 = _g2++;
		_g11.push(false);
	}
	this.nextDown = _g11;
	var _g21 = [];
	var _g3 = 0;
	while(_g3 < 256) {
		var i2 = _g3++;
		_g21.push(false);
	}
	this.pressed = _g21;
	var _g31 = [];
	var _g4 = 0;
	while(_g4 < 256) {
		var i3 = _g4++;
		_g31.push(false);
	}
	this.down = _g31;
	window.addEventListener("keydown",function(event) {
		var keyCode = event.keyCode;
		if(common_ArrayExtensions.any(_gthis.inputs,function(ie) {
			return ie == window.document.activeElement;
		}) && keyCode != 27) {
			return;
		}
		if(event.key != null) {
			if(event.key == "Delete") {
				keyCode = 46;
			}
			if(event.key == "Control") {
				keyCode = 17;
			}
		}
		if(keyCode < 256) {
			if(!_gthis.nextDown[keyCode]) {
				_gthis.nextPressed[keyCode] = true;
				_gthis.nextDown[keyCode] = true;
			}
		}
		event.preventDefault();
	},jsFunctions.getPassiveEventListenerVar());
	window.addEventListener("keyup",function(event1) {
		var keyCode1 = event1.keyCode;
		if(keyCode1 < 256) {
			_gthis.nextDown[keyCode1] = false;
		}
		if(keyCode1 == 122) {
			jsFunctions.goFullscreen(true);
		}
		event1.preventDefault();
	},jsFunctions.getPassiveEventListenerVar());
	window.document.addEventListener("visibilitychange",function() {
		if(window.document.visibilityState == "hidden") {
			var _g41 = 0;
			while(_g41 < 256) {
				var i4 = _g41++;
				_gthis.nextDown[i4] = false;
			}
		}
	});
	window.addEventListener("focus",function() {
		var _g42 = 0;
		while(_g42 < 256) {
			var i5 = _g42++;
			_gthis.nextDown[i5] = false;
		}
	},false);
	window.addEventListener("blur",function() {
		var _g43 = 0;
		while(_g43 < 256) {
			var i6 = _g43++;
			_gthis.nextDown[i6] = false;
		}
	},false);
};
$hxClasses["Keyboard"] = Keyboard;
Keyboard.__name__ = ["Keyboard"];
Keyboard.getLetterCode = function(letter) {
	var code = HxOverrides.cca(letter,0);
	if(code >= 97 && code <= 122) {
		code -= 32;
	}
	return code;
};
Keyboard.prototype = {
	anyKey: function() {
		var _g = 0;
		while(_g < 256) {
			var k = _g++;
			if(this.pressed[k]) {
				return true;
			}
		}
		return false;
	}
	,update: function() {
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			if(this.nextDown[i]) {
				this.down[i] = true;
			} else {
				this.down[i] = false;
			}
			if(this.nextPressed[i]) {
				this.pressed[i] = true;
				this.nextPressed[i] = false;
			}
		}
	}
	,postUpdate: function() {
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			this.pressed[i] = false;
		}
	}
	,__class__: Keyboard
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.exists = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.iter = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		var _ = $iterator(it)();
		while(_.hasNext()) {
			var _1 = _.next();
			++n;
		}
	} else {
		var x = $iterator(it)();
		while(x.hasNext()) {
			var x1 = x.next();
			if(pred(x1)) {
				++n;
			}
		}
	}
	return n;
};
Lambda.find = function(it,f) {
	var v = $iterator(it)();
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var common_PixiApplication = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth * this.pixelRatio;
	this.height = window.innerHeight * this.pixelRatio;
	this.position = "static";
};
$hxClasses["common.PixiApplication"] = common_PixiApplication;
common_PixiApplication.__name__ = ["common","PixiApplication"];
common_PixiApplication.prototype = {
	start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = Std.string(window.innerWidth) + "px";
			this.canvas.style.height = Std.string(window.innerHeight) + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		window.onresize = $bind(this,this._onWindowResize);
		var renderingOptions = { };
		renderingOptions.width = this.width;
		renderingOptions.height = this.height;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = 1;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.powerPreference = "high-performance";
		renderingOptions.legacy = this.useLegacyRenderer;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.noWebGL = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,addPostDraw: function(postDraw) {
		($_=this.app.ticker,$bind($_,$_.add))(postDraw,null,-100);
	}
	,_onWindowResize: function(event) {
		var iw = window.innerWidth;
		var ih = window.innerHeight;
		this.width = iw * this.pixelRatio;
		this.height = ih * this.pixelRatio;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = iw + "px";
		this.canvas.style.height = ih + "px";
		if(jsFunctions.isAnyApple()) {
			window.scrollTo(0,0);
		}
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,__class__: common_PixiApplication
};
var Main = function() {
	this.knownInnerH = -1;
	this.rotationAsker = null;
	this.askForRotation = false;
	this.setScalingIn = -1;
	this.scaling = 1;
	this.maxScaling = 2;
	var _gthis = this;
	Main.isMobile = Config.canBeMobile && (Config.forceMobile || jsFunctions.isAnyMobile());
	common_PixiApplication.call(this);
	Config.waitForInitialization(function() {
		_gthis.init();
	});
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	new Main();
};
Main.__super__ = common_PixiApplication;
Main.prototype = $extend(common_PixiApplication.prototype,{
	init: function() {
		var _gthis = this;
		if(!Config.checkSitelock()) {
			window.alert("This version of The Final Earth 2 has not been licensed for this site. " + "If you're seeing this in error or need a new domain added to an existing sitelock, just contact me and I'll fix it. " + "Otherwise, please contact me (e.g. from florianvanstrien.nl) for licensing options.");
			return;
		}
		this.autoResize = false;
		this.onUpdate = $bind(this,this.update);
		window.addEventListener("resize",$bind(this,this.setGameScaleSoon));
		this.backgroundColor = 0;
		this.pixelRatio = 1;
		if(Main.isMobile) {
			this.pixelRatio = window.devicePixelRatio;
		}
		if(this.pixelRatio == null || this.pixelRatio <= 0) {
			this.pixelRatio = 1;
		}
		this.knownInnerH = window.innerHeight;
		var iw = window.innerWidth;
		var ih = window.innerHeight;
		this.width = iw * this.pixelRatio;
		this.height = ih * this.pixelRatio;
		PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;
		this.initConfig();
		common_PixiApplication.prototype.start.call(this);
		this.setGameScale();
		this.loader = new GameLoader(function() {
			_gthis.loader.update(_gthis.gameRect,_gthis.scaling);
			_gthis.loader = null;
			var gameStage = _gthis.stage.addChild(new PIXI.Container());
			_gthis.game = new Game(_gthis,gameStage,_gthis.gameRect,_gthis.addX,_gthis.addY,_gthis.scaling,Main.isMobile);
			_gthis.game.isLargeMobile = _gthis.game.isMobile && Main.isLargeMobile;
			if(_gthis.askForRotation && _gthis.rotationAsker == null) {
				_gthis.rotationAsker = new common_PleaseRotateDevice(_gthis.stage);
				_gthis.game.pause("pleaseRotateFirst");
			}
		},this.stage);
		Main.isCanvasRenderer = this.renderer.type == PIXI.RENDERER_TYPE.CANVAS;
		this.canvas.addEventListener("contextmenu",function(ev) {
			ev.preventDefault();
			return false;
		},jsFunctions.getPassiveEventListenerVar());
		Config.init();
		Config.showSplashScreen(this);
		Analytics.init();
		if(Config.get_enableCrossPromo()) {
			jsFunctions.initCrossPromo("steam");
		}
		this.addPostDraw($bind(this,this.postDraw));
		if(window.document.hidden != null) {
			window.addEventListener("visibilitychange",function() {
				if(window.document.hidden) {
					_gthis.onWindowBlur();
				} else {
					_gthis.onWindowFocus();
				}
			});
		} else {
			window.addEventListener("blur",$bind(this,this.onWindowBlur));
			window.addEventListener("focus",$bind(this,this.onWindowFocus));
		}
		try {
			window.addEventListener("error",function(err) {
				var errorMessage = "" + err.message + " - " + err.filename + " - line " + err.lineno + " - col " + err.colno;
				Analytics.sendErrorEvent(errorMessage);
			});
		} catch( e ) {
		}
	}
	,onWindowBlur: function() {
		if(this.game != null) {
			this.game.pause("windowBlur");
		}
	}
	,onWindowFocus: function() {
		if(this.game != null) {
			this.game.resume("windowBlur");
			this.game.refocus();
		}
	}
	,initConfig: function() {
		try {
			var params = haxe_web_Request.getParams();
			if((__map_reserved["maxScale"] != null ? params.getReserved("maxScale") : params.h["maxScale"]) != null) {
				this.maxScaling = Std.parseInt(__map_reserved["maxScale"] != null ? params.getReserved("maxScale") : params.h["maxScale"]);
			}
			if((__map_reserved["kv_maxScale"] != null ? params.getReserved("kv_maxScale") : params.h["kv_maxScale"]) != null) {
				this.maxScaling = Std.parseInt(__map_reserved["kv_maxScale"] != null ? params.getReserved("kv_maxScale") : params.h["kv_maxScale"]);
			}
			if(this.maxScaling == 0) {
				this.maxScaling = 2;
			}
		} catch( e ) {
		}
	}
	,update: function(elapsedTime) {
		common_Performance.registerFrame();
		if(this.setScalingIn != -1) {
			this.setScalingIn--;
			if(this.setScalingIn == 0) {
				this.setGameScale();
				this.setScalingIn = -1;
			}
		} else if(window.innerHeight != this.knownInnerH) {
			if(jsFunctions.isAnyApple()) {
				this._onWindowResize(null);
				this.setGameScaleSoon();
				this.knownInnerH = window.innerHeight;
			}
		} else if(Main.isMobile && jsFunctions.isAnyApple()) {
			if(window.scrollY != 0) {
				window.scrollTo(0,0);
			}
		}
		if(this.rotationAsker != null) {
			this.rotationAsker.update(this.width / this.scaling,this.height / this.scaling,this.scaling);
		} else if(this.game != null) {
			this.game.update(elapsedTime);
		} else if(this.loader != null) {
			this.loader.update(this.gameRect,this.scaling);
		}
		Config.update(elapsedTime);
	}
	,postDraw: function() {
		if(this.game != null) {
			this.game.postDraw();
		}
	}
	,setGameScale: function() {
		var dpi = this.pixelRatio;
		var minFloatScaling = 2.0;
		var floatScaling = minFloatScaling;
		floatScaling *= dpi;
		this.scaling = floatScaling / dpi > this.maxScaling ? Math.floor(this.maxScaling * dpi) : Math.floor(floatScaling);
		if(Main.isMobile && this.width < this.height && Math.floor(this.width / this.scaling) < 300 && 5 != 8) {
			this.askForRotation = true;
			if(this.loader == null && this.game != null && this.rotationAsker == null) {
				this.rotationAsker = new common_PleaseRotateDevice(this.stage);
				this.game.pause("pleaseRotateFirst");
			}
		} else {
			if(this.width / this.scaling < 300) {
				var val = Math.floor(this.width / 300);
				var maxVal = this.scaling;
				this.scaling = val < 1 ? 1 : val > maxVal ? maxVal : val;
			}
			if(this.height / this.scaling < 150) {
				var val1 = Math.floor(this.height / 150);
				var maxVal1 = this.scaling;
				this.scaling = val1 < 1 ? 1 : val1 > maxVal1 ? maxVal1 : val1;
			}
			this.askForRotation = false;
			if(this.rotationAsker != null) {
				this.rotationAsker.destroy();
				this.rotationAsker = null;
				this.game.resume("pleaseRotateFirst");
			}
		}
		Main.isLargeMobile = Math.floor(this.width / this.scaling) >= 450;
		this.gameRect = new common_Rectangle(0,0,Math.floor(this.width / this.scaling),Math.floor(this.height / this.scaling));
		this.addX = 0;
		this.addY = 0;
		if(this.game != null) {
			this.game.isLargeMobile = this.game.isMobile && Main.isLargeMobile;
			this.game.resize(this.gameRect,this.addX,this.addY,this.scaling);
		} else {
			Config.resizeSplash(this);
		}
	}
	,setGameScaleSoon: function() {
		this.setScalingIn = 5;
	}
	,__class__: Main
});
var MainMenu = function(game,stage) {
	this.displayCityActivation = 0;
	this.fullscreenButton = null;
	this.totalTimeOnMenu = 0;
	var _gthis = this;
	this.game = game;
	this.stage = stage;
	var cityStage = new PIXI.Container();
	stage.addChild(cityStage);
	this.bgCity = new City(game,cityStage,"displayCity",true,"___");
	this.bottomButtonStage = new PIXI.Container();
	stage.addChild(this.bottomButtonStage);
	this.visibilityGraphics = new PIXI.Graphics();
	this.bottomButtonStage.addChild(this.visibilityGraphics);
	this.visibilityGraphics.alpha = 0;
	this.infoStage = new PIXI.Container();
	stage.addChild(this.infoStage);
	this.unscaledStage = new PIXI.Container();
	this.unscaledStage.scale.set(game.scaling / game.get_preDPIAdjustScaling(),game.scaling / game.get_preDPIAdjustScaling());
	stage.parent.addChild(this.unscaledStage);
	this.titleSprite = new PIXI.Sprite(Resources.getTexture("spr_title"));
	this.titleSprite.anchor.x = 0.5;
	this.infoStage.addChild(this.titleSprite);
	this.versionText = new PIXI.extras.BitmapText("",{ font : "Arial", tint : 16777215});
	this.versionText.alpha = 0.6;
	this.versionText.anchor.x = 0;
	this.versionText.anchor.y = 1;
	this.infoStage.addChild(this.versionText);
	this.bottomButtons = [];
	this.bottomButtonOnClick = new haxe_ds_ObjectMap();
	this.bottomButtonOnHover = new haxe_ds_ObjectMap();
	this.bottomButtonOnRight = new haxe_ds_ObjectMap();
	this.bottomButtonAttract = new haxe_ds_ObjectMap();
	this.otherButtons = [];
	var musicSprite = Resources.getTexturesByWidth("spr_music",14);
	var musicOffButtonSprite = new PIXI.Sprite(musicSprite[Settings.musicOn ? 0 : 1]);
	this.musicOffButton = { theSprite : musicOffButtonSprite, onClick : function() {
		game.audio.changeMusicEnabledness(!Settings.musicOn);
		musicOffButtonSprite.texture = musicSprite[Settings.musicOn ? 0 : 1];
	}, onHover : function() {
		_gthis.gui.tooltip.setText(_gthis.musicOffButton,Settings.musicOn ? "Mute Music" : "Unmute Music");
	}};
	this.bottomButtonStage.addChild(this.musicOffButton.theSprite);
	this.otherButtons.push(this.musicOffButton);
	var soundSprite = Resources.getTexturesByWidth("spr_sound",14);
	var soundOffButtonSprite = new PIXI.Sprite(soundSprite[Settings.soundOn ? 0 : 1]);
	this.soundOffButton = { theSprite : soundOffButtonSprite, onClick : function() {
		game.audio.changeSoundEnabledness(!Settings.soundOn);
		soundOffButtonSprite.texture = soundSprite[Settings.soundOn ? 0 : 1];
	}, onHover : function() {
		_gthis.gui.tooltip.setText(_gthis.soundOffButton,Settings.soundOn ? "Mute Sound Effects" : "Unmute Sound Effects");
	}};
	this.bottomButtonStage.addChild(this.soundOffButton.theSprite);
	this.otherButtons.push(this.soundOffButton);
	if(Config.hasFullscreen && !game.isMobile) {
		var fullscreenSprite = Resources.getTexture("spr_fullscreen");
		var fullscreenButtonSprite = new PIXI.Sprite(fullscreenSprite);
		this.fullscreenButton = { theSprite : fullscreenButtonSprite, onClick : function() {
		}, onHover : function() {
			_gthis.gui.tooltip.setText(_gthis.creditsButton,"Full Screen");
			game.setOnClickTo = function() {
				jsFunctions.goFullscreen(true);
			};
		}};
		this.bottomButtonStage.addChild(this.fullscreenButton.theSprite);
		this.otherButtons.push(this.fullscreenButton);
	}
	var creditsSprite = Resources.getTexture("spr_credits");
	var creditsButtonSprite = new PIXI.Sprite(creditsSprite);
	var doCreateCreditsWindow = null;
	doCreateCreditsWindow = function() {
		_gthis.gui.createWindow("creditsWindow");
		_gthis.gui.addWindowToStack(doCreateCreditsWindow);
		gui_CreditsWindow.create(null,_gthis.gui,_gthis.gui.innerWindowStage,_gthis.gui.windowInner);
	};
	var doCreateCreditsWindow1 = doCreateCreditsWindow;
	this.creditsButton = { theSprite : creditsButtonSprite, onClick : doCreateCreditsWindow, onHover : function() {
		_gthis.gui.tooltip.setText(_gthis.creditsButton,"Credits");
	}};
	this.bottomButtonStage.addChild(creditsButtonSprite);
	this.otherButtons.push(this.creditsButton);
	this.rightBadges = [];
	var twitterButtonImage = Resources.getTexture("spr_twitter");
	var twitterButtonSprite = new PIXI.Sprite(twitterButtonImage);
	this.twitterButton = { theSprite : twitterButtonSprite, onClick : function() {
	}, onHover : function() {
		_gthis.gui.tooltip.setText(_gthis.creditsButton,"Follow me @FlorianStrien on Twitter and get the latest news on updates and new games!");
		game.setOnClickTo = function() {
			window.open("https://twitter.com/FlorianStrien","_blank");
		};
	}};
	this.bottomButtonStage.addChild(this.twitterButton.theSprite);
	this.otherButtons.push(this.twitterButton);
	var mailingButtonImage = Resources.getTexture("spr_mailinglist");
	var mailingButtonSprite = new PIXI.Sprite(mailingButtonImage);
	this.mailingButton = { theSprite : mailingButtonSprite, onClick : function() {
	}, onHover : function() {
		_gthis.gui.tooltip.setText(_gthis.creditsButton,"I'll send you cool The Final Earth 2 news and facts, plus info on my future releases!","Subscribe to my mailing list!");
		game.setOnClickTo = function() {
			window.open(Config.mailingListURL,"_blank");
		};
	}};
	this.bottomButtonStage.addChild(this.mailingButton.theSprite);
	this.otherButtons.push(this.mailingButton);
	if(!game.isMobile) {
		var discordButtonSprite = new PIXI.Sprite(Resources.getTexture("discord_badge"));
		var discordButton = { sprite : discordButtonSprite, url : "https://florianvanstrien.nl/discord.php"};
		this.rightBadges.push(discordButton);
		this.unscaledStage.addChild(discordButtonSprite);
		if(Config.isLimitedDemo) {
			var steamButtonSprite = new PIXI.Sprite(Resources.getTexture("steam_badge2"));
			var steamButton = { sprite : steamButtonSprite, url : "https://store.steampowered.com/app/1180130/The_Final_Earth_2/"};
			this.rightBadges.push(steamButton);
			this.unscaledStage.addChild(steamButtonSprite);
		}
	}
	var guiStage = new PIXI.Container();
	stage.addChild(guiStage);
	this.gui = new gui_MainMenuGUI(game,guiStage);
	this.resize();
	this.positionUIElements();
	this.siteLogo = null;
	common_Storage.getItem("__meta__mostRecentlyPlayed",function(err,result) {
		if(err || result == null) {
			var bb = "- " + game.textHelper.clickOrTap() + " Here to Play -";
			var bb1 = _gthis.addBottomButton(bb,function() {
				game.newCity("theLostShip","0");
				Config.doPlay();
				Analytics.sendEvent("game","play_initial");
				if(5 == 6 && Config.hadFullStepWithInput) {
					common_AdHelper.showNonRewardedInterstitialIfAllowed();
				}
			},null,"Arial18");
			_gthis.bottomButtonAttract.set(bb1,true);
			var baseFont = game.isMobile ? "Arial18" : "Arial16";
			var bb2 = _gthis.addBottomButton("- Played Before? -",function() {
				_gthis.gui.doCreatePlayedBeforeWindow(function() {
				});
			},null,baseFont);
			if(5 != 3) {
				bb2.tint = 10526896;
			}
			if(!common_Storage.storageSupported()) {
				_gthis.showErrorWithImportButton("Warning! Unfortunately, no working saving method has been found in your browser. You can still play, but any saves will be lost when you leave the game.\n\nThis is normally caused by disabling cookies or third-party cookies. This game uses a method similar to cookies to save your cities. Third-party cookies may be required as the game is often running on another domain than the web gaming portal.\n\nPlease try enabling cookies. Then, reload the page. Otherwise, you can still Export your cities from the Game Menu and Import them again later.");
			}
		} else {
			var baseFont1 = game.isMobile ? "Arial18" : "Arial16";
			_gthis.addBottomButton("- Continue -",function() {
				game.loadFromStorage(result);
				Config.doPlay();
				Analytics.sendEvent("game","continue");
				if(5 == 6 && Config.hadFullStepWithInput) {
					common_AdHelper.showNonRewardedInterstitialIfAllowed();
				}
			},null,baseFont1);
			_gthis.addBottomButton("- New Game -",function() {
				_gthis.gui.createPlayWindow(function() {
				});
				if(5 == 6 && Config.hadFullStepWithInput) {
					common_AdHelper.showNonRewardedInterstitialIfAllowed();
				}
			},null,baseFont1);
			_gthis.addBottomButton("- Load Game -",function() {
				gui_SaveLoadWindows.createLoadWindow(game,_gthis.gui,"Which city would you like to load?",$bind(game,game.loadFromStorage));
				if(5 == 6 && Config.hadFullStepWithInput) {
					common_AdHelper.showNonRewardedInterstitialIfAllowed();
				}
			},null,baseFont1);
			if(Config.get_enableCrossPromo()) {
				_gthis.addBottomButton("- Play My Other Games! -",function() {
					jsFunctions.showCrossPromoDisplay(true);
				});
			}
		}
		if(5 == 3) {
			_gthis.addBottomButton("- Play More Games -",function() {
			},null,null,function() {
				game.setOnClickTo = function() {
					window.open("http://armor.ag/MoreGames","_blank");
				};
			});
			_gthis.addBottomButton("- Like Us! -",function() {
			},null,null,function() {
				game.setOnClickTo = function() {
					window.open("http://www.facebook.com/ArmorGames","_blank");
				};
			});
		}
		_gthis.addBottomButton("- Exit -",function() {
			window.close();
		});
		_gthis.positionUIElements();
	});
	common_PokiHelpers.reportStopGameplay();
};
$hxClasses["MainMenu"] = MainMenu;
MainMenu.__name__ = ["MainMenu"];
MainMenu.__interfaces__ = [GameState];
MainMenu.prototype = {
	get_publicGUI: function() {
		return this.gui;
	}
	,addBottomButton: function(text,onClick,showOnRight,font,onHover) {
		if(font == null) {
			font = "Arial16";
		}
		if(showOnRight == null) {
			showOnRight = false;
		}
		var bottomButton = new PIXI.extras.BitmapText(text,{ font : showOnRight ? "Arial" : font, tint : showOnRight ? 13684944 : 16777215});
		this.bottomButtonStage.addChild(bottomButton);
		this.bottomButtons.push(bottomButton);
		this.bottomButtonOnClick.set(bottomButton,onClick);
		this.bottomButtonOnHover.set(bottomButton,onHover);
		this.bottomButtonOnRight.set(bottomButton,showOnRight);
		this.bottomButtonAttract.set(bottomButton,false);
		return bottomButton;
	}
	,positionUIElements: function() {
		var _gthis = this;
		this.visibilityGraphics.clear();
		this.titleSprite.position.x = this.game.rect.width / 2;
		this.titleSprite.position.y = 10;
		this.visibilityGraphics.beginFill(0,0.5);
		this.visibilityGraphics.drawRect(0,0,this.game.rect.width,20 + this.titleSprite.height);
		this.visibilityGraphics.endFill();
		var highestBottom = this.game.rect.height;
		this.versionText.position.x = 1;
		this.versionText.position.y = this.game.rect.height;
		var yy = this.game.rect.height - 10 - (16 + (this.game.isMobile ? 3 : 0)) * this.bottomButtons.filter(function(bb) {
			return !_gthis.bottomButtonOnRight.h[bb.__id__];
		}).length;
		var val1 = this.bottomButtons.filter(function(bb1) {
			if(!_gthis.bottomButtonOnRight.h[bb1.__id__]) {
				return bb1.font.name == "Arial18";
			} else {
				return false;
			}
		}).length - 1;
		var yy1 = yy - 3 * (0 > val1 ? 0 : val1);
		var yyRight = this.game.rect.height - 14 * this.bottomButtons.filter(function(bb2) {
			return _gthis.bottomButtonOnRight.h[bb2.__id__];
		}).length;
		var anyRightBadge = false;
		var val11 = yy1 - 7;
		if(highestBottom < val11) {
			highestBottom = highestBottom;
		} else {
			highestBottom = val11;
		}
		if(this.rightBadges != null && this.rightBadges.length > 0) {
			var badgeYY = 0.0;
			if(this.siteLogo == null) {
				yyRight = 2;
			} else {
				yyRight -= 3;
			}
			var _g = 0;
			var _g1 = this.rightBadges;
			while(_g < _g1.length) {
				var badge = _g1[_g];
				++_g;
				anyRightBadge = true;
				badge.sprite.position.set((this.game.rect.width - 10) * this.game.get_preDPIAdjustScaling() - badge.sprite.width,(this.game.rect.height - 10) * this.game.get_preDPIAdjustScaling() - badge.sprite.height - badgeYY);
				badgeYY += 14 + badge.sprite.height;
				if(this.siteLogo != null) {
					yyRight -= Math.ceil((14 + badge.sprite.height) / this.game.get_preDPIAdjustScaling());
				}
			}
			var val12 = this.game.rect.height - 10 - badgeYY / this.game.get_preDPIAdjustScaling() | 0;
			if(highestBottom < val12) {
				highestBottom = highestBottom;
			} else {
				highestBottom = val12;
			}
		}
		var _g2 = 0;
		var _g11 = this.bottomButtons;
		while(_g2 < _g11.length) {
			var bottomButton = _g11[_g2];
			++_g2;
			if(this.bottomButtonOnRight.h[bottomButton.__id__]) {
				bottomButton.position.x = this.game.rect.width - bottomButton.textWidth - 3;
				bottomButton.position.y = yyRight;
				yyRight += 16;
			} else {
				bottomButton.position.x = this.game.rect.width / 2 - bottomButton.textWidth / 2;
				bottomButton.position.y = yy1;
				if(this.game.isMobile) {
					yy1 += 3;
				}
				if(bottomButton.font.name == "Arial18") {
					yy1 += 19;
				} else {
					yy1 += 16;
				}
			}
		}
		var offset = 10;
		var _this_y;
		var _this_x = offset;
		_this_y = this.game.rect.height - 24;
		var tmp = new PIXI.Point(_this_x,_this_y);
		this.musicOffButton.theSprite.position = tmp;
		offset += 22;
		var _this_y1;
		var _this_x1 = offset;
		_this_y1 = this.game.rect.height - 24;
		var tmp1 = new PIXI.Point(_this_x1,_this_y1);
		this.soundOffButton.theSprite.position = tmp1;
		offset += 22;
		if(this.fullscreenButton != null) {
			var _this_y2;
			var _this_x2 = offset;
			_this_y2 = this.game.rect.height - 24;
			var tmp2 = new PIXI.Point(_this_x2,_this_y2);
			this.fullscreenButton.theSprite.position = tmp2;
			offset += 22;
		}
		offset += 10;
		var yOffset = 0;
		if(this.game.isMobile) {
			yOffset = -24;
			offset = 10;
		}
		var _this_y3;
		var _this_x3 = offset;
		_this_y3 = this.game.rect.height - 24 + yOffset;
		var tmp3 = new PIXI.Point(_this_x3,_this_y3);
		this.creditsButton.theSprite.position = tmp3;
		offset += 22;
		var _this_y4;
		var _this_x4 = offset;
		_this_y4 = this.game.rect.height - 24 + yOffset;
		var tmp4 = new PIXI.Point(_this_x4,_this_y4);
		this.twitterButton.theSprite.position = tmp4;
		offset += 22;
		var _this_y5;
		var _this_x5 = offset;
		_this_y5 = this.game.rect.height - 24 + yOffset;
		var tmp5 = new PIXI.Point(_this_x5,_this_y5);
		this.mailingButton.theSprite.position = tmp5;
		offset += 22;
		var val13 = this.game.rect.height - 24 + yOffset - 10;
		if(highestBottom < val13) {
			highestBottom = highestBottom;
		} else {
			highestBottom = val13;
		}
		if(this.siteLogo != null) {
			var _this_y6;
			var _this_x6 = this.game.rect.width * this.game.scaling - 10;
			_this_y6 = 10;
			var tmp6 = new PIXI.Point(_this_x6,_this_y6);
			this.siteLogo.position = tmp6;
		}
		this.visibilityGraphics.beginFill(0,0.5);
		this.visibilityGraphics.drawRect(0,highestBottom,this.game.rect.width,this.game.rect.height);
		this.visibilityGraphics.endFill();
		this.visibilityGraphicsYStart = 20 + this.titleSprite.height;
		this.visibilityGraphicsYEnd = highestBottom;
	}
	,showError: function(err) {
		this.gui.showSimpleWindow(err);
	}
	,showErrorWithImportButton: function(text) {
		var _gthis = this;
		this.gui.createWindow();
		this.gui.windowAddInfoText(text);
		this.gui.windowAddBottomButtons([{ text : "Import...", onHover : function() {
			_gthis.game.setOnClickTo = function() {
				var importButton = window.document.getElementById("importFile");
				importButton.value = "";
				importButton.click();
				_gthis.game.onClick = null;
			};
		}, action : function() {
		}}]);
	}
	,handleMouse: function(mouse) {
		if(this.gui.handleMouse(mouse)) {
			var _g = 0;
			var _g1 = this.bottomButtons;
			while(_g < _g1.length) {
				var bottomButton = _g1[_g];
				++_g;
				bottomButton.alpha = 0.7;
			}
			var _g2 = 0;
			var _g11 = this.otherButtons;
			while(_g2 < _g11.length) {
				var otherButton = _g11[_g2];
				++_g2;
				otherButton.theSprite.alpha = 0.7;
			}
			return true;
		}
		if(this.bottomButtonStage.visible) {
			var _g3 = 0;
			var _g12 = this.bottomButtons;
			while(_g3 < _g12.length) {
				var bottomButton1 = _g12[_g3];
				++_g3;
				if(mouse.get_x() >= bottomButton1.position.x && mouse.get_x() <= bottomButton1.position.x + bottomButton1.textWidth && mouse.get_y() > bottomButton1.position.y + 2 && mouse.get_y() <= bottomButton1.position.y + bottomButton1.textHeight) {
					var _g21 = mouse.claimMouse(bottomButton1);
					switch(_g21[1]) {
					case 0:
						bottomButton1.alpha = 1;
						break;
					case 1:
						bottomButton1.alpha = 1;
						this.bottomButtonStage.visible = false;
						(this.bottomButtonOnClick.get(bottomButton1))();
						Audio.get().playSound(Audio.get().buttonSound);
						break;
					case 2:
						bottomButton1.alpha = 0.85;
						break;
					}
					if(this.bottomButtonOnHover.h[bottomButton1.__id__] != null) {
						this.bottomButtonOnHover.h[bottomButton1.__id__]();
					}
				} else {
					bottomButton1.alpha = 0.7 + (this.bottomButtonAttract.h[bottomButton1.__id__] ? 0.30000000000000004 * Math.sin(this.totalTimeOnMenu * 0.08) : 0);
				}
			}
			var _g4 = 0;
			var _g13 = this.otherButtons;
			while(_g4 < _g13.length) {
				var otherButton1 = _g13[_g4];
				++_g4;
				if(mouse.get_x() >= otherButton1.theSprite.position.x && mouse.get_x() < otherButton1.theSprite.position.x + otherButton1.theSprite.width && mouse.get_y() >= otherButton1.theSprite.position.y && mouse.get_y() < otherButton1.theSprite.position.y + otherButton1.theSprite.height) {
					var _g22 = mouse.claimMouse(otherButton1);
					switch(_g22[1]) {
					case 0:
						otherButton1.theSprite.alpha = 1;
						break;
					case 1:
						otherButton1.theSprite.alpha = 1;
						if(otherButton1.onClick != null) {
							otherButton1.onClick();
						}
						Audio.get().playSound(Audio.get().buttonSound);
						break;
					case 2:
						otherButton1.theSprite.alpha = 0.85;
						break;
					}
					if(otherButton1.onHover != null) {
						otherButton1.onHover();
					}
				} else {
					otherButton1.theSprite.alpha = 0.7;
				}
			}
			var _g5 = 0;
			var _g14 = this.rightBadges;
			while(_g5 < _g14.length) {
				var badge = [_g14[_g5]];
				++_g5;
				if(mouse.get_x() * this.game.get_preDPIAdjustScaling() >= badge[0].sprite.position.x && mouse.get_x() * this.game.get_preDPIAdjustScaling() < badge[0].sprite.position.x + badge[0].sprite.width && mouse.get_y() * this.game.get_preDPIAdjustScaling() >= badge[0].sprite.position.y && mouse.get_y() * this.game.get_preDPIAdjustScaling() < badge[0].sprite.position.y + badge[0].sprite.height) {
					this.game.setOnClickTo = (function(badge1) {
						return function() {
							if(badge1[0].url.indexOf("steam") != -1 && 5 == 5) {
								greenworks.activateGameOverlayToWebPage(badge1[0].url);
							} else {
								window.open(badge1[0].url,"_blank");
							}
						};
					})(badge);
				}
			}
		} else if(this.gui.window != null && this.gui.windowRelatedTo == "privacyWindow") {
			if(mouse.pressed) {
				this.gui.goPreviousWindow();
				Audio.get().playSound(Audio.get().buttonSound);
			}
		}
		if(this.siteLogo != null && this.siteLogo.visible && this.siteLogo.parent != null) {
			var tmp = mouse.unscaledPosition.x > this.siteLogo.position.x - this.siteLogo.width && mouse.unscaledPosition.y > this.siteLogo.position.y && mouse.unscaledPosition.x <= this.siteLogo.position.x && mouse.unscaledPosition.y <= this.siteLogo.position.y + this.siteLogo.height;
		}
		if(mouse.pressed && mouse.get_y() > this.visibilityGraphicsYStart && mouse.get_y() < this.visibilityGraphicsYEnd && (!this.game.isMobile || this.game.isLargeMobile)) {
			this.clickDisplayCity();
		}
		return false;
	}
	,update: function(timeMod) {
		this.updateDisplayCity(timeMod);
		this.gui.update(timeMod);
		this.bgCity.update(timeMod);
		var tmp = this.gui.window == null && !jsFunctions.crossPromoIsVisible();
		this.bottomButtonStage.visible = tmp;
		var tmp1 = this.gui.window == null && !jsFunctions.crossPromoIsVisible();
		this.unscaledStage.visible = tmp1;
		if(this.siteLogo != null) {
			var tmp2 = this.gui.window == null && !jsFunctions.crossPromoIsVisible();
			this.siteLogo.visible = tmp2;
		}
		this.totalTimeOnMenu += timeMod;
	}
	,updateDisplayCity: function(timeMod) {
		if(this.displayCityActivation > 0) {
			this.displayCityActivation = Math.min(1,this.displayCityActivation + timeMod * 0.025);
			this.visibilityGraphics.alpha = this.displayCityActivation;
		} else {
			this.bgCity.simulation.time.timeSinceStart = 0;
		}
	}
	,clickDisplayCity: function() {
		return;
	}
	,postDraw: function() {
		this.bgCity.postDraw();
	}
	,resize: function() {
		this.bottomButtonStage.scale.x = this.bottomButtonStage.scale.y = this.game.scaling;
		this.infoStage.scale.x = this.infoStage.scale.y = this.game.scaling;
		var tmp = this.game.scaling;
		var tmp1 = this.game.get_preDPIAdjustScaling();
		this.unscaledStage.scale.x = this.unscaledStage.scale.y = tmp / tmp1;
		this.bgCity.resize();
		this.gui.resize();
		this.positionUIElements();
	}
	,refocus: function() {
		this.bgCity.refocus();
	}
	,stop: function() {
		this.bgCity.stop();
		this.unscaledStage.destroy();
	}
	,pause: function() {
	}
	,resume: function() {
	}
	,__class__: MainMenu
};
var Materials = function(wood,stone,food,machineParts,knowledge,refinedMetal,computerChips,cacao,chocolate,magic) {
	if(magic == null) {
		magic = 0;
	}
	if(chocolate == null) {
		chocolate = 0;
	}
	if(cacao == null) {
		cacao = 0;
	}
	if(computerChips == null) {
		computerChips = 0;
	}
	if(refinedMetal == null) {
		refinedMetal = 0;
	}
	if(knowledge == null) {
		knowledge = 0;
	}
	if(machineParts == null) {
		machineParts = 0;
	}
	if(food == null) {
		food = 0;
	}
	if(stone == null) {
		stone = 0;
	}
	if(wood == null) {
		wood = 0;
	}
	this.set_food(food);
	this.wood = wood;
	this.stone = stone;
	this.machineParts = machineParts;
	this.refinedMetal = refinedMetal;
	this.computerChips = computerChips;
	this.cacao = cacao;
	this.chocolate = chocolate;
	this.knowledge = knowledge;
    this.magic = magic;
};
$hxClasses["Materials"] = Materials;
Materials.__name__ = ["Materials"];
Materials.fromBuildingInfo = function(info) {
	var m = new Materials();
	if(info.food != null) {
		m.set_food(info.food);
	}
	if(info.wood != null) {
		m.wood = info.wood;
	}
	if(info.stone != null) {
		m.stone = info.stone;
	}
	if(info.machineParts != null) {
		m.machineParts = info.machineParts;
	}
	if(info.magic != null) {
		m.magic = info.magic;
	}
	if(info.refinedMetal != null) {
		m.refinedMetal = info.refinedMetal;
	}
	if(info.computerChips != null) {
		m.computerChips = info.computerChips;
	}
	if(info.cacao != null) {
		m.cacao = info.cacao;
	}
	if(info.chocolate != null) {
		m.chocolate = info.chocolate;
	}
	if(info.knowledge != null) {
		m.knowledge = info.knowledge;
	}
	return m;
};
Materials.fromBuildingUpgradesInfo = function(info) {
	var m = new Materials();
	if(info.food != null) {
		m.set_food(info.food);
	}
	if(info.wood != null) {
		m.wood = info.wood;
	}
	if(info.stone != null) {
		m.stone = info.stone;
	}
	if(info.machineParts != null) {
		m.machineParts = info.machineParts;
	}
	if(info.magic != null) {
		m.magic = info.magic;
	}
	if(info.refinedMetal != null) {
		m.refinedMetal = info.refinedMetal;
	}
	if(info.computerChips != null) {
		m.computerChips = info.computerChips;
	}
	if(info.cacao != null) {
		m.cacao = info.cacao;
	}
	if(info.chocolate != null) {
		m.chocolate = info.chocolate;
	}
	if(info.knowledge != null) {
		m.knowledge = info.knowledge;
	}
	return m;
};
Materials.fromCityUpgradesInfo = function(info) {
	var m = new Materials();
	if(info.food != null) {
		m.set_food(info.food);
	}
	if(info.wood != null) {
		m.wood = info.wood;
	}
	if(info.stone != null) {
		m.stone = info.stone;
	}
	if(info.machineParts != null) {
		m.machineParts = info.machineParts;
	}
	if(info.magic != null) {
		m.magic = info.magic;
	}
	if(info.refinedMetal != null) {
		m.refinedMetal = info.refinedMetal;
	}
	if(info.computerChips != null) {
		m.computerChips = info.computerChips;
	}
	if(info.cacao != null) {
		m.cacao = info.cacao;
	}
	if(info.chocolate != null) {
		m.chocolate = info.chocolate;
	}
	if(info.knowledge != null) {
		m.knowledge = info.knowledge;
	}
	return m;
};
Materials.fromDecorationInfo = function(info) {
	var m = new Materials();
	if(info.food != null) {
		m.set_food(info.food);
	}
	if(info.wood != null) {
		m.wood = info.wood;
	}
	if(info.stone != null) {
		m.stone = info.stone;
	}
	if(info.machineParts != null) {
		m.machineParts = info.machineParts;
	}
	if(info.magic != null) {
		m.magic = info.magic;
	}
	if(info.refinedMetal != null) {
		m.refinedMetal = info.refinedMetal;
	}
	if(info.computerChips != null) {
		m.computerChips = info.computerChips;
	}
	if(info.cacao != null) {
		m.cacao = info.cacao;
	}
	if(info.chocolate != null) {
		m.chocolate = info.chocolate;
	}
	if(info.knowledge != null) {
		m.knowledge = info.knowledge;
	}
	return m;
};
Materials.fromWorldResourceInfo = function(info) {
	var m = new Materials();
	if(info.food != null) {
		m.set_food(info.food);
	}
	if(info.wood != null) {
		m.wood = info.wood;
	}
	if(info.stone != null) {
		m.stone = info.stone;
	}
	if(info.machineParts != null) {
		m.machineParts = info.machineParts;
	}
	if(info.magic != null) {
		m.magic = info.magic;
	}
	if(info.refinedMetal != null) {
		m.refinedMetal = info.refinedMetal;
	}
	if(info.computerChips != null) {
		m.computerChips = info.computerChips;
	}
	if(info.cacao != null) {
		m.cacao = info.cacao;
	}
	if(info.chocolate != null) {
		m.chocolate = info.chocolate;
	}
	if(info.knowledge != null) {
		m.knowledge = info.knowledge;
	}
	return m;
};
Materials.fromStoryMaterials = function(storyMaterials) {
	var m = new Materials();
	if(storyMaterials.food != null) {
		m.set_food(storyMaterials.food);
	}
	if(storyMaterials.wood != null) {
		m.wood = storyMaterials.wood;
	}
	if(storyMaterials.stone != null) {
		m.stone = storyMaterials.stone;
	}
	if(storyMaterials.machineParts != null) {
		m.machineParts = storyMaterials.machineParts;
	}
	if(storyMaterials.magic != null) {
		m.magic = storyMaterials.magic;
	}
	if(storyMaterials.refinedMetal != null) {
		m.refinedMetal = storyMaterials.refinedMetal;
	}
	if(storyMaterials.computerChips != null) {
		m.computerChips = storyMaterials.computerChips;
	}
	if(storyMaterials.cacao != null) {
		m.cacao = storyMaterials.cacao;
	}
	if(storyMaterials.chocolate != null) {
		m.chocolate = storyMaterials.chocolate;
	}
	if(storyMaterials.knowledge != null) {
		m.knowledge = storyMaterials.knowledge;
	}
	return m;
};
Materials.prototype = {
	set_food: function(newFood) {
		this.food = newFood;
		var totalAmountOfSpecialFoods = this.cacao + this.chocolate;
		if(newFood < totalAmountOfSpecialFoods) {
			var cacaoDifference = Math.min(this.cacao,totalAmountOfSpecialFoods - newFood);
			this.cacao -= cacaoDifference;
			totalAmountOfSpecialFoods -= cacaoDifference;
			var chocolateDifference = Math.min(this.chocolate,totalAmountOfSpecialFoods - newFood);
			this.chocolate -= chocolateDifference;
			totalAmountOfSpecialFoods -= chocolateDifference;
		}
		return newFood;
	}
	,canAfford: function(cost) {
		if(cost.food > this.food) {
			return false;
		}
		if(cost.wood > this.wood) {
			return false;
		}
		if(cost.stone > this.stone) {
			return false;
		}
		if(cost.machineParts > this.machineParts) {
			return false;
		}
		if(cost.magic > this.magic) {
			return false;
		}
		if(cost.refinedMetal > this.refinedMetal) {
			return false;
		}
		if(cost.computerChips > this.computerChips) {
			return false;
		}
		if(cost.cacao > this.cacao) {
			return false;
		}
		if(cost.chocolate > this.chocolate) {
			return false;
		}
		if(cost.knowledge > this.knowledge) {
			return false;
		}
		return true;
	}
	,remove: function(cost) {
		var _g = this;
		_g.set_food(_g.food - cost.food);
		this.wood -= cost.wood;
		this.stone -= cost.stone;
		this.machineParts -= cost.machineParts;
		this.magic -= cost.magic;
		this.refinedMetal -= cost.refinedMetal;
		this.computerChips -= cost.computerChips;
		this.cacao -= cost.cacao;
		this.chocolate -= cost.chocolate;
		this.knowledge -= cost.knowledge;
	}
	,add: function(these) {
		var _g = this;
		_g.set_food(_g.food + these.food);
		this.wood += these.wood;
		this.stone += these.stone;
		this.machineParts += these.machineParts;
		this.magic += these.magic;
		this.refinedMetal += these.refinedMetal;
		this.computerChips += these.computerChips;
		this.cacao += these.cacao;
		this.chocolate += these.chocolate;
		this.knowledge += these.knowledge;
	}
	,multiply: function(withNumber) {
		var _g = this;
		_g.set_food(_g.food * withNumber);
		this.wood *= withNumber;
		this.stone *= withNumber;
		this.machineParts *= withNumber;
		this.magic *= withNumber;
		this.refinedMetal *= withNumber;
		this.computerChips *= withNumber;
		this.cacao *= withNumber;
		this.chocolate *= withNumber;
		this.knowledge *= withNumber;
	}
	,roundAll: function() {
		this.set_food(Math.round(this.food));
		this.wood = Math.round(this.wood);
		this.stone = Math.round(this.stone);
		this.machineParts = Math.round(this.machineParts);
		this.magic = Math.round(this.magic);
		this.refinedMetal = Math.round(this.refinedMetal);
		this.computerChips = Math.round(this.computerChips);
		this.cacao = Math.round(this.cacao);
		this.chocolate = Math.round(this.chocolate);
		this.knowledge = Math.round(this.knowledge);
	}
	,addToProduction: function(stats) {
		var ind = 0;
		stats.materialProduction[ind][0] += this.food;
		var ind1 = 1;
		stats.materialProduction[ind1][0] += this.wood;
		var ind2 = 2;
		stats.materialProduction[ind2][0] += this.stone;
		var ind3 = 3;
		stats.materialProduction[ind3][0] += this.machineParts;
		var ind4 = 4;
		stats.materialProduction[ind4][0] += this.refinedMetal;
		var ind5 = 5;
		stats.materialProduction[ind5][0] += this.computerChips;
		var ind6 = 6;
		stats.materialProduction[ind6][0] += this.cacao;
		var ind7 = 7;
		stats.materialProduction[ind7][0] += this.chocolate;
		var ind8 = 8;
		stats.materialProduction[ind8][0] += this.knowledge;
		var ind9 = 9;
		stats.materialProduction[ind9][0] += this.magic;
	}
	,any: function() {
		if(this.food > 0) {
			return true;
		}
		if(this.wood > 0) {
			return true;
		}
		if(this.stone > 0) {
			return true;
		}
		if(this.machineParts > 0) {
			return true;
		}
		if(this.magic > 0) {
			return true;
		}
		if(this.refinedMetal > 0) {
			return true;
		}
		if(this.computerChips > 0) {
			return true;
		}
		if(this.cacao > 0) {
			return true;
		}
		if(this.chocolate > 0) {
			return true;
		}
		if(this.knowledge > 0) {
			return true;
		}
		return false;
	}
	,anyMaterialDifferent: function(mat2) {
		if(this.food != mat2.food) {
			return true;
		}
		if(this.wood != mat2.wood) {
			return true;
		}
		if(this.stone != mat2.stone) {
			return true;
		}
		if(this.machineParts != mat2.machineParts) {
			return true;
		}
		if(this.magic != mat2.magic) {
			return true;
		}
		if(this.refinedMetal != mat2.refinedMetal) {
			return true;
		}
		if(this.computerChips != mat2.computerChips) {
			return true;
		}
		if(this.cacao != mat2.cacao) {
			return true;
		}
		if(this.chocolate != mat2.chocolate) {
			return true;
		}
		if(this.knowledge != mat2.knowledge) {
			return true;
		}
		return false;
	}
	,copy: function() {
		var mat2 = new Materials();
		mat2.add(this);
		return mat2;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(Materials.saveDefinition);
		}
		var value = this.wood;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.stone;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.food;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
		var value3 = this.machineParts;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value3);
		queue.size += 8;
		var value4 = this.knowledge;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes4 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes4,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value4);
		queue.size += 8;
		var value5 = this.refinedMetal;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes5 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes5,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value5);
		queue.size += 8;
		var value6 = this.computerChips;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes6 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes6,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value6);
		queue.size += 8;
		var value7 = this.cacao;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes7 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes7,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value7);
		queue.size += 8;
		var value8 = this.chocolate;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes8 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes8,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value8);
		queue.size += 8;
		var value9 = this.magic;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes9 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes9,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value9);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["wood"] != null ? loadMap.existsReserved("wood") : loadMap.h.hasOwnProperty("wood")) {
			this.wood = __map_reserved["wood"] != null ? loadMap.getReserved("wood") : loadMap.h["wood"];
		}
		if(__map_reserved["stone"] != null ? loadMap.existsReserved("stone") : loadMap.h.hasOwnProperty("stone")) {
			this.stone = __map_reserved["stone"] != null ? loadMap.getReserved("stone") : loadMap.h["stone"];
		}
		if(__map_reserved["food"] != null ? loadMap.existsReserved("food") : loadMap.h.hasOwnProperty("food")) {
			this.set_food(__map_reserved["food"] != null ? loadMap.getReserved("food") : loadMap.h["food"]);
		}
		if(__map_reserved["machineParts"] != null ? loadMap.existsReserved("machineParts") : loadMap.h.hasOwnProperty("machineParts")) {
			this.machineParts = __map_reserved["machineParts"] != null ? loadMap.getReserved("machineParts") : loadMap.h["machineParts"];
		}
		if(__map_reserved["magic"] != null ? loadMap.existsReserved("magic") : loadMap.h.hasOwnProperty("magic")) {
			this.magic = __map_reserved["magic"] != null ? loadMap.getReserved("magic") : loadMap.h["magic"];
		}
		if(__map_reserved["knowledge"] != null ? loadMap.existsReserved("knowledge") : loadMap.h.hasOwnProperty("knowledge")) {
			this.knowledge = __map_reserved["knowledge"] != null ? loadMap.getReserved("knowledge") : loadMap.h["knowledge"];
		}
		if(__map_reserved["refinedMetal"] != null ? loadMap.existsReserved("refinedMetal") : loadMap.h.hasOwnProperty("refinedMetal")) {
			this.refinedMetal = __map_reserved["refinedMetal"] != null ? loadMap.getReserved("refinedMetal") : loadMap.h["refinedMetal"];
		}
		if(__map_reserved["computerChips"] != null ? loadMap.existsReserved("computerChips") : loadMap.h.hasOwnProperty("computerChips")) {
			this.computerChips = __map_reserved["computerChips"] != null ? loadMap.getReserved("computerChips") : loadMap.h["computerChips"];
		}
		if(__map_reserved["cacao"] != null ? loadMap.existsReserved("cacao") : loadMap.h.hasOwnProperty("cacao")) {
			this.cacao = __map_reserved["cacao"] != null ? loadMap.getReserved("cacao") : loadMap.h["cacao"];
		}
		if(__map_reserved["chocolate"] != null ? loadMap.existsReserved("chocolate") : loadMap.h.hasOwnProperty("chocolate")) {
			this.chocolate = __map_reserved["chocolate"] != null ? loadMap.getReserved("chocolate") : loadMap.h["chocolate"];
		}
	}
	,__class__: Materials
};
var MaterialsHelper = function() { };
$hxClasses["MaterialsHelper"] = MaterialsHelper;
MaterialsHelper.__name__ = ["MaterialsHelper"];
MaterialsHelper.findMaterialIndex = function(materialName) {
	return MaterialsHelper.materialNames.indexOf(materialName);
};
MaterialsHelper.findMaterialName = function(index) {
	return MaterialsHelper.materialNames[index];
};
Math.__name__ = ["Math"];
var MouseState = $hxClasses["MouseState"] = { __ename__ : ["MouseState"], __constructs__ : ["Active","Confirmed","None"] };
MouseState.Active = ["Active",0];
MouseState.Active.toString = $estr;
MouseState.Active.__enum__ = MouseState;
MouseState.Confirmed = ["Confirmed",1];
MouseState.Confirmed.toString = $estr;
MouseState.Confirmed.__enum__ = MouseState;
MouseState.None = ["None",2];
MouseState.None.toString = $estr;
MouseState.None.__enum__ = MouseState;
var Mouse = function() {
	this.timeMod = 0;
	this.scrollBarNextMovementPages = 0;
	this.scrollBarMovementPages = 0;
	this.scrollBarNextMovement = 0;
	this.scrollBarMovement = 0;
	this.nextTickReset = 12;
	this.mouseDownTick = 0;
	this.isTouch = false;
	this.disableCityMovement = false;
	this.hasStrongClaim = false;
	this.additionalClaimData = null;
	this.activeObject = null;
	this.nextStepQuietReleased = false;
	this.nextStepMiddleReleased = false;
	this.nextStepMiddleDown = false;
	this.nextStepRightReleased = false;
	this.nextStepRightDown = false;
	this.nextStepReleased = false;
	this.nextStepDown = false;
	this.middleDown = false;
	this.middleReleased = false;
	this.middlePressed = false;
	this.rightDown = false;
	this.rightReleased = false;
	this.rightPressed = false;
	this.moved = false;
	this.down = false;
	this.released = false;
	this.pressed = false;
	this.position = new common_Point(0,0);
	this.unscaledPosition = new common_Point(0,0);
	this.cityPosition = new common_Point(0,0);
	this.mouseDownTick = 0;
	this.pointerDown = [];
	this.pointerUnscaledPosition = new haxe_ds_IntMap();
	this.pointerPosition = new haxe_ds_IntMap();
	this.pointerCityScaledPosition = new haxe_ds_IntMap();
	this.pointerCityPosition = new haxe_ds_IntMap();
};
$hxClasses["Mouse"] = Mouse;
Mouse.__name__ = ["Mouse"];
Mouse.prototype = {
	get_x: function() {
		return this.position.x;
	}
	,get_y: function() {
		return this.position.y;
	}
	,get_cityX: function() {
		return this.cityPosition.x;
	}
	,get_cityY: function() {
		return this.cityPosition.y;
	}
	,claimMouse: function(object,additionalData,disableCityMovementOnPress,continuousEffect) {
		if(continuousEffect == null) {
			continuousEffect = false;
		}
		if(disableCityMovementOnPress == null) {
			disableCityMovementOnPress = true;
		}
		if(this.pressed) {
			this.activeObject = object;
			this.additionalClaimData = additionalData;
			this.disableCityMovement = disableCityMovementOnPress;
			this.hasStrongClaim = false;
		}
		if(this.activeObject == object && this.additionalClaimData == additionalData) {
			if(continuousEffect) {
				if(this.released) {
					this.releaseClaim();
					return MouseState.None;
				} else if(this.down && this.mouseDownTick <= 0) {
					this.mouseDownTick += this.nextTickReset;
					this.nextTickReset -= 1;
					if(this.nextTickReset <= 2) {
						this.nextTickReset = 2;
					}
					return MouseState.Confirmed;
				} else {
					return MouseState.Active;
				}
			}
			if(this.released) {
				this.releaseAllClaims(true);
				return MouseState.Confirmed;
			} else {
				return MouseState.Active;
			}
		} else {
			this.releaseClaim();
		}
		return MouseState.None;
	}
	,weakClaimForScroll: function(object) {
		if(this.activeWeakObject != null && this.activeWeakObject != object) {
			return false;
		}
		if(this.hasStrongClaim) {
			return false;
		}
		if(this.activeWeakObject == object) {
			if(common_Point.distance(this.weakClaimStartPos,this.position) >= 10) {
				this.activeWeakObject = null;
				this.releaseAllClaims();
				return true;
			}
			return false;
		}
		if(this.pressed) {
			this.activeWeakObject = object;
			this.weakClaimStartPos = this.position;
		}
		return false;
	}
	,hasNoClaim: function() {
		return this.activeObject == null;
	}
	,hasSpecificClaim: function(thisClaim) {
		return this.activeObject == thisClaim;
	}
	,strongClaimMouse: function(object,onUpdate,needsPress) {
		if(needsPress == null) {
			needsPress = true;
		}
		if(this.activeObject == object && this.hasStrongClaim) {
			return true;
		}
		if(this.pressed || !needsPress) {
			this.activeObject = object;
			this.disableCityMovement = true;
			this.hasStrongClaim = true;
			this.strongClaimOnUpdate = onUpdate;
			return true;
		}
		return false;
	}
	,preHandling: function() {
		if(this.released && this.hasStrongClaim) {
			this.releaseAllClaims(true);
		}
	}
	,afterHandling: function() {
		if(this.hasStrongClaim && this.strongClaimOnUpdate != null) {
			this.strongClaimOnUpdate();
		}
	}
	,releaseAllClaims: function(evenStrongClaims) {
		if(evenStrongClaims == null) {
			evenStrongClaims = false;
		}
		this.releaseClaim(evenStrongClaims);
		this.releaseWeakClaim();
	}
	,releaseClaim: function(evenStrongClaims) {
		if(evenStrongClaims == null) {
			evenStrongClaims = false;
		}
		if(evenStrongClaims || !this.hasStrongClaim) {
			this.activeObject = null;
			this.additionalClaimData = null;
			this.mouseDownTick = 0;
			this.nextTickReset = 12;
			this.hasStrongClaim = false;
		}
	}
	,releaseWeakClaim: function() {
		this.activeWeakObject = null;
	}
	,calcCityPosition: function(game,cityState) {
		var _this_y;
		var _this_x;
		var _this_y1;
		var _this_x1;
		var _this_y2;
		var _this_x2;
		var _this_y3;
		var _this_x3;
		var _this_y4;
		var _this_x4;
		var _this = this.unscaledPosition;
		var otherPoint_y;
		var otherPoint_x = (game.rect.width / 2 | 0) * game.scaling;
		otherPoint_y = (game.rect.height / 2 | 0) * game.scaling;
		_this_x4 = _this.x - otherPoint_x;
		_this_y4 = _this.y - otherPoint_y;
		_this_x3 = _this_x4;
		_this_y3 = _this_y4;
		var withFloat = cityState.zoomScale;
		_this_x2 = _this_x3 / withFloat;
		_this_y2 = _this_y3 / withFloat;
		var otherPoint_y1;
		var otherPoint_x1 = game.addX;
		otherPoint_y1 = game.addY;
		_this_x1 = _this_x2 - otherPoint_x1;
		_this_y1 = _this_y2 - otherPoint_y1;
		var otherPoint = cityState.viewPos;
		_this_x = _this_x1 + otherPoint.x;
		_this_y = _this_y1 + otherPoint.y;
		return new common_Point(Math.floor(_this_x),Math.floor(_this_y));
	}
	,calcCityPositionForPointer: function(game,cityState,pointer) {
		var _this = this.calcCityFPositionForPointer(game,cityState,pointer);
		return new common_Point(Math.floor(_this.x),Math.floor(_this.y));
	}
	,calcCityFPositionForPointer: function(game,cityState,pointer) {
		var _this_y;
		var _this_x;
		var _this_y1;
		var _this_x1;
		var _this_y2;
		var _this_x2;
		var _this_y3;
		var _this_x3;
		var _this = this.pointerUnscaledPosition.h[pointer];
		var otherPoint_y;
		var otherPoint_x = (game.rect.width / 2 | 0) * game.scaling;
		otherPoint_y = (game.rect.height / 2 | 0) * game.scaling;
		_this_x3 = _this.x - otherPoint_x;
		_this_y3 = _this.y - otherPoint_y;
		_this_x2 = _this_x3;
		_this_y2 = _this_y3;
		var withFloat = cityState.zoomScale;
		_this_x1 = _this_x2 / withFloat;
		_this_y1 = _this_y2 / withFloat;
		var otherPoint_y1;
		var otherPoint_x1 = game.addX;
		otherPoint_y1 = game.addY;
		_this_x = _this_x1 - otherPoint_x1;
		_this_y = _this_y1 - otherPoint_y1;
		var otherPoint = cityState.viewPos;
		return new common_FPoint(_this_x + otherPoint.x,_this_y + otherPoint.y);
	}
	,getActiveObject: function() {
		return this.activeObject;
	}
	,resetPosition: function() {
		this.position = new common_Point(-100000,-100000);
		this.unscaledPosition = new common_Point(-100000,-100000);
		this.cityScaledPosition = new common_FPoint(-100000,-100000);
		this.cityPosition = new common_Point(-100000,-100000);
	}
	,__class__: Mouse
};
var NewGameCreator = function(game,stage,newFile) {
	this.game = game;
	this.stage = stage;
	var cityStage = new PIXI.Container();
	stage.addChild(cityStage);
	this.bgCity = new City(game,cityStage,newFile,true,"___");
	this.guiStage = new PIXI.Container();
	stage.addChild(this.guiStage);
	this.gui = new GUI(game,this.guiStage);
	this.resize();
	this.startUI(newFile);
	this.resize();
};
$hxClasses["NewGameCreator"] = NewGameCreator;
NewGameCreator.__name__ = ["NewGameCreator"];
NewGameCreator.__interfaces__ = [GameState];
NewGameCreator.prototype = {
	get_publicGUI: function() {
		return this.gui;
	}
	,startUI: function(newFile) {
		var isFreePlay = Lambda.find(Resources.allStoriesInfo,function(st) {
			return st.link == newFile;
		}).freePlay;
		if(isFreePlay != null && isFreePlay) {
			var f = $bind(this,this.createSaveWindow);
			var a1 = newFile;
			var tmp = function() {
				f(a1,false);
			};
			var f1 = ($_=this.game,$bind($_,$_.restoreState));
			var tmp1 = function() {
				f1();
			};
			gui_FreePlayConfigureWindow.createWindow(this.bgCity,this.gui,tmp,tmp1);
		} else {
			this.createSaveWindow(newFile);
		}
	}
	,createSaveWindow: function(storyName,restoreStateOnCancel) {
		if(restoreStateOnCancel == null) {
			restoreStateOnCancel = true;
		}
		var _gthis = this;
		this.gui.windowOnDestroy = null;
		gui_SaveLoadWindows.createSaveWindow(this.game,this.gui,"Which save slot would you like to use?",function(fileName) {
			_gthis.bgCity.disableDisplayOnlyMode(fileName);
			Config.doPlay();
			Analytics.sendEvent("game","newGame",null,storyName);
			_gthis.game.switchState(_gthis.bgCity);
			Config.onCitySwitch();
			_gthis.guiStage.destroy();
		},function() {
			if(restoreStateOnCancel) {
				_gthis.game.restoreState();
			}
		});
	}
	,handleMouse: function(mouse) {
		if(this.gui.handleMouse(mouse)) {
			return true;
		}
		return false;
	}
	,update: function(timeMod) {
		this.bgCity.update(timeMod);
		this.gui.update(timeMod);
	}
	,postDraw: function() {
		this.bgCity.postDraw();
	}
	,resize: function() {
		this.bgCity.resize();
		this.gui.resize();
	}
	,refocus: function() {
		this.bgCity.refocus();
	}
	,stop: function() {
		this.bgCity.stop();
	}
	,pause: function() {
	}
	,resume: function() {
	}
	,__class__: NewGameCreator
};
var PermanentMetaHelper = function() { };
$hxClasses["PermanentMetaHelper"] = PermanentMetaHelper;
PermanentMetaHelper.__name__ = ["PermanentMetaHelper"];
PermanentMetaHelper.getClassIDLength = function() {
	return PermanentMetaHelper.buildingClassesNumber;
};
PermanentMetaHelper.getClassID = function(className) {
	var _this = PermanentMetaHelper.registeredClassNames;
	var registeredClassName = __map_reserved[className] != null ? _this.getReserved(className) : _this.h[className];
	if(registeredClassName != null) {
		return registeredClassName;
	}
	var v = PermanentMetaHelper.buildingClassesNumber;
	var _this1 = PermanentMetaHelper.registeredClassNames;
	if(__map_reserved[className] != null) {
		_this1.setReserved(className,v);
	} else {
		_this1.h[className] = v;
	}
	PermanentMetaHelper.buildingClassesNumber++;
	return PermanentMetaHelper.buildingClassesNumber - 1;
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
var Resources = function() { };
$hxClasses["Resources"] = Resources;
Resources.__name__ = ["Resources"];
Resources.getTextures = function(name,number,striped) {
	if(striped == null) {
		striped = false;
	}
	var cacheName = name + "%num%" + number;
	if(striped) {
		cacheName += "%s%";
	}
	var _this = Resources.multiTextureCache;
	if(__map_reserved[cacheName] != null ? _this.existsReserved(cacheName) : _this.h.hasOwnProperty(cacheName)) {
		var _this1 = Resources.multiTextureCache;
		if(__map_reserved[cacheName] != null) {
			return _this1.getReserved(cacheName);
		} else {
			return _this1.h[cacheName];
		}
	}
	var textures = [];
	var _g1 = 0;
	var _g = number;
	while(_g1 < _g) {
		var i = _g1++;
		var tex = PIXI.Texture.fromFrame("" + name + ".png").clone();
		var w = ((tex.frame.width + 2 | 0) / number | 0) - (striped ? 1 : 2);
		tex.frame = new PIXI.Rectangle(tex.frame.x + (w + (striped ? 1 : 2)) * i - (striped && i % 2 == 1 ? 1 : 0),tex.frame.y,w,tex.frame.height);
		textures.push(tex);
	}
	var _this2 = Resources.multiTextureCache;
	if(__map_reserved[cacheName] != null) {
		_this2.setReserved(cacheName,textures);
	} else {
		_this2.h[cacheName] = textures;
	}
	return textures;
};
Resources.getTexturesByWidth = function(name,width,striped) {
	if(striped == null) {
		striped = false;
	}
	var cacheName = name + "%width%" + width;
	if(striped) {
		cacheName += "%s%";
	}
	var _this = Resources.multiTextureCache;
	if(__map_reserved[cacheName] != null ? _this.existsReserved(cacheName) : _this.h.hasOwnProperty(cacheName)) {
		var _this1 = Resources.multiTextureCache;
		if(__map_reserved[cacheName] != null) {
			return _this1.getReserved(cacheName);
		} else {
			return _this1.h[cacheName];
		}
	}
	var textures = Resources.getTextures(name,(PIXI.Texture.fromFrame("" + name + ".png").width + 2) / (width + (striped ? 1 : 2)) | 0,striped);
	var _this2 = Resources.multiTextureCache;
	if(__map_reserved[cacheName] != null) {
		_this2.setReserved(cacheName,textures);
	} else {
		_this2.h[cacheName] = textures;
	}
	return textures;
};
Resources.getTexturesAsGrid = function(name,numberW,numberH,marginX,striped) {
	if(striped == null) {
		striped = false;
	}
	if(marginX == null) {
		marginX = 0;
	}
	var cacheName = name + "%numW%" + numberW + "%numH%" + numberH;
	if(striped) {
		cacheName += "%s%";
	}
	var _this = Resources.multiTextureCache2;
	if(__map_reserved[cacheName] != null ? _this.existsReserved(cacheName) : _this.h.hasOwnProperty(cacheName)) {
		var _this1 = Resources.multiTextureCache2;
		if(__map_reserved[cacheName] != null) {
			return _this1.getReserved(cacheName);
		} else {
			return _this1.h[cacheName];
		}
	}
	var textures = [];
	var _g1 = 0;
	var _g = numberW;
	while(_g1 < _g) {
		var i = _g1++;
		textures[i] = [];
		var _g3 = 0;
		var _g2 = numberH;
		while(_g3 < _g2) {
			var j = _g3++;
			var tex = PIXI.Texture.fromFrame("" + name + ".png").clone();
			var w = ((tex.frame.width + 2 | 0) / numberW | 0) - (striped ? 1 : marginX);
			var h = (tex.frame.height | 0) / numberH | 0;
			tex.frame = new PIXI.Rectangle(tex.frame.x + (w + (striped ? 1 : marginX)) * i - (striped && i % 2 == 1 ? 1 : 0),tex.frame.y + h * j,w,h);
			textures[i].push(tex);
		}
	}
	var _this2 = Resources.multiTextureCache2;
	if(__map_reserved[cacheName] != null) {
		_this2.setReserved(cacheName,textures);
	} else {
		_this2.h[cacheName] = textures;
	}
	return textures;
};
Resources.getTexturesBySize = function(name,width,height,marginX,striped) {
	if(striped == null) {
		striped = false;
	}
	if(marginX == null) {
		marginX = 0;
	}
	var cacheName = name + "%width%" + width + "%height%" + height;
	if(striped) {
		cacheName += "%s%";
	}
	var _this = Resources.multiTextureCache2;
	if(__map_reserved[cacheName] != null ? _this.existsReserved(cacheName) : _this.h.hasOwnProperty(cacheName)) {
		var _this1 = Resources.multiTextureCache2;
		if(__map_reserved[cacheName] != null) {
			return _this1.getReserved(cacheName);
		} else {
			return _this1.h[cacheName];
		}
	}
	var textures = Resources.getTexturesAsGrid(name,(PIXI.Texture.fromFrame("" + name + ".png").width + marginX) / (width + (striped ? 1 : marginX)) | 0,PIXI.Texture.fromFrame("" + name + ".png").height / height | 0,null,striped);
	var _this2 = Resources.multiTextureCache2;
	if(__map_reserved[cacheName] != null) {
		_this2.setReserved(cacheName,textures);
	} else {
		_this2.h[cacheName] = textures;
	}
	return textures;
};
Resources.getTexture = function(name,part) {
	var cacheName = part != null ? "" + name + "@" + part.x + "," + part.y + "," + part.width + "," + part.height : name;
	var _this = Resources.singleTextureCache;
	if(__map_reserved[cacheName] != null ? _this.existsReserved(cacheName) : _this.h.hasOwnProperty(cacheName)) {
		var _this1 = Resources.singleTextureCache;
		if(__map_reserved[cacheName] != null) {
			return _this1.getReserved(cacheName);
		} else {
			return _this1.h[cacheName];
		}
	}
	if(part == null && name.indexOf("@") != -1) {
		var splitName = name.split("@");
		name = splitName[0];
		var partString = splitName[1];
		var splitParts = partString.split(",").map(function(str) {
			return Std.parseInt(str);
		});
		part = new common_Rectangle(splitParts[0],splitParts[1],splitParts[2],splitParts[3]);
	}
	var tex = PIXI.Texture.fromFrame("" + name + ".png").clone();
	if(part != null) {
		tex.frame = new PIXI.Rectangle(tex.frame.x + part.x,tex.frame.y + part.y,part.width,part.height);
	}
	var _this2 = Resources.singleTextureCache;
	if(__map_reserved[cacheName] != null) {
		_this2.setReserved(cacheName,tex);
	} else {
		_this2.h[cacheName] = tex;
	}
	return tex;
};
Resources.makeSprite = function(textureName,part) {
	return new PIXI.Sprite(Resources.getTexture(textureName,part));
};
Resources.initializeCityResources = function(cr) {
	cr.buildingInfoArray = [];
	var _g = 0;
	var _g1 = Resources.buildingInfoArray;
	while(_g < _g1.length) {
		var bi = _g1[_g];
		++_g;
		cr.buildingInfoArray.push(Reflect.copy(bi));
	}
	cr.buildingInfo = new haxe_ds_StringMap();
	var _g2 = 0;
	var _g11 = cr.buildingInfoArray;
	while(_g2 < _g11.length) {
		var building = _g11[_g2];
		++_g2;
		var k = "buildings." + building.className;
		var _this = cr.buildingInfo;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,building);
		} else {
			_this.h[k] = building;
		}
	}
};
var Settings = function() { };
$hxClasses["Settings"] = Settings;
Settings.__name__ = ["Settings"];
Settings.load = function() {
	if(common_Storage.getItem("tfe2_settings",function(err,theSave) {
		if(err == null && theSave != null) {
			Settings.musicOn = theSave.musicOn;
			Settings.soundOn = theSave.soundOn;
			if(theSave.pathfindingWorkers != null) {
				Settings.pathfindingWorkers = theSave.pathfindingWorkers;
			}
			if(theSave.secretCodesEnabled != null) {
				Settings.secretCodesEnabled = theSave.secretCodesEnabled;
			}
			Settings.fullscreen = theSave.isFullScreen;
			if(Settings.fullscreen == null) {
				Settings.fullscreen = true;
			}
			if(Settings.fullscreen && window.document.fullscreenElement == null) {
				jsFunctions.goFullscreen();
			}
		} else {
			Settings.fullscreen = true;
			if(Settings.fullscreen && window.document.fullscreenElement == null) {
				jsFunctions.goFullscreen();
			}
		}
		Settings.settingsLoaded = true;
	}) == null) {
		Settings.settingsLoaded = true;
		Settings.fullscreen = true;
		if(Settings.fullscreen && window.document.fullscreenElement == null) {
			jsFunctions.goFullscreen();
		}
	}
	if(Settings.pathfindingWorkers <= 0) {
		Settings.resetPathfindingWorkers();
	}
	window.document.addEventListener("fullscreenchange",function() {
		Settings.fullscreen = window.document.fullscreenElement != null || window.fullScreen == true;
		Settings.save();
	});
};
Settings.resetPathfindingWorkers = function() {
	Settings.pathfindingWorkers = 1;
	if(window.navigator != null && window.navigator.hardwareConcurrency != null) {
		try {
			var val = (window.navigator.hardwareConcurrency / 2 | 0) - 1;
			Settings.pathfindingWorkers = val < 1 ? 1 : val > 7 ? 7 : val;
		} catch( e ) {
			Settings.pathfindingWorkers = 1;
		}
	}
	return Settings.pathfindingWorkers;
};
Settings.save = function() {
	var theSave = { };
	theSave.musicOn = Settings.musicOn;
	theSave.soundOn = Settings.soundOn;
	theSave.pathfindingWorkers = Settings.pathfindingWorkers;
	theSave.secretCodesEnabled = Settings.secretCodesEnabled;
	theSave.isFullScreen = Settings.fullscreen;
	common_Storage.setItem("tfe2_settings",theSave,function() {
	});
};
Settings.hasSecretCode = function(code) {
	return common_ArrayExtensions.contains(Settings.secretCodesEnabled,code);
};
Settings.unlockSecretCode = function(code) {
	if(Settings.hasSecretCode(code)) {
		return;
	}
	Settings.secretCodesEnabled.push(code);
	Settings.save();
};
Settings.loadFromCitySave = function(queue) {
	var intToRead = queue.bytes.getInt32(queue.readStart);
	queue.readStart += 4;
	var numberOfSecretCodesStored = intToRead;
	var _g1 = 0;
	var _g = numberOfSecretCodesStored;
	while(_g1 < _g) {
		var i = _g1++;
		var tmp;
		var byteToRead = queue.bytes.b[queue.readStart];
		queue.readStart += 1;
		if(byteToRead == 1) {
			var intToRead1 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var readPos = intToRead1;
			var stringLength = queue.bytes.getInt32(readPos);
			tmp = queue.bytes.getString(readPos + 4,stringLength);
		} else {
			var intToRead2 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var len = intToRead2;
			var str = queue.bytes.getString(queue.readStart,len);
			queue.readStart += len;
			tmp = str;
		}
		Settings.unlockSecretCode(tmp);
	}
};
Settings.saveToCitySave = function(queue) {
	var value = Settings.secretCodesEnabled.length;
	if(queue.size + 4 > queue.bytes.length) {
		var oldBytes = queue.bytes;
		queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
		queue.bytes.blit(0,oldBytes,0,queue.size);
	}
	queue.bytes.setInt32(queue.size,value);
	queue.size += 4;
	var _g = 0;
	var _g1 = Settings.secretCodesEnabled;
	while(_g < _g1.length) {
		var sc = _g1[_g];
		++_g;
		queue.addString(sc);
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var World = function(game,city,stage,midStage,bgStage,rect,seed) {
	this.isUnbuildableFromAliens = false;
	this.hasTeleporterOnGroup = false;
	this.stresstest = false;
	this.knownResourceInavailabilityLastResetDay = 0;
	this.relevantWorldsForDirectCityConnectionsCache = null;
	this.worldGroup = null;
	this.game = game;
	this.city = city;
	this.rect = rect;
	this.stage = stage;
	this.midStage = midStage;
	this.bgStage = bgStage;
	this.seed = seed;
	this.worldGlow = null;
	var random1 = new random_SeedeableRandom(seed);
	if(seed == null) {
		this.seed = random1.seed;
	}
	if(rect.height != 0) {
		var worldSpriteAndMask = graphics_WorldImage.makeWorldSprite(random1,rect.width,rect.height);
		this.worldSprite = worldSpriteAndMask.sprite;
		this.mask = worldSpriteAndMask.mask;
		this.worldSprite.position.set(rect.x,rect.y);
		stage.cacheableChildren.push(this.worldSprite);
		stage.isInvalid = true;
	} else {
		this.worldSprite = null;
	}
	var numberOfHCells = Math.ceil(rect.width / 20);
	var _g = [];
	var _g2 = 0;
	var _g1 = numberOfHCells;
	while(_g2 < _g1) {
		var _ = _g2++;
		_g.push([]);
	}
	this.permanents = _g;
	var _g11 = [];
	var _g3 = 0;
	var _g21 = numberOfHCells;
	while(_g3 < _g21) {
		var _1 = _g3++;
		_g11.push(null);
	}
	this.decorations = _g11;
	if(!Game.isLoading && rect.height != 0) {
		var _g31 = 0;
		var _g22 = numberOfHCells;
		while(_g31 < _g22) {
			var x = _g31++;
			this.setDecoration("spr_grass",x);
		}
	}
	this.reachableWorlds = [];
	this.knownResourceInavailability = new haxe_ds_StringMap();
};
$hxClasses["World"] = World;
World.__name__ = ["World"];
World.fromLoad = function(queue,game,city,stage,midStage,bgStage) {
	var rect = queue.readRectangle();
	var intToRead = queue.bytes.getInt32(queue.readStart);
	queue.readStart += 4;
	var seed = intToRead;
	var thisWorld = new World(game,city,stage,midStage,bgStage,rect,seed);
	var xPos = 0;
	var _g = 0;
	var _g1 = thisWorld.permanents;
	while(_g < _g1.length) {
		var permanentStack = _g1[_g];
		++_g;
		var intToRead1 = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var stackSize = intToRead1;
		var _g3 = 0;
		var _g2 = stackSize;
		while(_g3 < _g2) {
			var i = _g3++;
			var intToRead2 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var firstInt = intToRead2;
			if(firstInt == 2) {
				permanentStack.push(null);
			} else {
				var isBuilding = firstInt == 1;
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var permanentID = intToRead3;
				var typeClass;
				var byteToRead = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos = intToRead4;
					var stringLength = queue.bytes.getInt32(readPos);
					typeClass = queue.bytes.getString(readPos + 4,stringLength);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len = intToRead5;
					var str = queue.bytes.getString(queue.readStart,len);
					queue.readStart += len;
					typeClass = str;
				}
				var typeClass1 = Type.resolveClass(typeClass);
				var worldPos = new common_Point(xPos,i);
				var pos = new common_Point(rect.x + 20 * xPos,rect.y - 20 * (1 + i));
				var inst = isBuilding ? Type.createInstance(typeClass1,[game,stage,bgStage,city,thisWorld,pos,worldPos,permanentID]) : Type.createInstance(typeClass1,[game,permanentID,city,thisWorld,pos,worldPos,stage]);
				permanentStack.push(inst);
				inst.load(queue);
			}
		}
		if(stackSize == 0) {
			var decorationName;
			var byteToRead1 = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead1 == 1) {
				var intToRead6 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos1 = intToRead6;
				var stringLength1 = queue.bytes.getInt32(readPos1);
				decorationName = queue.bytes.getString(readPos1 + 4,stringLength1);
			} else {
				var intToRead7 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len1 = intToRead7;
				var str1 = queue.bytes.getString(queue.readStart,len1);
				queue.readStart += len1;
				decorationName = str1;
			}
			if(decorationName != "") {
				var intToRead8 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var subImage = intToRead8;
				thisWorld.setDecoration(decorationName,xPos,subImage);
			}
		}
		++xPos;
	}
	if(queue.version >= 27) {
		var byteToRead2 = queue.bytes.b[queue.readStart];
		queue.readStart += 1;
		thisWorld.isUnbuildableFromAliens = byteToRead2 == 1;
		if(thisWorld.isUnbuildableFromAliens) {
			thisWorld.setUnbuildableAliens();
		}
	}
	return thisWorld;
};
World.prototype = {
	update: function(timeMod) {
		if(this.knownResourceInavailabilityLastResetDay != 1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0)) {
			this.knownResourceInavailability = new haxe_ds_StringMap();
			this.knownResourceInavailabilityLastResetDay = 1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0);
		}
		if(!this.isUnbuildableFromAliens && this.worldGlow != null) {
			this.worldGlow.alpha -= 0.1 * timeMod;
			if(this.worldGlow.alpha <= 0) {
				this.worldGlow.destroy();
				this.worldGlow = null;
			}
		}
	}
	,canBuildOnSurface: function() {
		if(this.rect.height != 0) {
			return !this.isUnbuildableFromAliens;
		} else {
			return false;
		}
	}
	,onCityChange: function() {
		this.knownResourceInavailability = new haxe_ds_StringMap();
	}
	,build: function(buildingType,xPos,insertAt) {
		if(insertAt == null || insertAt == 0) {
			this.removeDecoration(xPos);
		}
		var currLen = this.permanents[xPos].length;
		var yPos = insertAt == null ? currLen : insertAt;
		if(yPos > currLen) {
			var _g1 = 0;
			var _g = yPos - currLen;
			while(_g1 < _g) {
				var i = _g1++;
				this.permanents[xPos].push(null);
			}
		}
		var newBuilding = Type.createInstance(buildingType,[this.game,this.stage,this.bgStage,this.city,this,new common_Point(this.rect.x + 20 * xPos,this.rect.y - 20 * (1 + yPos)),new common_Point(xPos,yPos),this.city.maxPermanentID++]);
		if(yPos < this.permanents[xPos].length && this.permanents[xPos][yPos] == null) {
			this.permanents[xPos][yPos] = newBuilding;
		} else if(insertAt == null) {
			this.permanents[xPos].push(newBuilding);
		} else {
			this.permanents[xPos].splice(insertAt,0,newBuilding);
			var _g11 = yPos + 1;
			var _g2 = currLen + 1;
			while(_g11 < _g2) {
				var i1 = _g11++;
				if(this.permanents[xPos][i1] == null) {
					this.permanents[xPos].splice(i1,1);
					break;
				}
			}
		}
		if(this.city.windowRelatedOnBuildOrDestroy != null) {
			this.city.windowRelatedOnBuildOrDestroy();
		}
		newBuilding.onBuild();
		return newBuilding;
	}
	,createWorldResource: function(resourceType,xPos) {
		this.removeDecoration(xPos);
		var newResource = Type.createInstance(resourceType,[this.game,this.city.maxPermanentID++,this.city,this,new common_Point(this.rect.x + 20 * xPos,this.rect.y - 20),new common_Point(xPos,0),this.stage]);
		this.permanents[xPos][0] = newResource;
		return newResource;
	}
	,setDecoration: function(textureName,xPos,image) {
		this.removeDecoration(xPos);
		if(this.permanents[xPos].length > 0 && this.permanents[xPos][0] != null) {
			return;
		}
		this.decorations[xPos] = new graphics_GroundDecoration(this.stage,new common_Point(this.rect.x + 20 * xPos,this.rect.y - 20),textureName,image);
	}
	,removeDecoration: function(xPos) {
		if(this.decorations[xPos] != null) {
			this.decorations[xPos].destroy();
			this.decorations[xPos] = null;
		}
	}
	,handleMouse: function(mouse) {
		var tmp;
		if(this.stresstest) {
			var _this = this.rect;
			tmp = new common_Point(_this.x,_this.y).x == 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.stresstest = false;
			var _g = 0;
			while(_g < 1250) {
				var i = _g++;
				var i0 = random_Random.getInt(this.permanents.length);
				if(this.permanents[i0].length == 0 || this.permanents[i0][this.permanents[i0].length - 1].isBuilding) {
					this.build(buildings_NormalHouse,i0);
				}
				var i1 = random_Random.getInt(this.permanents.length);
				if(this.permanents[i1].length == 0 || this.permanents[i1][this.permanents[i1].length - 1].isBuilding) {
					this.build(buildings_IndoorFarm,i1);
				}
			}
			this.city.connections.updateCityConnections();
			this.city.simulation.updatePathfinder(false);
		}
		if(mouse.get_cityX() >= this.rect.x && mouse.get_cityX() < this.rect.x + this.rect.width && mouse.get_cityY() < this.rect.y) {
			var pressedStack = this.permanents[(mouse.get_cityX() - this.rect.x) / 20 | 0];
			var permanentNumber = (this.rect.y - (mouse.get_cityY() + 1)) / 20 | 0;
			if(permanentNumber < pressedStack.length) {
				if(pressedStack[permanentNumber] != null) {
					var _g1 = mouse.claimMouse(pressedStack[permanentNumber],null,false);
					switch(_g1[1]) {
					case 0:
						pressedStack[permanentNumber].onHover(true);
						return true;
					case 1:
						pressedStack[permanentNumber].onClick();
						return true;
					case 2:
						pressedStack[permanentNumber].onHover(false);
						return false;
					}
				}
			}
		}
		return false;
	}
	,save: function(queue) {
		queue.addRectangle(this.rect);
		var value = this.seed;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var _g1 = 0;
		var _g = this.permanents.length;
		while(_g1 < _g) {
			var i = _g1++;
			var permanentStack = this.permanents[i];
			var value1 = permanentStack.length;
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes1 = queue.bytes;
				queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes.blit(0,oldBytes1,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value1);
			queue.size += 4;
			var _g2 = 0;
			while(_g2 < permanentStack.length) {
				var permanent = permanentStack[_g2];
				++_g2;
				if(permanent == null) {
					if(queue.size + 4 > queue.bytes.length) {
						var oldBytes2 = queue.bytes;
						queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
						queue.bytes.blit(0,oldBytes2,0,queue.size);
					}
					queue.bytes.setInt32(queue.size,2);
					queue.size += 4;
				} else {
					var value2 = permanent.isBuilding ? 1 : 0;
					if(queue.size + 4 > queue.bytes.length) {
						var oldBytes3 = queue.bytes;
						queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
						queue.bytes.blit(0,oldBytes3,0,queue.size);
					}
					queue.bytes.setInt32(queue.size,value2);
					queue.size += 4;
					var value3 = permanent.id;
					if(queue.size + 4 > queue.bytes.length) {
						var oldBytes4 = queue.bytes;
						queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
						queue.bytes.blit(0,oldBytes4,0,queue.size);
					}
					queue.bytes.setInt32(queue.size,value3);
					queue.size += 4;
					queue.addString(permanent.className);
					permanent.save(queue);
				}
			}
			if(permanentStack.length == 0) {
				if(this.decorations[i] != null) {
					queue.addString(this.decorations[i].textureName);
					var value4 = this.decorations[i].subImage;
					if(queue.size + 4 > queue.bytes.length) {
						var oldBytes5 = queue.bytes;
						queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
						queue.bytes.blit(0,oldBytes5,0,queue.size);
					}
					queue.bytes.setInt32(queue.size,value4);
					queue.size += 4;
				} else {
					queue.addString("");
				}
			}
		}
		var value5 = this.isUnbuildableFromAliens ? 1 : 0;
		if(queue.size + 1 > queue.bytes.length) {
			var oldBytes6 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 1) * 2));
			queue.bytes.blit(0,oldBytes6,0,queue.size);
		}
		queue.bytes.b[queue.size] = value5 & 255;
		queue.size += 1;
	}
	,setUnbuildableAliens: function() {
		if(this.worldGlow == null) {
			this.worldGlow = new PIXI.Sprite(Resources.getTexture("spr_blueworldglow"));
			this.worldGlow.width = this.rect.width;
			this.worldGlow.position.set(this.rect.x,this.rect.y - 4);
			this.stage.addChild(this.worldGlow);
			this.isUnbuildableFromAliens = true;
		}
	}
	,makeBuildableAliens: function() {
		this.isUnbuildableFromAliens = false;
	}
	,cleanup: function() {
		if(this.worldSprite != null) {
			var _this = this.stage;
			var child = this.worldSprite;
			HxOverrides.remove(_this.cacheableChildren,child);
			_this.isInvalid = true;
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.worldSprite.texture.destroy(true);
			this.worldSprite.destroy();
		}
	}
	,__class__: World
};
var WorldResource = function(game,id,city,world,position,worldPosition,stage,texture) {
	this.stage = stage;
	this.sprite = new PIXI.Sprite(texture);
	stage.addChild(this.sprite);
	Permanent.call(this,game,id,city,world,position,worldPosition);
	this.positionSprites();
};
$hxClasses["WorldResource"] = WorldResource;
WorldResource.__name__ = ["WorldResource"];
WorldResource.__super__ = Permanent;
WorldResource.prototype = $extend(Permanent.prototype,{
	destroy: function() {
		Permanent.prototype.destroy.call(this);
		this.stage.removeChild(this.sprite);
		this.city.simulation.resourcePriorityManager.deprioritize(this);
	}
	,positionSprites: function() {
		Permanent.prototype.positionSprites.call(this);
		this.sprite.position.set(this.position.x,this.position.y);
	}
	,__class__: WorldResource
});
var buildingUpgrades_AIAssistedDiagnosis = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.extraQuality += 25;
	building.extraCapacity += 50;
};
$hxClasses["buildingUpgrades.AIAssistedDiagnosis"] = buildingUpgrades_AIAssistedDiagnosis;
buildingUpgrades_AIAssistedDiagnosis.__name__ = ["buildingUpgrades","AIAssistedDiagnosis"];
buildingUpgrades_AIAssistedDiagnosis.__super__ = BuildingUpgrade;
buildingUpgrades_AIAssistedDiagnosis.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_smartdiagnose";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var ccf = this.building;
		ccf.extraQuality -= 25;
		ccf.extraCapacity -= 50;
	}
	,__class__: buildingUpgrades_AIAssistedDiagnosis
});
var buildingUpgrades_AIMining = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.stoneMinedPerActionBoost += 0.3;
};
$hxClasses["buildingUpgrades.AIMining"] = buildingUpgrades_AIMining;
buildingUpgrades_AIMining.__name__ = ["buildingUpgrades","AIMining"];
buildingUpgrades_AIMining.__super__ = BuildingUpgrade;
buildingUpgrades_AIMining.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_aiMining";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		this.building.stoneMinedPerActionBoost -= 0.3;
	}
	,__class__: buildingUpgrades_AIMining
});
var buildingUpgrades_AutomaticWaterManagement = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.regrowSpeedBoost += 2;
};
$hxClasses["buildingUpgrades.AutomaticWaterManagement"] = buildingUpgrades_AutomaticWaterManagement;
buildingUpgrades_AutomaticWaterManagement.__name__ = ["buildingUpgrades","AutomaticWaterManagement"];
buildingUpgrades_AutomaticWaterManagement.__super__ = BuildingUpgrade;
buildingUpgrades_AutomaticWaterManagement.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		this.building.regrowSpeedBoost -= 2;
	}
	,__class__: buildingUpgrades_AutomaticWaterManagement
});
var buildingUpgrades_BetterLightShow = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.nightClubEntertainmentQuantity += 40;
	this.addedLasers = [];
	this.addedLasers.push({ start : new common_FPoint(7,4), end : new common_FPoint(6,18), hue : 90, speed : 0.5, targetLaserHue : -1, laserSprite : null});
	this.addedLasers.push({ start : new common_FPoint(12,4), end : new common_FPoint(6,18), hue : 270, speed : -0.5, targetLaserHue : -1, laserSprite : null});
	Lambda.iter(this.addedLasers,function(l) {
		building.lasers.push(l);
	});
};
$hxClasses["buildingUpgrades.BetterLightShow"] = buildingUpgrades_BetterLightShow;
buildingUpgrades_BetterLightShow.__name__ = ["buildingUpgrades","BetterLightShow"];
buildingUpgrades_BetterLightShow.__super__ = BuildingUpgrade;
buildingUpgrades_BetterLightShow.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var nightClub = this.building;
		nightClub.nightClubEntertainmentQuantity -= 40;
		Lambda.iter(this.addedLasers,function(l) {
			if(l.laserSprite != null) {
				l.laserSprite.destroy();
			}
			HxOverrides.remove(nightClub.lasers,l);
		});
	}
	,__class__: buildingUpgrades_BetterLightShow
});
var buildingUpgrades_BetterPickaxes = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.stoneMinedPerActionBoost += 0.2;
};
$hxClasses["buildingUpgrades.BetterPickaxes"] = buildingUpgrades_BetterPickaxes;
buildingUpgrades_BetterPickaxes.__name__ = ["buildingUpgrades","BetterPickaxes"];
buildingUpgrades_BetterPickaxes.__super__ = BuildingUpgrade;
buildingUpgrades_BetterPickaxes.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_improvedpickaxes";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		this.building.stoneMinedPerActionBoost -= 0.2;
	}
	,__class__: buildingUpgrades_BetterPickaxes
});
var buildingUpgrades_BetterTools = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
};
$hxClasses["buildingUpgrades.BetterTools"] = buildingUpgrades_BetterTools;
buildingUpgrades_BetterTools.__name__ = ["buildingUpgrades","BetterTools"];
buildingUpgrades_BetterTools.__super__ = BuildingUpgrade;
buildingUpgrades_BetterTools.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_tinkerershouse_bettertools";
	}
	,get_bonusAttractiveness: function() {
		return 20;
	}
	,__class__: buildingUpgrades_BetterTools
});
var buildingUpgrades_BiggerTV = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.extraCapacity += 1;
};
$hxClasses["buildingUpgrades.BiggerTV"] = buildingUpgrades_BiggerTV;
buildingUpgrades_BiggerTV.__name__ = ["buildingUpgrades","BiggerTV"];
buildingUpgrades_BiggerTV.__super__ = BuildingUpgrade;
buildingUpgrades_BiggerTV.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_biggertv";
	}
	,get_bonusAttractiveness: function() {
		return 5;
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		this.building.extraCapacity -= 1;
	}
	,__class__: buildingUpgrades_BiggerTV
});
var buildingUpgrades_CHProduceFood = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	var currentMatType = building.materialType;
	if(currentMatType != 2) {
		building.resetProgress();
	}
	building.setMaterialType(2);
};
$hxClasses["buildingUpgrades.CHProduceFood"] = buildingUpgrades_CHProduceFood;
buildingUpgrades_CHProduceFood.__name__ = ["buildingUpgrades","CHProduceFood"];
buildingUpgrades_CHProduceFood.__super__ = BuildingUpgrade;
buildingUpgrades_CHProduceFood.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
	}
	,__class__: buildingUpgrades_CHProduceFood
});
var buildingUpgrades_CHProduceStone = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	var currentMatType = building.materialType;
	if(currentMatType != 0) {
		building.resetProgress();
	}
	building.setMaterialType(0);
};
$hxClasses["buildingUpgrades.CHProduceStone"] = buildingUpgrades_CHProduceStone;
buildingUpgrades_CHProduceStone.__name__ = ["buildingUpgrades","CHProduceStone"];
buildingUpgrades_CHProduceStone.__super__ = BuildingUpgrade;
buildingUpgrades_CHProduceStone.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
	}
	,__class__: buildingUpgrades_CHProduceStone
});
var buildingUpgrades_CHProduceWood = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	var currentMatType = building.materialType;
	if(currentMatType != 1) {
		building.resetProgress();
	}
	building.setMaterialType(1);
};
$hxClasses["buildingUpgrades.CHProduceWood"] = buildingUpgrades_CHProduceWood;
buildingUpgrades_CHProduceWood.__name__ = ["buildingUpgrades","CHProduceWood"];
buildingUpgrades_CHProduceWood.__super__ = BuildingUpgrade;
buildingUpgrades_CHProduceWood.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
	}
	,__class__: buildingUpgrades_CHProduceWood
});
var buildingUpgrades_DieShrink = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,midStage,building);
	building.efficiency -= 2;
	building.materialsMadePerStepPerWorker += 0.00005;
};
$hxClasses["buildingUpgrades.DieShrink"] = buildingUpgrades_DieShrink;
buildingUpgrades_DieShrink.__name__ = ["buildingUpgrades","DieShrink"];
buildingUpgrades_DieShrink.__super__ = BuildingUpgrade;
buildingUpgrades_DieShrink.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_dieshrink";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var ccf = this.building;
		ccf.efficiency += 2;
		ccf.materialsMadePerStepPerWorker -= 0.00005;
	}
	,__class__: buildingUpgrades_DieShrink
});
var buildingUpgrades_FactoryDisabled = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.buildingEnabled = false;
};
$hxClasses["buildingUpgrades.FactoryDisabled"] = buildingUpgrades_FactoryDisabled;
buildingUpgrades_FactoryDisabled.__name__ = ["buildingUpgrades","FactoryDisabled"];
buildingUpgrades_FactoryDisabled.__super__ = BuildingUpgrade;
buildingUpgrades_FactoryDisabled.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		this.building.buildingEnabled = true;
	}
	,__class__: buildingUpgrades_FactoryDisabled
});
var buildingUpgrades_FactoryWorking = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.buildingEnabled = true;
};
$hxClasses["buildingUpgrades.FactoryWorking"] = buildingUpgrades_FactoryWorking;
buildingUpgrades_FactoryWorking.__name__ = ["buildingUpgrades","FactoryWorking"];
buildingUpgrades_FactoryWorking.__super__ = BuildingUpgrade;
buildingUpgrades_FactoryWorking.prototype = $extend(BuildingUpgrade.prototype,{
	__class__: buildingUpgrades_FactoryWorking
});
var buildingUpgrades_FarmingResearch = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,midStage,building);
	this.myEffect = { name : "increaseCropNumber", intensity : 10};
	building.adjecentBuildingEffects.push(this.myEffect);
};
$hxClasses["buildingUpgrades.FarmingResearch"] = buildingUpgrades_FarmingResearch;
buildingUpgrades_FarmingResearch.__name__ = ["buildingUpgrades","FarmingResearch"];
buildingUpgrades_FarmingResearch.__super__ = BuildingUpgrade;
buildingUpgrades_FarmingResearch.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_upgrade_farmboost";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		HxOverrides.remove(this.building.adjecentBuildingEffects,this.myEffect);
	}
	,__class__: buildingUpgrades_FarmingResearch
});
var buildingUpgrades_Flowers = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,midStage,building);
};
$hxClasses["buildingUpgrades.Flowers"] = buildingUpgrades_Flowers;
buildingUpgrades_Flowers.__name__ = ["buildingUpgrades","Flowers"];
buildingUpgrades_Flowers.__super__ = BuildingUpgrade;
buildingUpgrades_Flowers.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_upgrade_flowers";
	}
	,get_bonusAttractiveness: function() {
		return 5;
	}
	,__class__: buildingUpgrades_Flowers
});
var buildingUpgrades_FossilScanner = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.city.upgrades.vars.stoneResearchCenterWithFossils = building;
};
$hxClasses["buildingUpgrades.FossilScanner"] = buildingUpgrades_FossilScanner;
buildingUpgrades_FossilScanner.__name__ = ["buildingUpgrades","FossilScanner"];
buildingUpgrades_FossilScanner.__super__ = BuildingUpgrade;
buildingUpgrades_FossilScanner.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_stoneresearchcentre_computer";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		this.building.city.upgrades.vars.stoneResearchCenterWithFossils = null;
	}
	,__class__: buildingUpgrades_FossilScanner
});
var buildingUpgrades_HeatedBed = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.hasHeatedBed = true;
	building.onCityChange();
};
$hxClasses["buildingUpgrades.HeatedBed"] = buildingUpgrades_HeatedBed;
buildingUpgrades_HeatedBed.__name__ = ["buildingUpgrades","HeatedBed"];
buildingUpgrades_HeatedBed.__super__ = BuildingUpgrade;
buildingUpgrades_HeatedBed.prototype = $extend(BuildingUpgrade.prototype,{
	get_bonusAttractiveness: function() {
		return 20;
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		this.building.hasHeatedBed = false;
	}
	,__class__: buildingUpgrades_HeatedBed
});
var buildingUpgrades_IndoorPond = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
};
$hxClasses["buildingUpgrades.IndoorPond"] = buildingUpgrades_IndoorPond;
buildingUpgrades_IndoorPond.__name__ = ["buildingUpgrades","IndoorPond"];
buildingUpgrades_IndoorPond.__super__ = BuildingUpgrade;
buildingUpgrades_IndoorPond.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_communityhouse_indoorpond";
	}
	,get_bonusAttractiveness: function() {
		return 15;
	}
	,__class__: buildingUpgrades_IndoorPond
});
var buildingUpgrades_LabDisabled = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.buildingEnabled = false;
};
$hxClasses["buildingUpgrades.LabDisabled"] = buildingUpgrades_LabDisabled;
buildingUpgrades_LabDisabled.__name__ = ["buildingUpgrades","LabDisabled"];
buildingUpgrades_LabDisabled.__super__ = BuildingUpgrade;
buildingUpgrades_LabDisabled.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		this.building.buildingEnabled = true;
	}
	,__class__: buildingUpgrades_LabDisabled
});
var buildingUpgrades_LabWorking = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.buildingEnabled = true;
};
$hxClasses["buildingUpgrades.LabWorking"] = buildingUpgrades_LabWorking;
buildingUpgrades_LabWorking.__name__ = ["buildingUpgrades","LabWorking"];
buildingUpgrades_LabWorking.__super__ = BuildingUpgrade;
buildingUpgrades_LabWorking.prototype = $extend(BuildingUpgrade.prototype,{
	__class__: buildingUpgrades_LabWorking
});
var buildingUpgrades_LivingComputer = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
};
$hxClasses["buildingUpgrades.LivingComputer"] = buildingUpgrades_LivingComputer;
buildingUpgrades_LivingComputer.__name__ = ["buildingUpgrades","LivingComputer"];
buildingUpgrades_LivingComputer.__super__ = BuildingUpgrade;
buildingUpgrades_LivingComputer.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_alienhouse_livingcomputer";
	}
	,get_bonusAttractiveness: function() {
		return 20;
	}
	,__class__: buildingUpgrades_LivingComputer
});
var buildingUpgrades_MachinePartsFactoryEfficiency = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.efficiency -= 1;
};
$hxClasses["buildingUpgrades.MachinePartsFactoryEfficiency"] = buildingUpgrades_MachinePartsFactoryEfficiency;
buildingUpgrades_MachinePartsFactoryEfficiency.__name__ = ["buildingUpgrades","MachinePartsFactoryEfficiency"];
buildingUpgrades_MachinePartsFactoryEfficiency.__super__ = BuildingUpgrade;
buildingUpgrades_MachinePartsFactoryEfficiency.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		this.building.efficiency += 1;
	}
	,__class__: buildingUpgrades_MachinePartsFactoryEfficiency
});
var buildingUpgrades_MachinePartsFactoryTurbo = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.buildingEnabled = true;
	building.efficiency += 2;
	building.materialsMadePerStepPerWorker += 0.0015;
};
$hxClasses["buildingUpgrades.MachinePartsFactoryTurbo"] = buildingUpgrades_MachinePartsFactoryTurbo;
buildingUpgrades_MachinePartsFactoryTurbo.__name__ = ["buildingUpgrades","MachinePartsFactoryTurbo"];
buildingUpgrades_MachinePartsFactoryTurbo.__super__ = BuildingUpgrade;
buildingUpgrades_MachinePartsFactoryTurbo.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var mpf = this.building;
		mpf.efficiency -= 2;
		mpf.materialsMadePerStepPerWorker -= 0.0015;
	}
	,__class__: buildingUpgrades_MachinePartsFactoryTurbo
});
var buildingUpgrades_MedicalEducation = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.medicalEducationPart = 1;
};
$hxClasses["buildingUpgrades.MedicalEducation"] = buildingUpgrades_MedicalEducation;
buildingUpgrades_MedicalEducation.__name__ = ["buildingUpgrades","MedicalEducation"];
buildingUpgrades_MedicalEducation.__super__ = BuildingUpgrade;
buildingUpgrades_MedicalEducation.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var ccf = this.building;
		ccf.medicalEducationPart = 0;
	}
	,__class__: buildingUpgrades_MedicalEducation
});
var buildingUpgrades_MisdirectorAlways = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.mode = buildings_MisdirectorMode.Always;
};
$hxClasses["buildingUpgrades.MisdirectorAlways"] = buildingUpgrades_MisdirectorAlways;
buildingUpgrades_MisdirectorAlways.__name__ = ["buildingUpgrades","MisdirectorAlways"];
buildingUpgrades_MisdirectorAlways.__super__ = BuildingUpgrade;
buildingUpgrades_MisdirectorAlways.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var misdirector = this.building;
		misdirector.mode = buildings_MisdirectorMode.Always;
	}
	,__class__: buildingUpgrades_MisdirectorAlways
});
var buildingUpgrades_MisdirectorDisabled = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.mode = buildings_MisdirectorMode.Disabled;
};
$hxClasses["buildingUpgrades.MisdirectorDisabled"] = buildingUpgrades_MisdirectorDisabled;
buildingUpgrades_MisdirectorDisabled.__name__ = ["buildingUpgrades","MisdirectorDisabled"];
buildingUpgrades_MisdirectorDisabled.__super__ = BuildingUpgrade;
buildingUpgrades_MisdirectorDisabled.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var misdirector = this.building;
		misdirector.mode = buildings_MisdirectorMode.Disabled;
	}
	,__class__: buildingUpgrades_MisdirectorDisabled
});
var buildingUpgrades_MisdirectorMostlyDisabled = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.mode = buildings_MisdirectorMode.MostlyDisabled;
};
$hxClasses["buildingUpgrades.MisdirectorMostlyDisabled"] = buildingUpgrades_MisdirectorMostlyDisabled;
buildingUpgrades_MisdirectorMostlyDisabled.__name__ = ["buildingUpgrades","MisdirectorMostlyDisabled"];
buildingUpgrades_MisdirectorMostlyDisabled.__super__ = BuildingUpgrade;
buildingUpgrades_MisdirectorMostlyDisabled.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var misdirector = this.building;
		misdirector.mode = buildings_MisdirectorMode.Normal;
	}
	,__class__: buildingUpgrades_MisdirectorMostlyDisabled
});
var buildingUpgrades_MisdirectorNormal = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.mode = buildings_MisdirectorMode.Normal;
};
$hxClasses["buildingUpgrades.MisdirectorNormal"] = buildingUpgrades_MisdirectorNormal;
buildingUpgrades_MisdirectorNormal.__name__ = ["buildingUpgrades","MisdirectorNormal"];
buildingUpgrades_MisdirectorNormal.__super__ = BuildingUpgrade;
buildingUpgrades_MisdirectorNormal.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var misdirector = this.building;
		misdirector.mode = buildings_MisdirectorMode.Normal;
	}
	,__class__: buildingUpgrades_MisdirectorNormal
});
var buildingUpgrades_ModernConveniences = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
};
$hxClasses["buildingUpgrades.ModernConveniences"] = buildingUpgrades_ModernConveniences;
buildingUpgrades_ModernConveniences.__name__ = ["buildingUpgrades","ModernConveniences"];
buildingUpgrades_ModernConveniences.__super__ = BuildingUpgrade;
buildingUpgrades_ModernConveniences.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_modernconveniences";
	}
	,get_bonusAttractiveness: function() {
		return 15;
	}
	,__class__: buildingUpgrades_ModernConveniences
});
var buildingUpgrades_ModernHomePlant = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.yearsToLiveLongerPerYearIfLivingHere += 0.05;
};
$hxClasses["buildingUpgrades.ModernHomePlant"] = buildingUpgrades_ModernHomePlant;
buildingUpgrades_ModernHomePlant.__name__ = ["buildingUpgrades","ModernHomePlant"];
buildingUpgrades_ModernHomePlant.__super__ = BuildingUpgrade;
buildingUpgrades_ModernHomePlant.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_modernhomeplant";
	}
	,get_bonusAttractiveness: function() {
		return 10;
	}
	,get_availableTextures: function() {
		return this.textures.length - (Settings.hasSecretCode("orchid") ? 0 : 3);
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var ccf = this.building;
		ccf.yearsToLiveLongerPerYearIfLivingHere -= 0.05;
	}
	,__class__: buildingUpgrades_ModernHomePlant
});
var buildingUpgrades_PickaxeTech = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.hasPickaxeTech = true;
};
$hxClasses["buildingUpgrades.PickaxeTech"] = buildingUpgrades_PickaxeTech;
buildingUpgrades_PickaxeTech.__name__ = ["buildingUpgrades","PickaxeTech"];
buildingUpgrades_PickaxeTech.__super__ = BuildingUpgrade;
buildingUpgrades_PickaxeTech.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_stoneresearchcentre_pickaxetech";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		this.building.hasPickaxeTech = false;
	}
	,__class__: buildingUpgrades_PickaxeTech
});
var buildingUpgrades_RefinedMetalsFactoryHack = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,null,building);
	building.buildingEnabled = true;
	building.efficiency += 1;
	building.materialsMadePerStepPerWorker += 0.0005;
};
$hxClasses["buildingUpgrades.RefinedMetalsFactoryHack"] = buildingUpgrades_RefinedMetalsFactoryHack;
buildingUpgrades_RefinedMetalsFactoryHack.__name__ = ["buildingUpgrades","RefinedMetalsFactoryHack"];
buildingUpgrades_RefinedMetalsFactoryHack.__super__ = BuildingUpgrade;
buildingUpgrades_RefinedMetalsFactoryHack.prototype = $extend(BuildingUpgrade.prototype,{
	destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var mpf = this.building;
		mpf.efficiency -= 1;
		mpf.materialsMadePerStepPerWorker -= 0.0005;
	}
	,__class__: buildingUpgrades_RefinedMetalsFactoryHack
});
var buildingUpgrades_RefinedStoneUsingFactoryDisabled = function(stage,midStage,bgStage,building) {
	buildingUpgrades_FactoryDisabled.call(this,stage,midStage,bgStage,building);
};
$hxClasses["buildingUpgrades.RefinedStoneUsingFactoryDisabled"] = buildingUpgrades_RefinedStoneUsingFactoryDisabled;
buildingUpgrades_RefinedStoneUsingFactoryDisabled.__name__ = ["buildingUpgrades","RefinedStoneUsingFactoryDisabled"];
buildingUpgrades_RefinedStoneUsingFactoryDisabled.__super__ = buildingUpgrades_FactoryDisabled;
buildingUpgrades_RefinedStoneUsingFactoryDisabled.prototype = $extend(buildingUpgrades_FactoryDisabled.prototype,{
	__class__: buildingUpgrades_RefinedStoneUsingFactoryDisabled
});
var buildingUpgrades_SmartChairs = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
};
$hxClasses["buildingUpgrades.SmartChairs"] = buildingUpgrades_SmartChairs;
buildingUpgrades_SmartChairs.__name__ = ["buildingUpgrades","SmartChairs"];
buildingUpgrades_SmartChairs.__super__ = BuildingUpgrade;
buildingUpgrades_SmartChairs.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_smartchairs";
	}
	,get_bonusAttractiveness: function() {
		return 10;
	}
	,__class__: buildingUpgrades_SmartChairs
});
var buildingUpgrades_SmartLights = function(stage,midStage,bgStage,building) {
	this.lightColor = [{ color : 14680064, time : 0.0},{ color : 14680064, time : 4},{ color : 16777215, time : 6},{ color : 16777215, time : 19},{ color : 16766023, time : 21},{ color : 16766023, time : 23},{ color : 14680064, time : 24}];
	var _gthis = this;
	BuildingUpgrade.call(this,bgStage,building);
	this.set_onUpdate(function(timeMod) {
		_gthis.sprite.tint = building.city.simulation.time.getCurrentColor(_gthis.lightColor);
	});
};
$hxClasses["buildingUpgrades.SmartLights"] = buildingUpgrades_SmartLights;
buildingUpgrades_SmartLights.__name__ = ["buildingUpgrades","SmartLights"];
buildingUpgrades_SmartLights.__super__ = BuildingUpgrade;
buildingUpgrades_SmartLights.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_smartlights";
	}
	,get_bonusAttractiveness: function() {
		return 15;
	}
	,get_canCacheSprite: function() {
		return false;
	}
	,__class__: buildingUpgrades_SmartLights
});
var buildingUpgrades_SofterBeds = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
};
$hxClasses["buildingUpgrades.SofterBeds"] = buildingUpgrades_SofterBeds;
buildingUpgrades_SofterBeds.__name__ = ["buildingUpgrades","SofterBeds"];
buildingUpgrades_SofterBeds.__super__ = BuildingUpgrade;
buildingUpgrades_SofterBeds.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_softerbeds";
	}
	,get_bonusAttractiveness: function() {
		return 10;
	}
	,__class__: buildingUpgrades_SofterBeds
});
var buildingUpgrades_StarDatabase = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.hasStarDatabase = true;
};
$hxClasses["buildingUpgrades.StarDatabase"] = buildingUpgrades_StarDatabase;
buildingUpgrades_StarDatabase.__name__ = ["buildingUpgrades","StarDatabase"];
buildingUpgrades_StarDatabase.__super__ = BuildingUpgrade;
buildingUpgrades_StarDatabase.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_computer_observatory";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var obs = this.building;
		obs.hasStarDatabase = false;
	}
	,__class__: buildingUpgrades_StarDatabase
});
var buildingUpgrades_StoneTeleporterRemote = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.hasRemoteControl = true;
};
$hxClasses["buildingUpgrades.StoneTeleporterRemote"] = buildingUpgrades_StoneTeleporterRemote;
buildingUpgrades_StoneTeleporterRemote.__name__ = ["buildingUpgrades","StoneTeleporterRemote"];
buildingUpgrades_StoneTeleporterRemote.__super__ = BuildingUpgrade;
buildingUpgrades_StoneTeleporterRemote.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_stoneteleporter_remote";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var tp = this.building;
		tp.hasRemoteControl = false;
	}
	,__class__: buildingUpgrades_StoneTeleporterRemote
});
var buildingUpgrades_StoneUsingFactoryDisabled = function(stage,midStage,bgStage,building) {
	buildingUpgrades_FactoryDisabled.call(this,stage,midStage,bgStage,building);
};
$hxClasses["buildingUpgrades.StoneUsingFactoryDisabled"] = buildingUpgrades_StoneUsingFactoryDisabled;
buildingUpgrades_StoneUsingFactoryDisabled.__name__ = ["buildingUpgrades","StoneUsingFactoryDisabled"];
buildingUpgrades_StoneUsingFactoryDisabled.__super__ = buildingUpgrades_FactoryDisabled;
buildingUpgrades_StoneUsingFactoryDisabled.prototype = $extend(buildingUpgrades_FactoryDisabled.prototype,{
	__class__: buildingUpgrades_StoneUsingFactoryDisabled
});
var buildingUpgrades_TreePlantationResearch = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,stage,building);
	this.myEffect = { name : "increaseTreeGrowth", intensity : 0.2};
	building.adjecentBuildingEffects.push(this.myEffect);
};
$hxClasses["buildingUpgrades.TreePlantationResearch"] = buildingUpgrades_TreePlantationResearch;
buildingUpgrades_TreePlantationResearch.__name__ = ["buildingUpgrades","TreePlantationResearch"];
buildingUpgrades_TreePlantationResearch.__super__ = BuildingUpgrade;
buildingUpgrades_TreePlantationResearch.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_treegrowthboost";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		HxOverrides.remove(this.building.adjecentBuildingEffects,this.myEffect);
	}
	,__class__: buildingUpgrades_TreePlantationResearch
});
var buildingUpgrades_UltimateScrewdriver = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.efficiency -= 0.058;
};
$hxClasses["buildingUpgrades.UltimateScrewdriver"] = buildingUpgrades_UltimateScrewdriver;
buildingUpgrades_UltimateScrewdriver.__name__ = ["buildingUpgrades","UltimateScrewdriver"];
buildingUpgrades_UltimateScrewdriver.__super__ = BuildingUpgrade;
buildingUpgrades_UltimateScrewdriver.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_experimentationlab_screwdriver";
	}
	,get_canCacheSprite: function() {
		return false;
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
		var etl = this.building;
		etl.efficiency += 0.058;
	}
	,__class__: buildingUpgrades_UltimateScrewdriver
});
var buildingUpgrades_WorkshopKnowledge = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.isProducingKnowledge = true;
};
$hxClasses["buildingUpgrades.WorkshopKnowledge"] = buildingUpgrades_WorkshopKnowledge;
buildingUpgrades_WorkshopKnowledge.__name__ = ["buildingUpgrades","WorkshopKnowledge"];
buildingUpgrades_WorkshopKnowledge.__super__ = BuildingUpgrade;
buildingUpgrades_WorkshopKnowledge.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_workshop_petprojects";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
	}
	,__class__: buildingUpgrades_WorkshopKnowledge
});
var buildingUpgrades_WorkshopMachineParts = function(stage,midStage,bgStage,building) {
	BuildingUpgrade.call(this,bgStage,building);
	building.isProducingKnowledge = false;
};
$hxClasses["buildingUpgrades.WorkshopMachineParts"] = buildingUpgrades_WorkshopMachineParts;
buildingUpgrades_WorkshopMachineParts.__name__ = ["buildingUpgrades","WorkshopMachineParts"];
buildingUpgrades_WorkshopMachineParts.__super__ = BuildingUpgrade;
buildingUpgrades_WorkshopMachineParts.prototype = $extend(BuildingUpgrade.prototype,{
	get_textureName: function() {
		return "spr_workshop_makemachineparts";
	}
	,destroy: function() {
		BuildingUpgrade.prototype.destroy.call(this);
	}
	,__class__: buildingUpgrades_WorkshopMachineParts
});
var buildings_AlienDecryptor = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.timeWorking = 0;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.AlienDecryptor"] = buildings_AlienDecryptor;
buildings_AlienDecryptor.__name__ = ["buildings","AlienDecryptor"];
buildings_AlienDecryptor.__super__ = Building;
buildings_AlienDecryptor.prototype = $extend(Building.prototype,{
	update: function(timeMod) {
		this.timeWorking += timeMod * this.city.simulation.time.minutesPerTick;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_AlienDecryptor.saveDefinition);
		}
		var value = this.timeWorking;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["timeWorking"] != null ? loadMap.existsReserved("timeWorking") : loadMap.h.hasOwnProperty("timeWorking")) {
			this.timeWorking = __map_reserved["timeWorking"] != null ? loadMap.getReserved("timeWorking") : loadMap.h["timeWorking"];
		}
	}
	,__class__: buildings_AlienDecryptor
});
var buildings_IHousing = function() {
	this.yearsToLiveLongerPerYearIfLivingHere = 0.0;
};
$hxClasses["buildings.IHousing"] = buildings_IHousing;
buildings_IHousing.__name__ = ["buildings","IHousing"];
buildings_IHousing.prototype = {
	__class__: buildings_IHousing
};
var buildings_House = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.yearsToLiveLongerPerYearIfLivingHere = 0.0;
	this.residents = [];
	this.extraCapacity = 0;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.House"] = buildings_House;
buildings_House.__name__ = ["buildings","House"];
buildings_House.__interfaces__ = [buildings_IHousing];
buildings_House.__super__ = Building;
buildings_House.prototype = $extend(Building.prototype,{
	get_residentCapacity: function() {
		if(this.info.residents == null) {
			return 0;
		} else {
			return this.info.residents + this.extraCapacity;
		}
	}
	,get_baseAttractiveness: function() {
		return this.info.quality;
	}
	,get_possibleUpgrades: function() {
		return [];
	}
	,get_remainingCapacity: function() {
		return this.get_residentCapacity() - this.residents.length;
	}
	,get_fixedCapacityForWorkers: function() {
		return 0;
	}
	,get_hasPrivateTeleporter: function() {
		return false;
	}
	,destroy: function() {
		Building.prototype.destroy.call(this);
		while(this.residents.length != 0) this.residents[this.residents.length - 1].evictFromHome();
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		Building.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "Quality: " + (_gthis.get_baseAttractiveness() + _gthis.bonusAttractiveness);
		});
		var tmp = this.city.gui;
		var a1 = this.city;
		var a2 = this.residents;
		var a3 = "Residents of " + this.get_name();
		var a4 = this;
		tmp.windowAddInfoTextClickable(function() {
			gui_MultiFollowWindow.createWindow(a1,a2,a3,a4,"No residents");
		},null,function() {
			return "" + _gthis.residents.length + "/" + _gthis.get_residentCapacity() + " residents";
		});
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var r = random_Random.getInt(4);
		if(r == 0 && stepsInBuilding > 120) {
			citizen.changeFloorAndWaitRandom(30,60);
		} else if(r == 1) {
			citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(30,60),null,false,false);
		} else if(r == 2) {
			citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(30,60),null,false,false);
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = random_Random.getInt(90,120);
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,__class__: buildings_House
});
var buildings_AlienHouse = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.AlienHouse"] = buildings_AlienHouse;
buildings_AlienHouse.__name__ = ["buildings","AlienHouse"];
buildings_AlienHouse.__super__ = buildings_House;
buildings_AlienHouse.prototype = $extend(buildings_House.prototype,{
	get_possibleUpgrades: function() {
		return [buildingUpgrades_LivingComputer];
	}
	,__class__: buildings_AlienHouse
});
var buildings_IWaterFilled = function() { };
$hxClasses["buildings.IWaterFilled"] = buildings_IWaterFilled;
buildings_IWaterFilled.__name__ = ["buildings","IWaterFilled"];
buildings_IWaterFilled.prototype = {
	__class__: buildings_IWaterFilled
};
var buildings_IEntertainmentBuilding = function() { };
$hxClasses["buildings.IEntertainmentBuilding"] = buildings_IEntertainmentBuilding;
buildings_IEntertainmentBuilding.__name__ = ["buildings","IEntertainmentBuilding"];
buildings_IEntertainmentBuilding.prototype = {
	__class__: buildings_IEntertainmentBuilding
};
var buildings_Aquarium = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.justBuilt = false;
	this.currentTexture = 0;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.isEntertainment = true;
	this.currentTexture = 0;
	this.adjecentBuildingEffects.push({ name : "modernRusticHomeCommunityFeeling", intensity : 1});
	this.leftIsWaterFilled = false;
	this.rightIsWaterFilled = false;
	this.topIsWaterFilled = false;
	this.bottomIsWaterFilled = false;
};
$hxClasses["buildings.Aquarium"] = buildings_Aquarium;
buildings_Aquarium.__name__ = ["buildings","Aquarium"];
buildings_Aquarium.__interfaces__ = [buildings_IWaterFilled,buildings_IEntertainmentBuilding];
buildings_Aquarium.__super__ = Building;
buildings_Aquarium.prototype = $extend(Building.prototype,{
	get_baseEntertainmentCapacity: function() {
		return 50;
	}
	,get_isOpen: function() {
		return false;
	}
	,get_entertainmentType: function() {
		return 3;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 3;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 4;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 1.5;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_AllDirMergingBuildingDrawer;
	}
	,get_mergingDrawer: function() {
		return this.drawer;
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		return false;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,postCreate: function() {
		Building.prototype.postCreate.call(this);
		this.updateGardenTexture();
		if(this.justBuilt) {
			var buildingToTakeTextureFrom = null;
			if(this.bottomBuilding != null && this.bottomBuilding["is"](buildings_Aquarium)) {
				buildingToTakeTextureFrom = this.bottomBuilding;
			}
			if(this.topBuilding != null && this.topBuilding["is"](buildings_Aquarium)) {
				buildingToTakeTextureFrom = this.topBuilding;
			}
			if(buildingToTakeTextureFrom != null) {
				this.get_mergingDrawer().setGroupOfSecondaryTextureForThisBuilding(this.get_mergingDrawer().getSecondaryTextureGroup(buildingToTakeTextureFrom.currentTexture));
			} else {
				this.currentTexture = random_Random.getInt(common_ArrayExtensions.isum(buildings_Aquarium.gardenTextureSets));
			}
			this.justBuilt = false;
			this.city.simulation.fishes.fishes.push(new simulation_Fish(this.city,this.city.aboveCitizensInBuildingStage,this,10,10));
			this.city.simulation.fishes.fishes.push(new simulation_Fish(this.city,this.city.aboveCitizensInBuildingStage,this,10,14));
			this.city.simulation.fishes.fishes.push(new simulation_Fish(this.city,this.city.aboveCitizensInBuildingStage,this,10,6));
			this.updateGardenTexture();
		}
		this.positionSprites();
	}
	,destroy: function() {
		Building.prototype.destroy.call(this);
		var fishes = this.city.simulation.fishes.fishes;
		var i = fishes.length;
		while(--i >= 0) if(fishes[i].inPermanent == this) {
			fishes[i].destroy();
		}
	}
	,onCityChange: function() {
		this.leftIsWaterFilled = this.leftBuilding != null && js_Boot.__instanceof(this.leftBuilding,buildings_IWaterFilled);
		this.rightIsWaterFilled = this.rightBuilding != null && js_Boot.__instanceof(this.rightBuilding,buildings_IWaterFilled);
		this.topIsWaterFilled = this.topBuilding != null && js_Boot.__instanceof(this.topBuilding,buildings_IWaterFilled);
		this.bottomIsWaterFilled = this.bottomBuilding != null && js_Boot.__instanceof(this.bottomBuilding,buildings_IWaterFilled);
		if(this.leftIsWaterFilled) {
			this.leftAsWaterFilled = this.leftBuilding;
		} else {
			this.leftAsWaterFilled = null;
		}
		if(this.rightIsWaterFilled) {
			this.rightAsWaterFilled = this.rightBuilding;
		} else {
			this.rightAsWaterFilled = null;
		}
		if(this.topIsWaterFilled) {
			this.topAsWaterFilled = this.topBuilding;
		} else {
			this.topAsWaterFilled = null;
		}
		if(this.bottomIsWaterFilled) {
			this.bottomAsWaterFilled = this.bottomBuilding;
		} else {
			this.bottomAsWaterFilled = null;
		}
	}
	,postLoad: function() {
		this.updateGardenTexture();
	}
	,onBuild: function() {
		Building.prototype.onBuild.call(this);
		this.justBuilt = true;
	}
	,updateGardenTexture: function() {
		var _gthis = this;
		this.get_mergingDrawer().setSecondaryBackgroundImages("spr_aquarium_plants",buildings_Aquarium.gardenTextureSets,this.currentTexture,function(n) {
			_gthis.currentTexture = n;
		});
	}
	,beEntertained: function(citizen,timeMod) {
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		gui_windowParts_CycleValueButton.create(this.city.gui,function() {
			return _gthis.get_mergingDrawer().getCurrentSecondaryTextureGroup();
		},($_=this.get_mergingDrawer(),$bind($_,$_.setGroupOfSecondaryTexture)),function() {
			return buildings_Aquarium.gardenTextureSets.length;
		},"Change Plants");
		gui_windowParts_CycleValueButton.create(this.city.gui,function() {
			return _gthis.currentTexture - _gthis.get_mergingDrawer().getFirstSecondaryTextureOfGroup(_gthis.get_mergingDrawer().getCurrentSecondaryTextureGroup());
		},($_=this.get_mergingDrawer(),$bind($_,$_.setSecondaryTextureWithinGroup)),function() {
			return buildings_Aquarium.gardenTextureSets[_gthis.get_mergingDrawer().getCurrentSecondaryTextureGroup()];
		},"Change Plants Variant");
		Building.prototype.createWindowAddBottomButtons.call(this);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Aquarium.saveDefinition);
		}
		var value = this.currentTexture;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["currentTexture"] != null ? loadMap.existsReserved("currentTexture") : loadMap.h.hasOwnProperty("currentTexture")) {
			this.currentTexture = __map_reserved["currentTexture"] != null ? loadMap.getReserved("currentTexture") : loadMap.h["currentTexture"];
		}
		this.postLoad();
	}
	,__class__: buildings_Aquarium
});
var buildings_Work = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.workTimePreferenceMod = 1;
	this.endTime = 19;
	this.startTime = 6;
	this.workers = [];
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.Work"] = buildings_Work;
buildings_Work.__name__ = ["buildings","Work"];
buildings_Work.__super__ = Building;
buildings_Work.prototype = $extend(Building.prototype,{
	get_jobs: function() {
		if(this.info.jobs == null) {
			return 0;
		} else {
			return this.info.jobs;
		}
	}
	,get_remainingCapacity: function() {
		return this.get_jobs() - this.workers.length;
	}
	,get_firstBuildingToGoTo: function() {
		return this;
	}
	,destroy: function() {
		Building.prototype.destroy.call(this);
		while(this.workers.length != 0) this.workers[this.workers.length - 1].loseJob();
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		Building.prototype.addWindowInfoLines.call(this);
		var tmp = this.city.gui;
		var a1 = this.city;
		var a2 = this.workers;
		var a3 = "Workers of " + this.get_name();
		var a4 = this;
		tmp.windowAddInfoTextClickable(function() {
			gui_MultiFollowWindow.createWindow(a1,a2,a3,a4,"No workers");
		},null,function() {
			return "" + _gthis.workers.length + "/" + _gthis.get_jobs() + " workers";
		});
	}
	,afterGiveJob: function(citizen) {
	}
	,__class__: buildings_Work
});
var buildings_Arcade = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 12;
	this.endTime = 23.5;
	this.workTimePreferenceMod = 0.1;
	this.isEntertainment = true;
};
$hxClasses["buildings.Arcade"] = buildings_Arcade;
buildings_Arcade.__name__ = ["buildings","Arcade"];
buildings_Arcade.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_Arcade.__super__ = buildings_Work;
buildings_Arcade.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 120;
	}
	,get_isOpen: function() {
		if(this.workers.length == 1 && this.workers[0].currentAction == LifeAction.Work) {
			return this.city.simulation.time.timeSinceStart / 60 % 24 < 23;
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 4;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 2.5;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 3;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 4;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 7;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,beEntertained: function(citizen,timeMod) {
		var moveFunction = function() {
			var xx = citizen.relativeY < 5 ? 5 + 4 * random_Random.getInt(3) : 5 + 8 * random_Random.getInt(2);
			var moveFunction1 = random_Random.getInt(xx,xx + 1);
			var moveFunction2 = random_Random.getInt(100,120);
			citizen.moveAndWait(moveFunction1,moveFunction2,null,false,false);
		};
		if(random_Random.getInt(3) == 1) {
			citizen.changeFloor(moveFunction);
		} else {
			moveFunction();
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(6 - citizen.relativeX) < spd) {
				citizen.relativeX = 6;
			} else {
				var num = 6 - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
			}
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Arcade.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_Arcade
});
var buildings_WorkWithHome = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.yearsToLiveLongerPerYearIfLivingHere = 0.0;
	this.residents = [];
	this.extraCapacity = 0;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.WorkWithHome"] = buildings_WorkWithHome;
buildings_WorkWithHome.__name__ = ["buildings","WorkWithHome"];
buildings_WorkWithHome.__interfaces__ = [buildings_IHousing];
buildings_WorkWithHome.__super__ = buildings_Work;
buildings_WorkWithHome.prototype = $extend(buildings_Work.prototype,{
	get_residentCapacity: function() {
		if(this.info.residents == null) {
			return 0;
		} else {
			return this.info.residents + this.extraCapacity;
		}
	}
	,get_baseAttractiveness: function() {
		return this.info.quality;
	}
	,get_possibleUpgrades: function() {
		return [];
	}
	,get_remainingCapacity: function() {
		return this.get_residentCapacity() - this.residents.length;
	}
	,get_fixedCapacityForWorkers: function() {
		return this.get_residentCapacity();
	}
	,get_hasPrivateTeleporter: function() {
		return false;
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		while(this.residents.length != 0) this.residents[this.residents.length - 1].evictFromHome();
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		this.city.gui.windowAddInfoText(null,function() {
			return "Quality: " + (_gthis.get_baseAttractiveness() + _gthis.bonusAttractiveness);
		});
		var tmp = this.city.gui;
		var a1 = this.city;
		var a2 = this.residents;
		var a3 = "Residents of " + this.get_name();
		var a4 = this;
		tmp.windowAddInfoTextClickable(function() {
			gui_MultiFollowWindow.createWindow(a1,a2,a3,a4,"No residents");
		},null,function() {
			return "" + _gthis.residents.length + "/" + _gthis.get_residentCapacity() + " residents";
		});
		buildings_Work.prototype.addWindowInfoLines.call(this);
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var r = random_Random.getInt(4);
		if(r == 0 && stepsInBuilding > 120) {
			citizen.changeFloorAndWaitRandom(30,60);
		} else if(r == 1) {
			citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(30,60),null,false,false);
		} else if(r == 2) {
			citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(30,60),null,false,false);
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = random_Random.getInt(90,120);
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,__class__: buildings_WorkWithHome
});
var buildings_ArtColony = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.artSprite = null;
	this.currentWorkProgress = 0;
	this.currentTexture = 0;
	buildings_WorkWithHome.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 10;
	this.endTime = 22;
	this.workTimePreferenceMod = 0.3;
	this.isEntertainment = true;
	this.artTextures = Resources.getTexturesByWidth("spr_artcolonywork",20);
	this.currentTexture = 0;
	this.artSprite = new PIXI.Sprite(this.artTextures[this.currentTexture]);
	this.artSprite.position.set(position.x,position.y);
	bgStage.addChild(this.artSprite);
};
$hxClasses["buildings.ArtColony"] = buildings_ArtColony;
buildings_ArtColony.__name__ = ["buildings","ArtColony"];
buildings_ArtColony.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_ArtColony.__super__ = buildings_WorkWithHome;
buildings_ArtColony.prototype = $extend(buildings_WorkWithHome.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 50;
	}
	,get_isOpen: function() {
		if(this.workers.length > 0 && this.workers[0].currentAction == LifeAction.Work && (1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0)) % 3 == 0 && this.city.simulation.time.timeSinceStart / 60 % 24 < 21.5) {
			return this.city.simulation.time.timeSinceStart / 60 % 24 > 15.0;
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 2;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 1;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 2;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 2;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,postLoad: function() {
		this.artSprite.texture = this.artTextures[this.currentTexture];
	}
	,positionSprites: function() {
		buildings_WorkWithHome.prototype.positionSprites.call(this);
		if(this.artSprite != null) {
			this.artSprite.position.set(this.position.x,this.position.y);
		}
	}
	,destroy: function() {
		buildings_WorkWithHome.prototype.destroy.call(this);
		this.bgStage.removeChild(this.artSprite);
	}
	,beEntertained: function(citizen,timeMod) {
		var moveFunction = function() {
			var moveFunction1 = random_Random.getInt(3,16);
			var moveFunction2 = random_Random.getInt(50,100);
			citizen.moveAndWait(moveFunction1,moveFunction2,null,false,true);
		};
		if(citizen.relativeY < 5) {
			citizen.changeFloor(moveFunction);
		} else {
			moveFunction();
		}
	}
	,get_possibleUpgrades: function() {
		return [];
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		this.city.gui.windowAddInfoText(null,function() {
			return "Quality: " + (_gthis.get_baseAttractiveness() + _gthis.bonusAttractiveness);
		});
		var tmp = this.city.gui;
		var a1 = this.city;
		var a2 = this.residents;
		var a3 = "Resident workers of " + this.get_name();
		var a4 = this;
		tmp.windowAddInfoTextClickable(function() {
			gui_MultiFollowWindow.createWindow(a1,a2,a3,a4,"None");
		},null,function() {
			return "" + _gthis.residents.length + "/" + _gthis.get_residentCapacity() + " resident workers";
		});
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var r = random_Random.getInt(3);
		if(r == 0 && stepsInBuilding > 120) {
			citizen.changeFloorAndWaitRandom(30,60);
		} else if(r == 1) {
			if(citizen.relativeY < 5) {
				citizen.moveAndWait(random_Random.getInt(3,15),random_Random.getInt(30,60),null,false,false);
			} else {
				citizen.moveAndWait(random_Random.getInt(3,15),random_Random.getInt(30,60),null,false,false);
			}
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = random_Random.getInt(90,120);
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		}
		var workerIndex = this.workers.indexOf(citizen);
		var myPlace = (workerIndex + (1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0))) % 5;
		if(myPlace == 0 || myPlace == 3) {
			if(citizen.relativeY > 5) {
				citizen.changeFloor();
			} else if(myPlace == 0) {
				if(citizen.relativeX < 3 || citizen.relativeX > 6 || random_Random.getFloat() < 0.015 * timeMod) {
					citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(5,10),null,false,false);
				}
			} else if(myPlace == 3) {
				if(citizen.relativeX < 12 || citizen.relativeX > 15 || random_Random.getFloat() < 0.015 * timeMod) {
					citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(5,10),null,false,false);
				}
			}
		} else if(citizen.relativeY < 5) {
			citizen.changeFloor();
		} else if(myPlace == 1) {
			if(citizen.relativeX < 3 || citizen.relativeX > 6 || random_Random.getFloat() < 0.015 * timeMod) {
				citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(5,10),null,false,false);
			}
		} else if(myPlace == 2) {
			if(citizen.relativeX < 12 || citizen.relativeX > 15 || random_Random.getFloat() < 0.015 * timeMod) {
				citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(5,10),null,false,false);
			}
		} else if(myPlace == 4) {
			if(citizen.relativeX < 8 || citizen.relativeX > 10 || random_Random.getFloat() < 0.015 * timeMod) {
				citizen.moveAndWait(random_Random.getInt(8,11),random_Random.getInt(5,10),null,false,false);
			}
		}
		if(this.currentWorkProgress >= 1.0) {
			this.currentTexture += 1;
			var totalNewWorksUnlocked = 0;
			var _g = 0;
			var _g1 = buildings_ArtColony.unlockNewWorkAfter;
			while(_g < _g1.length) {
				var newWorkAfter = _g1[_g];
				++_g;
				if(this.currentTexture > newWorkAfter) {
					++totalNewWorksUnlocked;
				}
			}
			var val1 = this.city.progress.unlocks.numberOfModernArtMuseumArtworksUnlocked;
			var val2 = 4 + totalNewWorksUnlocked;
			this.city.progress.unlocks.numberOfModernArtMuseumArtworksUnlocked = val2 > val1 ? val2 : val1;
			this.currentTexture %= this.artTextures.length;
			this.artSprite.texture = this.artTextures[this.currentTexture];
			this.currentWorkProgress = 0;
		}
		this.currentWorkProgress += timeMod * citizen.get_educationSpeedModifier() * this.city.simulation.happiness.actionSpeedModifier * 0.00002;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_WorkWithHome.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_ArtColony.saveDefinition);
		}
		var value = this.currentTexture;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.currentWorkProgress;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_WorkWithHome.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["currentTexture"] != null ? loadMap.existsReserved("currentTexture") : loadMap.h.hasOwnProperty("currentTexture")) {
			this.currentTexture = __map_reserved["currentTexture"] != null ? loadMap.getReserved("currentTexture") : loadMap.h["currentTexture"];
		}
		if(__map_reserved["currentWorkProgress"] != null ? loadMap.existsReserved("currentWorkProgress") : loadMap.h.hasOwnProperty("currentWorkProgress")) {
			this.currentWorkProgress = __map_reserved["currentWorkProgress"] != null ? loadMap.getReserved("currentWorkProgress") : loadMap.h["currentWorkProgress"];
		}
		this.postLoad();
	}
	,__class__: buildings_ArtColony
});
var buildings_Beacon = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.lightSpr = new PIXI.Sprite(Resources.getTexture("spr_beacon_light"));
	stage.addChild(this.lightSpr);
	this.positionSprites();
};
$hxClasses["buildings.Beacon"] = buildings_Beacon;
buildings_Beacon.__name__ = ["buildings","Beacon"];
buildings_Beacon.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_Beacon.__super__ = Building;
buildings_Beacon.prototype = $extend(Building.prototype,{
	get_isOpen: function() {
		return true;
	}
	,get_entertainmentType: function() {
		return 2;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 1.5;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 3;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 2;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_baseEntertainmentCapacity: function() {
		return 50;
	}
	,get_isOpenForExistingVisitors: function() {
		return true;
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,destroy: function() {
		Building.prototype.destroy.call(this);
		if(this.lightSpr != null) {
			this.lightSpr.destroy();
		}
	}
	,positionSprites: function() {
		Building.prototype.positionSprites.call(this);
		this.lightSpr.position.set(this.position.x + 8,this.position.y + 1);
		this.lightSpr.alpha = 0;
	}
	,update: function(timeMod) {
		Building.prototype.update.call(this,timeMod);
		if(((this.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 < 6 || ((this.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 > 20.5) {
			this.lightSpr.alpha = 1;
		} else if(((this.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 < 6.5) {
			this.lightSpr.alpha = (6.5 - this.city.simulation.time.timeSinceStart / 60 % 24) * 2;
		} else if(((this.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 > 20) {
			this.lightSpr.alpha = (this.city.simulation.time.timeSinceStart / 60 % 24 - 20) * 2;
		} else {
			this.lightSpr.alpha = 0;
		}
	}
	,beEntertained: function(citizen,timeMod) {
		if(random_Random.getFloat() < 0.5) {
			citizen.moveAndWait(random_Random.getInt(4,8),random_Random.getInt(60,90),null,false,false);
		} else {
			citizen.moveAndWait(random_Random.getInt(11,15),random_Random.getInt(60,90),null,false,false);
		}
	}
	,addWindowInfoLines: function() {
		Building.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText("The Beacon has been designed together with Hydra, who won the first building contest in the Discord!");
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Beacon.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_Beacon
});
var buildings_BlossomHippieHQ = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.canLeaveForBG = 0;
	this.eventBotanicalGardens = null;
	this.timeToCheckBuildings = 0;
	this.currentMission = 0;
	this.eventPhase = 0;
	this.doingEvent = -1;
	this.lastEventDoneOnDay = 0;
	buildings_WorkWithHome.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 11;
	this.endTime = 23;
	this.workTimePreferenceMod = 0.3;
};
$hxClasses["buildings.BlossomHippieHQ"] = buildings_BlossomHippieHQ;
buildings_BlossomHippieHQ.__name__ = ["buildings","BlossomHippieHQ"];
buildings_BlossomHippieHQ.__super__ = buildings_WorkWithHome;
buildings_BlossomHippieHQ.prototype = $extend(buildings_WorkWithHome.prototype,{
	positionSprites: function() {
		buildings_WorkWithHome.prototype.positionSprites.call(this);
	}
	,destroy: function() {
		buildings_WorkWithHome.prototype.destroy.call(this);
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_WorkWithHome.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowInner.addChild(new gui_GUISpacing(this.city.gui.window,new common_Point(4,4)));
		this.city.gui.windowAddInfoText(null,function() {
			return _gthis.missionGetTitle();
		},"Arial15");
		this.city.gui.windowAddInfoText(null,function() {
			return _gthis.missionGetText();
		});
	}
	,missionGetTitle: function() {
		if(this.currentMission == 8) {
			return "Thank You";
		}
		return "Current Task";
	}
	,missionGetText: function() {
		if(this.currentMission == 8) {
			return "Peace out!";
		}
		if(this.workers.length != this.get_jobs()) {
			return "Open the Flower Buds:\nMake sure all 6 jobs are filled.";
		}
		var _g = this.currentMission;
		switch(_g) {
		case 0:
			return "Flower Link:\nBuild at least two teleporters each surrounded by Botanical Gardens.";
		case 1:
			return "Flowery Dining:\nBuild three Blossom Restaurants.";
		case 2:
			return "Actual Nature:\nHave at least one protected forest.";
		case 3:
			return "Together in Harmony:\nBuild twenty Community Houses.";
		case 4:
			return "Organicize:\nBuild thirty Eco Farms.";
		case 5:
			return "Don't Waste:\nBuild nine Farm By-Product Processors.";
		case 6:
			return "Peaceful Society:\nResearch Societal Living in the Living Research Center.";
		case 7:
			return "Make the City Sing:\nBuild the Festival HQ.";
		default:
			return "";
		}
	}
	,checkMissionCompletions: function() {
		var missionComplete = false;
		while(true) {
			missionComplete = false;
			var _g = this.currentMission;
			switch(_g) {
			case 0:
				var _g1 = 0;
				var _g11 = this.city.permanents;
				while(_g1 < _g11.length) {
					var bld = _g11[_g1];
					++_g1;
					if(bld["is"](buildings_Teleporter)) {
						var bld1 = bld;
						if(bld1.leftBuilding != null && bld1.rightBuilding != null && bld1.topBuilding != null && bld1.bottomBuilding != null && bld1.leftBuilding["is"](buildings_BotanicalGardens) && bld1.rightBuilding["is"](buildings_BotanicalGardens) && bld1.bottomBuilding["is"](buildings_BotanicalGardens) && bld1.topBuilding["is"](buildings_BotanicalGardens)) {
							missionComplete = true;
							this.city.progress.unlocks.unlock(buildings_BlossomRestaurant);
						}
					}
				}
				break;
			case 2:
				var _g2 = 0;
				var _g12 = this.city.permanents;
				while(_g2 < _g12.length) {
					var bld2 = _g12[_g2];
					++_g2;
					if(bld2["is"](worldResources_Forest)) {
						var thisForest = bld2;
						if(thisForest.managementMode == worldResources_ForestManagementMode.Protect) {
							missionComplete = true;
							this.city.progress.unlocks.unlock(buildings_FarmHouse);
						}
					}
				}
				break;
			case 6:
				missionComplete = common_ArrayExtensions.any(this.city.upgrades.upgrades,function(cu) {
					return js_Boot.__instanceof(cu,cityUpgrades_SuperSpaciousLiving);
				});
				if(missionComplete) {
					this.city.progress.unlocks.unlock(buildings_FestivalHQ);
				}
				break;
			default:
			}
			if(this.timeToCheckBuildings <= 0 && this.currentMission != 0 && this.currentMission != 2 && this.currentMission != 6 && this.currentMission != 8) {
				var buildingsByType = this.city.getAmountOfPermanentsPerType();
				var _g13 = this.currentMission;
				switch(_g13) {
				case 1:
					missionComplete = (__map_reserved["buildings.BlossomRestaurant"] != null ? buildingsByType.getReserved("buildings.BlossomRestaurant") : buildingsByType.h["buildings.BlossomRestaurant"]) >= 3;
					break;
				case 3:
					missionComplete = (__map_reserved["buildings.FarmHouse"] != null ? buildingsByType.getReserved("buildings.FarmHouse") : buildingsByType.h["buildings.FarmHouse"]) >= 20;
					break;
				case 4:
					missionComplete = (__map_reserved["buildings.EcoFarm"] != null ? buildingsByType.getReserved("buildings.EcoFarm") : buildingsByType.h["buildings.EcoFarm"]) >= 20;
					if(missionComplete) {
						this.city.progress.unlocks.unlock(buildings_FarmByProductProcessor);
					}
					break;
				case 5:
					missionComplete = (__map_reserved["buildings.FarmByProductProcessor"] != null ? buildingsByType.getReserved("buildings.FarmByProductProcessor") : buildingsByType.h["buildings.FarmByProductProcessor"]) >= 9;
					if(missionComplete) {
						this.city.progress.unlocks.unlock(cityUpgrades_SuperSpaciousLiving);
					}
					break;
				case 7:
					missionComplete = (__map_reserved["buildings.FestivalHQ"] != null ? buildingsByType.getReserved("buildings.FestivalHQ") : buildingsByType.h["buildings.FestivalHQ"]) >= 1;
					break;
				default:
				}
				this.timeToCheckBuildings = 30;
			}
			if(missionComplete) {
				this.currentMission += 1;
				this.timeToCheckBuildings = 0;
				this.city.progress.goalHelp.updateHasBuildingGoal();
			}
			if(!missionComplete) {
				break;
			}
		}
	}
	,update: function(timeMod) {
		buildings_WorkWithHome.prototype.update.call(this,timeMod);
		this.checkMissionCompletions();
		this.timeToCheckBuildings -= timeMod;
		this.canLeaveForBG -= timeMod;
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		var _gthis = this;
		if(citizen.inPermanent != null && citizen.inPermanent["is"](buildings_BotanicalGardens) && citizen.inPermanent.isTree()) {
			if(this.eventPhase != 0) {
				citizen.setRelativeY(citizen.relativeY - 0.4 * timeMod);
				if(citizen.relativeY <= 0) {
					if((citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).bottomBuilding != null && (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).bottomBuilding["is"](buildings_BotanicalGardens)) {
						citizen.setRelativeY(citizen.relativeY + 20);
						citizen.inPermanent = (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).bottomBuilding;
						return;
					} else {
						citizen.setRelativeY(0);
						this.doingEvent = -1;
					}
				} else {
					return;
				}
			} else {
				var spd = citizen.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				var tmp;
				if(Math.abs(9 - citizen.relativeX) < spd) {
					citizen.relativeX = 9;
					tmp = true;
				} else {
					var num = 9 - citizen.relativeX;
					citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
					tmp = false;
				}
				if(tmp) {
					citizen.setRelativeY(citizen.relativeY + 0.4 * timeMod);
					if(citizen.relativeY >= 10) {
						if((citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).topBuilding != null && (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).topBuilding["is"](buildings_BotanicalGardens)) {
							citizen.setRelativeY(citizen.relativeY - 20);
							citizen.inPermanent = (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).topBuilding;
						} else {
							this.eventPhase = 1;
						}
					}
				}
				return;
			}
		} else if(this.doingEvent != -1) {
			citizen.setRelativeY(0);
			if(this.eventBotanicalGardens == null) {
				var _this = this.city.simulation.permanentFinder;
				var _gthis1 = _this;
				_this.updateQueries += 1;
				_this.pfSeenStart += 3;
				if(_this.pfSeenStart > 100000) {
					_this.pfSeenStart = 1;
				}
				var newPrioritizable = pathfinder_PermanentPrioritizable.create(0,this);
				this.pfRelatedPrioritizable = newPrioritizable;
				_this.pathQueue.enqueue(newPrioritizable);
				var maxNiceNess = -10000.0;
				var bestPermanent = null;
				var landingSiteGroups = _this.city.connections.landingSiteGroups;
				var teleportersDone = false;
				var _g = [];
				var _g1 = 0;
				while(_g1 < landingSiteGroups.length) {
					var i = landingSiteGroups[_g1];
					++_g1;
					_g.push(false);
				}
				var landingSitesDone = _g;
				var privateTeleporter = null;
				while(_this.pathQueue.mSize != 0) {
					var currentQueueItem = _this.pathQueue.dequeue();
					var currentPermanent = currentQueueItem.permanent;
					currentPermanent.pfSeen = _this.pfSeenStart + 1;
					var tmp1;
					if(currentPermanent["is"](buildings_BotanicalGardens)) {
						var bg = currentPermanent;
						if(bg.bottomBuilding == null || !bg.bottomBuilding["is"](buildings_BotanicalGardens)) {
							tmp1 = bg.isTree();
						} else {
							tmp1 = false;
						}
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						while(_this.pathQueue.mSize != 0) _this.pathQueue.dequeue().destroy();
						bestPermanent = currentPermanent;
						break;
					}
					if(currentPermanent.isBuilding) {
						var currentBuilding = currentPermanent;
						var permanentTo = currentBuilding.leftBuilding;
						if(permanentTo != null) {
							if(permanentTo.pfSeen == _gthis1.pfSeenStart) {
								var relatedPrioritizable = permanentTo.pfRelatedPrioritizable;
								var newPriority = currentQueueItem.priority + 20;
								if(newPriority < relatedPrioritizable.priority) {
									_gthis1.pathQueue.reprioritize(relatedPrioritizable,newPriority);
								}
							} else if(permanentTo.pfSeen != _gthis1.pfSeenStart + 1) {
								var newPriority1 = currentQueueItem.priority + 20;
								permanentTo.pfSeen = _gthis1.pfSeenStart;
								permanentTo.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority1,permanentTo);
								_gthis1.pathQueue.enqueue(permanentTo.pfRelatedPrioritizable);
							}
						}
						var permanentTo1 = currentBuilding.rightBuilding;
						if(permanentTo1 != null) {
							if(permanentTo1.pfSeen == _gthis1.pfSeenStart) {
								var relatedPrioritizable1 = permanentTo1.pfRelatedPrioritizable;
								var newPriority2 = currentQueueItem.priority + 20;
								if(newPriority2 < relatedPrioritizable1.priority) {
									_gthis1.pathQueue.reprioritize(relatedPrioritizable1,newPriority2);
								}
							} else if(permanentTo1.pfSeen != _gthis1.pfSeenStart + 1) {
								var newPriority3 = currentQueueItem.priority + 20;
								permanentTo1.pfSeen = _gthis1.pfSeenStart;
								permanentTo1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority3,permanentTo1);
								_gthis1.pathQueue.enqueue(permanentTo1.pfRelatedPrioritizable);
							}
						}
						var permanentTo2 = currentBuilding.topBuilding;
						if(permanentTo2 != null) {
							if(permanentTo2.pfSeen == _gthis1.pfSeenStart) {
								var relatedPrioritizable2 = permanentTo2.pfRelatedPrioritizable;
								var newPriority4 = currentQueueItem.priority + 20;
								if(newPriority4 < relatedPrioritizable2.priority) {
									_gthis1.pathQueue.reprioritize(relatedPrioritizable2,newPriority4);
								}
							} else if(permanentTo2.pfSeen != _gthis1.pfSeenStart + 1) {
								var newPriority5 = currentQueueItem.priority + 20;
								permanentTo2.pfSeen = _gthis1.pfSeenStart;
								permanentTo2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority5,permanentTo2);
								_gthis1.pathQueue.enqueue(permanentTo2.pfRelatedPrioritizable);
							}
						}
						var permanentTo3 = currentBuilding.bottomBuilding;
						if(permanentTo3 != null) {
							if(permanentTo3.pfSeen == _gthis1.pfSeenStart) {
								var relatedPrioritizable3 = permanentTo3.pfRelatedPrioritizable;
								var newPriority6 = currentQueueItem.priority + 20;
								if(newPriority6 < relatedPrioritizable3.priority) {
									_gthis1.pathQueue.reprioritize(relatedPrioritizable3,newPriority6);
								}
							} else if(permanentTo3.pfSeen != _gthis1.pfSeenStart + 1) {
								var newPriority7 = currentQueueItem.priority + 20;
								permanentTo3.pfSeen = _gthis1.pfSeenStart;
								permanentTo3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority7,permanentTo3);
								_gthis1.pathQueue.enqueue(permanentTo3.pfRelatedPrioritizable);
							}
						}
						var isPrivateTeleporter = privateTeleporter == currentPermanent;
						var canTeleportFromHere = currentPermanent["is"](buildings_Teleporter) || isPrivateTeleporter;
						if(!teleportersDone && canTeleportFromHere) {
							var rnd = random_Random.getFloat(2);
							var tp = 0;
							var len = _this.city.teleporters.length;
							var invlen = 2 / len;
							var _g2 = 0;
							var _g11 = len;
							while(_g2 < _g11) {
								var tp1 = _g2++;
								var teleporter = _this.city.teleporters[tp1];
								var priorityAdd = 9 + (rnd + tp1 * invlen) % 2.0;
								if(teleporter != null) {
									if(teleporter.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable4 = teleporter.pfRelatedPrioritizable;
										var newPriority8 = currentQueueItem.priority + priorityAdd;
										if(newPriority8 < relatedPrioritizable4.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable4,newPriority8);
										}
									} else if(teleporter.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority9 = currentQueueItem.priority + priorityAdd;
										teleporter.pfSeen = _gthis1.pfSeenStart;
										teleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority9,teleporter);
										_gthis1.pathQueue.enqueue(teleporter.pfRelatedPrioritizable);
									}
								}
							}
							if(!isPrivateTeleporter && privateTeleporter != null) {
								if(privateTeleporter != null) {
									if(privateTeleporter.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable5 = privateTeleporter.pfRelatedPrioritizable;
										var newPriority10 = currentQueueItem.priority + 10;
										if(newPriority10 < relatedPrioritizable5.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable5,newPriority10);
										}
									} else if(privateTeleporter.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority11 = currentQueueItem.priority + 10;
										privateTeleporter.pfSeen = _gthis1.pfSeenStart;
										privateTeleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority11,privateTeleporter);
										_gthis1.pathQueue.enqueue(privateTeleporter.pfRelatedPrioritizable);
									}
								}
							}
							teleportersDone = true;
						} else if(currentPermanent["is"](buildings_LandingSite) && !landingSitesDone[currentPermanent.landingSiteGroup]) {
							var thisGroup = currentPermanent.landingSiteGroup;
							var _g12 = 0;
							var _g21 = _this.city.connections.landingSiteGroups[thisGroup];
							while(_g12 < _g21.length) {
								var landingSite = _g21[_g12];
								++_g12;
								var priorityAdd1 = landingSite.estimatedFlyingDistanceTo(currentPermanent);
								if(landingSite != null) {
									if(landingSite.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable6 = landingSite.pfRelatedPrioritizable;
										var newPriority12 = currentQueueItem.priority + priorityAdd1;
										if(newPriority12 < relatedPrioritizable6.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable6,newPriority12);
										}
									} else if(landingSite.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority13 = currentQueueItem.priority + priorityAdd1;
										landingSite.pfSeen = _gthis1.pfSeenStart;
										landingSite.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority13,landingSite);
										_gthis1.pathQueue.enqueue(landingSite.pfRelatedPrioritizable);
									}
								}
							}
							landingSitesDone[thisGroup] = true;
						} else if(!currentQueueItem.dontCheckElevators && currentPermanent["is"](buildings_HyperElevator) && currentPermanent.pfSeen != 3) {
							var _g13 = 0;
							var _g22 = _this.city.connections.elevatorConnections.get(currentBuilding.world)[currentBuilding.worldPosition.x];
							while(_g13 < _g22.length) {
								var elevator = _g22[_g13];
								++_g13;
								var priorityAdd2 = Math.abs(elevator.worldPosition.y - currentBuilding.worldPosition.y);
								if(elevator != null) {
									if(elevator.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable7 = elevator.pfRelatedPrioritizable;
										var newPriority14 = currentQueueItem.priority + priorityAdd2;
										if(newPriority14 < relatedPrioritizable7.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable7,newPriority14);
										}
									} else if(elevator.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority15 = currentQueueItem.priority + priorityAdd2;
										elevator.pfSeen = _gthis1.pfSeenStart;
										elevator.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority15,elevator);
										_gthis1.pathQueue.enqueue(elevator.pfRelatedPrioritizable);
									}
								}
								if(elevator.pfRelatedPrioritizable != null) {
									elevator.pfRelatedPrioritizable.dontCheckElevators = true;
								}
							}
						}
					}
					if(currentPermanent.worldPosition.y == 0) {
						var _g14 = 0;
						var _g23 = currentPermanent.world.permanents;
						while(_g14 < _g23.length) {
							var bottomPermanents = _g23[_g14];
							++_g14;
							if(bottomPermanents.length == 0 || bottomPermanents[0] == null) {
								continue;
							}
							var permanentTo4 = bottomPermanents[0];
							var priorityAdd3 = Math.abs(bottomPermanents[0].position.x - currentPermanent.position.x);
							if(permanentTo4 != null) {
								if(permanentTo4.pfSeen == _gthis1.pfSeenStart) {
									var relatedPrioritizable8 = permanentTo4.pfRelatedPrioritizable;
									var newPriority16 = currentQueueItem.priority + priorityAdd3;
									if(newPriority16 < relatedPrioritizable8.priority) {
										_gthis1.pathQueue.reprioritize(relatedPrioritizable8,newPriority16);
									}
								} else if(permanentTo4.pfSeen != _gthis1.pfSeenStart + 1) {
									var newPriority17 = currentQueueItem.priority + priorityAdd3;
									permanentTo4.pfSeen = _gthis1.pfSeenStart;
									permanentTo4.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority17,permanentTo4);
									_gthis1.pathQueue.enqueue(permanentTo4.pfRelatedPrioritizable);
								}
							}
						}
					}
					currentQueueItem.destroy();
				}
				this.eventBotanicalGardens = bestPermanent;
			}
			if(this.eventBotanicalGardens != null) {
				if(this.canLeaveForBG <= 0) {
					citizen.simulation.pathfinder.findPath(citizen,this.eventBotanicalGardens);
					citizen.pathOnFail = function() {
						_gthis.doingEvent = -1;
					};
					this.canLeaveForBG = 20;
				}
				return;
			} else {
				this.doingEvent = -1;
			}
		}
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			return;
		}
		if(citizen.inPermanent != this) {
			citizen.setRelativeY(0);
			citizen.simulation.pathfinder.findPath(citizen,this);
			citizen.pathOnFail = null;
			return;
		}
		this.doWalkAround(citizen);
		if(((this.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 > 10) {
			if(1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0) > this.lastEventDoneOnDay) {
				this.doingEvent = 1;
				this.eventPhase = 0;
				this.lastEventDoneOnDay = 1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0);
			}
		}
	}
	,walkAround: function(citizen,stepsInBuilding) {
		this.doWalkAround(citizen);
	}
	,doWalkAround: function(citizen) {
		if(citizen.relativeX < 7 && random_Random.getFloat() < 0.3) {
			citizen.changeFloorAndWaitRandom(10,30);
		} else if(citizen.relativeY > 5 || random_Random.getFloat() > 0.5) {
			citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(60,180),null,false,false);
		} else {
			citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(60,180),null,false,false);
		}
	}
	,getGlobalGoal: function() {
		if(this.currentMission == 8) {
			return null;
		}
		return { category : "Hippie Mission", text : this.missionGetText()};
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_WorkWithHome.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_BlossomHippieHQ.saveDefinition);
		}
		var value = this.lastEventDoneOnDay;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.doingEvent;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var value2 = this.eventPhase;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
		var value3 = this.currentMission;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value3);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_WorkWithHome.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["lastEventDoneOnDay"] != null ? loadMap.existsReserved("lastEventDoneOnDay") : loadMap.h.hasOwnProperty("lastEventDoneOnDay")) {
			this.lastEventDoneOnDay = __map_reserved["lastEventDoneOnDay"] != null ? loadMap.getReserved("lastEventDoneOnDay") : loadMap.h["lastEventDoneOnDay"];
		}
		if(__map_reserved["doingEvent"] != null ? loadMap.existsReserved("doingEvent") : loadMap.h.hasOwnProperty("doingEvent")) {
			this.doingEvent = __map_reserved["doingEvent"] != null ? loadMap.getReserved("doingEvent") : loadMap.h["doingEvent"];
		}
		if(__map_reserved["eventPhase"] != null ? loadMap.existsReserved("eventPhase") : loadMap.h.hasOwnProperty("eventPhase")) {
			this.eventPhase = __map_reserved["eventPhase"] != null ? loadMap.getReserved("eventPhase") : loadMap.h["eventPhase"];
		}
		if(__map_reserved["currentMission"] != null ? loadMap.existsReserved("currentMission") : loadMap.h.hasOwnProperty("currentMission")) {
			this.currentMission = __map_reserved["currentMission"] != null ? loadMap.getReserved("currentMission") : loadMap.h["currentMission"];
		}
	}
	,__class__: buildings_BlossomHippieHQ
});
var buildings_BlossomHut = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.get_mergingDrawer().setBackgroundTextures("spr_bloomhouse");
};
$hxClasses["buildings.BlossomHut"] = buildings_BlossomHut;
buildings_BlossomHut.__name__ = ["buildings","BlossomHut"];
buildings_BlossomHut.__super__ = buildings_House;
buildings_BlossomHut.prototype = $extend(buildings_House.prototype,{
	get_drawerType: function() {
		return buildings_buildingDrawers_AllDirMergingBuildingDrawer;
	}
	,get_mergingDrawer: function() {
		return this.drawer;
	}
	,postCreate: function() {
		buildings_House.prototype.postCreate.call(this);
		this.positionSprites();
	}
	,positionSprites: function() {
		buildings_House.prototype.positionSprites.call(this);
	}
	,walkAround: function(citizen,stepsInBuilding) {
		if(citizen.relativeX == 9) {
			citizen.canViewSelfInBuilding = false;
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 4;
			arr[1] = 9;
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,__class__: buildings_BlossomHut
});
var buildings_BlossomRestaurant = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 16;
	this.endTime = 1;
	this.workTimePreferenceMod = 0.5;
	this.isEntertainment = true;
	this.get_mergingDrawer().setForegroundTextures("spr_bloomrestaurant_foreground");
};
$hxClasses["buildings.BlossomRestaurant"] = buildings_BlossomRestaurant;
buildings_BlossomRestaurant.__name__ = ["buildings","BlossomRestaurant"];
buildings_BlossomRestaurant.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_BlossomRestaurant.__super__ = buildings_Work;
buildings_BlossomRestaurant.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 50;
	}
	,get_isOpen: function() {
		if(this.workers.length >= 1 && this.workers[0].currentAction == LifeAction.Work) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = this.startTime - this.workTimePreferenceMod;
			if(start < 0.5) {
				if(this1 >= start) {
					return this1 < 0.5;
				} else {
					return false;
				}
			} else if(!(this1 >= start)) {
				return this1 < 0.5;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 1;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 1;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 2;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_AllDirMergingBuildingDrawer;
	}
	,get_mergingDrawer: function() {
		return this.drawer;
	}
	,beEntertained: function(citizen,timeMod) {
		if(!citizen.hasBuildingInited) {
			if(this.bottomBuilding == null || !this.bottomBuilding["is"](buildings_BlossomRestaurant)) {
				var i = random_Random.getInt(6);
				switch(i) {
				case 0:
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
					arr[0] = 4;
					arr[1] = 1;
					citizen.setPath(arr,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 1:
					var pool1 = pooling_Int32ArrayPool.pool;
					var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
					arr1[0] = 4;
					arr1[1] = 2;
					citizen.setPath(arr1,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 2:
					var pool2 = pooling_Int32ArrayPool.pool;
					var arr2 = pool2[2].length > 0 ? pool2[2].splice(pool2[2].length - 1,1)[0] : new Int32Array(2);
					arr2[0] = 4;
					arr2[1] = 5;
					citizen.setPath(arr2,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 3:
					var pool3 = pooling_Int32ArrayPool.pool;
					var arr3 = pool3[2].length > 0 ? pool3[2].splice(pool3[2].length - 1,1)[0] : new Int32Array(2);
					arr3[0] = 4;
					arr3[1] = 13;
					citizen.setPath(arr3,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 4:
					var pool4 = pooling_Int32ArrayPool.pool;
					var arr4 = pool4[2].length > 0 ? pool4[2].splice(pool4[2].length - 1,1)[0] : new Int32Array(2);
					arr4[0] = 4;
					arr4[1] = 14;
					citizen.setPath(arr4,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 5:
					var pool5 = pooling_Int32ArrayPool.pool;
					var arr5 = pool5[2].length > 0 ? pool5[2].splice(pool5[2].length - 1,1)[0] : new Int32Array(2);
					arr5[0] = 4;
					arr5[1] = 17;
					citizen.setPath(arr5,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				}
			} else {
				var i1 = random_Random.getInt(4);
				switch(i1) {
				case 0:
					var pool6 = pooling_Int32ArrayPool.pool;
					var arr6 = pool6[2].length > 0 ? pool6[2].splice(pool6[2].length - 1,1)[0] : new Int32Array(2);
					arr6[0] = 4;
					arr6[1] = 1;
					citizen.setPath(arr6,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 1:
					var pool7 = pooling_Int32ArrayPool.pool;
					var arr7 = pool7[2].length > 0 ? pool7[2].splice(pool7[2].length - 1,1)[0] : new Int32Array(2);
					arr7[0] = 4;
					arr7[1] = 4;
					citizen.setPath(arr7,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 2:
					var pool8 = pooling_Int32ArrayPool.pool;
					var arr8 = pool8[2].length > 0 ? pool8[2].splice(pool8[2].length - 1,1)[0] : new Int32Array(2);
					arr8[0] = 4;
					arr8[1] = 12;
					citizen.setPath(arr8,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 3:
					var pool9 = pooling_Int32ArrayPool.pool;
					var arr9 = pool9[2].length > 0 ? pool9[2].splice(pool9[2].length - 1,1)[0] : new Int32Array(2);
					arr9[0] = 4;
					arr9[1] = 17;
					citizen.setPath(arr9,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				}
			}
			citizen.hasBuildingInited = true;
		} else {
			var pool10 = pooling_Int32ArrayPool.pool;
			var arr10 = pool10[2].length > 0 ? pool10[2].splice(pool10[2].length - 1,1)[0] : new Int32Array(2);
			arr10[0] = 8;
			arr10[1] = random_Random.getInt(30,60);
			citizen.setPath(arr10,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking && this.city.simulation.time.timeSinceStart / 60 % 24 > 0.5) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			citizen.moveAndWait(random_Random.getInt(3,18),random_Random.getInt(60,120),null,false,true);
		}
	}
	,__class__: buildings_BlossomRestaurant
});
var buildings_BlueCollarWork = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.hasNotSearchedForResourceGatherPlaceThisStep = true;
	this.nearestResourceGatherPlace = null;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.BlueCollarWork"] = buildings_BlueCollarWork;
buildings_BlueCollarWork.__name__ = ["buildings","BlueCollarWork"];
buildings_BlueCollarWork.__super__ = buildings_Work;
buildings_BlueCollarWork.prototype = $extend(buildings_Work.prototype,{
	doBlueCollarJob: function(citizen,timeMod,shouldStopWorking,resourceOptions,getResource,minChopTime,maxChopTime) {
		var _gthis = this;
		if(shouldStopWorking) {
			if(!citizen.hasWorkTools) {
				citizen.currentAction = LifeAction.Nothing;
			} else if(citizen.inPermanent == this) {
				citizen.moveAndWait(4,20,function() {
					citizen.hasWorkTools = false;
				});
			} else {
				citizen.simulation.pathfinder.findPath(citizen,this);
				citizen.pathOnFail = null;
			}
		} else if(citizen.hasWorkTools) {
			var citizenInResource = false;
			var _g = 0;
			while(_g < resourceOptions.length) {
				var o = resourceOptions[_g];
				++_g;
				if(js_Boot.__instanceof(citizen.inPermanent,o)) {
					citizenInResource = true;
					break;
				}
			}
			if(citizenInResource && (citizen.inPermanent.materialsLeft > 0 || citizen.inPermanent.get_stayIfEmpty()) && !citizen.inPermanent.get_doNotGather()) {
				var resourceGatherPlace = citizen.inPermanent;
				if(resourceGatherPlace.materialsLeft > 0) {
					var tmp = random_Random.getInt(resourceGatherPlace.minCitizenX,resourceGatherPlace.maxCitizenX);
					var tmp1 = random_Random.getInt(minChopTime,maxChopTime);
					citizen.moveAndWait(tmp,tmp1,function() {
						if(resourceGatherPlace.get_doNotGather()) {
							_gthis.nearestResourceGatherPlace = null;
							return;
						}
						getResource(resourceGatherPlace);
						if(resourceGatherPlace.materialsLeft <= 0 && !resourceGatherPlace.get_stayIfEmpty()) {
							_gthis.nearestResourceGatherPlace = null;
							if(resourceGatherPlace.get_destroyedOnEmpty()) {
								resourceGatherPlace.destroy();
							}
						} else {
							resourceGatherPlace.updateTexture();
						}
					},true,false);
				}
			} else {
				var performCitizenAction = true;
				if(this.nearestResourceGatherPlace == null || this.nearestResourceGatherPlace.materialsLeft <= 0 && !this.nearestResourceGatherPlace.get_stayIfEmpty() || this.nearestResourceGatherPlace.get_doNotGather()) {
					this.nearestResourceGatherPlace = null;
					var notRateLimited = this.city.simulation.permanentFinder.canPerformQuery();
					if(!notRateLimited) {
						performCitizenAction = false;
					}
					var tmp2;
					if(notRateLimited && this.hasNotSearchedForResourceGatherPlaceThisStep) {
						var this1 = this.world.knownResourceInavailability;
						var key = Type.getClassName(resourceOptions[0]);
						var _this = this1;
						tmp2 = !(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key));
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						if(this.city.simulation.resourcePriorityManager.hasResourcePrioritiesFor(resourceOptions[0])) {
							var findFunc = resourceOptions.length == 0 ? function(pm) {
								if(pm["is"](resourceOptions[0]) && pm.materialsLeft > 0 && !pm.get_doNotGather()) {
									return _gthis.city.simulation.resourcePriorityManager.isPrioritized(pm);
								} else {
									return false;
								}
							} : function(pm1) {
								if(common_ArrayExtensions.any(resourceOptions,function(ro) {
									return pm1["is"](ro);
								}) && pm1.materialsLeft > 0 && !pm1.get_doNotGather()) {
									return _gthis.city.simulation.resourcePriorityManager.isPrioritized(pm1);
								} else {
									return false;
								}
							};
							var _this1 = this.city.simulation.permanentFinder;
							var _gthis1 = _this1;
							_this1.updateQueries += 1;
							_this1.pfSeenStart += 3;
							if(_this1.pfSeenStart > 100000) {
								_this1.pfSeenStart = 1;
							}
							var newPrioritizable = pathfinder_PermanentPrioritizable.create(0,this);
							this.pfRelatedPrioritizable = newPrioritizable;
							_this1.pathQueue.enqueue(newPrioritizable);
							var maxNiceNess = -10000.0;
							var bestPermanent = null;
							var landingSiteGroups = _this1.city.connections.landingSiteGroups;
							var teleportersDone = false;
							var _g1 = [];
							var _g11 = 0;
							while(_g11 < landingSiteGroups.length) {
								var i = landingSiteGroups[_g11];
								++_g11;
								_g1.push(false);
							}
							var landingSitesDone = _g1;
							var privateTeleporter = null;
							while(_this1.pathQueue.mSize != 0) {
								var currentQueueItem = _this1.pathQueue.dequeue();
								var currentPermanent = currentQueueItem.permanent;
								currentPermanent.pfSeen = _this1.pfSeenStart + 1;
								if(findFunc(currentPermanent)) {
									while(_this1.pathQueue.mSize != 0) _this1.pathQueue.dequeue().destroy();
									bestPermanent = currentPermanent;
									break;
								}
								if(currentPermanent.isBuilding) {
									var currentBuilding = currentPermanent;
									var permanentTo = currentBuilding.leftBuilding;
									if(permanentTo != null) {
										if(permanentTo.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable = permanentTo.pfRelatedPrioritizable;
											var newPriority = currentQueueItem.priority + 20;
											if(newPriority < relatedPrioritizable.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable,newPriority);
											}
										} else if(permanentTo.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority1 = currentQueueItem.priority + 20;
											permanentTo.pfSeen = _gthis1.pfSeenStart;
											permanentTo.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority1,permanentTo);
											_gthis1.pathQueue.enqueue(permanentTo.pfRelatedPrioritizable);
										}
									}
									var permanentTo1 = currentBuilding.rightBuilding;
									if(permanentTo1 != null) {
										if(permanentTo1.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable1 = permanentTo1.pfRelatedPrioritizable;
											var newPriority2 = currentQueueItem.priority + 20;
											if(newPriority2 < relatedPrioritizable1.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable1,newPriority2);
											}
										} else if(permanentTo1.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority3 = currentQueueItem.priority + 20;
											permanentTo1.pfSeen = _gthis1.pfSeenStart;
											permanentTo1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority3,permanentTo1);
											_gthis1.pathQueue.enqueue(permanentTo1.pfRelatedPrioritizable);
										}
									}
									var permanentTo2 = currentBuilding.topBuilding;
									if(permanentTo2 != null) {
										if(permanentTo2.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable2 = permanentTo2.pfRelatedPrioritizable;
											var newPriority4 = currentQueueItem.priority + 20;
											if(newPriority4 < relatedPrioritizable2.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable2,newPriority4);
											}
										} else if(permanentTo2.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority5 = currentQueueItem.priority + 20;
											permanentTo2.pfSeen = _gthis1.pfSeenStart;
											permanentTo2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority5,permanentTo2);
											_gthis1.pathQueue.enqueue(permanentTo2.pfRelatedPrioritizable);
										}
									}
									var permanentTo3 = currentBuilding.bottomBuilding;
									if(permanentTo3 != null) {
										if(permanentTo3.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable3 = permanentTo3.pfRelatedPrioritizable;
											var newPriority6 = currentQueueItem.priority + 20;
											if(newPriority6 < relatedPrioritizable3.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable3,newPriority6);
											}
										} else if(permanentTo3.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority7 = currentQueueItem.priority + 20;
											permanentTo3.pfSeen = _gthis1.pfSeenStart;
											permanentTo3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority7,permanentTo3);
											_gthis1.pathQueue.enqueue(permanentTo3.pfRelatedPrioritizable);
										}
									}
									var isPrivateTeleporter = privateTeleporter == currentPermanent;
									var canTeleportFromHere = currentPermanent["is"](buildings_Teleporter) || isPrivateTeleporter;
									if(!teleportersDone && canTeleportFromHere) {
										var rnd = random_Random.getFloat(2);
										var tp = 0;
										var len = _this1.city.teleporters.length;
										var invlen = 2 / len;
										var _g2 = 0;
										var _g12 = len;
										while(_g2 < _g12) {
											var tp1 = _g2++;
											var teleporter = _this1.city.teleporters[tp1];
											var priorityAdd = 9 + (rnd + tp1 * invlen) % 2.0;
											if(teleporter != null) {
												if(teleporter.pfSeen == _gthis1.pfSeenStart) {
													var relatedPrioritizable4 = teleporter.pfRelatedPrioritizable;
													var newPriority8 = currentQueueItem.priority + priorityAdd;
													if(newPriority8 < relatedPrioritizable4.priority) {
														_gthis1.pathQueue.reprioritize(relatedPrioritizable4,newPriority8);
													}
												} else if(teleporter.pfSeen != _gthis1.pfSeenStart + 1) {
													var newPriority9 = currentQueueItem.priority + priorityAdd;
													teleporter.pfSeen = _gthis1.pfSeenStart;
													teleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority9,teleporter);
													_gthis1.pathQueue.enqueue(teleporter.pfRelatedPrioritizable);
												}
											}
										}
										if(!isPrivateTeleporter && privateTeleporter != null) {
											if(privateTeleporter != null) {
												if(privateTeleporter.pfSeen == _gthis1.pfSeenStart) {
													var relatedPrioritizable5 = privateTeleporter.pfRelatedPrioritizable;
													var newPriority10 = currentQueueItem.priority + 10;
													if(newPriority10 < relatedPrioritizable5.priority) {
														_gthis1.pathQueue.reprioritize(relatedPrioritizable5,newPriority10);
													}
												} else if(privateTeleporter.pfSeen != _gthis1.pfSeenStart + 1) {
													var newPriority11 = currentQueueItem.priority + 10;
													privateTeleporter.pfSeen = _gthis1.pfSeenStart;
													privateTeleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority11,privateTeleporter);
													_gthis1.pathQueue.enqueue(privateTeleporter.pfRelatedPrioritizable);
												}
											}
										}
										teleportersDone = true;
									} else if(currentPermanent["is"](buildings_LandingSite) && !landingSitesDone[currentPermanent.landingSiteGroup]) {
										var thisGroup = currentPermanent.landingSiteGroup;
										var _g13 = 0;
										var _g21 = _this1.city.connections.landingSiteGroups[thisGroup];
										while(_g13 < _g21.length) {
											var landingSite = _g21[_g13];
											++_g13;
											var priorityAdd1 = landingSite.estimatedFlyingDistanceTo(currentPermanent);
											if(landingSite != null) {
												if(landingSite.pfSeen == _gthis1.pfSeenStart) {
													var relatedPrioritizable6 = landingSite.pfRelatedPrioritizable;
													var newPriority12 = currentQueueItem.priority + priorityAdd1;
													if(newPriority12 < relatedPrioritizable6.priority) {
														_gthis1.pathQueue.reprioritize(relatedPrioritizable6,newPriority12);
													}
												} else if(landingSite.pfSeen != _gthis1.pfSeenStart + 1) {
													var newPriority13 = currentQueueItem.priority + priorityAdd1;
													landingSite.pfSeen = _gthis1.pfSeenStart;
													landingSite.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority13,landingSite);
													_gthis1.pathQueue.enqueue(landingSite.pfRelatedPrioritizable);
												}
											}
										}
										landingSitesDone[thisGroup] = true;
									} else if(!currentQueueItem.dontCheckElevators && currentPermanent["is"](buildings_HyperElevator) && currentPermanent.pfSeen != 3) {
										var _g14 = 0;
										var _g22 = _this1.city.connections.elevatorConnections.get(currentBuilding.world)[currentBuilding.worldPosition.x];
										while(_g14 < _g22.length) {
											var elevator = _g22[_g14];
											++_g14;
											var priorityAdd2 = Math.abs(elevator.worldPosition.y - currentBuilding.worldPosition.y);
											if(elevator != null) {
												if(elevator.pfSeen == _gthis1.pfSeenStart) {
													var relatedPrioritizable7 = elevator.pfRelatedPrioritizable;
													var newPriority14 = currentQueueItem.priority + priorityAdd2;
													if(newPriority14 < relatedPrioritizable7.priority) {
														_gthis1.pathQueue.reprioritize(relatedPrioritizable7,newPriority14);
													}
												} else if(elevator.pfSeen != _gthis1.pfSeenStart + 1) {
													var newPriority15 = currentQueueItem.priority + priorityAdd2;
													elevator.pfSeen = _gthis1.pfSeenStart;
													elevator.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority15,elevator);
													_gthis1.pathQueue.enqueue(elevator.pfRelatedPrioritizable);
												}
											}
											if(elevator.pfRelatedPrioritizable != null) {
												elevator.pfRelatedPrioritizable.dontCheckElevators = true;
											}
										}
									}
								}
								if(currentPermanent.worldPosition.y == 0) {
									var _g15 = 0;
									var _g23 = currentPermanent.world.permanents;
									while(_g15 < _g23.length) {
										var bottomPermanents = _g23[_g15];
										++_g15;
										if(bottomPermanents.length == 0 || bottomPermanents[0] == null) {
											continue;
										}
										var permanentTo4 = bottomPermanents[0];
										var priorityAdd3 = Math.abs(bottomPermanents[0].position.x - currentPermanent.position.x);
										if(permanentTo4 != null) {
											if(permanentTo4.pfSeen == _gthis1.pfSeenStart) {
												var relatedPrioritizable8 = permanentTo4.pfRelatedPrioritizable;
												var newPriority16 = currentQueueItem.priority + priorityAdd3;
												if(newPriority16 < relatedPrioritizable8.priority) {
													_gthis1.pathQueue.reprioritize(relatedPrioritizable8,newPriority16);
												}
											} else if(permanentTo4.pfSeen != _gthis1.pfSeenStart + 1) {
												var newPriority17 = currentQueueItem.priority + priorityAdd3;
												permanentTo4.pfSeen = _gthis1.pfSeenStart;
												permanentTo4.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority17,permanentTo4);
												_gthis1.pathQueue.enqueue(permanentTo4.pfRelatedPrioritizable);
											}
										}
									}
								}
								currentQueueItem.destroy();
							}
							this.nearestResourceGatherPlace = bestPermanent;
						}
						if(this.nearestResourceGatherPlace == null) {
							var findFunc1 = resourceOptions.length == 0 ? function(pm2) {
								if(pm2["is"](resourceOptions[0]) && pm2.materialsLeft > 0) {
									return !pm2.get_doNotGather();
								} else {
									return false;
								}
							} : function(pm3) {
								if(common_ArrayExtensions.any(resourceOptions,function(ro1) {
									return pm3["is"](ro1);
								}) && pm3.materialsLeft > 0) {
									return !pm3.get_doNotGather();
								} else {
									return false;
								}
							};
							var _this2 = this.city.simulation.permanentFinder;
							var _gthis2 = _this2;
							_this2.updateQueries += 1;
							_this2.pfSeenStart += 3;
							if(_this2.pfSeenStart > 100000) {
								_this2.pfSeenStart = 1;
							}
							var newPrioritizable1 = pathfinder_PermanentPrioritizable.create(0,this);
							this.pfRelatedPrioritizable = newPrioritizable1;
							_this2.pathQueue.enqueue(newPrioritizable1);
							var maxNiceNess1 = -10000.0;
							var bestPermanent1 = null;
							var landingSiteGroups1 = _this2.city.connections.landingSiteGroups;
							var teleportersDone1 = false;
							var _g3 = [];
							var _g16 = 0;
							while(_g16 < landingSiteGroups1.length) {
								var i1 = landingSiteGroups1[_g16];
								++_g16;
								_g3.push(false);
							}
							var landingSitesDone1 = _g3;
							var privateTeleporter1 = null;
							while(_this2.pathQueue.mSize != 0) {
								var currentQueueItem1 = _this2.pathQueue.dequeue();
								var currentPermanent1 = currentQueueItem1.permanent;
								currentPermanent1.pfSeen = _this2.pfSeenStart + 1;
								if(findFunc1(currentPermanent1)) {
									while(_this2.pathQueue.mSize != 0) _this2.pathQueue.dequeue().destroy();
									bestPermanent1 = currentPermanent1;
									break;
								}
								if(currentPermanent1.isBuilding) {
									var currentBuilding1 = currentPermanent1;
									var permanentTo5 = currentBuilding1.leftBuilding;
									if(permanentTo5 != null) {
										if(permanentTo5.pfSeen == _gthis2.pfSeenStart) {
											var relatedPrioritizable9 = permanentTo5.pfRelatedPrioritizable;
											var newPriority18 = currentQueueItem1.priority + 20;
											if(newPriority18 < relatedPrioritizable9.priority) {
												_gthis2.pathQueue.reprioritize(relatedPrioritizable9,newPriority18);
											}
										} else if(permanentTo5.pfSeen != _gthis2.pfSeenStart + 1) {
											var newPriority19 = currentQueueItem1.priority + 20;
											permanentTo5.pfSeen = _gthis2.pfSeenStart;
											permanentTo5.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority19,permanentTo5);
											_gthis2.pathQueue.enqueue(permanentTo5.pfRelatedPrioritizable);
										}
									}
									var permanentTo6 = currentBuilding1.rightBuilding;
									if(permanentTo6 != null) {
										if(permanentTo6.pfSeen == _gthis2.pfSeenStart) {
											var relatedPrioritizable10 = permanentTo6.pfRelatedPrioritizable;
											var newPriority20 = currentQueueItem1.priority + 20;
											if(newPriority20 < relatedPrioritizable10.priority) {
												_gthis2.pathQueue.reprioritize(relatedPrioritizable10,newPriority20);
											}
										} else if(permanentTo6.pfSeen != _gthis2.pfSeenStart + 1) {
											var newPriority21 = currentQueueItem1.priority + 20;
											permanentTo6.pfSeen = _gthis2.pfSeenStart;
											permanentTo6.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority21,permanentTo6);
											_gthis2.pathQueue.enqueue(permanentTo6.pfRelatedPrioritizable);
										}
									}
									var permanentTo7 = currentBuilding1.topBuilding;
									if(permanentTo7 != null) {
										if(permanentTo7.pfSeen == _gthis2.pfSeenStart) {
											var relatedPrioritizable11 = permanentTo7.pfRelatedPrioritizable;
											var newPriority22 = currentQueueItem1.priority + 20;
											if(newPriority22 < relatedPrioritizable11.priority) {
												_gthis2.pathQueue.reprioritize(relatedPrioritizable11,newPriority22);
											}
										} else if(permanentTo7.pfSeen != _gthis2.pfSeenStart + 1) {
											var newPriority23 = currentQueueItem1.priority + 20;
											permanentTo7.pfSeen = _gthis2.pfSeenStart;
											permanentTo7.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority23,permanentTo7);
											_gthis2.pathQueue.enqueue(permanentTo7.pfRelatedPrioritizable);
										}
									}
									var permanentTo8 = currentBuilding1.bottomBuilding;
									if(permanentTo8 != null) {
										if(permanentTo8.pfSeen == _gthis2.pfSeenStart) {
											var relatedPrioritizable12 = permanentTo8.pfRelatedPrioritizable;
											var newPriority24 = currentQueueItem1.priority + 20;
											if(newPriority24 < relatedPrioritizable12.priority) {
												_gthis2.pathQueue.reprioritize(relatedPrioritizable12,newPriority24);
											}
										} else if(permanentTo8.pfSeen != _gthis2.pfSeenStart + 1) {
											var newPriority25 = currentQueueItem1.priority + 20;
											permanentTo8.pfSeen = _gthis2.pfSeenStart;
											permanentTo8.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority25,permanentTo8);
											_gthis2.pathQueue.enqueue(permanentTo8.pfRelatedPrioritizable);
										}
									}
									var isPrivateTeleporter1 = privateTeleporter1 == currentPermanent1;
									var canTeleportFromHere1 = currentPermanent1["is"](buildings_Teleporter) || isPrivateTeleporter1;
									if(!teleportersDone1 && canTeleportFromHere1) {
										var rnd1 = random_Random.getFloat(2);
										var tp2 = 0;
										var len1 = _this2.city.teleporters.length;
										var invlen1 = 2 / len1;
										var _g24 = 0;
										var _g17 = len1;
										while(_g24 < _g17) {
											var tp3 = _g24++;
											var teleporter1 = _this2.city.teleporters[tp3];
											var priorityAdd4 = 9 + (rnd1 + tp3 * invlen1) % 2.0;
											if(teleporter1 != null) {
												if(teleporter1.pfSeen == _gthis2.pfSeenStart) {
													var relatedPrioritizable13 = teleporter1.pfRelatedPrioritizable;
													var newPriority26 = currentQueueItem1.priority + priorityAdd4;
													if(newPriority26 < relatedPrioritizable13.priority) {
														_gthis2.pathQueue.reprioritize(relatedPrioritizable13,newPriority26);
													}
												} else if(teleporter1.pfSeen != _gthis2.pfSeenStart + 1) {
													var newPriority27 = currentQueueItem1.priority + priorityAdd4;
													teleporter1.pfSeen = _gthis2.pfSeenStart;
													teleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority27,teleporter1);
													_gthis2.pathQueue.enqueue(teleporter1.pfRelatedPrioritizable);
												}
											}
										}
										if(!isPrivateTeleporter1 && privateTeleporter1 != null) {
											if(privateTeleporter1 != null) {
												if(privateTeleporter1.pfSeen == _gthis2.pfSeenStart) {
													var relatedPrioritizable14 = privateTeleporter1.pfRelatedPrioritizable;
													var newPriority28 = currentQueueItem1.priority + 10;
													if(newPriority28 < relatedPrioritizable14.priority) {
														_gthis2.pathQueue.reprioritize(relatedPrioritizable14,newPriority28);
													}
												} else if(privateTeleporter1.pfSeen != _gthis2.pfSeenStart + 1) {
													var newPriority29 = currentQueueItem1.priority + 10;
													privateTeleporter1.pfSeen = _gthis2.pfSeenStart;
													privateTeleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority29,privateTeleporter1);
													_gthis2.pathQueue.enqueue(privateTeleporter1.pfRelatedPrioritizable);
												}
											}
										}
										teleportersDone1 = true;
									} else if(currentPermanent1["is"](buildings_LandingSite) && !landingSitesDone1[currentPermanent1.landingSiteGroup]) {
										var thisGroup1 = currentPermanent1.landingSiteGroup;
										var _g18 = 0;
										var _g25 = _this2.city.connections.landingSiteGroups[thisGroup1];
										while(_g18 < _g25.length) {
											var landingSite1 = _g25[_g18];
											++_g18;
											var priorityAdd5 = landingSite1.estimatedFlyingDistanceTo(currentPermanent1);
											if(landingSite1 != null) {
												if(landingSite1.pfSeen == _gthis2.pfSeenStart) {
													var relatedPrioritizable15 = landingSite1.pfRelatedPrioritizable;
													var newPriority30 = currentQueueItem1.priority + priorityAdd5;
													if(newPriority30 < relatedPrioritizable15.priority) {
														_gthis2.pathQueue.reprioritize(relatedPrioritizable15,newPriority30);
													}
												} else if(landingSite1.pfSeen != _gthis2.pfSeenStart + 1) {
													var newPriority31 = currentQueueItem1.priority + priorityAdd5;
													landingSite1.pfSeen = _gthis2.pfSeenStart;
													landingSite1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority31,landingSite1);
													_gthis2.pathQueue.enqueue(landingSite1.pfRelatedPrioritizable);
												}
											}
										}
										landingSitesDone1[thisGroup1] = true;
									} else if(!currentQueueItem1.dontCheckElevators && currentPermanent1["is"](buildings_HyperElevator) && currentPermanent1.pfSeen != 3) {
										var _g19 = 0;
										var _g26 = _this2.city.connections.elevatorConnections.get(currentBuilding1.world)[currentBuilding1.worldPosition.x];
										while(_g19 < _g26.length) {
											var elevator1 = _g26[_g19];
											++_g19;
											var priorityAdd6 = Math.abs(elevator1.worldPosition.y - currentBuilding1.worldPosition.y);
											if(elevator1 != null) {
												if(elevator1.pfSeen == _gthis2.pfSeenStart) {
													var relatedPrioritizable16 = elevator1.pfRelatedPrioritizable;
													var newPriority32 = currentQueueItem1.priority + priorityAdd6;
													if(newPriority32 < relatedPrioritizable16.priority) {
														_gthis2.pathQueue.reprioritize(relatedPrioritizable16,newPriority32);
													}
												} else if(elevator1.pfSeen != _gthis2.pfSeenStart + 1) {
													var newPriority33 = currentQueueItem1.priority + priorityAdd6;
													elevator1.pfSeen = _gthis2.pfSeenStart;
													elevator1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority33,elevator1);
													_gthis2.pathQueue.enqueue(elevator1.pfRelatedPrioritizable);
												}
											}
											if(elevator1.pfRelatedPrioritizable != null) {
												elevator1.pfRelatedPrioritizable.dontCheckElevators = true;
											}
										}
									}
								}
								if(currentPermanent1.worldPosition.y == 0) {
									var _g110 = 0;
									var _g27 = currentPermanent1.world.permanents;
									while(_g110 < _g27.length) {
										var bottomPermanents1 = _g27[_g110];
										++_g110;
										if(bottomPermanents1.length == 0 || bottomPermanents1[0] == null) {
											continue;
										}
										var permanentTo9 = bottomPermanents1[0];
										var priorityAdd7 = Math.abs(bottomPermanents1[0].position.x - currentPermanent1.position.x);
										if(permanentTo9 != null) {
											if(permanentTo9.pfSeen == _gthis2.pfSeenStart) {
												var relatedPrioritizable17 = permanentTo9.pfRelatedPrioritizable;
												var newPriority34 = currentQueueItem1.priority + priorityAdd7;
												if(newPriority34 < relatedPrioritizable17.priority) {
													_gthis2.pathQueue.reprioritize(relatedPrioritizable17,newPriority34);
												}
											} else if(permanentTo9.pfSeen != _gthis2.pfSeenStart + 1) {
												var newPriority35 = currentQueueItem1.priority + priorityAdd7;
												permanentTo9.pfSeen = _gthis2.pfSeenStart;
												permanentTo9.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority35,permanentTo9);
												_gthis2.pathQueue.enqueue(permanentTo9.pfRelatedPrioritizable);
											}
										}
									}
								}
								currentQueueItem1.destroy();
							}
							this.nearestResourceGatherPlace = bestPermanent1;
						}
						if(this.nearestResourceGatherPlace == null) {
							var this2 = this.world.knownResourceInavailability;
							var k = Type.getClassName(resourceOptions[0]);
							var _this3 = this2;
							if(__map_reserved[k] != null) {
								_this3.setReserved(k,true);
							} else {
								_this3.h[k] = true;
							}
						}
						this.hasNotSearchedForResourceGatherPlaceThisStep = false;
					}
				}
				if(performCitizenAction) {
					if(this.nearestResourceGatherPlace != null) {
						citizen.simulation.pathfinder.findPath(citizen,this.nearestResourceGatherPlace);
						citizen.pathOnFail = null;
					} else {
						citizen.wander(timeMod);
					}
				}
			}
		} else if(citizen.inPermanent == this) {
			citizen.moveAndWait(4,20,function() {
				citizen.hasWorkTools = true;
			});
		} else {
			citizen.simulation.pathfinder.findPath(citizen,this);
			citizen.pathOnFail = null;
		}
	}
	,update: function(timeMod) {
		buildings_Work.prototype.update.call(this,timeMod);
		this.hasNotSearchedForResourceGatherPlaceThisStep = true;
	}
	,invalidatePathfindingRelatedInfo: function() {
		buildings_Work.prototype.invalidatePathfindingRelatedInfo.call(this);
		this.nearestResourceGatherPlace = null;
	}
	,__class__: buildings_BlueCollarWork
});
var buildings_BoardGameStore = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 11;
	this.endTime = 23.5;
	this.workTimePreferenceMod = 0.1;
	this.isEntertainment = true;
};
$hxClasses["buildings.BoardGameStore"] = buildings_BoardGameStore;
buildings_BoardGameStore.__name__ = ["buildings","BoardGameStore"];
buildings_BoardGameStore.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_BoardGameStore.__super__ = buildings_Work;
buildings_BoardGameStore.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 90;
	}
	,get_isOpen: function() {
		if(this.workers.length == 1 && this.workers[0].currentAction == LifeAction.Work) {
			return this.city.simulation.time.timeSinceStart / 60 % 24 < 23;
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 4;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 3;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 3.5;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 4;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 8;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,beEntertained: function(citizen,timeMod) {
		var moveFunction = function() {
			var xx = citizen.relativeY < 5 ? random_Random.getInt(8,16) : random_Random.getInt(2) == 0 ? random_Random.fromArray(buildings_BoardGameStore.firstFloorChairs) : random_Random.getInt(3,14);
			var moveFunction1 = random_Random.getInt(xx,xx + 1);
			var moveFunction2 = random_Random.getInt(100,120);
			citizen.moveAndWait(moveFunction1,moveFunction2,null,false,true);
		};
		if(random_Random.getInt(3 - citizen.relativeY < 10 ? 1 : 0) == 0) {
			citizen.changeFloor(moveFunction);
		} else {
			moveFunction();
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(4 - citizen.relativeX) < spd) {
				citizen.relativeX = 4;
			} else {
				var num = 4 - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
			}
			citizen.setRelativeY(1);
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_BoardGameStore.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_BoardGameStore
});
var buildings_IBuildingWithFestivalSpecials = function() {
};
$hxClasses["buildings.IBuildingWithFestivalSpecials"] = buildings_IBuildingWithFestivalSpecials;
buildings_IBuildingWithFestivalSpecials.__name__ = ["buildings","IBuildingWithFestivalSpecials"];
buildings_IBuildingWithFestivalSpecials.prototype = {
	__class__: buildings_IBuildingWithFestivalSpecials
};
var buildings_BotanicalGardens = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.justBuilt = false;
	this.festivalJobs = 2;
	this.currentTexture = 0;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.isEntertainment = true;
	this.currentTexture = 0;
	this.adjecentBuildingEffects.push({ name : "modernRusticHomeCommunityFeeling", intensity : 1});
};
$hxClasses["buildings.BotanicalGardens"] = buildings_BotanicalGardens;
buildings_BotanicalGardens.__name__ = ["buildings","BotanicalGardens"];
buildings_BotanicalGardens.__interfaces__ = [buildings_IBuildingWithFestivalSpecials,buildings_IEntertainmentBuilding];
buildings_BotanicalGardens.__super__ = Building;
buildings_BotanicalGardens.prototype = $extend(Building.prototype,{
	get_baseEntertainmentCapacity: function() {
		return 40;
	}
	,get_isOpen: function() {
		if(this.bottomBuilding == null || !this.bottomBuilding["is"](buildings_BotanicalGardens)) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			if(this1 >= 6.0) {
				return this1 < 22;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 3;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 2.5;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 4;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 1.5;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_AllDirMergingBuildingDrawer;
	}
	,get_mergingDrawer: function() {
		return this.drawer;
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		if(this.bottomBuilding != null) {
			return !this.bottomBuilding["is"](buildings_BotanicalGardens);
		} else {
			return true;
		}
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,postCreate: function() {
		Building.prototype.postCreate.call(this);
		this.updateGardenTexture();
		if(this.justBuilt) {
			var buildingToTakeTextureFrom = null;
			if(this.bottomBuilding != null && this.bottomBuilding["is"](buildings_BotanicalGardens)) {
				buildingToTakeTextureFrom = this.bottomBuilding;
			}
			if(this.topBuilding != null && this.topBuilding["is"](buildings_BotanicalGardens)) {
				buildingToTakeTextureFrom = this.topBuilding;
			}
			if(buildingToTakeTextureFrom != null) {
				this.get_mergingDrawer().setGroupOfSecondaryTextureForThisBuilding(this.get_mergingDrawer().getSecondaryTextureGroup(buildingToTakeTextureFrom.currentTexture));
			} else {
				this.currentTexture = random_Random.getInt(common_ArrayExtensions.isum(buildings_BotanicalGardens.gardenTextureSets));
			}
			this.justBuilt = false;
			this.updateGardenTexture();
		}
		this.positionSprites();
	}
	,postLoad: function() {
		this.updateGardenTexture();
	}
	,onBuild: function() {
		Building.prototype.onBuild.call(this);
		this.justBuilt = true;
	}
	,updateGardenTexture: function() {
		var _gthis = this;
		this.get_mergingDrawer().setSecondaryBackgroundImages("spr_botanicalgardens_plants",buildings_BotanicalGardens.gardenTextureSets,this.currentTexture,function(n) {
			_gthis.currentTexture = n;
		});
	}
	,beEntertained: function(citizen,timeMod) {
		buildings_buildingBehaviours_ParkWalk.beEntertainedPark(this.leftBuilding,this.rightBuilding,citizen);
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		gui_windowParts_CycleValueButton.create(this.city.gui,function() {
			return _gthis.get_mergingDrawer().getCurrentSecondaryTextureGroup();
		},($_=this.get_mergingDrawer(),$bind($_,$_.setGroupOfSecondaryTexture)),function() {
			return buildings_BotanicalGardens.gardenTextureSets.length;
		},"Change Plants");
		gui_windowParts_CycleValueButton.create(this.city.gui,function() {
			return _gthis.currentTexture - _gthis.get_mergingDrawer().getFirstSecondaryTextureOfGroup(_gthis.get_mergingDrawer().getCurrentSecondaryTextureGroup());
		},($_=this.get_mergingDrawer(),$bind($_,$_.setSecondaryTextureWithinGroup)),function() {
			return buildings_BotanicalGardens.gardenTextureSets[_gthis.get_mergingDrawer().getCurrentSecondaryTextureGroup()];
		},"Change Plants Variant");
		Building.prototype.createWindowAddBottomButtons.call(this);
	}
	,destroy: function() {
		Building.prototype.destroy.call(this);
		if(this.festivalEntertainment != null) {
			this.festivalEntertainment.destroy();
		}
	}
	,initFestival: function() {
		if(this.festivalEntertainment == null) {
			this.festivalEntertainment = new buildings_buildingBehaviours_ParkFestivalEntertainment(this,this.bgStage);
		}
	}
	,stopFestival: function() {
		if(this.festivalEntertainment != null) {
			this.festivalEntertainment.stop();
			this.festivalEntertainment.destroy();
			this.festivalEntertainment = null;
		}
	}
	,doFestivalWork: function(festival,citizen,timeMod,citizenID) {
		this.festivalEntertainment.doFestivalWork(festival,citizen,timeMod,0,citizenID);
	}
	,beEntertainedFestival: function(festival,citizen,timeMod) {
		this.festivalEntertainment.beEntertainedFestival(festival,citizen,timeMod);
	}
	,endFestivalWork: function(festival,citizen) {
		citizen.setRelativeY(0);
	}
	,isTree: function() {
		if(this.currentTexture >= 7) {
			return this.currentTexture <= 10;
		} else {
			return false;
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_BotanicalGardens.saveDefinition);
		}
		var value = this.currentTexture;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["currentTexture"] != null ? loadMap.existsReserved("currentTexture") : loadMap.h.hasOwnProperty("currentTexture")) {
			this.currentTexture = __map_reserved["currentTexture"] != null ? loadMap.getReserved("currentTexture") : loadMap.h["currentTexture"];
		}
		this.postLoad();
	}
	,__class__: buildings_BotanicalGardens
});
var buildings_CacaoFarmStage = $hxClasses["buildings.CacaoFarmStage"] = { __ename__ : ["buildings","CacaoFarmStage"], __constructs__ : ["Growing","Harvesting"] };
buildings_CacaoFarmStage.Growing = ["Growing",0];
buildings_CacaoFarmStage.Growing.toString = $estr;
buildings_CacaoFarmStage.Growing.__enum__ = buildings_CacaoFarmStage;
buildings_CacaoFarmStage.Harvesting = ["Harvesting",1];
buildings_CacaoFarmStage.Harvesting.toString = $estr;
buildings_CacaoFarmStage.Harvesting.__enum__ = buildings_CacaoFarmStage;
var buildings_CacaoFarm = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.percentCleaned = 0;
	this.foodLeft = 0;
	this.percentGrown = 0;
	this.farmStage = buildings_CacaoFarmStage.Growing;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.textures = Resources.getTexturesByWidth("spr_cacaofarm_trees",20);
	this.growthSprite = new PIXI.Sprite();
	bgStage.addChild(this.growthSprite);
	this.updateTexture();
	this.positionSprites();
	this.doorX = 12;
	this.adjecentBuildingEffects.push({ name : "farm", intensity : 1});
};
$hxClasses["buildings.CacaoFarm"] = buildings_CacaoFarm;
buildings_CacaoFarm.__name__ = ["buildings","CacaoFarm"];
buildings_CacaoFarm.__super__ = buildings_Work;
buildings_CacaoFarm.prototype = $extend(buildings_Work.prototype,{
	postLoad: function() {
		this.updateTexture();
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		var _gthis = this;
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else if(this.farmStage == buildings_CacaoFarmStage.Growing) {
			citizen.setRelativeY(0);
			var modifyWithHappiness = this.city.materials.food > 1 || this.city.simulation.happiness.actionSpeedModifier > 1;
			citizen.moveAndWait(random_Random.getInt(5,13),random_Random.getInt(50,100),function() {
				_gthis.percentGrown += 0.75;
				if(_gthis.percentGrown >= 100) {
					_gthis.farmStage = buildings_CacaoFarmStage.Harvesting;
					var tmp = 35 + _gthis.city.simulation.bonuses.extraFoodFromFarms;
					var tmp1 = _gthis.getEffectsOfAdjecentBuildings("increaseCropNumber");
					_gthis.foodLeft = tmp + tmp1;
				}
				_gthis.updateTexture();
			},modifyWithHappiness,false);
		} else {
			var firstTreeX = 6;
			var secondTreeX = 12;
			var firstTreeY = 7;
			var secondTreeY = 5;
			if(citizen.relativeY <= 1) {
				if(this.workers.indexOf(citizen) == 0) {
					citizen.setPath(new Int32Array([4,firstTreeX,9,firstTreeY]),0,4,true);
				} else {
					citizen.setPath(new Int32Array([4,secondTreeX,9,secondTreeY]),0,4,true);
				}
			} else {
				var thisHarvestAmount = this.city.simulation.boostManager.currentGlobalBoostAmount * 0.025 / this.city.simulation.happiness.actionSpeedModifier;
				this.foodLeft -= thisHarvestAmount;
				var _g = this.city.materials;
				_g.set_food(_g.food + thisHarvestAmount);
				this.city.simulation.stats.materialProduction[0][0] += thisHarvestAmount;
				this.city.materials.cacao += thisHarvestAmount;
				this.city.simulation.stats.materialProduction[6][0] += thisHarvestAmount;
				if(this.foodLeft <= 0) {
					this.farmStage = buildings_CacaoFarmStage.Growing;
					this.percentGrown = 0;
				}
				this.updateTexture();
			}
		}
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		this.bgStage.removeChild(this.growthSprite);
	}
	,update: function(timeMod) {
		if(this.farmStage == buildings_CacaoFarmStage.Growing) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = 7;
			var end = 20;
			if(start < end ? this1 >= start && this1 < end : this1 >= start || this1 < end) {
				this.percentGrown += timeMod * 0.012;
				if(this.percentGrown >= 100) {
					this.farmStage = buildings_CacaoFarmStage.Harvesting;
					this.foodLeft = 35 + this.city.simulation.bonuses.extraFoodFromFarms + this.getEffectsOfAdjecentBuildings("increaseCropNumber");
				}
				this.updateTexture();
			} else {
				var this2 = this.city.simulation.time.timeSinceStart / 60 % 24;
				var start1 = 7 - 1;
				var end1 = 20 + 1;
				if(start1 < end1 ? this2 >= start1 && this2 < end1 : this2 >= start1 || this2 < end1) {
					this.percentGrown += timeMod * 0.006;
					if(this.percentGrown >= 100) {
						this.farmStage = buildings_CacaoFarmStage.Harvesting;
						this.foodLeft = 35 + this.city.simulation.bonuses.extraFoodFromFarms + this.getEffectsOfAdjecentBuildings("increaseCropNumber");
					}
					this.updateTexture();
				}
			}
		}
	}
	,grow: function(percent) {
		this.percentGrown += percent;
		if(this.percentGrown >= 100) {
			this.farmStage = buildings_CacaoFarmStage.Harvesting;
			this.foodLeft = 35 + this.city.simulation.bonuses.extraFoodFromFarms + this.getEffectsOfAdjecentBuildings("increaseCropNumber");
		}
		this.updateTexture();
	}
	,updateTexture: function() {
		var _g = this.farmStage;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = this.textures[Math.floor(this.percentGrown / 100 * (this.textures.length - 1))];
			break;
		case 1:
			tmp = this.textures[this.textures.length - 1];
			break;
		}
		this.growthSprite.texture = tmp;
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		if(this.growthSprite != null) {
			this.growthSprite.position.set(this.position.x,this.position.y);
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			var _g = _gthis.farmStage;
			switch(_g[1]) {
			case 0:
				return "Beans " + Math.floor(_gthis.percentGrown) + "% grown.";
			case 1:
				return "" + Math.floor(_gthis.foodLeft) + " cacao left to harvest.";
			}
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_CacaoFarm.saveDefinition);
		}
		queue.addString(this.farmStage[0]);
		var value = this.percentGrown;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.foodLeft;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.percentCleaned;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["farmStage"] != null ? loadMap.existsReserved("farmStage") : loadMap.h.hasOwnProperty("farmStage")) {
			this.farmStage = __map_reserved["farmStage"] != null ? loadMap.getReserved("farmStage") : loadMap.h["farmStage"];
		}
		if(__map_reserved["percentGrown"] != null ? loadMap.existsReserved("percentGrown") : loadMap.h.hasOwnProperty("percentGrown")) {
			this.percentGrown = __map_reserved["percentGrown"] != null ? loadMap.getReserved("percentGrown") : loadMap.h["percentGrown"];
		}
		if(__map_reserved["foodLeft"] != null ? loadMap.existsReserved("foodLeft") : loadMap.h.hasOwnProperty("foodLeft")) {
			this.foodLeft = __map_reserved["foodLeft"] != null ? loadMap.getReserved("foodLeft") : loadMap.h["foodLeft"];
		}
		if(__map_reserved["percentCleaned"] != null ? loadMap.existsReserved("percentCleaned") : loadMap.h.hasOwnProperty("percentCleaned")) {
			this.percentCleaned = __map_reserved["percentCleaned"] != null ? loadMap.getReserved("percentCleaned") : loadMap.h["percentCleaned"];
		}
		this.postLoad();
	}
	,__class__: buildings_CacaoFarm
});
var buildings_Factory = function(game,stage,bgStage,city,world,position,worldPosition,id,animation,idleAnimation) {
	this.activeWorkersTotalEducation = 0;
	this.activeWorkers = 0;
	this.buildingEnabled = true;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.activeBgTextures = Resources.getTexturesByWidth(animation,20);
	this.idleBgTextures = Resources.getTexturesByWidth(idleAnimation,20);
	this.bgTexture = 0;
	this.backSprite = new PIXI.Sprite(this.idleBgTextures[0]);
	this.backSprite.position.set(position.x,position.y);
	bgStage.addChild(this.backSprite);
};
$hxClasses["buildings.Factory"] = buildings_Factory;
buildings_Factory.__name__ = ["buildings","Factory"];
buildings_Factory.__super__ = buildings_Work;
buildings_Factory.prototype = $extend(buildings_Work.prototype,{
	work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			this.workAnimation(citizen,timeMod);
			this.activeWorkers += 1;
			this.activeWorkersTotalEducation += citizen.get_educationSpeedModifier();
		}
	}
	,workAnimation: function(citizen,timeMod) {
	}
	,update: function(timeMod) {
		var active = false;
		if(this.activeWorkers > 0 && this.buildingEnabled) {
			active = this.possiblyBeActive(timeMod);
		}
		var bgTextures = active && this.canShowActiveTextures() ? this.activeBgTextures : this.idleBgTextures;
		this.bgTexture += timeMod / 4;
		if(this.bgTexture >= bgTextures.length) {
			this.bgTexture = 0;
		}
		this.backSprite.texture = bgTextures[this.bgTexture | 0];
		this.activeWorkers = 0;
		this.activeWorkersTotalEducation = 0;
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		if(this.backSprite != null) {
			this.backSprite.position.set(this.position.x,this.position.y);
		}
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		if(this.backSprite != null) {
			this.bgStage.removeChild(this.backSprite);
		}
	}
	,possiblyBeActive: function(timeMod) {
		return false;
	}
	,canShowActiveTextures: function() {
		return false;
	}
	,__class__: buildings_Factory
});
var buildings_MaterialConvertingFactory = function(game,stage,bgStage,city,world,position,worldPosition,id,animation,idleAnimation) {
	this.materialMade = 0;
	this.totalMaterialUsed = 0;
	this.efficiency = this.get_normalEfficiency();
	buildings_Factory.call(this,game,stage,bgStage,city,world,position,worldPosition,id,animation,idleAnimation);
};
$hxClasses["buildings.MaterialConvertingFactory"] = buildings_MaterialConvertingFactory;
buildings_MaterialConvertingFactory.__name__ = ["buildings","MaterialConvertingFactory"];
buildings_MaterialConvertingFactory.__super__ = buildings_Factory;
buildings_MaterialConvertingFactory.prototype = $extend(buildings_Factory.prototype,{
	get_normalEfficiency: function() {
		return 3;
	}
	,get_materialFrom: function() {
		return 0.0;
	}
	,set_materialFrom: function(value) {
		return value;
	}
	,get_materialTo: function() {
		return 0.0;
	}
	,set_materialTo: function(value) {
		return value;
	}
	,get_bonusSpeed: function() {
		return 1.0;
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		return false;
	}
	,possiblyBeActive: function(timeMod) {
		if(this.get_materialFrom() >= 1) {
			var convertedInto = timeMod * this.materialsMadePerStepPerWorker * this.activeWorkers * this.city.simulation.happiness.actionSpeedModifier * this.get_bonusSpeed() * this.city.simulation.boostManager.currentGlobalBoostAmount;
			var _g = this;
			_g.set_materialTo(_g.get_materialTo() + convertedInto);
			this.materialMade += convertedInto;
			var materialsUsed = convertedInto * this.efficiency;
			var _g1 = this;
			_g1.set_materialFrom(_g1.get_materialFrom() - materialsUsed);
			this.totalMaterialUsed += materialsUsed;
			return true;
		}
		return false;
	}
	,canShowActiveTextures: function() {
		return this.get_materialFrom() >= 3;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Factory.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_MaterialConvertingFactory.saveDefinition);
		}
		var value = this.totalMaterialUsed;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.materialMade;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Factory.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["totalMaterialUsed"] != null ? loadMap.existsReserved("totalMaterialUsed") : loadMap.h.hasOwnProperty("totalMaterialUsed")) {
			this.totalMaterialUsed = __map_reserved["totalMaterialUsed"] != null ? loadMap.getReserved("totalMaterialUsed") : loadMap.h["totalMaterialUsed"];
		}
		if(__map_reserved["materialMade"] != null ? loadMap.existsReserved("materialMade") : loadMap.h.hasOwnProperty("materialMade")) {
			this.materialMade = __map_reserved["materialMade"] != null ? loadMap.getReserved("materialMade") : loadMap.h["materialMade"];
		}
	}
	,__class__: buildings_MaterialConvertingFactory
});
var buildings_ChocolateFactory = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.materialsMadePerStepPerWorker = 0.0008;
	buildings_MaterialConvertingFactory.call(this,game,stage,bgStage,city,world,position,worldPosition,id,"spr_chocolatefactory_frames","spr_chocolatefactory_idle");
};
$hxClasses["buildings.ChocolateFactory"] = buildings_ChocolateFactory;
buildings_ChocolateFactory.__name__ = ["buildings","ChocolateFactory"];
buildings_ChocolateFactory.__super__ = buildings_MaterialConvertingFactory;
buildings_ChocolateFactory.prototype = $extend(buildings_MaterialConvertingFactory.prototype,{
	get_normalEfficiency: function() {
		return 1;
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		return false;
	}
	,get_possibleUpgrades: function() {
		return [];
	}
	,get_possibleBuildingModes: function() {
		return [buildingUpgrades_FactoryWorking,buildingUpgrades_FactoryDisabled];
	}
	,get_materialFrom: function() {
		return this.city.materials.cacao;
	}
	,set_materialFrom: function(value) {
		return this.city.materials.cacao = value;
	}
	,get_materialTo: function() {
		return this.city.materials.chocolate;
	}
	,set_materialTo: function(value) {
		var productionAmount = value - this.city.materials.chocolate;
		this.city.materials.chocolate += productionAmount;
		this.city.simulation.stats.materialProduction[7][0] += productionAmount;
		return this.city.materials.chocolate;
	}
	,workAnimation: function(citizen,timeMod) {
		if(this.workers.indexOf(citizen) == 1) {
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(3 - citizen.relativeX) < spd) {
				citizen.relativeX = 3;
			} else {
				var num = 3 - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
			}
		} else {
			var spd1 = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(7 - citizen.relativeX) < spd1) {
				citizen.relativeX = 7;
			} else {
				var num1 = 7 - citizen.relativeX;
				citizen.relativeX += (num1 > 0 ? 1 : num1 < 0 ? -1 : 0) * spd1;
			}
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_MaterialConvertingFactory.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalMaterialUsed | 0) + " cacao beans used to make " + (_gthis.materialMade | 0) + " chocolate bars.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_MaterialConvertingFactory.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_ChocolateFactory.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_MaterialConvertingFactory.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_ChocolateFactory
});
var buildings_ComputerChipFactory = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.materialsMadePerStepPerWorker = 0.0001;
	buildings_MaterialConvertingFactory.call(this,game,stage,bgStage,city,world,position,worldPosition,id,"spr_computerchipfactory_frames","spr_computerchipfactory_idle");
};
$hxClasses["buildings.ComputerChipFactory"] = buildings_ComputerChipFactory;
buildings_ComputerChipFactory.__name__ = ["buildings","ComputerChipFactory"];
buildings_ComputerChipFactory.__super__ = buildings_MaterialConvertingFactory;
buildings_ComputerChipFactory.prototype = $extend(buildings_MaterialConvertingFactory.prototype,{
	get_normalEfficiency: function() {
		return 7;
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		return false;
	}
	,get_possibleUpgrades: function() {
		return [buildingUpgrades_DieShrink];
	}
	,get_possibleBuildingModes: function() {
		return [buildingUpgrades_FactoryWorking,buildingUpgrades_RefinedStoneUsingFactoryDisabled];
	}
	,get_materialFrom: function() {
		return this.city.materials.refinedMetal;
	}
	,set_materialFrom: function(value) {
		var productionAmount = this.city.materials.refinedMetal - value;
		this.city.materials.refinedMetal -= productionAmount;
		this.city.simulation.stats.materialUsed[4][0] += productionAmount;
		return this.city.materials.refinedMetal;
	}
	,get_materialTo: function() {
		return this.city.materials.computerChips;
	}
	,set_materialTo: function(value) {
		var productionAmount = value - this.city.materials.computerChips;
		this.city.materials.computerChips += productionAmount;
		this.city.simulation.stats.materialProduction[5][0] += productionAmount;
		return this.city.materials.computerChips;
	}
	,get_bonusSpeed: function() {
		return (this.workers.length == 0 ? 1 : this.activeWorkersTotalEducation / this.activeWorkers) * this.city.upgrades.vars.computerChipFactorySpeed;
	}
	,onBuild: function() {
		this.city.progress.unlocks.unlock(buildingUpgrades_AIMining);
		this.city.progress.unlocks.unlock(buildingUpgrades_HeatedBed);
		this.city.progress.unlocks.unlock(buildings_Supercomputer);
		this.city.progress.unlocks.unlock(buildings_LivingResearchCenter);
		this.city.progress.unlocks.unlock(buildings_Teleporter);
		this.city.progress.unlocks.unlock(buildings_CuttingEdgeHome);
		this.city.progress.unlocks.fullyUnlock(buildings_Arcade);
		this.city.progress.unlocks.unlock(cityUpgrades_ChipBinning);
		this.city.progress.unlocks.unlock(buildingUpgrades_PickaxeTech);
		this.city.progress.unlocks.unlock(buildingUpgrades_FossilScanner);
	}
	,workAnimation: function(citizen,timeMod) {
		if(citizen.relativeY != 10) {
			if(this.workers.indexOf(citizen) == 1) {
				citizen.setRelativePos(3,10);
			} else if(this.workers.indexOf(citizen) == 0) {
				var spd = citizen.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				if(Math.abs(3 - citizen.relativeX) < spd) {
					citizen.relativeX = 3;
				} else {
					var num = 3 - citizen.relativeX;
					citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
				}
				citizen.setRelativeY(0);
			} else {
				var spd1 = citizen.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				if(Math.abs(13 - citizen.relativeX) < spd1) {
					citizen.relativeX = 13;
				} else {
					var num1 = 13 - citizen.relativeX;
					citizen.relativeX += (num1 > 0 ? 1 : num1 < 0 ? -1 : 0) * spd1;
				}
				citizen.setRelativeY(0);
			}
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_MaterialConvertingFactory.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalMaterialUsed | 0) + " units of refined metals used to make " + (_gthis.materialMade | 0) + " computer chips.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_MaterialConvertingFactory.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_ComputerChipFactory.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_MaterialConvertingFactory.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_ComputerChipFactory
});
var buildings_ComputerResearchCenter = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.totalKnowledgeGenerated = 0;
	buildings_Factory.call(this,game,stage,bgStage,city,world,position,worldPosition,id,"spr_computerresearchcenter_frames","spr_computerresearchcenter_idle");
};
$hxClasses["buildings.ComputerResearchCenter"] = buildings_ComputerResearchCenter;
buildings_ComputerResearchCenter.__name__ = ["buildings","ComputerResearchCenter"];
buildings_ComputerResearchCenter.__super__ = buildings_Factory;
buildings_ComputerResearchCenter.prototype = $extend(buildings_Factory.prototype,{
	get_possibleCityUpgrades: function() {
		return [cityUpgrades_ChipBinning];
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		return false;
	}
	,workAnimation: function(citizen,timeMod) {
		var _g = this.workers.indexOf(citizen);
		switch(_g) {
		case 0:
			citizen.setRelativePos(13,10);
			break;
		case 1:
			citizen.setRelativePos(6,0);
			break;
		case 2:
			citizen.setRelativePos(6,10);
			break;
		case 3:
			citizen.setRelativePos(15,0);
			break;
		case 4:
			citizen.setRelativePos(8,0);
			break;
		}
	}
	,possiblyBeActive: function(timeMod) {
		var newKnowledge = 0.0014 * timeMod * this.city.simulation.happiness.actionSpeedModifier * this.activeWorkersTotalEducation * this.city.simulation.boostManager.currentGlobalBoostAmount;
		this.city.materials.knowledge += newKnowledge;
		this.city.simulation.stats.materialProduction[8][0] += newKnowledge;
		this.totalKnowledgeGenerated += newKnowledge;
		return true;
	}
	,canShowActiveTextures: function() {
		return true;
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Factory.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalKnowledgeGenerated | 0) + " knowledge gathered.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Factory.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_ComputerResearchCenter.saveDefinition);
		}
		var value = this.totalKnowledgeGenerated;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Factory.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["totalKnowledgeGenerated"] != null ? loadMap.existsReserved("totalKnowledgeGenerated") : loadMap.h.hasOwnProperty("totalKnowledgeGenerated")) {
			this.totalKnowledgeGenerated = __map_reserved["totalKnowledgeGenerated"] != null ? loadMap.getReserved("totalKnowledgeGenerated") : loadMap.h["totalKnowledgeGenerated"];
		}
	}
	,__class__: buildings_ComputerResearchCenter
});
var buildings_CuttingEdgeHome = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.CuttingEdgeHome"] = buildings_CuttingEdgeHome;
buildings_CuttingEdgeHome.__name__ = ["buildings","CuttingEdgeHome"];
buildings_CuttingEdgeHome.__super__ = buildings_House;
buildings_CuttingEdgeHome.prototype = $extend(buildings_House.prototype,{
	get_possibleUpgrades: function() {
		return [buildingUpgrades_BiggerTV,buildingUpgrades_ModernHomePlant,buildingUpgrades_SmartChairs];
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var r = random_Random.getInt(3);
		if(r == 0 && stepsInBuilding > 120) {
			citizen.changeFloorAndWaitRandom(30,60);
		} else if(r == 1) {
			if(citizen.relativeY < 5) {
				citizen.moveAndWait(random_Random.getInt(3,15),random_Random.getInt(30,60),null,false,false);
			} else {
				citizen.moveAndWait(random_Random.getInt(5,15),random_Random.getInt(30,60),null,false,false);
			}
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = random_Random.getInt(90,120);
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,__class__: buildings_CuttingEdgeHome
});
var buildings_EcoFarm = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.crop3Sprite = 0;
	this.crop2Sprite = 0;
	this.openDay = 0;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.crop2Sprite = random_Random.getInt(buildings_EcoFarm.crop2Sprites.length);
	this.crop3Sprite = random_Random.getInt(buildings_EcoFarm.crop3Sprites.length);
	this.growthAreas = [new buildings_FarmGrowArea(bgStage,this,new common_Point(3,3),city,"spr_ecofarm_crop1",6,15,0.7,0,6),new buildings_FarmGrowArea(bgStage,this,new common_Point(9,3),city,buildings_EcoFarm.crop2Sprites[this.crop2Sprite],8,7,1.4,10),new buildings_FarmGrowArea(bgStage,this,new common_Point(9,12),city,buildings_EcoFarm.crop3Sprites[this.crop3Sprite],8,8,0.6,7)];
	this.isEntertainment = true;
	this.openDay = random_Random.getInt(7);
	this.positionSprites();
	this.adjecentBuildingEffects.push({ name : "farm", intensity : 1});
};
$hxClasses["buildings.EcoFarm"] = buildings_EcoFarm;
buildings_EcoFarm.__name__ = ["buildings","EcoFarm"];
buildings_EcoFarm.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_EcoFarm.__super__ = buildings_Work;
buildings_EcoFarm.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 5;
	}
	,get_isOpen: function() {
		if(this.workers.length > 0 && this.workers[0].currentAction == LifeAction.Work && (1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0)) % 7 == this.openDay && this.city.simulation.time.timeSinceStart / 60 % 24 < 20.5) {
			return this.city.simulation.time.timeSinceStart / 60 % 24 > 12.0;
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 3;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 2;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 3;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 1.5;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,beEntertained: function(citizen,timeMod) {
		citizen.moveAndWait(random_Random.getInt(3,16),random_Random.getInt(50,100),null,false,true);
	}
	,postLoad: function() {
		this.growthAreas[1].setTexture(buildings_EcoFarm.crop2Sprites[this.crop2Sprite],8);
		this.growthAreas[2].setTexture(buildings_EcoFarm.crop3Sprites[this.crop3Sprite],8);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.updateTexture();
		}
	}
	,update: function(timeMod) {
		if((1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0)) % 7 == this.openDay) {
			this.endTime = 21.0;
		} else {
			this.endTime = 19.0;
		}
		buildings_Work.prototype.update.call(this,timeMod);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.update(timeMod);
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			var citizenIndex = this.workers.indexOf(citizen);
			if(citizenIndex == 1) {
				if(citizen.relativeY < 5) {
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
					arr[0] = 4;
					arr[1] = 18;
					citizen.setPath(arr,0,2,true);
					citizen.pathEndFunction = function() {
						citizen.changeFloor();
					};
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
				} else {
					this.growthAreas[citizenIndex].doCitizenWork(citizen);
				}
			} else if(citizenIndex == 0 && this.growthAreas[0].farmStage == buildings_FarmStage.Harvesting) {
				if(citizen.relativeY <= 1 || (citizen.relativeX < 4 || citizen.relativeX > 6)) {
					citizen.setPath(new Int32Array([4,5,9,8]),0,4,true);
				} else {
					this.growthAreas[citizenIndex].doCitizenWorkNoMove(citizen);
				}
			} else if(citizen.relativeY > 5) {
				citizen.changeFloor();
			} else {
				this.growthAreas[citizenIndex].doCitizenWork(citizen);
			}
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue,shouldSaveDefinition);
		this.saveBasics(queue);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.save(queue);
		}
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue,definition);
		this.loadBasics(queue,definition);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.load(queue);
		}
		this.postLoad();
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.destroy();
		}
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.positionSprites();
		}
	}
	,addWindowInfoLines: function() {
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.growthAreas[0].showInfoText("Left plot: ");
		this.growthAreas[1].showInfoText("Top right plot: ");
		this.growthAreas[2].showInfoText("Bottom right plot: ");
	}
	,saveBasics: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(buildings_EcoFarm.saveDefinition);
		}
		var value = this.openDay;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.crop2Sprite;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var value2 = this.crop3Sprite;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
	}
	,loadBasics: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["openDay"] != null ? loadMap.existsReserved("openDay") : loadMap.h.hasOwnProperty("openDay")) {
			this.openDay = __map_reserved["openDay"] != null ? loadMap.getReserved("openDay") : loadMap.h["openDay"];
		}
		if(__map_reserved["crop2Sprite"] != null ? loadMap.existsReserved("crop2Sprite") : loadMap.h.hasOwnProperty("crop2Sprite")) {
			this.crop2Sprite = __map_reserved["crop2Sprite"] != null ? loadMap.getReserved("crop2Sprite") : loadMap.h["crop2Sprite"];
		}
		if(__map_reserved["crop3Sprite"] != null ? loadMap.existsReserved("crop3Sprite") : loadMap.h.hasOwnProperty("crop3Sprite")) {
			this.crop3Sprite = __map_reserved["crop3Sprite"] != null ? loadMap.getReserved("crop3Sprite") : loadMap.h["crop3Sprite"];
		}
		this.postLoad();
	}
	,__class__: buildings_EcoFarm
});
var buildings_EscapeRoomPhase = $hxClasses["buildings.EscapeRoomPhase"] = { __ename__ : ["buildings","EscapeRoomPhase"], __constructs__ : ["Start","First","Second","Third","Lasers","Last","Done"] };
buildings_EscapeRoomPhase.Start = ["Start",0];
buildings_EscapeRoomPhase.Start.toString = $estr;
buildings_EscapeRoomPhase.Start.__enum__ = buildings_EscapeRoomPhase;
buildings_EscapeRoomPhase.First = ["First",1];
buildings_EscapeRoomPhase.First.toString = $estr;
buildings_EscapeRoomPhase.First.__enum__ = buildings_EscapeRoomPhase;
buildings_EscapeRoomPhase.Second = ["Second",2];
buildings_EscapeRoomPhase.Second.toString = $estr;
buildings_EscapeRoomPhase.Second.__enum__ = buildings_EscapeRoomPhase;
buildings_EscapeRoomPhase.Third = ["Third",3];
buildings_EscapeRoomPhase.Third.toString = $estr;
buildings_EscapeRoomPhase.Third.__enum__ = buildings_EscapeRoomPhase;
buildings_EscapeRoomPhase.Lasers = ["Lasers",4];
buildings_EscapeRoomPhase.Lasers.toString = $estr;
buildings_EscapeRoomPhase.Lasers.__enum__ = buildings_EscapeRoomPhase;
buildings_EscapeRoomPhase.Last = ["Last",5];
buildings_EscapeRoomPhase.Last.toString = $estr;
buildings_EscapeRoomPhase.Last.__enum__ = buildings_EscapeRoomPhase;
buildings_EscapeRoomPhase.Done = ["Done",6];
buildings_EscapeRoomPhase.Done.toString = $estr;
buildings_EscapeRoomPhase.Done.__enum__ = buildings_EscapeRoomPhase;
var buildings_EscapeRoom = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.graphicsDrawn = false;
	this.escapeRoomPhaseProgress = 0;
	this.escapeRoomPhase = buildings_EscapeRoomPhase.Start;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 13;
	this.endTime = 3;
	this.workTimePreferenceMod = 0.1;
	this.isEntertainment = true;
	this.registeredCitizens = [];
	this.graphics = new PIXI.Graphics();
	bgStage.addChild(this.graphics);
	this.graphics.position.set(position.x,position.y);
};
$hxClasses["buildings.EscapeRoom"] = buildings_EscapeRoom;
buildings_EscapeRoom.__name__ = ["buildings","EscapeRoom"];
buildings_EscapeRoom.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_EscapeRoom.__super__ = buildings_Work;
buildings_EscapeRoom.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 120;
	}
	,get_isOpen: function() {
		if(this.workers.length == 1 && this.workers[0].currentAction == LifeAction.Work && this.city.simulation.time.timeSinceStart / 60 % 24 < 23.99) {
			return this.registeredCitizens.length < 10;
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 4;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 2.5;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 3.5;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 4;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 7;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		if(this.workers.length == 1) {
			return this.workers[0].currentAction == LifeAction.Work;
		} else {
			return false;
		}
	}
	,finishEntertainment: function(citizen,timeMod) {
		if(!(this.registeredCitizens.length < 5 || !common_ArrayExtensions.contains(this.registeredCitizens,citizen) || this.escapeRoomPhase == buildings_EscapeRoomPhase.Done)) {
			return !this.get_isOpenForExistingVisitors();
		} else {
			return true;
		}
	}
	,beEntertained: function(citizen,timeMod) {
		if(!citizen.hasBuildingInited || citizen.dynamicUnsavedVars.buildingInited == null) {
			if(!common_ArrayExtensions.contains(this.registeredCitizens,citizen)) {
				if(this.registeredCitizens.length > 10) {
					citizen.entertainment.stop();
					return;
				}
				this.registeredCitizens.push(citizen);
			}
			citizen.hasBuildingInited = true;
			citizen.dynamicUnsavedVars.buildingInited = true;
		}
		if(this.escapeRoomPhase == buildings_EscapeRoomPhase.Done) {
			citizen.entertainment.stop();
			return;
		}
		if(this.registeredCitizens.length < 5) {
			if(citizen.relativeY > 5) {
				citizen.changeFloor();
			} else {
				citizen.moveAndWait(random_Random.getInt(7,16),random_Random.getInt(50,70),null,false,false);
			}
		} else if(this.escapeRoomPhase == buildings_EscapeRoomPhase.Start) {
			if(citizen.relativeY > 5) {
				citizen.changeFloor();
			} else {
				citizen.moveAndWait(random_Random.getInt(7,16),random_Random.getInt(50,70),null,false,false);
			}
			if(this.registeredCitizens.length < 8 && this.escapeRoomPhaseProgress < 1) {
				this.escapeRoomPhaseProgress += 0.02 * timeMod;
			} else {
				this.escapeRoomPhase = buildings_EscapeRoomPhase.First;
				this.escapeRoomPhaseProgress = 0;
			}
			return;
		} else if(this.escapeRoomPhase == buildings_EscapeRoomPhase.First) {
			if(citizen.relativeY < 5 && citizen.relativeX > 2 && citizen.relativeX < 7) {
				citizen.changeFloor();
			} else {
				citizen.moveAndWait(random_Random.getInt(3,6),random_Random.getInt(30,60),null,false,false);
				if(random_Random.getFloat(1) < 0.2) {
					this.escapeRoomPhaseProgress += 0.2;
					if(this.escapeRoomPhaseProgress > 1) {
						this.escapeRoomPhase = buildings_EscapeRoomPhase.Second;
						this.escapeRoomPhaseProgress = 0;
					}
				}
			}
		} else if(this.escapeRoomPhase == buildings_EscapeRoomPhase.Second) {
			var ind = this.registeredCitizens.indexOf(citizen);
			if(ind % 2 == 0) {
				if(citizen.relativeY > 5) {
					citizen.changeFloor();
				} else {
					citizen.moveAndWait(random_Random.getInt(3,16),random_Random.getInt(50,120),null,false,false);
					if(random_Random.getFloat(1) < 0.3) {
						this.escapeRoomPhaseProgress += 0.34;
						if(this.escapeRoomPhaseProgress > 1) {
							this.escapeRoomPhase = buildings_EscapeRoomPhase.Third;
							this.escapeRoomPhaseProgress = 0;
						}
					}
				}
			} else if(citizen.relativeY < 5 && citizen.relativeX > 2 && citizen.relativeX < 7) {
				citizen.changeFloor();
			} else {
				citizen.moveAndWait(random_Random.getInt(3,6),random_Random.getInt(30,60),null,false,false);
			}
		} else if(this.escapeRoomPhase == buildings_EscapeRoomPhase.Third) {
			if(citizen.relativeY > 5) {
				citizen.changeFloor();
			} else if(citizen.relativeX > 4) {
				var moveToX = random_Random.getInt(3,5);
				var pool = pooling_Int32ArrayPool.pool;
				var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
				arr[0] = 4;
				arr[1] = moveToX;
				citizen.setPath(arr,0,2,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
			}
		} else if(this.escapeRoomPhase == buildings_EscapeRoomPhase.Last) {
			if(citizen.relativeY < 5 && citizen.relativeX > 11 && citizen.relativeX < 16) {
				citizen.changeFloor();
			} else {
				citizen.moveAndWait(random_Random.getInt(11,16),random_Random.getInt(20,60),null,false,false);
			}
		}
	}
	,update: function(timeMod) {
		var i = this.registeredCitizens.length;
		while(--i > 0) {
			var thisCitizen = this.registeredCitizens[i];
			if(thisCitizen.hasDied || (thisCitizen.inPermanent != null && thisCitizen.inPermanent.isBuilding ? thisCitizen.inPermanent : null) != this) {
				this.registeredCitizens.splice(i,1);
			}
		}
		if(this.escapeRoomPhase == buildings_EscapeRoomPhase.Done) {
			this.escapeRoomPhaseProgress += 0.02 * timeMod;
			if(this.escapeRoomPhaseProgress >= 1) {
				this.resetEscapeRoom();
			}
		} else if(this.escapeRoomPhase == buildings_EscapeRoomPhase.Third) {
			if(common_ArrayExtensions.all(this.registeredCitizens,function(c) {
				if(c.relativeY < 5) {
					return c.relativeX < 5;
				} else {
					return false;
				}
			})) {
				this.escapeRoomPhase = buildings_EscapeRoomPhase.Lasers;
				this.escapeRoomPhaseProgress = 0;
			}
		} else if(this.escapeRoomPhase == buildings_EscapeRoomPhase.Last) {
			if(common_ArrayExtensions.all(this.registeredCitizens,function(c1) {
				if(c1.relativeY > 5) {
					return c1.relativeX > 11;
				} else {
					return false;
				}
			})) {
				this.escapeRoomPhase = buildings_EscapeRoomPhase.Done;
				this.escapeRoomPhaseProgress = 0;
			}
		}
		if(this.escapeRoomPhase == buildings_EscapeRoomPhase.Lasers) {
			this.graphics.clear();
			this.graphics.beginFill(16711680,0.7);
			var _g = 7;
			while(_g < 17) {
				var x = _g++;
				var y = 13;
				this.graphics.drawRect(x,y,1,1);
			}
			this.graphics.endFill();
			this.graphicsDrawn = true;
			this.escapeRoomPhaseProgress += 0.01 * timeMod;
			if(this.escapeRoomPhaseProgress >= 1) {
				this.escapeRoomPhaseProgress = 0;
				this.escapeRoomPhase = buildings_EscapeRoomPhase.Last;
			}
		} else if(this.graphicsDrawn) {
			this.graphics.clear();
			this.graphicsDrawn = false;
		}
	}
	,postLoad: function() {
		this.graphics.position.set(this.position.x,this.position.y);
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		this.graphics.position.set(this.position.x,this.position.y);
	}
	,onCitizenLeave: function(citizen,newPermanent) {
		HxOverrides.remove(this.registeredCitizens,citizen);
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			this.resetEscapeRoom();
		} else {
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(3 - citizen.relativeX) < spd) {
				citizen.relativeX = 3;
			} else {
				var num = 3 - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
			}
		}
	}
	,resetEscapeRoom: function() {
		this.escapeRoomPhase = buildings_EscapeRoomPhase.Start;
		this.escapeRoomPhaseProgress = 0;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_EscapeRoom.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		this.postLoad();
	}
	,__class__: buildings_EscapeRoom
});
var buildings_ExperimentalFarm = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.growthAreas = [new buildings_FarmGrowArea(bgStage,this,new common_Point(3,3),city,"spr_experimentalfarm_crop1",5,12,1,5),new buildings_FarmGrowArea(bgStage,this,new common_Point(12,3),city,"spr_experimentalfarm_crop2",5,10,1.2,10),new buildings_FarmGrowArea(bgStage,this,new common_Point(12,12),city,"spr_experimentalfarm_crop3",5,6,1.5,10)];
	this.positionSprites();
	this.adjecentBuildingEffects.push({ name : "farm", intensity : 1});
};
$hxClasses["buildings.ExperimentalFarm"] = buildings_ExperimentalFarm;
buildings_ExperimentalFarm.__name__ = ["buildings","ExperimentalFarm"];
buildings_ExperimentalFarm.__super__ = buildings_Work;
buildings_ExperimentalFarm.prototype = $extend(buildings_Work.prototype,{
	onBuild: function() {
		this.city.simulation.bonuses.indoorFarmSpeed += 0.1;
	}
	,postLoad: function() {
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.updateTexture();
		}
	}
	,update: function(timeMod) {
		buildings_Work.prototype.update.call(this,timeMod);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.update(timeMod);
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			var citizenIndex = this.workers.indexOf(citizen);
			if(citizenIndex == 1) {
				if(citizen.relativeY < 5) {
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
					arr[0] = 4;
					arr[1] = 18;
					citizen.setPath(arr,0,2,true);
					citizen.pathEndFunction = function() {
						citizen.changeFloor();
					};
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
				} else {
					this.growthAreas[citizenIndex].doCitizenWork(citizen);
				}
			} else if(citizen.relativeY > 5) {
				citizen.changeFloor();
			} else {
				this.growthAreas[citizenIndex].doCitizenWork(citizen);
			}
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue,shouldSaveDefinition);
		this.saveBasics(queue);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.save(queue);
		}
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue,definition);
		this.loadBasics(queue,definition);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.load(queue);
		}
		this.postLoad();
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.destroy();
		}
		this.city.simulation.bonuses.indoorFarmSpeed -= 0.1;
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		var _g = 0;
		var _g1 = this.growthAreas;
		while(_g < _g1.length) {
			var growthArea = _g1[_g];
			++_g;
			growthArea.positionSprites();
		}
	}
	,addWindowInfoLines: function() {
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.growthAreas[0].showInfoText("Left plot: ");
		this.growthAreas[1].showInfoText("Top right plot: ");
		this.growthAreas[2].showInfoText("Bottom right plot: ");
	}
	,saveBasics: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(buildings_ExperimentalFarm.saveDefinition);
		}
	}
	,loadBasics: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		this.postLoad();
	}
	,__class__: buildings_ExperimentalFarm
});
var buildings_ExperimentationLab = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.bottomPipeSprite = null;
	this.topPipeSprite = null;
	this.materialsMadePerStepPerWorker = 0.0023;
	buildings_MaterialConvertingFactory.call(this,game,stage,bgStage,city,world,position,worldPosition,id,this.get_idleFrames(),this.get_idleFrames());
};
$hxClasses["buildings.ExperimentationLab"] = buildings_ExperimentationLab;
buildings_ExperimentationLab.__name__ = ["buildings","ExperimentationLab"];
buildings_ExperimentationLab.__super__ = buildings_MaterialConvertingFactory;
buildings_ExperimentationLab.prototype = $extend(buildings_MaterialConvertingFactory.prototype,{
	get_normalEfficiency: function() {
		return 0.2;
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		return false;
	}
	,get_possibleUpgrades: function() {
		return [buildingUpgrades_UltimateScrewdriver];
	}
	,get_possibleBuildingModes: function() {
		return [buildingUpgrades_LabWorking,buildingUpgrades_LabDisabled];
	}
	,get_materialFrom: function() {
		return this.city.materials.machineParts;
	}
	,set_materialFrom: function(value) {
		var productionAmount = this.city.materials.machineParts - value;
		this.city.materials.machineParts -= productionAmount;
		this.city.simulation.stats.materialUsed[3][0] += productionAmount;
		return this.city.materials.machineParts;
	}
	,get_materialTo: function() {
		return this.city.materials.knowledge;
	}
	,set_materialTo: function(value) {
		var productionAmount = value - this.city.materials.knowledge;
		this.city.materials.knowledge += productionAmount;
		this.city.simulation.stats.materialProduction[8][0] += productionAmount;
		return this.city.materials.knowledge;
	}
	,get_idleFrames: function() {
		return "spr_experimentationlab_idle";
	}
	,get_bonusSpeed: function() {
		if(this.workers.length == 0) {
			return 1;
		} else {
			return this.activeWorkersTotalEducation / this.activeWorkers;
		}
	}
	,destroy: function() {
		buildings_MaterialConvertingFactory.prototype.destroy.call(this);
		if(this.topPipeSprite != null) {
			this.topPipeSprite.destroy();
		}
		if(this.bottomPipeSprite != null) {
			this.bottomPipeSprite.destroy();
		}
	}
	,workAnimation: function(citizen,timeMod) {
		if(citizen.relativeY != 10) {
			if(this.workers.indexOf(citizen) == 0) {
				citizen.setRelativePos(4,10);
			} else {
				citizen.setRelativePos(3,0);
			}
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_MaterialConvertingFactory.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalMaterialUsed | 0) + " machine parts used to gain " + (_gthis.materialMade | 0) + " knowledge.";
		});
	}
	,canShowActiveTextures: function() {
		return false;
	}
	,onCityChange: function() {
		if(this.bottomBuilding != null && this.bottomBuilding["is"](buildings_RefinedMetalFactory) && !this.bottomBuilding["is"](buildings_FactoryPub)) {
			if(this.bottomPipeSprite == null) {
				this.bottomPipeSprite = new PIXI.Sprite(Resources.getTexture("spr_experimentationlab_pipe_bottom"));
				this.city.justAboveCityStage.addChild(this.bottomPipeSprite);
			}
			this.bottomPipeSprite.position.set(this.position.x + 7,this.position.y + 17);
		} else if(this.bottomPipeSprite != null) {
			this.bottomPipeSprite.destroy();
			this.bottomPipeSprite = null;
		}
		if(this.topBuilding != null && this.topBuilding["is"](buildings_RefinedMetalFactory) && !this.topBuilding["is"](buildings_FactoryPub)) {
			if(this.topPipeSprite == null) {
				this.topPipeSprite = new PIXI.Sprite(Resources.getTexture("spr_experimentationlab_pipe_top"));
				this.city.justAboveCityStage.addChild(this.topPipeSprite);
			}
			this.topPipeSprite.position.set(this.position.x + 10,this.position.y - 11);
		} else if(this.topPipeSprite != null) {
			this.topPipeSprite.destroy();
			this.topPipeSprite = null;
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_MaterialConvertingFactory.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_ExperimentationLab.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_MaterialConvertingFactory.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_ExperimentationLab
});
var buildings_CurrentExplorationCentreAction = $hxClasses["buildings.CurrentExplorationCentreAction"] = { __ename__ : ["buildings","CurrentExplorationCentreAction"], __constructs__ : ["Unknown","Exploring","Investigating"] };
buildings_CurrentExplorationCentreAction.Unknown = ["Unknown",0];
buildings_CurrentExplorationCentreAction.Unknown.toString = $estr;
buildings_CurrentExplorationCentreAction.Unknown.__enum__ = buildings_CurrentExplorationCentreAction;
buildings_CurrentExplorationCentreAction.Exploring = ["Exploring",1];
buildings_CurrentExplorationCentreAction.Exploring.toString = $estr;
buildings_CurrentExplorationCentreAction.Exploring.__enum__ = buildings_CurrentExplorationCentreAction;
buildings_CurrentExplorationCentreAction.Investigating = ["Investigating",2];
buildings_CurrentExplorationCentreAction.Investigating.toString = $estr;
buildings_CurrentExplorationCentreAction.Investigating.__enum__ = buildings_CurrentExplorationCentreAction;
var buildings_ExplorationCentre = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.hasSearchedForRuinsThisStep = false;
	this.currentAction = buildings_CurrentExplorationCentreAction.Unknown;
	this.nearestRuins = null;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.ExplorationCentre"] = buildings_ExplorationCentre;
buildings_ExplorationCentre.__name__ = ["buildings","ExplorationCentre"];
buildings_ExplorationCentre.__super__ = buildings_Work;
buildings_ExplorationCentre.prototype = $extend(buildings_Work.prototype,{
	addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			var _g = _gthis.currentAction;
			switch(_g[1]) {
			case 0:
				return "Current task: looking for ruins.";
			case 1:
				return "Current task: exploring ruins.";
			case 2:
				return "Current task: investigating findings.";
			}
		});
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			citizen.hasWorkTools = false;
		} else if(citizen.hasWorkTools) {
			if(js_Boot.__instanceof(citizen.inPermanent,worldResources_AlienRuins)) {
				var citizen1 = citizen;
				var _gthis = this;
				var theseRuins = citizen1.inPermanent;
				var moveX = theseRuins.standingPlaces.length == 0 ? random_Random.getInt(1,17) : random_Random.fromArray(theseRuins.standingPlaces);
				var tmp = random_Random.getInt(90,180);
				citizen1.moveAndWait(moveX,tmp,function() {
					if(theseRuins.explored < 100) {
						theseRuins.explored += 0.25;
						var _this = _gthis.city.simulation;
						var productionAmount = 0.25 * (Config.earlyGameFix1 && _this.citizens.length < 30 ? 1.3 - 0.3 * (_this.citizens.length / 60) : 1) * _gthis.city.simulation.boostManager.currentGlobalBoostAmount;
						_gthis.city.materials.knowledge += productionAmount;
						_gthis.city.simulation.stats.materialProduction[8][0] += productionAmount;
						theseRuins.awardAnyBonuses();
						if(theseRuins.explored >= 100) {
							theseRuins.explored = 100;
							if(citizen1.inPermanent != null && citizen1.inPermanent.isBuilding) {
								var building = citizen1.inPermanent != null && citizen1.inPermanent.isBuilding ? citizen1.inPermanent : null;
								citizen1.relativeX = building.worldPosition.x * 20 + building.doorX;
							} else {
								citizen1.relativeX += citizen1.inPermanent.worldPosition.x * 20;
							}
							if(citizen1.inPermanent != null) {
								citizen1.inPermanent.onCitizenLeave(citizen1,null);
							}
							citizen1.inBuildingSince = citizen1.city.simulation.time.timeSinceStart;
							citizen1.set_drawOnStage(citizen1.foregroundStage);
							citizen1.inPermanent = null;
							citizen1.relativeY = 0;
							Citizen.shouldUpdateDraw = true;
							_gthis.nearestRuins = null;
						}
					} else {
						if(citizen1.inPermanent != null && citizen1.inPermanent.isBuilding) {
							var building1 = citizen1.inPermanent != null && citizen1.inPermanent.isBuilding ? citizen1.inPermanent : null;
							citizen1.relativeX = building1.worldPosition.x * 20 + building1.doorX;
						} else {
							citizen1.relativeX += citizen1.inPermanent.worldPosition.x * 20;
						}
						if(citizen1.inPermanent != null) {
							citizen1.inPermanent.onCitizenLeave(citizen1,null);
						}
						citizen1.inBuildingSince = citizen1.city.simulation.time.timeSinceStart;
						citizen1.set_drawOnStage(citizen1.foregroundStage);
						citizen1.inPermanent = null;
						citizen1.relativeY = 0;
						Citizen.shouldUpdateDraw = true;
						_gthis.nearestRuins = null;
					}
				},true);
			} else {
				var tmp1;
				if(this.nearestRuins == null && !this.hasSearchedForRuinsThisStep) {
					var _this1 = this.world.knownResourceInavailability;
					tmp1 = !(__map_reserved["AlienRuins"] != null ? _this1.existsReserved("AlienRuins") : _this1.h.hasOwnProperty("AlienRuins"));
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					if(!this.city.simulation.permanentFinder.canPerformQuery()) {
						return;
					}
					var _this2 = this.city.simulation.permanentFinder;
					var _gthis1 = _this2;
					_this2.updateQueries += 1;
					_this2.pfSeenStart += 3;
					if(_this2.pfSeenStart > 100000) {
						_this2.pfSeenStart = 1;
					}
					var newPrioritizable = pathfinder_PermanentPrioritizable.create(0,this);
					this.pfRelatedPrioritizable = newPrioritizable;
					_this2.pathQueue.enqueue(newPrioritizable);
					var maxNiceNess = -10000.0;
					var bestPermanent = null;
					var landingSiteGroups = _this2.city.connections.landingSiteGroups;
					var teleportersDone = false;
					var _g = [];
					var _g1 = 0;
					while(_g1 < landingSiteGroups.length) {
						var i = landingSiteGroups[_g1];
						++_g1;
						_g.push(false);
					}
					var landingSitesDone = _g;
					var privateTeleporter = null;
					while(_this2.pathQueue.mSize != 0) {
						var currentQueueItem = _this2.pathQueue.dequeue();
						var currentPermanent = currentQueueItem.permanent;
						currentPermanent.pfSeen = _this2.pfSeenStart + 1;
						if(currentPermanent["is"](worldResources_AlienRuins) && currentPermanent.explored < 100) {
							while(_this2.pathQueue.mSize != 0) _this2.pathQueue.dequeue().destroy();
							bestPermanent = currentPermanent;
							break;
						}
						if(currentPermanent.isBuilding) {
							var currentBuilding = currentPermanent;
							var permanentTo = currentBuilding.leftBuilding;
							if(permanentTo != null) {
								if(permanentTo.pfSeen == _gthis1.pfSeenStart) {
									var relatedPrioritizable = permanentTo.pfRelatedPrioritizable;
									var newPriority = currentQueueItem.priority + 20;
									if(newPriority < relatedPrioritizable.priority) {
										_gthis1.pathQueue.reprioritize(relatedPrioritizable,newPriority);
									}
								} else if(permanentTo.pfSeen != _gthis1.pfSeenStart + 1) {
									var newPriority1 = currentQueueItem.priority + 20;
									permanentTo.pfSeen = _gthis1.pfSeenStart;
									permanentTo.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority1,permanentTo);
									_gthis1.pathQueue.enqueue(permanentTo.pfRelatedPrioritizable);
								}
							}
							var permanentTo1 = currentBuilding.rightBuilding;
							if(permanentTo1 != null) {
								if(permanentTo1.pfSeen == _gthis1.pfSeenStart) {
									var relatedPrioritizable1 = permanentTo1.pfRelatedPrioritizable;
									var newPriority2 = currentQueueItem.priority + 20;
									if(newPriority2 < relatedPrioritizable1.priority) {
										_gthis1.pathQueue.reprioritize(relatedPrioritizable1,newPriority2);
									}
								} else if(permanentTo1.pfSeen != _gthis1.pfSeenStart + 1) {
									var newPriority3 = currentQueueItem.priority + 20;
									permanentTo1.pfSeen = _gthis1.pfSeenStart;
									permanentTo1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority3,permanentTo1);
									_gthis1.pathQueue.enqueue(permanentTo1.pfRelatedPrioritizable);
								}
							}
							var permanentTo2 = currentBuilding.topBuilding;
							if(permanentTo2 != null) {
								if(permanentTo2.pfSeen == _gthis1.pfSeenStart) {
									var relatedPrioritizable2 = permanentTo2.pfRelatedPrioritizable;
									var newPriority4 = currentQueueItem.priority + 20;
									if(newPriority4 < relatedPrioritizable2.priority) {
										_gthis1.pathQueue.reprioritize(relatedPrioritizable2,newPriority4);
									}
								} else if(permanentTo2.pfSeen != _gthis1.pfSeenStart + 1) {
									var newPriority5 = currentQueueItem.priority + 20;
									permanentTo2.pfSeen = _gthis1.pfSeenStart;
									permanentTo2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority5,permanentTo2);
									_gthis1.pathQueue.enqueue(permanentTo2.pfRelatedPrioritizable);
								}
							}
							var permanentTo3 = currentBuilding.bottomBuilding;
							if(permanentTo3 != null) {
								if(permanentTo3.pfSeen == _gthis1.pfSeenStart) {
									var relatedPrioritizable3 = permanentTo3.pfRelatedPrioritizable;
									var newPriority6 = currentQueueItem.priority + 20;
									if(newPriority6 < relatedPrioritizable3.priority) {
										_gthis1.pathQueue.reprioritize(relatedPrioritizable3,newPriority6);
									}
								} else if(permanentTo3.pfSeen != _gthis1.pfSeenStart + 1) {
									var newPriority7 = currentQueueItem.priority + 20;
									permanentTo3.pfSeen = _gthis1.pfSeenStart;
									permanentTo3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority7,permanentTo3);
									_gthis1.pathQueue.enqueue(permanentTo3.pfRelatedPrioritizable);
								}
							}
							var isPrivateTeleporter = privateTeleporter == currentPermanent;
							var canTeleportFromHere = currentPermanent["is"](buildings_Teleporter) || isPrivateTeleporter;
							if(!teleportersDone && canTeleportFromHere) {
								var rnd = random_Random.getFloat(2);
								var tp = 0;
								var len = _this2.city.teleporters.length;
								var invlen = 2 / len;
								var _g2 = 0;
								var _g11 = len;
								while(_g2 < _g11) {
									var tp1 = _g2++;
									var teleporter = _this2.city.teleporters[tp1];
									var priorityAdd = 9 + (rnd + tp1 * invlen) % 2.0;
									if(teleporter != null) {
										if(teleporter.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable4 = teleporter.pfRelatedPrioritizable;
											var newPriority8 = currentQueueItem.priority + priorityAdd;
											if(newPriority8 < relatedPrioritizable4.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable4,newPriority8);
											}
										} else if(teleporter.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority9 = currentQueueItem.priority + priorityAdd;
											teleporter.pfSeen = _gthis1.pfSeenStart;
											teleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority9,teleporter);
											_gthis1.pathQueue.enqueue(teleporter.pfRelatedPrioritizable);
										}
									}
								}
								if(!isPrivateTeleporter && privateTeleporter != null) {
									if(privateTeleporter != null) {
										if(privateTeleporter.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable5 = privateTeleporter.pfRelatedPrioritizable;
											var newPriority10 = currentQueueItem.priority + 10;
											if(newPriority10 < relatedPrioritizable5.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable5,newPriority10);
											}
										} else if(privateTeleporter.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority11 = currentQueueItem.priority + 10;
											privateTeleporter.pfSeen = _gthis1.pfSeenStart;
											privateTeleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority11,privateTeleporter);
											_gthis1.pathQueue.enqueue(privateTeleporter.pfRelatedPrioritizable);
										}
									}
								}
								teleportersDone = true;
							} else if(currentPermanent["is"](buildings_LandingSite) && !landingSitesDone[currentPermanent.landingSiteGroup]) {
								var thisGroup = currentPermanent.landingSiteGroup;
								var _g12 = 0;
								var _g21 = _this2.city.connections.landingSiteGroups[thisGroup];
								while(_g12 < _g21.length) {
									var landingSite = _g21[_g12];
									++_g12;
									var priorityAdd1 = landingSite.estimatedFlyingDistanceTo(currentPermanent);
									if(landingSite != null) {
										if(landingSite.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable6 = landingSite.pfRelatedPrioritizable;
											var newPriority12 = currentQueueItem.priority + priorityAdd1;
											if(newPriority12 < relatedPrioritizable6.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable6,newPriority12);
											}
										} else if(landingSite.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority13 = currentQueueItem.priority + priorityAdd1;
											landingSite.pfSeen = _gthis1.pfSeenStart;
											landingSite.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority13,landingSite);
											_gthis1.pathQueue.enqueue(landingSite.pfRelatedPrioritizable);
										}
									}
								}
								landingSitesDone[thisGroup] = true;
							} else if(!currentQueueItem.dontCheckElevators && currentPermanent["is"](buildings_HyperElevator) && currentPermanent.pfSeen != 3) {
								var _g13 = 0;
								var _g22 = _this2.city.connections.elevatorConnections.get(currentBuilding.world)[currentBuilding.worldPosition.x];
								while(_g13 < _g22.length) {
									var elevator = _g22[_g13];
									++_g13;
									var priorityAdd2 = Math.abs(elevator.worldPosition.y - currentBuilding.worldPosition.y);
									if(elevator != null) {
										if(elevator.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable7 = elevator.pfRelatedPrioritizable;
											var newPriority14 = currentQueueItem.priority + priorityAdd2;
											if(newPriority14 < relatedPrioritizable7.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable7,newPriority14);
											}
										} else if(elevator.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority15 = currentQueueItem.priority + priorityAdd2;
											elevator.pfSeen = _gthis1.pfSeenStart;
											elevator.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority15,elevator);
											_gthis1.pathQueue.enqueue(elevator.pfRelatedPrioritizable);
										}
									}
									if(elevator.pfRelatedPrioritizable != null) {
										elevator.pfRelatedPrioritizable.dontCheckElevators = true;
									}
								}
							}
						}
						if(currentPermanent.worldPosition.y == 0) {
							var _g14 = 0;
							var _g23 = currentPermanent.world.permanents;
							while(_g14 < _g23.length) {
								var bottomPermanents = _g23[_g14];
								++_g14;
								if(bottomPermanents.length == 0 || bottomPermanents[0] == null) {
									continue;
								}
								var permanentTo4 = bottomPermanents[0];
								var priorityAdd3 = Math.abs(bottomPermanents[0].position.x - currentPermanent.position.x);
								if(permanentTo4 != null) {
									if(permanentTo4.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable8 = permanentTo4.pfRelatedPrioritizable;
										var newPriority16 = currentQueueItem.priority + priorityAdd3;
										if(newPriority16 < relatedPrioritizable8.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable8,newPriority16);
										}
									} else if(permanentTo4.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority17 = currentQueueItem.priority + priorityAdd3;
										permanentTo4.pfSeen = _gthis1.pfSeenStart;
										permanentTo4.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority17,permanentTo4);
										_gthis1.pathQueue.enqueue(permanentTo4.pfRelatedPrioritizable);
									}
								}
							}
						}
						currentQueueItem.destroy();
					}
					this.nearestRuins = bestPermanent;
					this.hasSearchedForRuinsThisStep = true;
					if(this.nearestRuins == null) {
						var _this3 = this.world.knownResourceInavailability;
						if(__map_reserved["AlienRuins"] != null) {
							_this3.setReserved("AlienRuins",true);
						} else {
							_this3.h["AlienRuins"] = true;
						}
					}
				}
				if(this.nearestRuins != null) {
					citizen.simulation.pathfinder.findPath(citizen,this.nearestRuins);
					citizen.pathOnFail = null;
					this.currentAction = buildings_CurrentExplorationCentreAction.Exploring;
				} else {
					this.currentAction = buildings_CurrentExplorationCentreAction.Investigating;
					if(citizen.inPermanent == this) {
						var positionInArray = this.workers.indexOf(citizen);
						if((positionInArray == 1 || positionInArray == 2) && citizen.isAtGroundLevel()) {
							citizen.changeFloor();
						} else {
							var correctXMin = positionInArray == 2 ? 12 : 3;
							var correctXMax = positionInArray == 2 ? 16 : 7;
							if(citizen.relativeX >= correctXMin && citizen.relativeX < correctXMax) {
								var productionAmount1 = 0.001 * timeMod * this.city.simulation.happiness.actionSpeedModifier * citizen.get_educationSpeedModifier() * this.city.simulation.boostManager.currentGlobalBoostAmount;
								this.city.materials.knowledge += productionAmount1;
								this.city.simulation.stats.materialProduction[8][0] += productionAmount1;
							} else {
								var moveToX = random_Random.getInt(correctXMin,correctXMax);
								var pool = pooling_Int32ArrayPool.pool;
								var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
								arr[0] = 4;
								arr[1] = moveToX;
								citizen.setPath(arr,0,2,true);
								citizen.pathEndFunction = null;
								citizen.pathOnlyRelatedTo = citizen.inPermanent;
							}
						}
					} else {
						citizen.simulation.pathfinder.findPath(citizen,this);
						citizen.pathOnFail = null;
					}
				}
			}
		} else if(citizen.inPermanent == this) {
			citizen.moveAndWait(4,30,function() {
				citizen.hasWorkTools = true;
			},true);
		} else {
			citizen.simulation.pathfinder.findPath(citizen,this);
			citizen.pathOnFail = null;
		}
	}
	,exploreTheseRuins: function(citizen) {
		var _gthis = this;
		var theseRuins = citizen.inPermanent;
		var moveX = theseRuins.standingPlaces.length == 0 ? random_Random.getInt(1,17) : random_Random.fromArray(theseRuins.standingPlaces);
		var tmp = random_Random.getInt(90,180);
		citizen.moveAndWait(moveX,tmp,function() {
			if(theseRuins.explored < 100) {
				theseRuins.explored += 0.25;
				var _this = _gthis.city.simulation;
				var productionAmount = 0.25 * (Config.earlyGameFix1 && _this.citizens.length < 30 ? 1.3 - 0.3 * (_this.citizens.length / 60) : 1) * _gthis.city.simulation.boostManager.currentGlobalBoostAmount;
				_gthis.city.materials.knowledge += productionAmount;
				_gthis.city.simulation.stats.materialProduction[8][0] += productionAmount;
				theseRuins.awardAnyBonuses();
				if(theseRuins.explored >= 100) {
					theseRuins.explored = 100;
					if(citizen.inPermanent != null && citizen.inPermanent.isBuilding) {
						var building = citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null;
						citizen.relativeX = building.worldPosition.x * 20 + building.doorX;
					} else {
						citizen.relativeX += citizen.inPermanent.worldPosition.x * 20;
					}
					if(citizen.inPermanent != null) {
						citizen.inPermanent.onCitizenLeave(citizen,null);
					}
					citizen.inBuildingSince = citizen.city.simulation.time.timeSinceStart;
					citizen.set_drawOnStage(citizen.foregroundStage);
					citizen.inPermanent = null;
					citizen.relativeY = 0;
					Citizen.shouldUpdateDraw = true;
					_gthis.nearestRuins = null;
				}
			} else {
				if(citizen.inPermanent != null && citizen.inPermanent.isBuilding) {
					var building1 = citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null;
					citizen.relativeX = building1.worldPosition.x * 20 + building1.doorX;
				} else {
					citizen.relativeX += citizen.inPermanent.worldPosition.x * 20;
				}
				if(citizen.inPermanent != null) {
					citizen.inPermanent.onCitizenLeave(citizen,null);
				}
				citizen.inBuildingSince = citizen.city.simulation.time.timeSinceStart;
				citizen.set_drawOnStage(citizen.foregroundStage);
				citizen.inPermanent = null;
				citizen.relativeY = 0;
				Citizen.shouldUpdateDraw = true;
				_gthis.nearestRuins = null;
			}
		},true);
	}
	,exploreOrInvestigate: function(citizen,timeMod) {
		if(this.nearestRuins != null) {
			citizen.simulation.pathfinder.findPath(citizen,this.nearestRuins);
			citizen.pathOnFail = null;
			this.currentAction = buildings_CurrentExplorationCentreAction.Exploring;
		} else {
			this.currentAction = buildings_CurrentExplorationCentreAction.Investigating;
			if(citizen.inPermanent == this) {
				var positionInArray = this.workers.indexOf(citizen);
				if((positionInArray == 1 || positionInArray == 2) && citizen.isAtGroundLevel()) {
					citizen.changeFloor();
				} else {
					var correctXMin = positionInArray == 2 ? 12 : 3;
					var correctXMax = positionInArray == 2 ? 16 : 7;
					if(citizen.relativeX >= correctXMin && citizen.relativeX < correctXMax) {
						var productionAmount = 0.001 * timeMod * this.city.simulation.happiness.actionSpeedModifier * citizen.get_educationSpeedModifier() * this.city.simulation.boostManager.currentGlobalBoostAmount;
						this.city.materials.knowledge += productionAmount;
						this.city.simulation.stats.materialProduction[8][0] += productionAmount;
					} else {
						var moveToX = random_Random.getInt(correctXMin,correctXMax);
						var pool = pooling_Int32ArrayPool.pool;
						var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
						arr[0] = 4;
						arr[1] = moveToX;
						citizen.setPath(arr,0,2,true);
						citizen.pathEndFunction = null;
						citizen.pathOnlyRelatedTo = citizen.inPermanent;
					}
				}
			} else {
				citizen.simulation.pathfinder.findPath(citizen,this);
				citizen.pathOnFail = null;
			}
		}
	}
	,update: function(timeMod) {
		buildings_Work.prototype.update.call(this,timeMod);
		this.hasSearchedForRuinsThisStep = false;
	}
	,invalidatePathfindingRelatedInfo: function() {
		buildings_Work.prototype.invalidatePathfindingRelatedInfo.call(this);
		this.nearestRuins = null;
	}
	,__class__: buildings_ExplorationCentre
});
var buildings_RefinedMetalFactory = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.materialsMadePerStepPerWorker = 0.001;
	buildings_MaterialConvertingFactory.call(this,game,stage,bgStage,city,world,position,worldPosition,id,this.get_animationFrames(),this.get_idleFrames());
};
$hxClasses["buildings.RefinedMetalFactory"] = buildings_RefinedMetalFactory;
buildings_RefinedMetalFactory.__name__ = ["buildings","RefinedMetalFactory"];
buildings_RefinedMetalFactory.__super__ = buildings_MaterialConvertingFactory;
buildings_RefinedMetalFactory.prototype = $extend(buildings_MaterialConvertingFactory.prototype,{
	get_normalEfficiency: function() {
		return 5.0;
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		return false;
	}
	,get_possibleUpgrades: function() {
		return [];
	}
	,get_possibleBuildingModes: function() {
		return [buildingUpgrades_FactoryWorking,buildingUpgrades_RefinedMetalsFactoryHack,buildingUpgrades_StoneUsingFactoryDisabled];
	}
	,get_materialFrom: function() {
		return this.city.materials.stone;
	}
	,set_materialFrom: function(value) {
		var productionAmount = this.city.materials.stone - value;
		this.city.materials.stone -= productionAmount;
		this.city.simulation.stats.materialUsed[2][0] += productionAmount;
		return this.city.materials.stone;
	}
	,get_materialTo: function() {
		return this.city.materials.refinedMetal;
	}
	,set_materialTo: function(value) {
		var productionAmount = value - this.city.materials.refinedMetal;
		this.city.materials.refinedMetal += productionAmount;
		this.city.simulation.stats.materialProduction[4][0] += productionAmount;
		return this.city.materials.refinedMetal;
	}
	,get_animationFrames: function() {
		return "spr_refinedmetalfactory_frames";
	}
	,get_idleFrames: function() {
		return "spr_refinedmetalfactory_idle";
	}
	,onBuild: function() {
		this.city.progress.unlocks.unlock(buildings_HyperElevator);
		this.city.progress.unlocks.unlock(buildings_ComputerResearchCenter);
		this.city.progress.unlocks.fullyUnlock(buildings_MedicalClinic);
		this.city.progress.unlocks.fullyUnlock(buildings_ModernArtMuseum);
		this.city.progress.unlocks.unlock(buildings_SpaciousHouse);
		this.city.progress.unlocks.unlock(buildings_StoneResearchCenter);
	}
	,workAnimation: function(citizen,timeMod) {
		if(citizen.relativeY != 10) {
			if(this.workers.indexOf(citizen) == 0) {
				citizen.setRelativePos(3,10);
			} else {
				var spd = citizen.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				if(Math.abs(3 - citizen.relativeX) < spd) {
					citizen.relativeX = 3;
				} else {
					var num = 3 - citizen.relativeX;
					citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
				}
				citizen.setRelativeY(0);
			}
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_MaterialConvertingFactory.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalMaterialUsed | 0) + " stone used to make " + (_gthis.materialMade | 0) + " units of refined metals.";
		});
	}
	,onCityChange: function() {
		this.efficiency = 5.0;
		this.materialsMadePerStepPerWorker = 0.001;
		if(this.bottomBuilding != null && this.bottomBuilding["is"](buildings_ExperimentationLab)) {
			this.efficiency -= 0.5;
			this.materialsMadePerStepPerWorker += 0.0001;
		}
		if(this.topBuilding != null && this.topBuilding["is"](buildings_ExperimentationLab)) {
			this.efficiency -= 0.5;
			this.materialsMadePerStepPerWorker += 0.0001;
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_MaterialConvertingFactory.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_RefinedMetalFactory.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_MaterialConvertingFactory.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_RefinedMetalFactory
});
var buildings_FactoryPub = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_RefinedMetalFactory.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.materialsMadePerStepPerWorker = 0.00075;
	this.startTime = 16.5;
	this.endTime = 5.5;
	this.workTimePreferenceMod = 0.5;
	this.isEntertainment = true;
};
$hxClasses["buildings.FactoryPub"] = buildings_FactoryPub;
buildings_FactoryPub.__name__ = ["buildings","FactoryPub"];
buildings_FactoryPub.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_FactoryPub.__super__ = buildings_RefinedMetalFactory;
buildings_FactoryPub.prototype = $extend(buildings_RefinedMetalFactory.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 25;
	}
	,get_isOpen: function() {
		if(this.workers.length >= 1 && this.workers[0].currentAction == LifeAction.Work) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = this.startTime - this.workTimePreferenceMod;
			if(start < 4.5) {
				if(this1 >= start) {
					return this1 < 4.5;
				} else {
					return false;
				}
			} else if(!(this1 >= start)) {
				return this1 < 4.5;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 1;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 2;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 5;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,get_animationFrames: function() {
		return "spr_refinedmetalfactorypub_frames";
	}
	,get_idleFrames: function() {
		return "spr_refinedmetalfactorypub_idle";
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_AutoMergingBuildingDrawer;
	}
	,destroy: function() {
		buildings_RefinedMetalFactory.prototype.destroy.call(this);
	}
	,positionSprites: function() {
		buildings_RefinedMetalFactory.prototype.positionSprites.call(this);
	}
	,beEntertained: function(citizen,timeMod) {
		var moveFunction = function() {
			var moveToX = random_Random.getInt(8,16);
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 4;
			arr[1] = moveToX;
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		};
		if(citizen.relativeY < 5) {
			citizen.changeFloor(moveFunction);
		} else {
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[4].length > 0 ? pool1[4].splice(pool1[4].length - 1,1)[0] : new Int32Array(4);
			arr1[0] = 4;
			arr1[1] = random_Random.getInt(8,this.rightBuilding != null && this.rightBuilding["is"](buildings_FactoryPub) ? 19 : 16);
			arr1[2] = 8;
			arr1[3] = random_Random.getInt(60,120);
			citizen.setPath(arr1,0,4,true);
		}
		if(!citizen.hasBuildingInited) {
			citizen.wantsNightEntertainmentIn = random_Random.getInt(1,5);
			citizen.hasBuildingInited = true;
		}
	}
	,workAnimation: function(citizen,timeMod) {
		if(citizen.relativeY != 10) {
			if(this.workers.indexOf(citizen) == 0) {
				citizen.setRelativePos(8,10);
			} else {
				citizen.setRelativePos(3,1);
			}
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_RefinedMetalFactory.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_FactoryPub.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_RefinedMetalFactory.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_FactoryPub
});
var buildings_FarmByProductProcessor = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.cachedAdjacencyExpiration = 0.0;
	this.cachedAdjacencyValue = 0.0;
	this.woodMade = 0;
	buildings_Factory.call(this,game,stage,bgStage,city,world,position,worldPosition,id,"spr_farmbyproductprocessor_frames","spr_farmbyproductprocessor_idle");
};
$hxClasses["buildings.FarmByProductProcessor"] = buildings_FarmByProductProcessor;
buildings_FarmByProductProcessor.__name__ = ["buildings","FarmByProductProcessor"];
buildings_FarmByProductProcessor.__super__ = buildings_Factory;
buildings_FarmByProductProcessor.prototype = $extend(buildings_Factory.prototype,{
	get_walkThroughCanViewSelfInThisBuilding: function() {
		return false;
	}
	,possiblyBeActive: function(timeMod) {
		this.cachedAdjacencyExpiration--;
		var adjacentFarmNumberToUse = this.cachedAdjacencyValue;
		if(this.cachedAdjacencyExpiration <= 0) {
			adjacentFarmNumberToUse = this.adjacentFarmNumber(true);
			this.cachedAdjacencyValue = adjacentFarmNumberToUse;
			this.cachedAdjacencyExpiration = 72;
		}
		var woodProduction = 0.0014 * this.activeWorkersTotalEducation * this.city.simulation.happiness.actionSpeedModifier * this.city.simulation.boostManager.currentGlobalBoostAmount * timeMod * adjacentFarmNumberToUse;
		this.city.materials.wood += woodProduction;
		this.city.simulation.stats.materialProduction[1][0] += woodProduction;
		this.woodMade += woodProduction;
		return woodProduction > 0;
	}
	,adjacentFarmNumber: function(trueValue) {
		var effectType = "farm";
		var total = 0.0;
		if(this.leftBuilding != null) {
			var total1 = 0.0;
			var _g = 0;
			var _g1 = this.leftBuilding.adjecentBuildingEffects;
			while(_g < _g1.length) {
				var ae = _g1[_g];
				++_g;
				if(ae.name == effectType) {
					total1 += ae.intensity;
				}
			}
			var thisVal = total1;
			if(thisVal > 0.5) {
				if(trueValue) {
					if(this.leftBuilding["is"](buildings_Work)) {
						var workBuilding = this.leftBuilding;
						total += workBuilding.workers.length / workBuilding.get_jobs();
					} else {
						var houseBuilding = this.leftBuilding;
						total += houseBuilding.residents.length / houseBuilding.get_residentCapacity();
					}
				} else {
					++total;
				}
			}
		}
		if(this.rightBuilding != null && (this.rightBuilding.rightBuilding == null || !this.rightBuilding.rightBuilding["is"](buildings_FarmByProductProcessor))) {
			var total2 = 0.0;
			var _g2 = 0;
			var _g11 = this.rightBuilding.adjecentBuildingEffects;
			while(_g2 < _g11.length) {
				var ae1 = _g11[_g2];
				++_g2;
				if(ae1.name == effectType) {
					total2 += ae1.intensity;
				}
			}
			var thisVal1 = total2;
			if(thisVal1 > 0.5) {
				if(trueValue) {
					if(this.rightBuilding["is"](buildings_Work)) {
						var workBuilding1 = this.rightBuilding;
						total += workBuilding1.workers.length / workBuilding1.get_jobs();
					} else {
						var houseBuilding1 = this.rightBuilding;
						total += houseBuilding1.residents.length / houseBuilding1.get_residentCapacity();
					}
				} else {
					++total;
				}
			}
		}
		if(this.topBuilding != null && (this.topBuilding.leftBuilding == null || !this.topBuilding.leftBuilding["is"](buildings_FarmByProductProcessor)) && (this.topBuilding.rightBuilding == null || !this.topBuilding.rightBuilding["is"](buildings_FarmByProductProcessor))) {
			var total3 = 0.0;
			var _g3 = 0;
			var _g12 = this.topBuilding.adjecentBuildingEffects;
			while(_g3 < _g12.length) {
				var ae2 = _g12[_g3];
				++_g3;
				if(ae2.name == effectType) {
					total3 += ae2.intensity;
				}
			}
			var thisVal2 = total3;
			if(thisVal2 > 0.5) {
				if(trueValue) {
					if(this.topBuilding["is"](buildings_Work)) {
						var workBuilding2 = this.topBuilding;
						total += workBuilding2.workers.length / workBuilding2.get_jobs();
					} else {
						var houseBuilding2 = this.topBuilding;
						total += houseBuilding2.residents.length / houseBuilding2.get_residentCapacity();
					}
				} else {
					++total;
				}
			}
		}
		if(this.bottomBuilding != null && (this.bottomBuilding.leftBuilding == null || !this.bottomBuilding.leftBuilding["is"](buildings_FarmByProductProcessor)) && (this.bottomBuilding.rightBuilding == null || !this.bottomBuilding.rightBuilding["is"](buildings_FarmByProductProcessor)) && (this.bottomBuilding.bottomBuilding == null || !this.bottomBuilding.bottomBuilding["is"](buildings_FarmByProductProcessor))) {
			var total4 = 0.0;
			var _g4 = 0;
			var _g13 = this.bottomBuilding.adjecentBuildingEffects;
			while(_g4 < _g13.length) {
				var ae3 = _g13[_g4];
				++_g4;
				if(ae3.name == effectType) {
					total4 += ae3.intensity;
				}
			}
			var thisVal3 = total4;
			if(thisVal3 > 0.5) {
				if(trueValue) {
					if(this.bottomBuilding["is"](buildings_Work)) {
						var workBuilding3 = this.bottomBuilding;
						total += workBuilding3.workers.length / workBuilding3.get_jobs();
					} else {
						var houseBuilding3 = this.bottomBuilding;
						total += houseBuilding3.residents.length / houseBuilding3.get_residentCapacity();
					}
				} else {
					++total;
				}
			}
		}
		return total;
	}
	,workAnimation: function(citizen,timeMod) {
		if(citizen.relativeY != 10) {
			if(this.workers.indexOf(citizen) == 0) {
				citizen.setRelativePos(12,10);
			} else {
				citizen.setRelativePos(15,10);
			}
		}
	}
	,canShowActiveTextures: function() {
		return true;
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Factory.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "Processing by-products for " + (_gthis.adjacentFarmNumber(false) | 0) + " farm" + ((_gthis.adjacentFarmNumber(false) | 0) == 1 ? "" : "s") + ".";
		});
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.woodMade | 0) + " wood produced.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Factory.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_FarmByProductProcessor.saveDefinition);
		}
		var value = this.woodMade;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Factory.prototype.load.call(this,queue);
		if(queue.version < 22) {
			return;
		}
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["woodMade"] != null ? loadMap.existsReserved("woodMade") : loadMap.h.hasOwnProperty("woodMade")) {
			this.woodMade = __map_reserved["woodMade"] != null ? loadMap.getReserved("woodMade") : loadMap.h["woodMade"];
		}
	}
	,__class__: buildings_FarmByProductProcessor
});
var buildings_FarmGrowArea = function(stage,partOf,relativePosition,city,textureName,textureWidth,foodPerHarvest,growSpeedMultiplier,cleanSpeed,harvestSpritePart) {
	if(harvestSpritePart == null) {
		harvestSpritePart = 1;
	}
	this.percentCleaned = 0;
	this.originalFoodLeft = 1;
	this.foodLeft = 0;
	this.percentGrown = 0;
	this.farmStage = buildings_FarmStage.Growing;
	this.harvestSpritePart = 1;
	this.passiveGrowSpeedBadLight = 0.006;
	this.passiveGrowSpeed = 0.012;
	this.cleanSpeed = 5;
	this.harvestAmount = 0.25;
	this.growSpeed = 0.85;
	this.foodPerHarvest = 25;
	this.partOf = partOf;
	this.city = city;
	this.relativePosition = relativePosition;
	this.stage = stage;
	this.foodPerHarvest = foodPerHarvest;
	this.growSpeed *= growSpeedMultiplier;
	this.passiveGrowSpeed *= growSpeedMultiplier;
	this.passiveGrowSpeedBadLight *= growSpeedMultiplier;
	this.cleanSpeed = cleanSpeed;
	this.harvestSpritePart = harvestSpritePart;
	this.textures = Resources.getTexturesByWidth(textureName,textureWidth);
	this.growthSprite = new PIXI.Sprite();
	stage.addChild(this.growthSprite);
	this.positionSprites();
	this.updateTexture();
};
$hxClasses["buildings.FarmGrowArea"] = buildings_FarmGrowArea;
buildings_FarmGrowArea.__name__ = ["buildings","FarmGrowArea"];
buildings_FarmGrowArea.prototype = {
	destroy: function() {
		this.stage.removeChild(this.growthSprite);
	}
	,update: function(timeMod) {
		if(this.farmStage == buildings_FarmStage.Growing) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = 7;
			var end = 20;
			if(start < end ? this1 >= start && this1 < end : this1 >= start || this1 < end) {
				this.percentGrown += timeMod * this.passiveGrowSpeed;
				if(this.percentGrown >= 100) {
					this.farmStage = buildings_FarmStage.Harvesting;
					this.foodLeft = this.foodPerHarvest + this.city.simulation.bonuses.extraFoodFromFarms + this.partOf.getEffectsOfAdjecentBuildings("increaseCropNumber");
					this.originalFoodLeft = this.foodLeft;
				}
				this.updateTexture();
			} else {
				var this2 = this.city.simulation.time.timeSinceStart / 60 % 24;
				var start1 = 7 - 1;
				var end1 = 20 + 1;
				if(start1 < end1 ? this2 >= start1 && this2 < end1 : this2 >= start1 || this2 < end1) {
					this.percentGrown += timeMod * this.passiveGrowSpeedBadLight;
					if(this.percentGrown >= 100) {
						this.farmStage = buildings_FarmStage.Harvesting;
						this.foodLeft = this.foodPerHarvest + this.city.simulation.bonuses.extraFoodFromFarms + this.partOf.getEffectsOfAdjecentBuildings("increaseCropNumber");
						this.originalFoodLeft = this.foodLeft;
					}
					this.updateTexture();
				}
			}
		}
	}
	,doCitizenWork: function(citizen) {
		var _gthis = this;
		var timeMin = (this.farmStage == buildings_FarmStage.Harvesting ? 15 : 30) / this.city.simulation.happiness.actionSpeedModifierWithoutPenalties | 0;
		var timeMax = (this.farmStage == buildings_FarmStage.Harvesting ? 30 : 60) / this.city.simulation.happiness.actionSpeedModifierWithoutPenalties | 0;
		var tmp = random_Random.getInt(this.relativePosition.x,this.relativePosition.x + (this.growthSprite.texture.width | 0) - 2 + 1);
		var tmp1 = random_Random.getInt(timeMin,timeMax);
		citizen.moveAndWait(tmp,tmp1,function() {
			_gthis.onCitizenWork(citizen);
		},false,false);
	}
	,doCitizenWorkNoMove: function(citizen) {
		var _gthis = this;
		var timeMin = this.farmStage == buildings_FarmStage.Harvesting ? 15 : 30;
		var timeMax = this.farmStage == buildings_FarmStage.Harvesting ? 30 : 60;
		var pool = pooling_Int32ArrayPool.pool;
		var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
		arr[0] = 8;
		arr[1] = random_Random.getInt(timeMin,timeMax);
		citizen.setPath(arr,0,2,true);
		citizen.pathEndFunction = function() {
			_gthis.onCitizenWork(citizen);
		};
		citizen.pathOnlyRelatedTo = citizen.inPermanent;
	}
	,onCitizenWork: function(citizen) {
		var _g = this.farmStage;
		switch(_g[1]) {
		case 0:
			this.percentGrown += this.growSpeed;
			if(this.percentGrown >= 100) {
				this.farmStage = buildings_FarmStage.Harvesting;
				this.foodLeft = this.foodPerHarvest + this.city.simulation.bonuses.extraFoodFromFarms + this.partOf.getEffectsOfAdjecentBuildings("increaseCropNumber");
				this.originalFoodLeft = this.foodLeft;
			}
			this.updateTexture();
			break;
		case 1:
			var currentHarvestAmount = this.harvestAmount * this.city.simulation.boostManager.currentGlobalBoostAmount;
			this.foodLeft -= currentHarvestAmount;
			var _g1 = this.city.materials;
			_g1.set_food(_g1.food + currentHarvestAmount);
			this.city.simulation.stats.materialProduction[0][0] += currentHarvestAmount;
			if(this.foodLeft <= 0) {
				if(this.cleanSpeed <= 0) {
					this.farmStage = buildings_FarmStage.Growing;
					this.percentGrown = 0;
				} else {
					this.percentCleaned = 0;
					this.farmStage = buildings_FarmStage.Cleaning;
				}
			}
			this.updateTexture();
			break;
		case 2:
			this.percentCleaned += this.cleanSpeed;
			if(this.percentCleaned >= 100) {
				this.farmStage = buildings_FarmStage.Growing;
				this.percentGrown = 0;
			}
			this.updateTexture();
			break;
		}
	}
	,setTexture: function(textureName,textureWidth) {
		this.textures = Resources.getTexturesByWidth(textureName,textureWidth);
	}
	,updateTexture: function() {
		var _g = this.farmStage;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = this.textures[Math.floor(this.percentGrown / 100 * (this.textures.length - 1 - this.harvestSpritePart))];
			break;
		case 1:
			var val = this.textures.length - 1 - Math.ceil(this.foodLeft / this.originalFoodLeft * 0.9999 * this.harvestSpritePart);
			var maxVal = this.textures.length - 2;
			tmp = this.textures[val < 1 ? 1 : val > maxVal ? maxVal : val];
			break;
		case 2:
			tmp = this.textures[this.textures.length - 1];
			break;
		}
		this.growthSprite.texture = tmp;
	}
	,positionSprites: function() {
		if(this.growthSprite != null) {
			this.growthSprite.position.set(this.partOf.position.x + this.relativePosition.x,this.partOf.position.y + this.relativePosition.y);
		}
	}
	,showInfoText: function(extraText) {
		var _gthis = this;
		this.city.gui.windowAddInfoText(null,function() {
			var _g = _gthis.farmStage;
			switch(_g[1]) {
			case 0:
				return "" + extraText + "Crops " + Math.floor(_gthis.percentGrown) + "% grown.";
			case 1:
				return "" + extraText + Math.floor(_gthis.foodLeft) + " food left to harvest.";
			case 2:
				return "" + extraText + "Old crops " + Math.floor(_gthis.percentCleaned) + "% cleaned.";
			}
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(buildings_FarmGrowArea.saveDefinition);
		}
		queue.addString(this.farmStage[0]);
		var value = this.percentGrown;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.foodLeft;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.originalFoodLeft;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
		var value3 = this.percentCleaned;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value3);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["farmStage"] != null ? loadMap.existsReserved("farmStage") : loadMap.h.hasOwnProperty("farmStage")) {
			this.farmStage = __map_reserved["farmStage"] != null ? loadMap.getReserved("farmStage") : loadMap.h["farmStage"];
		}
		if(__map_reserved["percentGrown"] != null ? loadMap.existsReserved("percentGrown") : loadMap.h.hasOwnProperty("percentGrown")) {
			this.percentGrown = __map_reserved["percentGrown"] != null ? loadMap.getReserved("percentGrown") : loadMap.h["percentGrown"];
		}
		if(__map_reserved["foodLeft"] != null ? loadMap.existsReserved("foodLeft") : loadMap.h.hasOwnProperty("foodLeft")) {
			this.foodLeft = __map_reserved["foodLeft"] != null ? loadMap.getReserved("foodLeft") : loadMap.h["foodLeft"];
		}
		if(__map_reserved["originalFoodLeft"] != null ? loadMap.existsReserved("originalFoodLeft") : loadMap.h.hasOwnProperty("originalFoodLeft")) {
			this.originalFoodLeft = __map_reserved["originalFoodLeft"] != null ? loadMap.getReserved("originalFoodLeft") : loadMap.h["originalFoodLeft"];
		}
		if(__map_reserved["percentCleaned"] != null ? loadMap.existsReserved("percentCleaned") : loadMap.h.hasOwnProperty("percentCleaned")) {
			this.percentCleaned = __map_reserved["percentCleaned"] != null ? loadMap.getReserved("percentCleaned") : loadMap.h["percentCleaned"];
		}
	}
	,__class__: buildings_FarmGrowArea
};
var buildings_FarmHouse = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.totalMaterialsProduced = 0;
	this.materialPhase = 0;
	this.stageProgress = 0;
	this.resourceSprite = null;
	this.resourceSprite = new PIXI.Sprite();
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.buildingMode = Type.createInstance(this.get_possibleBuildingModes()[random_Random.getInt(3)],[stage,city.cityMidStage,bgStage,this]);
	this.currentMaterialTextures = this.get_materialTextures();
	this.resourceSprite.position.set(position.x + 3,position.y + 3);
	bgStage.addChild(this.resourceSprite);
};
$hxClasses["buildings.FarmHouse"] = buildings_FarmHouse;
buildings_FarmHouse.__name__ = ["buildings","FarmHouse"];
buildings_FarmHouse.__super__ = buildings_House;
buildings_FarmHouse.prototype = $extend(buildings_House.prototype,{
	get_originalMaterials: function() {
		var _g = this.materialType;
		switch(_g) {
		case 0:
			return 20;
		case 1:
			return 25;
		case 2:
			return 10;
		default:
			return 10;
		}
	}
	,get_materialTextures: function() {
		var _g = this.materialType;
		var tmp;
		switch(_g) {
		case 0:
			tmp = "spr_communityhouse_rock";
			break;
		case 1:
			tmp = "spr_communityhouse_tree";
			break;
		case 2:
			tmp = "spr_communityhouse_crop";
			break;
		default:
			tmp = "";
		}
		return Resources.getTexturesByWidth(tmp,5);
	}
	,get_possibleUpgrades: function() {
		return [buildingUpgrades_IndoorPond];
	}
	,get_possibleBuildingModes: function() {
		return [buildingUpgrades_CHProduceFood,buildingUpgrades_CHProduceStone,buildingUpgrades_CHProduceWood];
	}
	,destroy: function() {
		buildings_House.prototype.destroy.call(this);
		this.resourceSprite.destroy();
	}
	,postLoad: function() {
		this.resourceSprite.alpha = 1;
		this.setResourceSpriteTexture();
	}
	,positionSprites: function() {
		buildings_House.prototype.positionSprites.call(this);
		if(this.resourceSprite != null) {
			this.resourceSprite.position.set(this.position.x + 3,this.position.y + 3);
		}
	}
	,update: function(timeMod) {
		if(this.materialPhase == 0) {
			var _g = this.materialType;
			switch(_g) {
			case 0:
				this.stageProgress += timeMod * 0.05;
				if(this.stageProgress >= 1) {
					this.materialPhase = 1;
					this.stageProgress = this.get_originalMaterials();
					this.resourceSprite.alpha = 1;
				}
				this.setResourceSpriteTexture();
				break;
			case 1:
				var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
				var start = 7;
				var end = 20;
				if(start < end ? this1 >= start && this1 < end : this1 >= start || this1 < end) {
					this.stageProgress += 0.00018 * timeMod;
					if(this.stageProgress >= 1) {
						this.materialPhase = 1;
						this.stageProgress = this.get_originalMaterials();
					}
					this.setResourceSpriteTexture();
				}
				break;
			case 2:
				var this2 = this.city.simulation.time.timeSinceStart / 60 % 24;
				var start1 = 7;
				var end1 = 20;
				if(start1 < end1 ? this2 >= start1 && this2 < end1 : this2 >= start1 || this2 < end1) {
					this.stageProgress += 0.00008 * timeMod;
					if(this.stageProgress >= 1) {
						this.materialPhase = 1;
						this.stageProgress = this.get_originalMaterials();
					}
					this.setResourceSpriteTexture();
				}
				break;
			}
		}
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var _gthis = this;
		if(stepsInBuilding < 180) {
			if(citizen.relativeY > 5) {
				citizen.changeFloor();
			} else {
				var timeMin = this.materialPhase == 2 ? 20 : 50;
				var timeMax = this.materialPhase == 2 ? 30 : 80;
				citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(timeMin,timeMax),function() {
					var _g = _gthis.materialType;
					switch(_g) {
					case 0:
						if(_gthis.materialPhase == 1) {
							var harvestAmount = 0.1;
							var currentHarvestAmount = harvestAmount * _gthis.city.simulation.boostManager.currentGlobalBoostAmount;
							_gthis.stageProgress -= currentHarvestAmount;
							_gthis.city.materials.stone += currentHarvestAmount;
							_gthis.city.simulation.stats.materialProduction[2][0] += currentHarvestAmount;
							_gthis.totalMaterialsProduced += currentHarvestAmount;
							if(_gthis.stageProgress <= 0) {
								_gthis.stageProgress = 0;
								_gthis.materialPhase = 0;
							}
						}
						break;
					case 1:
						if(_gthis.materialPhase == 0) {
							_gthis.stageProgress += 0.005;
							if(_gthis.stageProgress >= 1) {
								_gthis.stageProgress = _gthis.get_originalMaterials();
								_gthis.materialPhase += 1;
							}
						} else {
							var harvestAmount1 = 0.2;
							var currentHarvestAmount1 = harvestAmount1 * _gthis.city.simulation.boostManager.currentGlobalBoostAmount;
							_gthis.stageProgress -= currentHarvestAmount1;
							_gthis.city.materials.wood += currentHarvestAmount1;
							_gthis.city.simulation.stats.materialProduction[1][0] += currentHarvestAmount1;
							_gthis.totalMaterialsProduced += currentHarvestAmount1;
							if(_gthis.stageProgress <= 0) {
								_gthis.stageProgress = 0;
								_gthis.materialPhase = 0;
							}
						}
						break;
					case 2:
						if(_gthis.materialPhase == 1) {
							var harvestAmount2 = 0.25;
							var currentHarvestAmount2 = harvestAmount2 * _gthis.city.simulation.boostManager.currentGlobalBoostAmount;
							_gthis.stageProgress -= currentHarvestAmount2;
							var _g1 = _gthis.city.materials;
							_g1.set_food(_g1.food + currentHarvestAmount2);
							_gthis.city.simulation.stats.materialProduction[0][0] += currentHarvestAmount2;
							_gthis.totalMaterialsProduced += currentHarvestAmount2;
							if(_gthis.stageProgress <= 0) {
								_gthis.stageProgress = 0;
								_gthis.materialPhase = 2;
							}
						} else if(_gthis.materialPhase == 0) {
							_gthis.stageProgress += 0.01;
							if(_gthis.stageProgress >= 1) {
								_gthis.stageProgress = _gthis.get_originalMaterials();
								_gthis.materialPhase += 1;
							}
						} else if(_gthis.materialPhase == 2) {
							_gthis.stageProgress += 0.1;
							if(_gthis.stageProgress >= 1) {
								_gthis.stageProgress = 0;
								_gthis.materialPhase = 0;
							}
						}
						break;
					}
					_gthis.setResourceSpriteTexture();
				},true,false);
			}
		} else if(citizen.relativeX > 11 && random_Random.getInt(3) == 1) {
			citizen.changeFloorAndWaitRandom(60,90);
		} else {
			citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(60,90),null,false,false);
		}
	}
	,setMaterialType: function(type) {
		this.materialType = type;
		this.currentMaterialTextures = this.get_materialTextures();
		buildings_FarmHouse.treeGrowTextures = Resources.getTexturesByWidth("spr_communityhouse_tree_grow",5);
		if(this.materialType == 2) {
			this.adjecentBuildingEffects.push({ name : "farm", intensity : 1});
		} else {
			var farmEffect = Lambda.find(this.adjecentBuildingEffects,function(ae) {
				return ae.name == "farm";
			});
			HxOverrides.remove(this.adjecentBuildingEffects,farmEffect);
		}
		this.resourceSprite.alpha = 1;
		this.setResourceSpriteTexture();
	}
	,resetProgress: function() {
		this.materialPhase = 0;
		this.stageProgress = 0;
	}
	,setResourceSpriteTexture: function() {
		if((this.materialType == 0 || this.materialType == 1) && this.materialPhase == 1) {
			var tmp = this.currentMaterialTextures;
			var tmp1 = 1 - this.stageProgress / this.get_originalMaterials();
			this.resourceSprite.texture = tmp[Math.ceil(tmp1 * (this.currentMaterialTextures.length - 1))];
		} else if(this.materialType == 0) {
			this.resourceSprite.texture = this.currentMaterialTextures[0];
			this.resourceSprite.alpha = this.stageProgress;
		} else if(this.materialType == 2 && this.materialPhase == 0) {
			this.resourceSprite.texture = this.currentMaterialTextures[this.stageProgress * (this.currentMaterialTextures.length - 2) | 0];
		} else if(this.materialType == 1 && this.materialPhase == 0) {
			this.resourceSprite.texture = buildings_FarmHouse.treeGrowTextures[this.stageProgress * buildings_FarmHouse.treeGrowTextures.length | 0];
		} else if(this.materialType == 2) {
			if(this.materialPhase == 1) {
				this.resourceSprite.texture = this.currentMaterialTextures[this.currentMaterialTextures.length - 2];
			} else if(this.materialPhase == 2) {
				this.resourceSprite.texture = this.currentMaterialTextures[this.currentMaterialTextures.length - 1];
			}
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_House.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalMaterialsProduced | 0) + " resources produced.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_House.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_FarmHouse.saveDefinition);
		}
		var value = this.stageProgress;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.materialPhase;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var value2 = this.totalMaterialsProduced;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_House.prototype.load.call(this,queue);
		if(queue.version < 23) {
			return;
		}
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["stageProgress"] != null ? loadMap.existsReserved("stageProgress") : loadMap.h.hasOwnProperty("stageProgress")) {
			this.stageProgress = __map_reserved["stageProgress"] != null ? loadMap.getReserved("stageProgress") : loadMap.h["stageProgress"];
		}
		if(__map_reserved["materialPhase"] != null ? loadMap.existsReserved("materialPhase") : loadMap.h.hasOwnProperty("materialPhase")) {
			this.materialPhase = __map_reserved["materialPhase"] != null ? loadMap.getReserved("materialPhase") : loadMap.h["materialPhase"];
		}
		if(__map_reserved["totalMaterialsProduced"] != null ? loadMap.existsReserved("totalMaterialsProduced") : loadMap.h.hasOwnProperty("totalMaterialsProduced")) {
			this.totalMaterialsProduced = __map_reserved["totalMaterialsProduced"] != null ? loadMap.getReserved("totalMaterialsProduced") : loadMap.h["totalMaterialsProduced"];
		}
		this.postLoad();
	}
	,__class__: buildings_FarmHouse
});
var buildings_FarmStage = $hxClasses["buildings.FarmStage"] = { __ename__ : ["buildings","FarmStage"], __constructs__ : ["Growing","Harvesting","Cleaning"] };
buildings_FarmStage.Growing = ["Growing",0];
buildings_FarmStage.Growing.toString = $estr;
buildings_FarmStage.Growing.__enum__ = buildings_FarmStage;
buildings_FarmStage.Harvesting = ["Harvesting",1];
buildings_FarmStage.Harvesting.toString = $estr;
buildings_FarmStage.Harvesting.__enum__ = buildings_FarmStage;
buildings_FarmStage.Cleaning = ["Cleaning",2];
buildings_FarmStage.Cleaning.toString = $estr;
buildings_FarmStage.Cleaning.__enum__ = buildings_FarmStage;
var buildings_FestivalHQ = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.doorX = 14;
	this.festivalCoolDown = 0;
};
$hxClasses["buildings.FestivalHQ"] = buildings_FestivalHQ;
buildings_FestivalHQ.__name__ = ["buildings","FestivalHQ"];
buildings_FestivalHQ.__super__ = buildings_Work;
buildings_FestivalHQ.prototype = $extend(buildings_Work.prototype,{
	work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			return;
		}
		if(citizen.relativeY > 5) {
			if(random_Random.getFloat(1) < 0.5) {
				citizen.changeFloor(function() {
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
					arr[0] = 8;
					arr[1] = random_Random.getInt(50,100);
					citizen.setPath(arr,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
				});
			} else {
				var tmp = random_Random.fromArray([3,4,5,6,12,13,14,15]);
				var tmp1 = random_Random.getInt(50,100);
				citizen.moveAndWait(tmp,tmp1);
			}
		} else if(random_Random.getFloat(1) < 0.3) {
			citizen.changeFloor(function() {
				var pool1 = pooling_Int32ArrayPool.pool;
				var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
				arr1[0] = 8;
				arr1[1] = random_Random.getInt(50,100);
				citizen.setPath(arr1,0,2,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
			});
		} else {
			var tmp2 = random_Random.fromArray([3,8,13,14]);
			var tmp3 = random_Random.getInt(50,100);
			citizen.moveAndWait(tmp2,tmp3);
		}
	}
	,update: function(timeMod) {
		if(this.festivalCoolDown > -1) {
			this.festivalCoolDown -= timeMod * (this.workers.length / this.get_jobs()) * this.city.simulation.time.minutesPerTick;
		}
	}
	,getMusicFestivalMTP: function() {
		return new Materials(this.city.simulation.citizens.length,0,this.city.simulation.citizens.length * 3);
	}
	,getHundredFestivalMTP: function() {
		return new Materials(0,0,this.city.simulation.citizens.length * 2);
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		var shouldShowCreationOptions = function() {
			if(_gthis.city.simulation.festivalManager.hasNoPlannedFestival()) {
				return _gthis.festivalCoolDown < 0;
			} else {
				return false;
			}
		};
		buildings_Work.prototype.addWindowInfoLines.call(this);
		var gui1 = this.city.gui;
		var windowDisplayType = 0;
		var festivalContainer = new gui_GUIContainer(gui1,gui1.innerWindowStage,gui1.windowInner);
		festivalContainer.fillSecondarySize = true;
		festivalContainer.direction = gui_GUIContainerDirection.Vertical;
		gui1.windowInner.addChild(festivalContainer);
		var showFestivalCreationOptions;
		var showCurrentFestivalInfo = function() {
			festivalContainer.clear();
			festivalContainer.addChild(new gui_GUISpacing(festivalContainer,new common_Point(0,3)));
			festivalContainer.addChild(new gui_TextElement(festivalContainer,gui1.innerWindowStage,null,function() {
				var fm = _gthis.city.simulation.festivalManager;
				if(fm.hasFestival()) {
					return "Current Festival";
				}
				if(fm.plannedFestival() != null) {
					return "Planned Festival";
				}
				return "Preparing...";
			},"Arial15"));
			festivalContainer.addChild(new gui_TextElement(festivalContainer,gui1.innerWindowStage,null,function() {
				var fm1 = _gthis.city.simulation.festivalManager;
				if(fm1.hasFestival()) {
					return fm1.currentFestival().getText();
				}
				if(fm1.plannedFestival() != null) {
					return fm1.plannedFestival().getText();
				}
				if(_gthis.workers.length == 0) {
					return "Assign workers to prepare for a new festival!";
				}
				var hireMoreText = "";
				if(_gthis.workers.length < _gthis.get_jobs()) {
					hireMoreText = " Assign more workers to speed this up!";
				}
				return common_StringExtensions.firstToUpper(CityTime.getBasicTimeString(_gthis.festivalCoolDown * (_gthis.get_jobs() / _gthis.workers.length))) + " of preparation left." + hireMoreText;
			}));
			gui1.window.onUpdate = function() {
				if(shouldShowCreationOptions()) {
					showFestivalCreationOptions();
				}
			};
		};
		showFestivalCreationOptions = function() {
			festivalContainer.clear();
			var headerContainer = gui_UpgradeWindowParts.createHeader(gui1,"Organize a Festival",festivalContainer);
			var infoContainerInfo = gui_UpgradeWindowParts.createActivatableButton(_gthis.city.gui,false,function() {
				var mtp = _gthis.getMusicFestivalMTP();
				if(_gthis.city.materials.canAfford(mtp) && _gthis.city.simulation.festivalManager.hasNoPlannedFestival() && simulation_festival_MusicFestival.canDo(_gthis.city,_gthis.city.simulation,_gthis)) {
					_gthis.city.materials.remove(mtp);
					var musicFestival = new simulation_festival_MusicFestival(_gthis.city,_gthis.city.simulation,_gthis.city.simulation.festivalManager,_gthis);
					musicFestival.plan();
					_gthis.city.simulation.festivalManager.addFestival(musicFestival);
					_gthis.festivalCoolDown += 8783.9999999999982;
					showCurrentFestivalInfo();
				} else {
					var createWarningWindow = function() {
						_gthis.city.gui.showSimpleWindow("You can't organize a Music Festival right now!");
					};
					_gthis.city.gui.addWindowToStack(createWarningWindow);
				}
			},"Music Festival","A huge, awesome party that lasts for one day. Boosts the happiness of your citizens for a week. This can even make it go over 100.",festivalContainer);
			var materialsToPay = _gthis.getMusicFestivalMTP();
			var infoContainer = infoContainerInfo.container;
			var mcdContainer = new gui_GUIContainer(gui1,gui1.innerWindowStage,infoContainer);
			var mcd = new gui_MaterialsCostDisplay(_gthis.city,materialsToPay,"");
			mcdContainer.addChild(new gui_ContainerHolder(mcdContainer,gui1.innerWindowStage,mcd,{ left : 0, right : 0, top : 0, bottom : gui_UpgradeWindowParts.hasMultiUpgradeModeOn ? materialsToPay.knowledge == 0 ? 0 : 1 : 2},$bind(mcd,mcd.updateCostDisplay)));
			gui1.window.onUpdate = function() {
				var materialsToPay1 = _gthis.getMusicFestivalMTP();
				mcd.setCost(materialsToPay1);
			};
			infoContainer.addChild(mcdContainer);
			festivalContainer.addChild(new gui_GUISpacing(festivalContainer,new common_Point(0,3)));
		};
		if(shouldShowCreationOptions()) {
			showFestivalCreationOptions();
		} else {
			showCurrentFestivalInfo();
		}
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this.city.simulation.festivalManager.festivals;
		while(_g < _g1.length) {
			var fes = _g1[_g];
			++_g;
			this.city.simulation.festivalManager.endFestival(fes);
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_FestivalHQ.saveDefinition);
		}
		var value = this.festivalCoolDown;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["festivalCoolDown"] != null ? loadMap.existsReserved("festivalCoolDown") : loadMap.h.hasOwnProperty("festivalCoolDown")) {
			this.festivalCoolDown = __map_reserved["festivalCoolDown"] != null ? loadMap.getReserved("festivalCoolDown") : loadMap.h["festivalCoolDown"];
		}
	}
	,__class__: buildings_FestivalHQ
});
var buildings_FlowerPenthouse = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.mirrored = false;
	this.teleportX = 15;
	this.topFlower = null;
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.doorX = 14;
	this.yearsToLiveLongerPerYearIfLivingHere = 0.05;
	this.updateTopFlower();
};
$hxClasses["buildings.FlowerPenthouse"] = buildings_FlowerPenthouse;
buildings_FlowerPenthouse.__name__ = ["buildings","FlowerPenthouse"];
buildings_FlowerPenthouse.__super__ = buildings_House;
buildings_FlowerPenthouse.prototype = $extend(buildings_House.prototype,{
	get_possibleUpgrades: function() {
		return [];
	}
	,get_baseAttractiveness: function() {
		return 100;
	}
	,get_hasPrivateTeleporter: function() {
		return true;
	}
	,postLoad: function() {
		if(this.mirrored) {
			this.mirror();
			this.mirrored = true;
		}
	}
	,mirror: function() {
		this.mirrored = !this.mirrored;
		this.updateTopFlower();
		this.teleportX = 19 - this.teleportX;
		this.drawer.mirror();
	}
	,updateTopFlower: function() {
		if(this.world.permanents[this.worldPosition.x].length == this.worldPosition.y + 1 || this.world.permanents[this.worldPosition.x][this.worldPosition.y + 1] == null) {
			if(this.topFlower == null) {
				this.topFlower = new PIXI.Sprite(Resources.getTexture("spr_flower_up"));
				this.stage.addChild(this.topFlower);
				this.topFlower.anchor.y = 1;
			}
			if(this.mirrored) {
				this.topFlower.position.set(this.position.x + 20,this.position.y);
				this.topFlower.scale.x = -1;
			} else {
				this.topFlower.position.set(this.position.x,this.position.y);
				this.topFlower.scale.x = 1;
			}
		} else if(this.topFlower != null) {
			this.topFlower.destroy();
			this.topFlower = null;
		}
	}
	,onCityChange: function() {
		buildings_House.prototype.onCityChange.call(this);
		this.updateTopFlower();
	}
	,destroy: function() {
		buildings_House.prototype.destroy.call(this);
		if(this.topFlower != null) {
			this.topFlower.destroy();
		}
	}
	,walkAround: function(citizen,stepsInBuilding) {
		if(this.mirrored) {
			if(citizen.relativeY < 5) {
				if(citizen.relativeX >= 5 || random_Random.getFloat() < 0.5) {
					citizen.moveAndWait(random_Random.getInt(3,16),random_Random.getInt(60,90),null,false,false);
				} else {
					citizen.changeFloorAndWait(60);
				}
			} else if(citizen.relativeX >= 5 || random_Random.getFloat() < 0.8) {
				var rnd = random_Random.getFloat();
				if(rnd < 0.5) {
					citizen.moveAndWait(random_Random.getInt(15,18),random_Random.getInt(40,60),null,false,false);
				} else if(rnd < 0.8) {
					citizen.moveAndWait(random_Random.getInt(10,12),random_Random.getInt(60,90),null,false,false);
				} else {
					citizen.moveAndWait(random_Random.getInt(3,5),random_Random.getInt(60,90),null,false,false);
				}
			} else {
				citizen.changeFloorAndWait(60);
			}
		} else if(citizen.relativeY < 5) {
			if(citizen.relativeX < 14 || random_Random.getFloat() < 0.5) {
				citizen.moveAndWait(random_Random.getInt(3,16),random_Random.getInt(60,90),null,false,false);
			} else {
				citizen.changeFloorAndWait(60);
			}
		} else if(citizen.relativeX < 14 || random_Random.getFloat() < 0.8) {
			var rnd1 = random_Random.getFloat();
			if(rnd1 < 0.5) {
				citizen.moveAndWait(random_Random.getInt(1,4),random_Random.getInt(40,60),null,false,false);
			} else if(rnd1 < 0.8) {
				citizen.moveAndWait(random_Random.getInt(7,9),random_Random.getInt(60,90),null,false,false);
			} else {
				citizen.moveAndWait(random_Random.getInt(14,16),random_Random.getInt(60,90),null,false,false);
			}
		} else {
			citizen.changeFloorAndWait(60);
		}
	}
	,createWindowAddBottomButtons: function() {
		gui_windowParts_FullSizeTextButton.create(this.city.gui,$bind(this,this.mirror),this.city.gui.windowInner,function() {
			return "Mirror";
		},this.city.gui.innerWindowStage);
		this.city.gui.windowInner.addChild(new gui_GUISpacing(this.city.gui.windowInner,new common_Point(2,6)));
		buildings_House.prototype.createWindowAddBottomButtons.call(this);
	}
	,createTeleportParticle: function(rayTexture) {
		if(rayTexture == null) {
			rayTexture = "unused";
		}
		this.city.particles.addParticle(Resources.getTexturesByWidth(this.mirrored ? "spr_smallteleporter_ray_penthouse_mirror" : "spr_smallteleporter_ray_penthouse",3),new common_Point(this.position.x + (this.mirrored ? 3 : 14),this.position.y + 12));
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_House.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_FlowerPenthouse.saveDefinition);
		}
		var value = this.mirrored ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_House.prototype.load.call(this,queue);
		if(queue.version < 26) {
			return;
		}
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["mirrored"] != null ? loadMap.existsReserved("mirrored") : loadMap.h.hasOwnProperty("mirrored")) {
			this.mirrored = __map_reserved["mirrored"] != null ? loadMap.getReserved("mirrored") : loadMap.h["mirrored"];
		}
		this.postLoad();
	}
	,__class__: buildings_FlowerPenthouse
});
var buildings_FossilMuseum = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.totalKnowledgeGenerated = 0;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 14;
	this.endTime = 23;
	this.workTimePreferenceMod = 0.5;
	this.isEntertainment = true;
};
$hxClasses["buildings.FossilMuseum"] = buildings_FossilMuseum;
buildings_FossilMuseum.__name__ = ["buildings","FossilMuseum"];
buildings_FossilMuseum.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_FossilMuseum.__super__ = buildings_Work;
buildings_FossilMuseum.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 50;
	}
	,get_isOpen: function() {
		if(this.workers.length >= 1 && common_ArrayExtensions.any(this.workers,function(w) {
			return w.currentAction == LifeAction.Work;
		})) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = this.startTime - this.workTimePreferenceMod;
			if(start < 23) {
				if(this1 >= start) {
					return this1 < 23;
				} else {
					return false;
				}
			} else if(!(this1 >= start)) {
				return this1 < 23;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 5;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 2;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 5;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
	}
	,beEntertained: function(citizen,timeMod) {
		var moveFunction = function() {
			if(citizen.relativeY < 5) {
				if(random_Random.getFloat() < 1) {
					var moveToX = random_Random.getInt(12,16);
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[4].length > 0 ? pool[4].splice(pool[4].length - 1,1)[0] : new Int32Array(4);
					arr[0] = 12;
					arr[1] = 50;
					arr[2] = 4;
					arr[3] = moveToX;
					citizen.setPath(arr,0,4,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
				} else {
					var pool1 = pooling_Int32ArrayPool.pool;
					var arr1 = pool1[4].length > 0 ? pool1[4].splice(pool1[4].length - 1,1)[0] : new Int32Array(4);
					arr1[0] = 12;
					arr1[1] = 50;
					arr1[2] = 4;
					arr1[3] = 6;
					citizen.setPath(arr1,0,4,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
				}
			} else {
				var moveToX1 = random_Random.getInt(4,15);
				var pool2 = pooling_Int32ArrayPool.pool;
				var arr2 = pool2[4].length > 0 ? pool2[4].splice(pool2[4].length - 1,1)[0] : new Int32Array(4);
				arr2[0] = 12;
				arr2[1] = 50;
				arr2[2] = 4;
				arr2[3] = moveToX1;
				citizen.setPath(arr2,0,4,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
			}
		};
		if(random_Random.getInt(2) == 1) {
			citizen.changeFloor(moveFunction);
		} else {
			var pool3 = pooling_Int32ArrayPool.pool;
			var arr3 = pool3[2].length > 0 ? pool3[2].splice(pool3[2].length - 1,1)[0] : new Int32Array(2);
			arr3[0] = 8;
			arr3[1] = random_Random.getInt(120,180);
			citizen.setPath(arr3,0,2,true);
			citizen.pathEndFunction = moveFunction;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
		if(!citizen.hasBuildingInited) {
			citizen.educationLevel = Math.max(Math.min(citizen.educationLevel + 0.035,1.6),citizen.educationLevel);
			citizen.hasBuildingInited = true;
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			var _g = this.workers.indexOf(citizen);
			switch(_g) {
			case 0:
				var spd = citizen.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				if(Math.abs(6 - citizen.relativeX) < spd) {
					citizen.relativeX = 6;
				} else {
					var num = 6 - citizen.relativeX;
					citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
				}
				var newKnowledge = 0.001 * this.city.simulation.bonuses.fossilsCollected * timeMod * this.city.simulation.happiness.actionSpeedModifier * citizen.get_educationSpeedModifier() * this.city.simulation.boostManager.currentGlobalBoostAmount * this.workers.length;
				this.city.materials.knowledge += newKnowledge;
				this.city.simulation.stats.materialProduction[8][0] += newKnowledge;
				this.totalKnowledgeGenerated += newKnowledge;
				break;
			case 1:
				citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(120,180),null,false,false);
				break;
			case 2:
				if(citizen.relativeY < 5) {
					citizen.changeFloor();
				} else {
					citizen.moveAndWait(random_Random.getInt(4,16),random_Random.getInt(120,180),null,false,false);
				}
				break;
			}
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalKnowledgeGenerated | 0) + " knowledge gathered.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_FossilMuseum.saveDefinition);
		}
		var value = this.totalKnowledgeGenerated;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["totalKnowledgeGenerated"] != null ? loadMap.existsReserved("totalKnowledgeGenerated") : loadMap.h.hasOwnProperty("totalKnowledgeGenerated")) {
			this.totalKnowledgeGenerated = __map_reserved["totalKnowledgeGenerated"] != null ? loadMap.getReserved("totalKnowledgeGenerated") : loadMap.h["totalKnowledgeGenerated"];
		}
	}
	,__class__: buildings_FossilMuseum
});
var buildings_HackerHQ = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.timeToCheckBuildings = 0;
	this.currentMission = 0;
	this.manyTeleportAlpha = 0;
	this.eventPhase = 0;
	this.doingEvent = -1;
	this.lastEventDoneOnDay = 0;
	buildings_WorkWithHome.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 14;
	this.endTime = 3;
	this.workTimePreferenceMod = 0.3;
	this.boltSprite = new PIXI.Sprite(Resources.getTexture("spr_hackers_bolt"));
	this.boltSprite.position.set(position.x + 12,position.y + 11);
	stage.addChild(this.boltSprite);
	if(worldPosition.y == 0) {
		this.boltSprite.visible = false;
	}
};
$hxClasses["buildings.HackerHQ"] = buildings_HackerHQ;
buildings_HackerHQ.__name__ = ["buildings","HackerHQ"];
buildings_HackerHQ.__super__ = buildings_WorkWithHome;
buildings_HackerHQ.prototype = $extend(buildings_WorkWithHome.prototype,{
	positionSprites: function() {
		buildings_WorkWithHome.prototype.positionSprites.call(this);
		this.boltSprite.position.set(this.position.x + 12,this.position.y + 11);
		if(this.worldPosition.y == 0) {
			this.boltSprite.visible = false;
		}
	}
	,destroy: function() {
		this.boltSprite.destroy();
		buildings_WorkWithHome.prototype.destroy.call(this);
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_WorkWithHome.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowInner.addChild(new gui_GUISpacing(this.city.gui.window,new common_Point(4,4)));
		this.city.gui.windowAddInfoText(null,function() {
			return _gthis.missionGetTitle();
		},"Arial15");
		this.city.gui.windowAddInfoText(null,function() {
			return _gthis.missionGetText();
		});
	}
	,missionGetTitle: function() {
		if(this.currentMission == 11) {
			return "Thank You";
		}
		return "Current Task";
	}
	,missionGetText: function() {
		if(this.currentMission == 11) {
			return "We'll keep on hacking!";
		}
		if(this.workers.length != this.get_jobs()) {
			return "Gather the Hackers:\nMake sure all 6 jobs are filled.";
		}
		var _g = this.currentMission;
		switch(_g) {
		case 0:
			return "Collect the Knowledge:\nBuild twenty Labs.";
		case 1:
			return "Spread the Knowledge:\nBuild three Libraries.";
		case 2:
			return "House the Smart:\nBuild five Tinkerers' Houses.";
		case 3:
			return "Factory Hack:\nResearch the Firmware Modding upgrade at a Refined Metals Factory.";
		case 4:
			return "Try our latest invention:\nBuild a Factory Pub.";
		case 5:
			return "More of the basics:\nProduce at least 20 computer chips in a day.";
		case 6:
			return "Mechanical Party:\nBuild seven Scrapyard Nightclubs.";
		case 7:
			return "Let's have even more fun!\nBuild the Lab Escape Room.";
		case 8:
			return "Watering Cans Are Overrated:\nResearch Automatic Water Management in a Tree Plantation.";
		case 9:
			return "Change the Game:\nBuild two Holo Game Halls.";
		case 10:
			return "Build our Ultimate Invention:\nBuild the Misdirector.";
		default:
			return "";
		}
	}
	,checkMissionCompletions: function() {
		var missionComplete = false;
		while(true) {
			missionComplete = false;
			var _g = this.currentMission;
			switch(_g) {
			case 3:
				missionComplete = this.city.progress.unlocks.getUnlockState(buildingUpgrades_RefinedMetalsFactoryHack) == progress_UnlockState.Researched;
				if(missionComplete) {
					this.city.progress.unlocks.unlock(buildings_FactoryPub);
				}
				break;
			case 5:
				missionComplete = common_ArrayExtensions.any(this.city.simulation.stats.materialProduction[MaterialsHelper.findMaterialIndex("computerChips")],function(mt) {
					return mt >= 20;
				});
				if(missionComplete) {
					this.city.progress.unlocks.unlock(buildings_ScrapyardNightClub);
				}
				break;
			case 8:
				missionComplete = this.city.progress.unlocks.getUnlockState(buildingUpgrades_AutomaticWaterManagement) == progress_UnlockState.Researched;
				if(missionComplete) {
					this.city.progress.unlocks.unlock(buildings_HoloGameHall);
				}
				break;
			default:
			}
			if(this.timeToCheckBuildings <= 0 && this.currentMission != 3 && this.currentMission != 5 && this.currentMission != 8 && this.currentMission != 11) {
				var buildingsByType = this.city.getAmountOfPermanentsPerType();
				var _g1 = this.currentMission;
				switch(_g1) {
				case 0:
					if((__map_reserved["buildings.ExperimentationLab"] != null ? buildingsByType.getReserved("buildings.ExperimentationLab") : buildingsByType.h["buildings.ExperimentationLab"]) == null) {
						if(__map_reserved["buildings.ExperimentationLab"] != null) {
							buildingsByType.setReserved("buildings.ExperimentationLab",0);
						} else {
							buildingsByType.h["buildings.ExperimentationLab"] = 0;
						}
					}
					missionComplete = (__map_reserved["buildings.Laboratory"] != null ? buildingsByType.getReserved("buildings.Laboratory") : buildingsByType.h["buildings.Laboratory"]) + (__map_reserved["buildings.ExperimentationLab"] != null ? buildingsByType.getReserved("buildings.ExperimentationLab") : buildingsByType.h["buildings.ExperimentationLab"]) >= 20;
					if(missionComplete) {
						this.city.progress.unlocks.unlock(buildings_Library);
					}
					break;
				case 1:
					missionComplete = (__map_reserved["buildings.Library"] != null ? buildingsByType.getReserved("buildings.Library") : buildingsByType.h["buildings.Library"]) >= 3;
					if(missionComplete) {
						this.city.progress.unlocks.unlock(buildings_TinkerersHome);
					}
					break;
				case 2:
					missionComplete = (__map_reserved["buildings.TinkerersHome"] != null ? buildingsByType.getReserved("buildings.TinkerersHome") : buildingsByType.h["buildings.TinkerersHome"]) >= 5;
					if(missionComplete) {
						this.city.progress.unlocks.unlock(buildingUpgrades_RefinedMetalsFactoryHack);
					}
					break;
				case 4:
					missionComplete = (__map_reserved["buildings.FactoryPub"] != null ? buildingsByType.getReserved("buildings.FactoryPub") : buildingsByType.h["buildings.FactoryPub"]) >= 1;
					break;
				case 6:
					missionComplete = (__map_reserved["buildings.ScrapyardNightClub"] != null ? buildingsByType.getReserved("buildings.ScrapyardNightClub") : buildingsByType.h["buildings.ScrapyardNightClub"]) >= 7;
					if(missionComplete) {
						this.city.progress.unlocks.unlock(buildings_EscapeRoom);
					}
					break;
				case 7:
					missionComplete = (__map_reserved["buildings.EscapeRoom"] != null ? buildingsByType.getReserved("buildings.EscapeRoom") : buildingsByType.h["buildings.EscapeRoom"]) >= 1;
					if(missionComplete) {
						this.city.progress.unlocks.unlock(buildingUpgrades_AutomaticWaterManagement);
					}
					break;
				case 9:
					missionComplete = (__map_reserved["buildings.HoloGameHall"] != null ? buildingsByType.getReserved("buildings.HoloGameHall") : buildingsByType.h["buildings.HoloGameHall"]) >= 2;
					if(missionComplete) {
						this.city.progress.unlocks.unlock(buildings_Misdirector);
					}
					break;
				case 10:
					missionComplete = (__map_reserved["buildings.Misdirector"] != null ? buildingsByType.getReserved("buildings.Misdirector") : buildingsByType.h["buildings.Misdirector"]) >= 1;
					break;
				}
				this.timeToCheckBuildings = 30;
			}
			if(missionComplete) {
				this.currentMission += 1;
				this.timeToCheckBuildings = 0;
				this.city.progress.goalHelp.updateHasBuildingGoal();
			}
			if(!missionComplete) {
				break;
			}
		}
	}
	,update: function(timeMod) {
		buildings_WorkWithHome.prototype.update.call(this,timeMod);
		this.checkMissionCompletions();
		this.timeToCheckBuildings -= timeMod;
		if(((this.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 >= 0 && ((this.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 < 4) {
			var val = 4.0 - 4.0 * Math.abs(1.0 - this.city.simulation.time.timeSinceStart / 60 % 24 / 2.0);
			this.boltSprite.alpha = val < 0 ? 0 : val > 1 ? 1 : val;
		} else {
			this.boltSprite.alpha = 0;
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			return;
		}
		this.doWalkAround(citizen);
	}
	,walkAround: function(citizen,stepsInBuilding) {
		this.doWalkAround(citizen);
	}
	,doWalkAround: function(citizen) {
		if(citizen.relativeY > 5) {
			if(random_Random.getInt(4) == 1 && citizen.relativeX > 5) {
				citizen.changeFloor();
			} else {
				citizen.moveAndWait(random_Random.fromArray(buildings_HackerHQ.walkAroundPositions),random_Random.getInt(60,120));
			}
		} else if(random_Random.getInt(4) == 1) {
			citizen.changeFloor();
		} else if(random_Random.getInt(3) == 1) {
			citizen.moveAndWait(random_Random.getInt(5,7),random_Random.getInt(90,150),null,false,false);
		} else {
			citizen.moveAndWait(random_Random.getInt(9,15),random_Random.getInt(60,150),null,false,false);
		}
	}
	,getGlobalGoal: function() {
		if(this.currentMission == 11) {
			return null;
		}
		return { category : "Hackers Mission", text : this.missionGetText()};
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_WorkWithHome.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_HackerHQ.saveDefinition);
		}
		var value = this.lastEventDoneOnDay;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.doingEvent;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var value2 = this.eventPhase;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
		var value3 = this.currentMission;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value3);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_WorkWithHome.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["lastEventDoneOnDay"] != null ? loadMap.existsReserved("lastEventDoneOnDay") : loadMap.h.hasOwnProperty("lastEventDoneOnDay")) {
			this.lastEventDoneOnDay = __map_reserved["lastEventDoneOnDay"] != null ? loadMap.getReserved("lastEventDoneOnDay") : loadMap.h["lastEventDoneOnDay"];
		}
		if(__map_reserved["doingEvent"] != null ? loadMap.existsReserved("doingEvent") : loadMap.h.hasOwnProperty("doingEvent")) {
			this.doingEvent = __map_reserved["doingEvent"] != null ? loadMap.getReserved("doingEvent") : loadMap.h["doingEvent"];
		}
		if(__map_reserved["eventPhase"] != null ? loadMap.existsReserved("eventPhase") : loadMap.h.hasOwnProperty("eventPhase")) {
			this.eventPhase = __map_reserved["eventPhase"] != null ? loadMap.getReserved("eventPhase") : loadMap.h["eventPhase"];
		}
		if(__map_reserved["currentMission"] != null ? loadMap.existsReserved("currentMission") : loadMap.h.hasOwnProperty("currentMission")) {
			this.currentMission = __map_reserved["currentMission"] != null ? loadMap.getReserved("currentMission") : loadMap.h["currentMission"];
		}
	}
	,__class__: buildings_HackerHQ
});
var buildings_HighTechNightClub = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.lowestNightClub = null;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.positionSprites();
	this.startTime = 20;
	this.endTime = 7.5;
	this.workTimePreferenceMod = 0.5;
	this.isEntertainment = true;
	if(buildings_HighTechNightClub.citizenClothesTexture == null) {
		buildings_HighTechNightClub.citizenClothesTexture = Resources.getTexture("spr_tech_nightclub_hoverer");
	}
	this.lowestNightClub = this;
};
$hxClasses["buildings.HighTechNightClub"] = buildings_HighTechNightClub;
buildings_HighTechNightClub.__name__ = ["buildings","HighTechNightClub"];
buildings_HighTechNightClub.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_HighTechNightClub.__super__ = buildings_Work;
buildings_HighTechNightClub.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 100;
	}
	,get_isOpen: function() {
		if((this.bottomBuilding == null || !this.bottomBuilding["is"](buildings_HighTechNightClub)) && this.workers.length == 1 && this.workers[0].currentAction == LifeAction.Work) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = this.startTime - this.workTimePreferenceMod;
			if(start < 6) {
				if(this1 >= start) {
					return this1 < 6;
				} else {
					return false;
				}
			} else if(!(this1 >= start)) {
				return this1 < 6;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 0;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 5;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 7;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
		var start = this.startTime - this.workTimePreferenceMod;
		if(start < 6) {
			if(this1 >= start) {
				return this1 < 6;
			} else {
				return false;
			}
		} else if(!(this1 >= start)) {
			return this1 < 6;
		} else {
			return true;
		}
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_AllDirMergingBuildingDrawer;
	}
	,get_mergingDrawer: function() {
		return this.drawer;
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		if(this.bottomBuilding != null) {
			return !this.bottomBuilding["is"](buildings_HighTechNightClub);
		} else {
			return true;
		}
	}
	,get_hasLeftNightClub: function() {
		if(this.leftBuilding != null) {
			return this.leftBuilding["is"](buildings_HighTechNightClub);
		} else {
			return false;
		}
	}
	,get_hasRightNightClub: function() {
		if(this.rightBuilding != null) {
			return this.rightBuilding["is"](buildings_HighTechNightClub);
		} else {
			return false;
		}
	}
	,get_hasTopNightClub: function() {
		if(this.topBuilding != null) {
			return this.topBuilding["is"](buildings_HighTechNightClub);
		} else {
			return false;
		}
	}
	,get_hasBottomNightClub: function() {
		if(this.bottomBuilding != null) {
			return this.bottomBuilding["is"](buildings_HighTechNightClub);
		} else {
			return false;
		}
	}
	,get_firstBuildingToGoTo: function() {
		return this.lowestNightClub;
	}
	,postCreate: function() {
		buildings_Work.prototype.postCreate.call(this);
		this.updateLowestNightClub();
	}
	,onCityChange: function() {
		this.updateLowestNightClub();
	}
	,updateLowestNightClub: function() {
		this.lowestNightClub = this;
		while(this.lowestNightClub.get_hasBottomNightClub()) this.lowestNightClub = this.lowestNightClub.bottomBuilding;
	}
	,onCitizenLeave: function(citizen,newPermanent) {
		if(newPermanent != null && !newPermanent["is"](buildings_HighTechNightClub)) {
			if(citizen.accessorySprite != null) {
				citizen.accessorySprite.destroy();
				citizen.accessorySprite = null;
			}
		}
	}
	,beEntertained: function(citizen,timeMod) {
		if(citizen.accessorySprite == null) {
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			var tmp;
			if(Math.abs(9 - citizen.relativeX) < spd) {
				citizen.relativeX = 9;
				tmp = true;
			} else {
				var num = 9 - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
				tmp = false;
			}
			if(tmp) {
				citizen.setRelativeY(citizen.relativeY + timeMod / 2);
				if(citizen.relativeY >= 4) {
					citizen.accessorySprite = new PIXI.Sprite(buildings_HighTechNightClub.citizenClothesTexture);
					citizen.accessorySprite.anchor.set(0,0);
					citizen.accessorySprite.position.set(-1,-1);
					citizen.sprite.addChild(citizen.accessorySprite);
					citizen.setRelativeY(4);
					citizen.addToWithAccessoryStage();
				}
			} else {
				citizen.setRelativeY(0);
			}
			citizen.dynamicUnsavedVars.xMoveLeft = 0.0;
			citizen.dynamicUnsavedVars.yMoveLeft = 0.0;
			citizen.dynamicUnsavedVars.waitTime = 0.0;
			return;
		}
		var hasLeftBuildingOfSameType = this.get_hasLeftNightClub();
		var leftBuilding = this.leftBuilding;
		var hasRightBuildingOfSameType = this.get_hasRightNightClub();
		var rightBuilding = this.rightBuilding;
		var hasTopBuildingOfSameType = this.get_hasTopNightClub();
		var topBuilding = this.topBuilding;
		var hasBottomBuildingOfSameType = this.get_hasBottomNightClub();
		var bottomBuilding = this.bottomBuilding;
		if(Math.abs(citizen.dynamicUnsavedVars.xMoveLeft) > 0) {
			var num1 = citizen.dynamicUnsavedVars.xMoveLeft;
			var xMoveNowSign = num1 > 0 ? 1 : num1 < 0 ? -1 : 0;
			var xMoveNow = timeMod * xMoveNowSign;
			if(xMoveNowSign * xMoveNow > xMoveNowSign * citizen.dynamicUnsavedVars.xMoveLeft) {
				citizen.setRelativeX(citizen.relativeX + citizen.dynamicUnsavedVars.xMoveLeft);
				citizen.dynamicUnsavedVars.xMoveLeft = 0;
			} else {
				citizen.setRelativeX(citizen.relativeX + xMoveNow);
				citizen.dynamicUnsavedVars.xMoveLeft -= xMoveNow;
			}
			if(xMoveNowSign > 0 && citizen.relativeX > 20) {
				if(hasRightBuildingOfSameType) {
					citizen.inPermanent = rightBuilding;
					citizen.setRelativeX(citizen.relativeX - 20);
				} else {
					citizen.dynamicUnsavedVars.xMoveLeft = 0;
				}
			}
			if(xMoveNowSign < 0 && citizen.relativeX < 0) {
				if(hasLeftBuildingOfSameType) {
					citizen.setRelativeX(citizen.relativeX + 20);
					citizen.inPermanent = leftBuilding;
				} else {
					citizen.dynamicUnsavedVars.xMoveLeft = 0;
				}
			}
		}
		if(Math.abs(citizen.dynamicUnsavedVars.yMoveLeft) > 0) {
			var num2 = citizen.dynamicUnsavedVars.yMoveLeft;
			var yMoveNowSign = num2 > 0 ? 1 : num2 < 0 ? -1 : 0;
			var yMoveNow = timeMod * yMoveNowSign;
			if(yMoveNowSign * yMoveNow > yMoveNowSign * citizen.dynamicUnsavedVars.yMoveLeft) {
				citizen.setRelativeY(citizen.relativeY + citizen.dynamicUnsavedVars.yMoveLeft);
				citizen.dynamicUnsavedVars.yMoveLeft = 0;
			} else {
				citizen.setRelativeY(citizen.relativeY + yMoveNow);
				citizen.dynamicUnsavedVars.yMoveLeft -= yMoveNow;
			}
			if(yMoveNowSign > 0 && citizen.relativeY > 20) {
				if(hasTopBuildingOfSameType) {
					citizen.inPermanent = topBuilding;
					citizen.setRelativeY(citizen.relativeY - 20);
				} else {
					citizen.dynamicUnsavedVars.yMoveLeft = 0;
				}
			}
			if(yMoveNowSign < 0 && citizen.relativeY < 0) {
				if(hasBottomBuildingOfSameType) {
					citizen.setRelativeY(citizen.relativeY + 20);
					citizen.inPermanent = bottomBuilding;
				} else {
					citizen.dynamicUnsavedVars.yMoveLeft = 0;
				}
			}
		}
		if(citizen.dynamicUnsavedVars.yMoveLeft == 0 && citizen.dynamicUnsavedVars.xMoveLeft == 0) {
			if(citizen.dynamicUnsavedVars.waitTime < 1) {
				citizen.dynamicUnsavedVars.waitTime += timeMod;
				return;
			}
			citizen.dynamicUnsavedVars.waitTime = 0.0;
			var r = random_Random.getInt(2);
			if(r == 0) {
				var remainingTop = 20 - citizen.relativeY - citizen.actualSpriteHeight - 4;
				if(this.get_hasTopNightClub() && (this.topBuilding.get_hasLeftNightClub() || citizen.relativeX >= 4) && (this.topBuilding.get_hasRightNightClub() || citizen.relativeX <= 14)) {
					remainingTop += 20;
				}
				var remainingBottom = 0.0;
				if(remainingTop < 10 || random_Random.getInt(2) == 0) {
					remainingBottom = citizen.relativeY - 4;
					if(this.get_hasBottomNightClub() && (this.bottomBuilding.get_hasLeftNightClub() || citizen.relativeX >= 4) && (this.bottomBuilding.get_hasRightNightClub() || citizen.relativeX <= 14)) {
						remainingBottom += 20;
					}
				}
				citizen.dynamicUnsavedVars.yMoveLeft = random_Random.getFloat(-remainingBottom,remainingTop);
			} else if(r == 1) {
				var remainingRight = 20 - citizen.relativeX - 2 - 4;
				if(this.get_hasRightNightClub() && (this.rightBuilding.get_hasBottomNightClub() || citizen.relativeY > 2) && (this.rightBuilding.get_hasTopNightClub() || citizen.relativeY < 20 - citizen.actualSpriteHeight - 4)) {
					remainingRight += 20;
				}
				var remainingLeft = citizen.relativeX - 4;
				if(this.get_hasLeftNightClub() && (this.leftBuilding.get_hasBottomNightClub() || citizen.relativeY > 2) && (this.leftBuilding.get_hasTopNightClub() || citizen.relativeY < 20 - citizen.actualSpriteHeight - 4)) {
					remainingLeft += 20;
				}
				citizen.dynamicUnsavedVars.xMoveLeft = random_Random.getFloat(-remainingLeft,remainingRight);
			}
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking && this.city.simulation.time.timeSinceStart / 60 % 24 > 6) {
			if(!citizen.inPermanent["is"](buildings_HighTechNightClub)) {
				citizen.setRelativeY(0);
				if(citizen.accessorySprite != null) {
					citizen.accessorySprite.destroy();
					citizen.accessorySprite = null;
				}
				citizen.currentAction = LifeAction.Nothing;
				return;
			}
			if(citizen.inPermanent.exitBuilding(citizen,timeMod)) {
				citizen.currentAction = LifeAction.Nothing;
			}
			return;
		}
		if(citizen.inPermanent != this) {
			if(!citizen.inPermanent["is"](buildings_HighTechNightClub) || !citizen.inPermanent.get_hasTopNightClub()) {
				return;
			}
		}
	}
	,createWindowAddBottomButtons: function() {
		buildings_Work.prototype.createWindowAddBottomButtons.call(this);
	}
	,exitBuilding: function(citizen,timeMod) {
		if(citizen.accessorySprite == null && citizen.relativeY <= 0) {
			return true;
		}
		var tmp;
		if(citizen.relativeX < 3) {
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			var tmp1;
			if(Math.abs(3 - citizen.relativeX) < spd) {
				citizen.relativeX = 3;
				tmp1 = true;
			} else {
				var num = 3 - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = false;
		}
		if(tmp) {
			return false;
		}
		var tmp2;
		if(citizen.relativeX > 16) {
			var spd1 = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			var tmp3;
			if(Math.abs(16 - citizen.relativeX) < spd1) {
				citizen.relativeX = 16;
				tmp3 = true;
			} else {
				var num1 = 16 - citizen.relativeX;
				citizen.relativeX += (num1 > 0 ? 1 : num1 < 0 ? -1 : 0) * spd1;
				tmp3 = false;
			}
			tmp2 = !tmp3;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			return false;
		}
		var hasLeftBuildingOfSameType = this.get_hasLeftNightClub();
		var leftBuilding = this.leftBuilding;
		var hasRightBuildingOfSameType = this.get_hasRightNightClub();
		var rightBuilding = this.rightBuilding;
		var hasTopBuildingOfSameType = this.get_hasTopNightClub();
		var topBuilding = this.topBuilding;
		var hasBottomBuildingOfSameType = this.get_hasBottomNightClub();
		var bottomBuilding = this.bottomBuilding;
		if(Math.abs(citizen.dynamicUnsavedVars.xMoveLeft) > 0) {
			var num2 = citizen.dynamicUnsavedVars.xMoveLeft;
			var xMoveNowSign = num2 > 0 ? 1 : num2 < 0 ? -1 : 0;
			var xMoveNow = timeMod * xMoveNowSign;
			if(xMoveNowSign * xMoveNow > xMoveNowSign * citizen.dynamicUnsavedVars.xMoveLeft) {
				citizen.setRelativeX(citizen.relativeX + citizen.dynamicUnsavedVars.xMoveLeft);
				citizen.dynamicUnsavedVars.xMoveLeft = 0;
			} else {
				citizen.setRelativeX(citizen.relativeX + xMoveNow);
				citizen.dynamicUnsavedVars.xMoveLeft -= xMoveNow;
			}
			if(xMoveNowSign > 0 && citizen.relativeX > 20) {
				if(hasRightBuildingOfSameType) {
					citizen.inPermanent = rightBuilding;
					citizen.setRelativeX(citizen.relativeX - 20);
				} else {
					citizen.dynamicUnsavedVars.xMoveLeft = 0;
				}
			}
			if(xMoveNowSign < 0 && citizen.relativeX < 0) {
				if(hasLeftBuildingOfSameType) {
					citizen.setRelativeX(citizen.relativeX + 20);
					citizen.inPermanent = leftBuilding;
				} else {
					citizen.dynamicUnsavedVars.xMoveLeft = 0;
				}
			}
		}
		if(Math.abs(citizen.dynamicUnsavedVars.yMoveLeft) > 0) {
			var num3 = citizen.dynamicUnsavedVars.yMoveLeft;
			var yMoveNowSign = num3 > 0 ? 1 : num3 < 0 ? -1 : 0;
			var yMoveNow = timeMod * yMoveNowSign;
			if(yMoveNowSign * yMoveNow > yMoveNowSign * citizen.dynamicUnsavedVars.yMoveLeft) {
				citizen.setRelativeY(citizen.relativeY + citizen.dynamicUnsavedVars.yMoveLeft);
				citizen.dynamicUnsavedVars.yMoveLeft = 0;
			} else {
				citizen.setRelativeY(citizen.relativeY + yMoveNow);
				citizen.dynamicUnsavedVars.yMoveLeft -= yMoveNow;
			}
			if(yMoveNowSign > 0 && citizen.relativeY > 20) {
				if(hasTopBuildingOfSameType) {
					citizen.inPermanent = topBuilding;
					citizen.setRelativeY(citizen.relativeY - 20);
				} else {
					citizen.dynamicUnsavedVars.yMoveLeft = 0;
				}
			}
			if(yMoveNowSign < 0 && citizen.relativeY < 0) {
				if(hasBottomBuildingOfSameType) {
					citizen.setRelativeY(citizen.relativeY + 20);
					citizen.inPermanent = bottomBuilding;
				} else {
					citizen.dynamicUnsavedVars.yMoveLeft = 0;
				}
			}
		}
		if(this.get_hasBottomNightClub()) {
			citizen.dynamicUnsavedVars.yMoveLeft = -citizen.relativeY - 15;
			return false;
		} else if(citizen.relativeY > 4) {
			citizen.dynamicUnsavedVars.yMoveLeft = -citizen.relativeY + 4;
			return false;
		}
		citizen.dynamicUnsavedVars.yMoveLeft = 0;
		citizen.dynamicUnsavedVars.xMoveLeft = 0;
		var spd2 = citizen.pathWalkSpeed * timeMod;
		Citizen.shouldUpdateDraw = true;
		var tmp4;
		if(Math.abs(9 - citizen.relativeX) < spd2) {
			citizen.relativeX = 9;
			tmp4 = true;
		} else {
			var num4 = 9 - citizen.relativeX;
			citizen.relativeX += (num4 > 0 ? 1 : num4 < 0 ? -1 : 0) * spd2;
			tmp4 = false;
		}
		if(!tmp4) {
			return false;
		}
		if(citizen.accessorySprite != null) {
			citizen.accessorySprite.destroy();
			citizen.accessorySprite = null;
		}
		if(citizen.relativeY > 0) {
			citizen.setRelativeY(Math.max(citizen.relativeY - timeMod * 0.5,0));
			return false;
		}
		return true;
	}
	,finishEntertainment: function(citizen,timeMod) {
		return this.exitBuilding(citizen,timeMod);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_HighTechNightClub.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_HighTechNightClub
});
var buildings_HoloGameHall = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.boostTeam2 = 0;
	this.boostTeam1 = 0;
	this.progressTeam2 = 0;
	this.progressTeam1 = 0;
	this.hasAtLeastOneVisitor = false;
	this.totalWidth = 18;
	this.coordinatorBuilding = null;
	this.gameInited = false;
	this.boosters = [];
	this.monsterSpriteTeam2 = null;
	this.monsterSpriteTeam1 = null;
	this.currentGameType = null;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.isEntertainment = true;
	this.currentGameType = 0;
	if(buildings_HoloGameHall.citizenClothesTexture == null) {
		buildings_HoloGameHall.citizenClothesTexture = Resources.getTexture("spr_hgh_citizenclothes_1");
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < 5) {
		var i = _g1++;
		_g.push([]);
	}
	this.blocks = _g;
};
$hxClasses["buildings.HoloGameHall"] = buildings_HoloGameHall;
buildings_HoloGameHall.__name__ = ["buildings","HoloGameHall"];
buildings_HoloGameHall.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_HoloGameHall.__super__ = Building;
buildings_HoloGameHall.prototype = $extend(Building.prototype,{
	get_baseEntertainmentCapacity: function() {
		return 60;
	}
	,get_isOpen: function() {
		var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
		if(!(this1 >= 12)) {
			return this1 < 2;
		} else {
			return true;
		}
	}
	,get_entertainmentType: function() {
		return 4;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 4;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 5;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 2;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 5;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_AutoMergingBuildingDrawer;
	}
	,get_hasLeftHoloGameHall: function() {
		if(this.leftBuilding != null) {
			return this.leftBuilding["is"](buildings_HoloGameHall);
		} else {
			return false;
		}
	}
	,get_hasRightHoloGameHall: function() {
		if(this.rightBuilding != null) {
			return this.rightBuilding["is"](buildings_HoloGameHall);
		} else {
			return false;
		}
	}
	,postCreate: function() {
		Building.prototype.postCreate.call(this);
		this.positionSprites();
		this.calculateCoordinatorBuilding();
		this.setGameType();
	}
	,onCityChange: function() {
		this.calculateCoordinatorBuilding();
		if(!this.get_hasRightHoloGameHall()) {
			var _g = 0;
			var _g1 = this.blocks[4];
			while(_g < _g1.length) {
				var block = _g1[_g];
				++_g;
				block.sprite.destroy();
			}
			this.blocks[4] = [];
		}
	}
	,calculateCoordinatorBuilding: function() {
		var prevCoordinatorBuilding = this.coordinatorBuilding;
		this.coordinatorBuilding = this;
		while(this.coordinatorBuilding.get_hasLeftHoloGameHall()) this.coordinatorBuilding = this.coordinatorBuilding.leftBuilding;
		if(this.coordinatorBuilding == this) {
			this.totalWidth = 18;
			var currentlyHandling = this;
			while(currentlyHandling.get_hasRightHoloGameHall()) {
				this.totalWidth += 20;
				currentlyHandling = currentlyHandling.rightBuilding;
			}
			if(prevCoordinatorBuilding != this) {
				this.resetSpaceShipGame();
			}
		}
		if(!this.get_hasLeftHoloGameHall() && !this.get_hasRightHoloGameHall() && this.currentGameType == 0) {
			this.currentGameType = 1;
			this.destroyHGHSprites();
			this.boosters = [];
		}
		if(this.currentGameType != this.coordinatorBuilding.currentGameType) {
			this.destroyHGHSprites();
			this.currentGameType = this.coordinatorBuilding.currentGameType;
		} else if(prevCoordinatorBuilding != this.coordinatorBuilding && this.coordinatorBuilding != this && this.currentGameType == 0) {
			this.destroyHGHSprites();
		}
	}
	,destroy: function() {
		Building.prototype.destroy.call(this);
		this.destroyHGHSprites();
	}
	,destroyHGHSprites: function() {
		if(this.monsterSpriteTeam1 != null) {
			this.monsterSpriteTeam1.destroy();
			this.monsterSpriteTeam1 = null;
		}
		if(this.monsterSpriteTeam2 != null) {
			this.monsterSpriteTeam2.destroy();
			this.monsterSpriteTeam2 = null;
		}
		var _g = 0;
		var _g1 = this.boosters;
		while(_g < _g1.length) {
			var booster = _g1[_g];
			++_g;
			if(booster.sprite != null) {
				booster.sprite.destroy();
			}
		}
		this.boosters = [];
		var _g2 = 0;
		var _g11 = this.blocks;
		while(_g2 < _g11.length) {
			var theseBlocks = _g11[_g2];
			++_g2;
			var _g21 = 0;
			while(_g21 < theseBlocks.length) {
				var block = theseBlocks[_g21];
				++_g21;
				block.sprite.destroy();
			}
		}
		var _g3 = [];
		var _g12 = 0;
		while(_g12 < 5) {
			var i = _g12++;
			_g3.push([]);
		}
		this.blocks = _g3;
	}
	,beEntertained: function(citizen,timeMod) {
		var _g = this.coordinatorBuilding.currentGameType;
		switch(_g) {
		case 0:
			this.beEntertainedSpaceShipBattle(citizen,timeMod);
			break;
		case 1:
			this.beEntertainedBlockGame(citizen,timeMod);
			break;
		}
		this.currentGameType = this.coordinatorBuilding.currentGameType;
	}
	,beEntertainedBlockGame: function(citizen,timeMod) {
		var _gthis = this;
		var xToGo = random_Random.getInt(4 + (this.get_hasRightHoloGameHall() ? 1 : 0));
		var r = random_Random.getInt(6);
		if(this.get_hasLeftHoloGameHall() && r == 0) {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[4].length > 0 ? pool[4].splice(pool[4].length - 1,1)[0] : new Int32Array(4);
			arr[0] = 2;
			arr[1] = 0;
			arr[2] = 4;
			arr[3] = 19;
			citizen.setPathWithEnd(arr,0,4,function() {
				citizen.hasBuildingInited = true;
			},true);
		} else if(this.get_hasRightHoloGameHall() && r == 1) {
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[4].length > 0 ? pool1[4].splice(pool1[4].length - 1,1)[0] : new Int32Array(4);
			arr1[0] = 3;
			arr1[1] = 0;
			arr1[2] = 4;
			arr1[3] = 0;
			citizen.setPathWithEnd(arr1,0,4,function() {
				citizen.hasBuildingInited = true;
			},true);
		} else {
			var tmp = 3 + xToGo * 4;
			var tmp1 = random_Random.getInt(45,90);
			citizen.moveAndWait(tmp,tmp1,function() {
				if(_gthis.coordinatorBuilding.currentGameType != 1 || xToGo == 4 && !_gthis.get_hasRightHoloGameHall()) {
					return;
				}
				if(_gthis.blocks[xToGo].length == 0 || _gthis.blocks[xToGo][_gthis.blocks[xToGo].length - 1].sprite.alpha >= 1) {
					if(_gthis.blocks[xToGo].length < 4) {
						_gthis.gameInited = true;
						var newBlockSprite = new PIXI.Sprite(Resources.getTexture("spr_hgh_block"));
						_gthis.bgStage.addChild(newBlockSprite);
						var this1 = [random_Random.getFloat(360),1,1];
						var col = this1;
						_gthis.blocks[xToGo].push({ sprite : newBlockSprite, color : col});
						newBlockSprite.alpha = 0.1;
						newBlockSprite.tint = common_ColorExtensions.toHexInt(thx_color__$Hsv_Hsv_$Impl_$.toRgb(col));
						newBlockSprite.position.set(_gthis.position.x + 2 + xToGo * 4,_gthis.position.y + 20 - 1 - 4 * _gthis.blocks[xToGo].length);
					} else {
						var blockToChange = random_Random.fromArray(_gthis.blocks[xToGo]);
						var this2 = [(blockToChange.color[0] + 5) % 360,1,1];
						blockToChange.color = this2;
						var tmp2 = thx_color__$Hsv_Hsv_$Impl_$.toRgb(blockToChange.color);
						blockToChange.sprite.tint = common_ColorExtensions.toHexInt(tmp2);
					}
				} else {
					var lastBlock = _gthis.blocks[xToGo][_gthis.blocks[xToGo].length - 1].sprite;
					lastBlock.alpha = Math.min(lastBlock.alpha + 0.1,1);
				}
			});
		}
	}
	,beEntertainedSpaceShipBattle: function(citizen,timeMod) {
		if(!citizen.hasBuildingInited || citizen.dynamicUnsavedVars.buildingInited == null) {
			citizen.dynamicUnsavedVars.hghTeam = random_Random.getInt(2);
			citizen.dynamicUnsavedVars.hghStarted = false;
			citizen.hasBuildingInited = true;
			citizen.dynamicUnsavedVars.focussingOnBoosters = random_Random.fromArray([false,false,true]);
			citizen.dynamicUnsavedVars.focussingOnBooster = random_Random.getInt(2);
			citizen.dynamicUnsavedVars.buildingInited = true;
		}
		if(!citizen.dynamicUnsavedVars.hghStarted) {
			var pleaseInit = false;
			if(citizen.dynamicUnsavedVars.hghTeam == 0) {
				if(this.get_hasLeftHoloGameHall()) {
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[4].length > 0 ? pool[4].splice(pool[4].length - 1,1)[0] : new Int32Array(4);
					arr[0] = 2;
					arr[1] = 0;
					arr[2] = 4;
					arr[3] = random_Random.getInt(1,19);
					citizen.setPathWithEnd(arr,0,4,function() {
						citizen.hasBuildingInited = true;
					},true);
				} else if(citizen.relativeX > 1) {
					citizen.setRelativeX(Math.max(1,citizen.relativeX - timeMod));
				} else {
					citizen.setRelativeX(1);
					pleaseInit = true;
				}
			} else if(this.get_hasRightHoloGameHall()) {
				var pool1 = pooling_Int32ArrayPool.pool;
				var arr1 = pool1[4].length > 0 ? pool1[4].splice(pool1[4].length - 1,1)[0] : new Int32Array(4);
				arr1[0] = 3;
				arr1[1] = 0;
				arr1[2] = 4;
				arr1[3] = random_Random.getInt(0,17);
				citizen.setPathWithEnd(arr1,0,4,function() {
					citizen.hasBuildingInited = true;
				},true);
			} else if(citizen.relativeX < 17) {
				citizen.setRelativeX(Math.min(17,citizen.relativeX + timeMod));
			} else {
				citizen.setRelativeX(17);
				pleaseInit = true;
			}
			if(pleaseInit) {
				citizen.dynamicUnsavedVars.hghStarted = true;
				this.coordinatorBuilding.hasAtLeastOneVisitor = true;
				if(citizen.accessorySprite == null) {
					citizen.accessorySprite = new PIXI.Sprite(buildings_HoloGameHall.citizenClothesTexture);
					citizen.accessorySprite.anchor.set(0,1);
					citizen.accessorySprite.alpha = 0.5;
					if(citizen.actualSpriteHeight == 4) {
						citizen.accessorySprite.position.set(0,1);
					}
					citizen.sprite.addChild(citizen.accessorySprite);
					citizen.addToWithAccessoryStage();
					if(citizen.dynamicUnsavedVars.hghTeam == 0) {
						citizen.accessorySprite.tint = 16711680;
					} else {
						citizen.accessorySprite.tint = 255;
					}
				}
			}
		} else {
			var totalRemWidth = this.coordinatorBuilding.totalWidth - buildings_HoloGameHall.monsterSize * 2;
			var theBoosters = this.coordinatorBuilding.boosters;
			if(!citizen.dynamicUnsavedVars.focussingOnBoosters && theBoosters.length > 0 && random_Random.getFloat(90) < timeMod) {
				citizen.dynamicUnsavedVars.focussingOnBoosters = true;
				citizen.dynamicUnsavedVars.focussingOnBooster = random_Random.getInt(theBoosters.length);
			}
			if(citizen.dynamicUnsavedVars.focussingOnBoosters) {
				if(theBoosters.length <= citizen.dynamicUnsavedVars.focussingOnBooster) {
					citizen.dynamicUnsavedVars.focussingOnBoosters = false;
				} else {
					var thisBooster = theBoosters[citizen.dynamicUnsavedVars.focussingOnBooster];
					var thisBoosterPos = this.coordinatorBuilding.position.x + thisBooster.xPos;
					if((citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).position.x + citizen.relativeX > thisBoosterPos && (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).position.x + citizen.relativeX < thisBoosterPos + buildings_HoloGameHall.boosterSpriteSize) {
						if(citizen.dynamicUnsavedVars.hghTeam == 0) {
							thisBooster.team1Ownership++;
						} else {
							thisBooster.team2Ownership++;
						}
						if(random_Random.getFloat(40) < timeMod) {
							citizen.dynamicUnsavedVars.focussingOnBoosters = false;
						}
					} else {
						citizen.moveTowardsRandomInWorldCoords(thisBoosterPos,thisBoosterPos + buildings_HoloGameHall.boosterSpriteSize - 1,function() {
							citizen.hasBuildingInited = true;
						});
					}
				}
			}
			if(!citizen.dynamicUnsavedVars.focussingOnBoosters) {
				if(citizen.dynamicUnsavedVars.hghTeam == 0) {
					var currentTeam1Pos = this.coordinatorBuilding.position.x + 1 + Math.floor(this.coordinatorBuilding.progressTeam1 * totalRemWidth);
					if((citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).position.x + citizen.relativeX > currentTeam1Pos && (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).position.x + citizen.relativeX < currentTeam1Pos + buildings_HoloGameHall.monsterSize - 1 && random_Random.getFloat(30) > timeMod) {
						this.coordinatorBuilding.progressTeam1 = Math.min(this.coordinatorBuilding.progressTeam1 + timeMod / (totalRemWidth * (10 + (20 - this.boostTeam1) * this.coordinatorBuilding.progressTeam1)),1);
						if(this.coordinatorBuilding.progressTeam1 + this.coordinatorBuilding.progressTeam2 > 1) {
							this.coordinatorBuilding.progressTeam2 = 1 - this.coordinatorBuilding.progressTeam1;
						}
					} else {
						citizen.moveTowardsRandomInWorldCoords(currentTeam1Pos,currentTeam1Pos + buildings_HoloGameHall.monsterSize - 1,function() {
							citizen.hasBuildingInited = true;
						});
					}
				} else {
					var currentTeam2Pos = this.coordinatorBuilding.position.x + this.coordinatorBuilding.totalWidth - buildings_HoloGameHall.monsterSize + 1 - Math.floor(this.coordinatorBuilding.progressTeam2 * totalRemWidth);
					if((citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).position.x + citizen.relativeX > currentTeam2Pos && (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).position.x + citizen.relativeX < currentTeam2Pos + buildings_HoloGameHall.monsterSize - 1 && random_Random.getFloat(30) > timeMod) {
						this.coordinatorBuilding.progressTeam2 = Math.min(this.coordinatorBuilding.progressTeam2 + timeMod / (totalRemWidth * (10 + (20 - this.boostTeam2) * this.coordinatorBuilding.progressTeam2)),1);
						if(this.coordinatorBuilding.progressTeam1 + this.coordinatorBuilding.progressTeam2 > 1) {
							this.coordinatorBuilding.progressTeam1 = 1 - this.coordinatorBuilding.progressTeam2;
						}
					} else {
						citizen.moveTowardsRandomInWorldCoords(currentTeam2Pos,currentTeam2Pos + buildings_HoloGameHall.monsterSize - 1,function() {
							citizen.hasBuildingInited = true;
						});
					}
				}
			}
		}
	}
	,onCitizenLeave: function(citizen,newPermanent) {
		if(newPermanent == null || !newPermanent["is"](buildings_HoloGameHall)) {
			if(citizen.accessorySprite != null) {
				citizen.accessorySprite.destroy();
				citizen.accessorySprite = null;
				citizen.addToCorrectStage();
			}
		}
	}
	,positionSprites: function() {
		Building.prototype.positionSprites.call(this);
		if(this.coordinatorBuilding == this) {
			this.positionHGHSprites();
		}
	}
	,createWindowAddBottomButtons: function() {
		Building.prototype.createWindowAddBottomButtons.call(this);
	}
	,update: function(timeMod) {
		Building.prototype.update.call(this,timeMod);
		var _g = this.currentGameType;
		switch(_g) {
		case 0:
			this.updateSpaceShipGame(timeMod);
			break;
		case 1:
			this.updateBlockGame(timeMod);
			break;
		}
	}
	,updateBlockGame: function(timeMod) {
		if(!this.get_isOpen()) {
			if(this.gameInited && this.city.simulation.time.timeSinceStart / 60 % 24 > 4) {
				this.destroyHGHSprites();
				this.gameInited = false;
				if(this.coordinatorBuilding == this) {
					this.setGameType();
				}
			}
		}
	}
	,updateSpaceShipGame: function(timeMod) {
		if(this.coordinatorBuilding == this) {
			if(!this.get_isOpen()) {
				if(this.gameInited) {
					this.stopSpaceShipGame();
				}
			} else if(this.hasAtLeastOneVisitor) {
				this.gameInited = true;
				this.boostTeam1 = 0;
				this.boostTeam2 = 0;
				if(this.monsterSpriteTeam1 == null) {
					this.monsterSpriteTeam1 = new PIXI.Sprite(Resources.getTexture("spr_hgh_monster_1"));
					this.monsterSpriteTeam1.tint = 16711680;
					this.bgStage.addChild(this.monsterSpriteTeam1);
				}
				if(this.monsterSpriteTeam2 == null) {
					this.monsterSpriteTeam2 = new PIXI.Sprite(Resources.getTexture("spr_hgh_monster_1"));
					this.monsterSpriteTeam2.scale.set(-1,1);
					this.monsterSpriteTeam2.tint = 255;
					this.bgStage.addChild(this.monsterSpriteTeam2);
				}
				var i = this.boosters.length;
				while(--i >= 0) {
					var booster = this.boosters[i];
					if(booster.xPos > this.totalWidth - buildings_HoloGameHall.boosterSpriteSize) {
						booster.sprite.destroy();
						this.boosters.splice(i,1);
						continue;
					}
					booster.age += timeMod;
					if(booster.team1Ownership > booster.team2Ownership) {
						booster.sprite.tint = 16711680;
						this.boostTeam1 += 11;
					} else if(booster.team2Ownership > booster.team1Ownership) {
						booster.sprite.tint = 255;
						this.boostTeam2 += 11;
					}
					booster.team1Ownership = 0;
					booster.team2Ownership = 0;
					if(booster.isFadingOut) {
						booster.sprite.alpha -= 0.1 * timeMod;
						if(booster.sprite.alpha < 0) {
							booster.sprite.destroy();
							this.boosters.splice(i,1);
						}
					} else if(booster.age >= 200 && random_Random.getFloat(50) < timeMod && i == this.boosters.length - 1) {
						booster.isFadingOut = true;
					} else if(booster.sprite.alpha < 1) {
						booster.sprite.alpha = Math.min(1,booster.sprite.alpha + 0.1 * timeMod);
					}
				}
				if(this.boosters.length < 2 && random_Random.getFloat(100) < timeMod) {
					var xPos = -1;
					var tries = 0;
					while(tries < 10) {
						xPos = random_Random.getInt(this.totalWidth - buildings_HoloGameHall.boosterSpriteSize);
						var failed = false;
						var _g = 0;
						var _g1 = this.boosters;
						while(_g < _g1.length) {
							var booster1 = _g1[_g];
							++_g;
							if(xPos > booster1.xPos - buildings_HoloGameHall.boosterSpriteSize && xPos < booster1.xPos + buildings_HoloGameHall.boosterSpriteSize) {
								failed = true;
							}
						}
						if(!failed) {
							break;
						}
						++tries;
					}
					if(tries < 10) {
						var spr = new PIXI.Sprite(Resources.getTexture("spr_hgh_booster"));
						spr.alpha = 0;
						this.bgStage.addChild(spr);
						this.boosters.push({ xPos : xPos, team2Ownership : 0, team1Ownership : 0, sprite : spr, isFadingOut : false, age : 0});
					}
				}
				this.positionHGHSprites();
			}
		}
	}
	,resetSpaceShipGame: function() {
		this.progressTeam1 = 0;
		this.progressTeam2 = 0;
		this.gameInited = false;
		this.destroyHGHSprites();
		this.hasAtLeastOneVisitor = false;
		this.boosters = [];
	}
	,stopSpaceShipGame: function() {
		this.resetSpaceShipGame();
		this.setGameType();
	}
	,setGameType: function() {
		var _g = random_Random.getInt(1 + (this.get_hasRightHoloGameHall() || this.get_hasLeftHoloGameHall() ? 1 : 0));
		var tmp;
		switch(_g) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 0;
			break;
		default:
			tmp = 1;
		}
		this.currentGameType = tmp;
	}
	,positionHGHSprites: function() {
		var totalRemWidth = this.totalWidth - buildings_HoloGameHall.monsterSize * 2;
		if(this.monsterSpriteTeam1 != null) {
			this.monsterSpriteTeam1.position.set(this.position.x + 1 + Math.floor(this.progressTeam1 * totalRemWidth),this.position.y + 2);
		}
		if(this.monsterSpriteTeam2 != null) {
			this.monsterSpriteTeam2.position.set(this.position.x + this.totalWidth + 1 - Math.ceil(this.progressTeam2 * totalRemWidth),this.position.y + 2);
		}
		var _g = 0;
		var _g1 = this.boosters;
		while(_g < _g1.length) {
			var booster = _g1[_g];
			++_g;
			booster.sprite.position.set(this.position.x + booster.xPos,this.position.y + 20 - 9);
		}
		var _g11 = 0;
		var _g2 = this.blocks.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var theseBlocks = this.blocks[i];
			var _g3 = 0;
			var _g21 = theseBlocks.length;
			while(_g3 < _g21) {
				var j = _g3++;
				theseBlocks[j].sprite.position.set(this.position.x + 2 + i * 4,this.position.y + 20 - 5 - 4 * j);
			}
		}
	}
	,__class__: buildings_HoloGameHall
});
var buildings_HyperElevator = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.timesUsedTo = 0;
	this.timesUsed = 0;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.doorX = 8;
	this.doorTextures = Resources.getTexturesByWidth("spr_hyperelevator_door",10);
	this.doorSprite = new PIXI.Sprite(this.doorTextures[0]);
	bgStage.addChild(this.doorSprite);
	this.doorSprite.position.set(position.x + 5,position.y + 10);
	this.doorFullyOpenFor = 0;
	this.currentDoorTexture = 0;
	this.relocateSprite();
};
$hxClasses["buildings.HyperElevator"] = buildings_HyperElevator;
buildings_HyperElevator.__name__ = ["buildings","HyperElevator"];
buildings_HyperElevator.__super__ = Building;
buildings_HyperElevator.prototype = $extend(Building.prototype,{
	get_typeID: function() {
		return 4;
	}
	,positionSprites: function() {
		Building.prototype.positionSprites.call(this);
		this.relocateSprite();
	}
	,relocateSprite: function() {
		this.doorSprite.parent.removeChild(this.doorSprite);
		if(this.worldPosition.y == 0) {
			this.stage.addChild(this.doorSprite);
		} else {
			this.bgStage.addChild(this.doorSprite);
		}
		this.doorSprite.position.set(this.position.x + 5,this.position.y + 10);
	}
	,update: function(timeMod) {
		Building.prototype.update.call(this,timeMod);
		if(this.doorFullyOpenFor > 0) {
			this.doorFullyOpenFor -= timeMod;
			var val = this.currentDoorTexture + 0.5 * timeMod;
			var maxVal = this.doorTextures.length - 1;
			this.currentDoorTexture = val < 0 ? 0 : val > maxVal ? maxVal : val;
			this.updateCurrentDoorTexture();
		} else {
			var val1 = this.currentDoorTexture - 0.5 * timeMod;
			var maxVal1 = this.doorTextures.length - 1;
			this.currentDoorTexture = val1 < 0 ? 0 : val1 > maxVal1 ? maxVal1 : val1;
			this.updateCurrentDoorTexture();
		}
	}
	,openDoor: function() {
		this.doorFullyOpenFor = 45;
		return this.currentDoorTexture >= this.doorTextures.length - 1.01;
	}
	,updateCurrentDoorTexture: function() {
		this.doorSprite.texture = this.doorTextures[Math.floor(this.currentDoorTexture)];
	}
	,destroy: function() {
		Building.prototype.destroy.call(this);
		this.doorSprite.destroy();
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		Building.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "Elevator entered here " + _gthis.timesUsed + " times.";
		});
		this.city.gui.windowAddInfoText(null,function() {
			return "Elevator left here " + _gthis.timesUsedTo + " times.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_HyperElevator.saveDefinition);
		}
		var value = this.timesUsed;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.timesUsedTo;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["timesUsed"] != null ? loadMap.existsReserved("timesUsed") : loadMap.h.hasOwnProperty("timesUsed")) {
			this.timesUsed = __map_reserved["timesUsed"] != null ? loadMap.getReserved("timesUsed") : loadMap.h["timesUsed"];
		}
		if(__map_reserved["timesUsedTo"] != null ? loadMap.existsReserved("timesUsedTo") : loadMap.h.hasOwnProperty("timesUsedTo")) {
			this.timesUsedTo = __map_reserved["timesUsedTo"] != null ? loadMap.getReserved("timesUsedTo") : loadMap.h["timesUsedTo"];
		}
	}
	,__class__: buildings_HyperElevator
});
var buildings_IMedicalBuilding = function() { };
$hxClasses["buildings.IMedicalBuilding"] = buildings_IMedicalBuilding;
buildings_IMedicalBuilding.__name__ = ["buildings","IMedicalBuilding"];
buildings_IMedicalBuilding.prototype = {
	__class__: buildings_IMedicalBuilding
};
var buildings_IndoorFarm = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.percentCleaned = 0;
	this.foodLeft = 0;
	this.percentGrown = 0;
	this.farmStage = buildings_FarmStage.Growing;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.textures = Resources.getTexturesByWidth("spr_indoorfarm_crops",20);
	this.growthSprite = new PIXI.Sprite();
	bgStage.addChild(this.growthSprite);
	this.updateTexture();
	this.positionSprites();
	this.doorX = 12;
	this.adjecentBuildingEffects.push({ name : "farm", intensity : 1});
};
$hxClasses["buildings.IndoorFarm"] = buildings_IndoorFarm;
buildings_IndoorFarm.__name__ = ["buildings","IndoorFarm"];
buildings_IndoorFarm.__super__ = buildings_Work;
buildings_IndoorFarm.prototype = $extend(buildings_Work.prototype,{
	postLoad: function() {
		this.updateTexture();
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		var _gthis = this;
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			var timeMin = (this.farmStage == buildings_FarmStage.Harvesting ? 15 : 30) / this.city.simulation.happiness.actionSpeedModifierWithoutPenalties | 0;
			var timeMax = (this.farmStage == buildings_FarmStage.Harvesting ? 30 : 60) / this.city.simulation.happiness.actionSpeedModifierWithoutPenalties | 0;
			citizen.moveAndWait(random_Random.getInt(3,15),random_Random.getInt(timeMin,timeMax),function() {
				var _g = _gthis.farmStage;
				switch(_g[1]) {
				case 0:
					_gthis.percentGrown += 1.15 * _gthis.city.simulation.bonuses.indoorFarmSpeed;
					if(_gthis.percentGrown >= 100) {
						_gthis.farmStage = buildings_FarmStage.Harvesting;
						var tmp = 25 + _gthis.city.simulation.bonuses.extraFoodFromFarms;
						var tmp1 = _gthis.getEffectsOfAdjecentBuildings("increaseCropNumber");
						_gthis.foodLeft = tmp + tmp1;
					}
					_gthis.updateTexture();
					break;
				case 1:
					var currentHarvestAmount = 0.25 * _gthis.city.simulation.boostManager.currentGlobalBoostAmount;
					_gthis.foodLeft -= currentHarvestAmount;
					var _g1 = _gthis.city.materials;
					_g1.set_food(_g1.food + currentHarvestAmount);
					_gthis.city.simulation.stats.materialProduction[0][0] += currentHarvestAmount;
					if(_gthis.foodLeft <= 0) {
						_gthis.percentCleaned = 0;
						_gthis.farmStage = buildings_FarmStage.Cleaning;
					}
					_gthis.updateTexture();
					break;
				case 2:
					_gthis.percentCleaned += 5;
					if(_gthis.percentCleaned >= 100) {
						_gthis.farmStage = buildings_FarmStage.Growing;
						_gthis.percentGrown = 0;
					}
					_gthis.updateTexture();
					break;
				}
			},false,false);
		}
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		this.bgStage.removeChild(this.growthSprite);
	}
	,update: function(timeMod) {
		if(this.farmStage == buildings_FarmStage.Growing) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = 7;
			var end = 20;
			if(start < end ? this1 >= start && this1 < end : this1 >= start || this1 < end) {
				this.percentGrown += timeMod * 0.018 * this.city.simulation.bonuses.indoorFarmSpeed;
				if(this.percentGrown >= 100) {
					this.farmStage = buildings_FarmStage.Harvesting;
					this.foodLeft = 25 + this.city.simulation.bonuses.extraFoodFromFarms + this.getEffectsOfAdjecentBuildings("increaseCropNumber");
				}
				this.updateTexture();
			} else {
				var this2 = this.city.simulation.time.timeSinceStart / 60 % 24;
				var start1 = 7 - 1;
				var end1 = 20 + 1;
				if(start1 < end1 ? this2 >= start1 && this2 < end1 : this2 >= start1 || this2 < end1) {
					this.percentGrown += timeMod * 0.009 * this.city.simulation.bonuses.indoorFarmSpeed;
					if(this.percentGrown >= 100) {
						this.farmStage = buildings_FarmStage.Harvesting;
						this.foodLeft = 25 + this.city.simulation.bonuses.extraFoodFromFarms + this.getEffectsOfAdjecentBuildings("increaseCropNumber");
					}
					this.updateTexture();
				}
			}
		}
	}
	,grow: function(percent) {
		this.percentGrown += percent;
		if(this.percentGrown >= 100) {
			this.farmStage = buildings_FarmStage.Harvesting;
			this.foodLeft = 25 + this.city.simulation.bonuses.extraFoodFromFarms + this.getEffectsOfAdjecentBuildings("increaseCropNumber");
		}
		this.updateTexture();
	}
	,updateTexture: function() {
		var _g = this.farmStage;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = this.textures[Math.floor(this.percentGrown / 100 * (this.textures.length - 2))];
			break;
		case 1:
			tmp = this.textures[this.textures.length - 2];
			break;
		case 2:
			tmp = this.textures[this.textures.length - 1];
			break;
		}
		this.growthSprite.texture = tmp;
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		if(this.growthSprite != null) {
			this.growthSprite.position.set(this.position.x,this.position.y);
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			var _g = _gthis.farmStage;
			switch(_g[1]) {
			case 0:
				return "Crops " + Math.floor(_gthis.percentGrown) + "% grown.";
			case 1:
				return "" + Math.floor(_gthis.foodLeft) + " food left to harvest.";
			case 2:
				return "Old crops " + Math.floor(_gthis.percentCleaned) + "% cleaned.";
			}
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_IndoorFarm.saveDefinition);
		}
		queue.addString(this.farmStage[0]);
		var value = this.percentGrown;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.foodLeft;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.percentCleaned;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["farmStage"] != null ? loadMap.existsReserved("farmStage") : loadMap.h.hasOwnProperty("farmStage")) {
			this.farmStage = __map_reserved["farmStage"] != null ? loadMap.getReserved("farmStage") : loadMap.h["farmStage"];
		}
		if(__map_reserved["percentGrown"] != null ? loadMap.existsReserved("percentGrown") : loadMap.h.hasOwnProperty("percentGrown")) {
			this.percentGrown = __map_reserved["percentGrown"] != null ? loadMap.getReserved("percentGrown") : loadMap.h["percentGrown"];
		}
		if(__map_reserved["foodLeft"] != null ? loadMap.existsReserved("foodLeft") : loadMap.h.hasOwnProperty("foodLeft")) {
			this.foodLeft = __map_reserved["foodLeft"] != null ? loadMap.getReserved("foodLeft") : loadMap.h["foodLeft"];
		}
		if(__map_reserved["percentCleaned"] != null ? loadMap.existsReserved("percentCleaned") : loadMap.h.hasOwnProperty("percentCleaned")) {
			this.percentCleaned = __map_reserved["percentCleaned"] != null ? loadMap.getReserved("percentCleaned") : loadMap.h["percentCleaned"];
		}
		this.postLoad();
	}
	,__class__: buildings_IndoorFarm
});
var buildings_Laboratory = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.anyoneHasWorkedHere = false;
	this.totalKnowledgeGenerated = 0;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.normalDrawer = this.drawer;
	this.originalBackTexture = Resources.getTexturesByWidth("spr_laboratory",20)[2];
	this.noLightBackTexture = Resources.getTexture("spr_laboratory_lightsoff");
	this.backSprite = new PIXI.Sprite(this.originalBackTexture);
	this.backSprite.position.set(position.x,position.y);
	bgStage.addChild(this.backSprite);
};
$hxClasses["buildings.Laboratory"] = buildings_Laboratory;
buildings_Laboratory.__name__ = ["buildings","Laboratory"];
buildings_Laboratory.__super__ = buildings_Work;
buildings_Laboratory.prototype = $extend(buildings_Work.prototype,{
	get_possibleUpgrades: function() {
		return [buildingUpgrades_FarmingResearch,buildingUpgrades_TreePlantationResearch];
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		if(this.backSprite != null) {
			this.backSprite.position.set(this.position.x,this.position.y);
		}
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		if(this.backSprite != null) {
			this.bgStage.removeChild(this.backSprite);
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			this.anyoneHasWorkedHere = true;
			if(citizen.isAtGroundLevel()) {
				var positionInArray = this.workers.indexOf(citizen);
				citizen.setRelativePos(positionInArray == 0 ? 5 : 13,9);
			} else {
				var newKnowledge = 0.00125 * timeMod * this.city.simulation.happiness.actionSpeedModifier * this.city.simulation.bonuses.labSpeed * citizen.get_educationSpeedModifier() * this.city.simulation.boostManager.currentGlobalBoostAmount;
				this.city.materials.knowledge += newKnowledge;
				this.city.simulation.stats.materialProduction[8][0] += newKnowledge;
				this.totalKnowledgeGenerated += newKnowledge;
			}
		}
	}
	,update: function(timeMod) {
		this.backSprite.texture = this.anyoneHasWorkedHere ? this.originalBackTexture : this.noLightBackTexture;
		this.anyoneHasWorkedHere = false;
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalKnowledgeGenerated | 0) + " knowledge gathered.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Laboratory.saveDefinition);
		}
		var value = this.totalKnowledgeGenerated;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["totalKnowledgeGenerated"] != null ? loadMap.existsReserved("totalKnowledgeGenerated") : loadMap.h.hasOwnProperty("totalKnowledgeGenerated")) {
			this.totalKnowledgeGenerated = __map_reserved["totalKnowledgeGenerated"] != null ? loadMap.getReserved("totalKnowledgeGenerated") : loadMap.h["totalKnowledgeGenerated"];
		}
	}
	,__class__: buildings_Laboratory
});
var buildings_LandedExplorationShip = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.doorX = 4;
};
$hxClasses["buildings.LandedExplorationShip"] = buildings_LandedExplorationShip;
buildings_LandedExplorationShip.__name__ = ["buildings","LandedExplorationShip"];
buildings_LandedExplorationShip.__super__ = buildings_House;
buildings_LandedExplorationShip.prototype = $extend(buildings_House.prototype,{
	get_possibleUpgrades: function() {
		return [];
	}
	,get_baseAttractiveness: function() {
		return 50;
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var r = random_Random.getInt(3);
		if(citizen.relativeX > 11) {
			citizen.setRelativeX(11);
		}
		if(citizen.relativeX <= 1) {
			citizen.setRelativeX(2);
		}
		if(r == 1) {
			citizen.moveAndWait(random_Random.getInt(4,5),random_Random.getInt(30,60),null,false,false);
		} else if(r == 2) {
			citizen.moveAndWait(random_Random.getInt(9,12),random_Random.getInt(30,60),null,false,false);
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = random_Random.getInt(90,120);
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,addWindowInfoLines: function() {
		this.city.gui.windowAddInfoText(null,function() {
			return "Used as a house.";
		});
		buildings_House.prototype.addWindowInfoLines.call(this);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_House.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_LandedExplorationShip.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_House.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_LandedExplorationShip
});
var buildings_LandingSite = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.saucerType = 0;
	this.timesUsedStopOver = 0;
	this.timesUsedTo = 0;
	this.timesUsed = 0;
	this.landingSiteGroup = 0;
	this.currentlyLandedSaucer = null;
	this.hasFlyingSaucer = true;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	city.landingSites.push(this);
	this.doorX = 15;
	this.connectedWaypoint = null;
	this.flyingSaucerSprite = Resources.makeSprite("spr_flyingsaucer");
	this.flyingSaucerSprite.position.set(position.x,position.y);
	stage.addChild(this.flyingSaucerSprite);
};
$hxClasses["buildings.LandingSite"] = buildings_LandingSite;
buildings_LandingSite.__name__ = ["buildings","LandingSite"];
buildings_LandingSite.__super__ = Building;
buildings_LandingSite.prototype = $extend(Building.prototype,{
	get_typeID: function() {
		return 2;
	}
	,get_saucherTexture: function() {
		var _g = this.saucerType;
		switch(_g) {
		case 0:
			return "spr_flyingsaucer";
		case 1:
			return "spr_flyingsaucer_alt";
		case 2:
			return "spr_flowercraft";
		case 3:
			return "spr_flyingsaucer_cube";
		case 4:
			return "spr_flyingsaucer_deepblue";
		case 5:
			return "spr_flyingsaucer_shade";
		default:
			return "spr_flyingsaucer";
		}
	}
	,get_mainTexture: function() {
		var _g = this.saucerType;
		switch(_g) {
		case 0:
			return buildings_LandingSite.spriteName;
		case 1:
			return "spr_landingplace_alt";
		case 4:
			return "spr_landingplace_deepblue";
		default:
			return buildings_LandingSite.spriteName;
		}
	}
	,postLoad: function() {
		var tmp = this.get_saucherTexture();
		this.flyingSaucerSprite.texture = Resources.getTexture(tmp);
		this.drawer.changeMainTexture(this.get_mainTexture());
	}
	,positionSprites: function() {
		Building.prototype.positionSprites.call(this);
		if(this.flyingSaucerSprite != null) {
			this.flyingSaucerSprite.position.set(this.position.x,this.position.y);
		}
	}
	,update: function(timeMod) {
		Building.prototype.update.call(this,timeMod);
		if(this.timeUntilCanGetNewFlyingSaucer > 0) {
			this.timeUntilCanGetNewFlyingSaucer -= timeMod;
		} else if(this.gettingNewFlyingSaucerStage > 0) {
			this.gettingNewFlyingSaucerStage -= timeMod;
			this.flyingSaucerSprite.position.set(this.position.x,this.position.y - Math.max(0,this.gettingNewFlyingSaucerStage * 0.25));
			this.flyingSaucerSprite.alpha = 1 - this.gettingNewFlyingSaucerStage / 16;
			if(this.gettingNewFlyingSaucerStage <= 0) {
				this.hasFlyingSaucer = true;
			}
		}
	}
	,destroy: function() {
		HxOverrides.remove(this.city.landingSites,this);
		this.stage.removeChild(this.flyingSaucerSprite);
		var i = this.city.simulation.flyingSaucers.length;
		while(--i >= 0) if(this.city.simulation.flyingSaucers[i].destination == this) {
			this.city.simulation.flyingSaucers[i].cancel();
		}
		Building.prototype.destroy.call(this);
	}
	,addFlyingSaucer: function() {
		if(!this.hasFlyingSaucer) {
			this.hasFlyingSaucer = true;
			this.flyingSaucerSprite.alpha = 1;
			this.flyingSaucerSprite.position.set(this.position.x,this.position.y);
		}
	}
	,removeFlyingSaucer: function() {
		if(this.hasFlyingSaucer) {
			this.hasFlyingSaucer = false;
			this.flyingSaucerSprite.alpha = 0;
			this.gettingNewFlyingSaucerStage = 16;
			this.timeUntilCanGetNewFlyingSaucer = 30;
		}
	}
	,estimatedFlyingDistanceTo: function(site) {
		return (Math.abs(site.position.x - this.position.x) + Math.abs(site.position.y - this.position.y)) / 3;
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		Building.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			var val2 = _gthis.timesUsed - _gthis.timesUsedStopOver;
			return "Transported from " + (val2 > 0 ? val2 : 0) + " times.";
		});
		this.city.gui.windowAddInfoText(null,function() {
			return "Transported to " + _gthis.timesUsedTo + " times.";
		});
		this.city.gui.windowAddInfoText(null,function() {
			return "Used as stopover " + _gthis.timesUsedStopOver + " times.";
		});
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		if(Settings.hasSecretCode("hangar")) {
			gui_windowParts_CycleValueButton.create(this.city.gui,function() {
				return _gthis.saucerType;
			},function(t) {
				_gthis.saucerType = t;
				var tmp = _gthis.get_saucherTexture();
				_gthis.flyingSaucerSprite.texture = Resources.getTexture(tmp);
				_gthis.drawer.changeMainTexture(_gthis.get_mainTexture());
			},function() {
				return 6;
			},"Change Space Ship");
		}
		Building.prototype.createWindowAddBottomButtons.call(this);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_LandingSite.saveDefinition);
		}
		var value = this.timesUsed;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.timesUsedTo;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var value2 = this.timesUsedStopOver;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
		var value3 = this.saucerType;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value3);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["timesUsed"] != null ? loadMap.existsReserved("timesUsed") : loadMap.h.hasOwnProperty("timesUsed")) {
			this.timesUsed = __map_reserved["timesUsed"] != null ? loadMap.getReserved("timesUsed") : loadMap.h["timesUsed"];
		}
		if(__map_reserved["timesUsedTo"] != null ? loadMap.existsReserved("timesUsedTo") : loadMap.h.hasOwnProperty("timesUsedTo")) {
			this.timesUsedTo = __map_reserved["timesUsedTo"] != null ? loadMap.getReserved("timesUsedTo") : loadMap.h["timesUsedTo"];
		}
		if(__map_reserved["timesUsedStopOver"] != null ? loadMap.existsReserved("timesUsedStopOver") : loadMap.h.hasOwnProperty("timesUsedStopOver")) {
			this.timesUsedStopOver = __map_reserved["timesUsedStopOver"] != null ? loadMap.getReserved("timesUsedStopOver") : loadMap.h["timesUsedStopOver"];
		}
		if(__map_reserved["saucerType"] != null ? loadMap.existsReserved("saucerType") : loadMap.h.hasOwnProperty("saucerType")) {
			this.saucerType = __map_reserved["saucerType"] != null ? loadMap.getReserved("saucerType") : loadMap.h["saucerType"];
		}
		this.postLoad();
	}
	,__class__: buildings_LandingSite
});
var buildings_Library = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 14;
	this.endTime = 22;
	this.workTimePreferenceMod = 0.5;
	this.isEntertainment = true;
};
$hxClasses["buildings.Library"] = buildings_Library;
buildings_Library.__name__ = ["buildings","Library"];
buildings_Library.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_Library.__super__ = buildings_Work;
buildings_Library.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 50;
	}
	,get_isOpen: function() {
		if(this.workers.length == 1 && this.workers[0].currentAction == LifeAction.Work) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = this.startTime - this.workTimePreferenceMod;
			if(start < 22) {
				if(this1 >= start) {
					return this1 < 22;
				} else {
					return false;
				}
			} else if(!(this1 >= start)) {
				return this1 < 22;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 5;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 2;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 5;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
	}
	,beEntertained: function(citizen,timeMod) {
		var moveFunction = function() {
			if(citizen.relativeY < 5) {
				var moveToX = random_Random.getInt(3,7);
				var pool = pooling_Int32ArrayPool.pool;
				var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
				arr[0] = 4;
				arr[1] = moveToX;
				citizen.setPath(arr,0,2,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
			} else {
				var moveToX1 = random_Random.getInt(3,16);
				var pool1 = pooling_Int32ArrayPool.pool;
				var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
				arr1[0] = 4;
				arr1[1] = moveToX1;
				citizen.setPath(arr1,0,2,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
			}
		};
		if(random_Random.getInt(2) == 1) {
			citizen.changeFloor(moveFunction);
		} else {
			var pool2 = pooling_Int32ArrayPool.pool;
			var arr2 = pool2[2].length > 0 ? pool2[2].splice(pool2[2].length - 1,1)[0] : new Int32Array(2);
			arr2[0] = 8;
			arr2[1] = random_Random.getInt(120,180);
			citizen.setPath(arr2,0,2,true);
			citizen.pathEndFunction = moveFunction;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
		if(!citizen.hasBuildingInited) {
			citizen.educationLevel = Math.max(Math.min(citizen.educationLevel + 0.025,1.5),citizen.educationLevel);
			citizen.hasBuildingInited = true;
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking && this.city.simulation.time.timeSinceStart / 60 % 24 > 22) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(12 - citizen.relativeX) < spd) {
				citizen.relativeX = 12;
			} else {
				var num = 12 - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
			}
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Library.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_Library
});
var buildings_LivingResearchCenter = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.totalKnowledgeGenerated = 0;
	buildings_WorkWithHome.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.LivingResearchCenter"] = buildings_LivingResearchCenter;
buildings_LivingResearchCenter.__name__ = ["buildings","LivingResearchCenter"];
buildings_LivingResearchCenter.__super__ = buildings_WorkWithHome;
buildings_LivingResearchCenter.prototype = $extend(buildings_WorkWithHome.prototype,{
	get_possibleCityUpgrades: function() {
		return [cityUpgrades_SpaciousLiving,cityUpgrades_SlimyLiving,cityUpgrades_SecretiveLiving,cityUpgrades_MechanicalLiving,cityUpgrades_SuperSpaciousLiving];
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var r = random_Random.getInt(3);
		if(citizen.relativeY < 5) {
			citizen.changeFloorAndWaitRandom(30,60);
		} else if(r == 1) {
			if(random_Random.getInt(2) == 0) {
				citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(30,60),null,false,false);
			} else {
				citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(30,60),null,false,false);
			}
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = random_Random.getInt(90,120);
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			return;
		}
		if(citizen.relativeY < 2) {
			if(random_Random.getInt(2) == 0) {
				citizen.moveAndWait(random_Random.getInt(3,6),random_Random.getInt(60,120),null,false,true);
			} else {
				citizen.moveAndWait(random_Random.getInt(13,14),random_Random.getInt(60,120),null,false,true);
			}
		} else if(random_Random.getInt(2) == 0) {
			citizen.moveAndWait(random_Random.getInt(3,15),random_Random.getInt(60,120),null,false,true);
		}
		var newKnowledge = 0.10799999999999998 * citizen.get_educationSpeedModifier() * this.city.simulation.boostManager.currentGlobalBoostAmount;
		this.city.materials.knowledge += newKnowledge;
		this.city.simulation.stats.materialProduction[8][0] += newKnowledge;
		this.totalKnowledgeGenerated += newKnowledge;
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_WorkWithHome.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalKnowledgeGenerated | 0) + " knowledge gathered.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_WorkWithHome.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_LivingResearchCenter.saveDefinition);
		}
		var value = this.totalKnowledgeGenerated;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_WorkWithHome.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["totalKnowledgeGenerated"] != null ? loadMap.existsReserved("totalKnowledgeGenerated") : loadMap.h.hasOwnProperty("totalKnowledgeGenerated")) {
			this.totalKnowledgeGenerated = __map_reserved["totalKnowledgeGenerated"] != null ? loadMap.getReserved("totalKnowledgeGenerated") : loadMap.h["totalKnowledgeGenerated"];
		}
	}
	,__class__: buildings_LivingResearchCenter
});
var buildings_MachinePartsFactory = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.materialsMadePerStepPerWorker = 0.0015;
	buildings_MaterialConvertingFactory.call(this,game,stage,bgStage,city,world,position,worldPosition,id,"spr_machinepartsfactory_frames","spr_machinepartsfactory_idle");
};
$hxClasses["buildings.MachinePartsFactory"] = buildings_MachinePartsFactory;
buildings_MachinePartsFactory.__name__ = ["buildings","MachinePartsFactory"];
buildings_MachinePartsFactory.__super__ = buildings_MaterialConvertingFactory;
buildings_MachinePartsFactory.prototype = $extend(buildings_MaterialConvertingFactory.prototype,{
	get_normalEfficiency: function() {
		return 3;
	}
	,get_walkThroughCanViewSelfInThisBuilding: function() {
		return false;
	}
	,get_possibleUpgrades: function() {
		return [buildingUpgrades_MachinePartsFactoryEfficiency];
	}
	,get_possibleBuildingModes: function() {
		return [buildingUpgrades_FactoryWorking,buildingUpgrades_MachinePartsFactoryTurbo,buildingUpgrades_StoneUsingFactoryDisabled];
	}
	,get_materialFrom: function() {
		return this.city.materials.stone;
	}
	,set_materialFrom: function(value) {
		var productionAmount = this.city.materials.stone - value;
		this.city.materials.stone -= productionAmount;
		this.city.simulation.stats.materialUsed[2][0] += productionAmount;
		return this.city.materials.stone;
	}
	,get_materialTo: function() {
		return this.city.materials.machineParts;
	}
	,set_materialTo: function(value) {
		var productionAmount = value - this.city.materials.machineParts;
		this.city.materials.machineParts += productionAmount;
		this.city.simulation.stats.materialProduction[3][0] += productionAmount;
		return this.city.materials.machineParts;
	}
	,get_bonusSpeed: function() {
		return this.city.simulation.bonuses.machinePartsFactorySpeed;
	}
	,onBuild: function() {
		buildings_MaterialConvertingFactory.prototype.onBuild.call(this);
		this.city.progress.unlocks.unlock(buildings_MechanicalHouse);
	}
	,workAnimation: function(citizen,timeMod) {
		if(citizen.relativeY != 10) {
			if(this.workers.indexOf(citizen) == 0) {
				citizen.setRelativePos(12,10);
			} else {
				citizen.setRelativePos(15,10);
			}
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_MaterialConvertingFactory.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalMaterialUsed | 0) + " stone used to make " + (_gthis.materialMade | 0) + " machine parts.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_MaterialConvertingFactory.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_MachinePartsFactory.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_MaterialConvertingFactory.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_MachinePartsFactory
});
var buildings_MechanicalHouse = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.hasHeatedBed = false;
	this.movementType = 0;
	this.bgSprite2 = null;
	this.currentAdjBonus = 0;
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.MechanicalHouse"] = buildings_MechanicalHouse;
buildings_MechanicalHouse.__name__ = ["buildings","MechanicalHouse"];
buildings_MechanicalHouse.__super__ = buildings_House;
buildings_MechanicalHouse.prototype = $extend(buildings_House.prototype,{
	get_possibleUpgrades: function() {
		return [buildingUpgrades_HeatedBed];
	}
	,destroy: function() {
		buildings_House.prototype.destroy.call(this);
		if(this.spriteOverMachinePartsFactory != null) {
			this.spriteOverMachinePartsFactory.destroy();
		}
		if(this.bgSprite != null) {
			this.bgSprite.destroy();
		}
		if(this.bgSprite2 != null) {
			this.bgSprite2.destroy();
		}
		this.spriteOverMachinePartsFactory = null;
		this.bgSprite = null;
	}
	,update: function(timeMod) {
		if(this.bgSprite != null) {
			this.bgTexture += timeMod * 0.25;
			if(this.bgTexture >= this.bgTextures.length) {
				this.bgTexture = 0;
			}
			this.bgSprite.texture = this.bgTextures[this.bgTexture | 0];
		}
	}
	,walkAround: function(citizen,stepsInBuilding) {
		if(this.movementType == 0) {
			buildings_House.prototype.walkAround.call(this,citizen,stepsInBuilding);
		} else if(this.movementType == 1) {
			var r = random_Random.getInt(4);
			if(r == 0 && stepsInBuilding > 120 && citizen.relativeX < 11) {
				citizen.changeFloorAndWaitRandom(30,60);
			} else if(r == 1) {
				citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(30,60),null,false,false);
			} else if(r == 2 && citizen.relativeY < 5) {
				citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(30,60),null,false,false);
			} else {
				var pool = pooling_Int32ArrayPool.pool;
				var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
				arr[0] = 8;
				arr[1] = random_Random.getInt(90,120);
				citizen.setPath(arr,0,2,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
			}
		} else if(this.movementType == 2) {
			var r1 = random_Random.getInt(4);
			if(r1 == 0 && stepsInBuilding > 120 && citizen.relativeX > 11) {
				citizen.changeFloorAndWaitRandom(30,60);
			} else if(r1 <= 2 && citizen.relativeY < 5) {
				citizen.moveAndWait(random_Random.getInt(7,16),random_Random.getInt(30,60),null,false,false);
			} else if(r1 <= 2) {
				citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(30,60),null,false,false);
			} else {
				var pool1 = pooling_Int32ArrayPool.pool;
				var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
				arr1[0] = 8;
				arr1[1] = random_Random.getInt(90,120);
				citizen.setPath(arr1,0,2,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
			}
		} else if(this.movementType == 3) {
			var r2 = random_Random.getInt(4);
			if(r2 == 0 && stepsInBuilding > 120 && citizen.relativeX > 11) {
				citizen.changeFloorAndWaitRandom(30,60);
			} else if((r2 == 1 || r2 == 2) && citizen.relativeY < 5) {
				citizen.moveAndWait(random_Random.getInt(7,16),random_Random.getInt(30,60),null,false,false);
			} else if(r2 == 2) {
				citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(30,60),null,false,false);
			} else {
				var pool2 = pooling_Int32ArrayPool.pool;
				var arr2 = pool2[2].length > 0 ? pool2[2].splice(pool2[2].length - 1,1)[0] : new Int32Array(2);
				arr2[0] = 8;
				arr2[1] = random_Random.getInt(90,120);
				citizen.setPath(arr2,0,2,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
			}
		}
	}
	,onCityChange: function() {
		var _gthis = this;
		var newAdjBonus = 0;
		this.movementType = 0;
		if(this.rightBuilding != null && this.rightBuilding["is"](buildings_MachinePartsFactory)) {
			if(this.leftBuilding != null && this.leftBuilding["is"](buildings_MachinePartsFactory)) {
				newAdjBonus = 50;
				this.drawer.changeMainTexture("spr_mechanicalhouse_leftright");
				if(_gthis.spriteOverMachinePartsFactory == null) {
					_gthis.spriteOverMachinePartsFactory = new PIXI.Sprite();
					_gthis.city.justAboveCityStage.addChild(_gthis.spriteOverMachinePartsFactory);
				}
				if(_gthis.bgSprite == null) {
					_gthis.bgSprite = new PIXI.Sprite();
					_gthis.bgStage.addChild(_gthis.bgSprite);
				}
				if(_gthis.bgSprite2 != null) {
					_gthis.bgSprite2.destroy();
				}
				if(_gthis.hasHeatedBed) {
					_gthis.bgSprite2 = new PIXI.Sprite(Resources.getTexture("spr_mechanicalhouse_heatedbed"));
					_gthis.bgStage.addChild(_gthis.bgSprite2);
				}
				_gthis.bgSprite.position.set(_gthis.position.x,_gthis.position.y);
				this.bgTextures = Resources.getTexturesByWidth("spr_mechanicalhouse_leftright_bganim",20);
				this.spriteOverMachinePartsFactory.texture = Resources.getTexture(this.leftBuilding.bottomBuilding == null ? "spr_mechanicalhouse_pipe_h3_bf" : "spr_mechanicalhouse_pipe_h3");
				this.spriteOverMachinePartsFactory.position.set(this.position.x - 3,this.position.y);
				this.bgTexture = this.rightBuilding.bgTexture % this.bgTextures.length;
			} else {
				newAdjBonus = 50;
				this.drawer.changeMainTexture("spr_mechanicalhouse_left");
				if(_gthis.spriteOverMachinePartsFactory == null) {
					_gthis.spriteOverMachinePartsFactory = new PIXI.Sprite();
					_gthis.city.justAboveCityStage.addChild(_gthis.spriteOverMachinePartsFactory);
				}
				if(_gthis.bgSprite == null) {
					_gthis.bgSprite = new PIXI.Sprite();
					_gthis.bgStage.addChild(_gthis.bgSprite);
				}
				if(_gthis.bgSprite2 != null) {
					_gthis.bgSprite2.destroy();
				}
				if(_gthis.hasHeatedBed) {
					_gthis.bgSprite2 = new PIXI.Sprite(Resources.getTexture("spr_mechanicalhouse_heatedbed"));
					_gthis.bgStage.addChild(_gthis.bgSprite2);
				}
				_gthis.bgSprite.position.set(_gthis.position.x,_gthis.position.y);
				this.bgTextures = Resources.getTexturesByWidth("spr_mechanicalhouse_left_bganim",20);
				this.spriteOverMachinePartsFactory.texture = Resources.getTexture("spr_mechanicalhouse_pipe_h");
				this.spriteOverMachinePartsFactory.position.set(this.position.x + 20,this.position.y + 4);
				this.bgTexture = this.rightBuilding.bgTexture % this.bgTextures.length;
			}
			this.movementType = 1;
		} else if(this.bottomBuilding != null && this.bottomBuilding["is"](buildings_MachinePartsFactory)) {
			newAdjBonus = 50;
			this.drawer.changeMainTexture("spr_mechanicalhouse_top");
			if(_gthis.spriteOverMachinePartsFactory == null) {
				_gthis.spriteOverMachinePartsFactory = new PIXI.Sprite();
				_gthis.city.justAboveCityStage.addChild(_gthis.spriteOverMachinePartsFactory);
			}
			if(_gthis.bgSprite == null) {
				_gthis.bgSprite = new PIXI.Sprite();
				_gthis.bgStage.addChild(_gthis.bgSprite);
			}
			if(_gthis.bgSprite2 != null) {
				_gthis.bgSprite2.destroy();
			}
			if(_gthis.hasHeatedBed) {
				_gthis.bgSprite2 = new PIXI.Sprite(Resources.getTexture("spr_mechanicalhouse_heatedbed"));
				_gthis.bgStage.addChild(_gthis.bgSprite2);
			}
			_gthis.bgSprite.position.set(_gthis.position.x,_gthis.position.y);
			this.bgTextures = Resources.getTexturesByWidth("spr_mechanicalhouse_top_bganim",20);
			if(this.topBuilding != null && this.topBuilding["is"](buildings_MachinePartsFactory)) {
				this.spriteOverMachinePartsFactory.texture = Resources.getTexture("spr_mechanicalhouse_pipe_v3");
				this.spriteOverMachinePartsFactory.position.set(this.position.x + 1,this.position.y - 3);
			} else {
				this.spriteOverMachinePartsFactory.texture = Resources.getTexture("spr_mechanicalhouse_pipe_v1");
				this.spriteOverMachinePartsFactory.position.set(this.position.x + 1,this.position.y + 20);
			}
			this.bgTexture = this.bottomBuilding.bgTexture % this.bgTextures.length;
			this.movementType = 2;
		} else if(this.leftBuilding != null && this.leftBuilding["is"](buildings_MachinePartsFactory)) {
			newAdjBonus = 50;
			this.drawer.changeMainTexture("spr_mechanicalhouse_right");
			if(_gthis.spriteOverMachinePartsFactory == null) {
				_gthis.spriteOverMachinePartsFactory = new PIXI.Sprite();
				_gthis.city.justAboveCityStage.addChild(_gthis.spriteOverMachinePartsFactory);
			}
			if(_gthis.bgSprite == null) {
				_gthis.bgSprite = new PIXI.Sprite();
				_gthis.bgStage.addChild(_gthis.bgSprite);
			}
			if(_gthis.bgSprite2 != null) {
				_gthis.bgSprite2.destroy();
			}
			if(_gthis.hasHeatedBed) {
				_gthis.bgSprite2 = new PIXI.Sprite(Resources.getTexture("spr_mechanicalhouse_heatedbed"));
				_gthis.bgStage.addChild(_gthis.bgSprite2);
			}
			_gthis.bgSprite.position.set(_gthis.position.x,_gthis.position.y);
			this.bgTextures = Resources.getTexturesByWidth("spr_mechanicalhouse_right_bganim",20);
			this.spriteOverMachinePartsFactory.texture = Resources.getTexture(this.leftBuilding.bottomBuilding == null ? "spr_mechanicalhouse_pipe_h2_bf" : "spr_mechanicalhouse_pipe_h2");
			this.spriteOverMachinePartsFactory.position.set(this.position.x - 3,this.position.y + 11 - (this.leftBuilding.bottomBuilding == null ? 6 : 0));
			this.bgTexture = this.leftBuilding.bgTexture % this.bgTextures.length;
		} else if(this.topBuilding != null && this.topBuilding["is"](buildings_MachinePartsFactory)) {
			newAdjBonus = 50;
			this.drawer.changeMainTexture("spr_mechanicalhouse_bottom");
			if(_gthis.spriteOverMachinePartsFactory == null) {
				_gthis.spriteOverMachinePartsFactory = new PIXI.Sprite();
				_gthis.city.justAboveCityStage.addChild(_gthis.spriteOverMachinePartsFactory);
			}
			if(_gthis.bgSprite == null) {
				_gthis.bgSprite = new PIXI.Sprite();
				_gthis.bgStage.addChild(_gthis.bgSprite);
			}
			if(_gthis.bgSprite2 != null) {
				_gthis.bgSprite2.destroy();
			}
			if(_gthis.hasHeatedBed) {
				_gthis.bgSprite2 = new PIXI.Sprite(Resources.getTexture("spr_mechanicalhouse_heatedbed"));
				_gthis.bgStage.addChild(_gthis.bgSprite2);
			}
			_gthis.bgSprite.position.set(_gthis.position.x,_gthis.position.y);
			this.bgTextures = Resources.getTexturesByWidth("spr_mechanicalhouse_bottom_bganim",20);
			this.spriteOverMachinePartsFactory.texture = Resources.getTexture("spr_mechanicalhouse_pipe_v2");
			this.spriteOverMachinePartsFactory.position.set(this.position.x + 3,this.position.y - 3);
			this.bgTexture = this.topBuilding.bgTexture % this.bgTextures.length;
			this.movementType = 3;
		} else {
			this.drawer.changeMainTexture("spr_mechanicalhouse");
			if(this.spriteOverMachinePartsFactory != null) {
				this.spriteOverMachinePartsFactory.destroy();
				this.spriteOverMachinePartsFactory = null;
			}
			if(this.bgSprite != null) {
				this.bgSprite.destroy();
				this.bgSprite = null;
			}
			if(this.hasHeatedBed) {
				if(this.bgSprite2 == null) {
					this.bgSprite2 = new PIXI.Sprite(Resources.getTexture("spr_mechanicalhouse_heatedbed"));
					this.bgStage.addChild(this.bgSprite2);
				}
			}
		}
		if(this.bgSprite2 != null) {
			this.bgSprite2.position.set(this.position.x,this.position.y);
		}
		if(this.bgSprite != null) {
			this.bgSprite.texture = this.bgTextures[this.bgTexture | 0];
		}
		this.bonusAttractiveness += newAdjBonus - this.currentAdjBonus;
		if(newAdjBonus != (this.currentAdjBonus | 0)) {
			this.city.simulation.houseAssigner.shouldUpdateHouses = true;
		}
		this.currentAdjBonus = newAdjBonus | 0;
	}
	,__class__: buildings_MechanicalHouse
});
var buildings_MedicalClinic = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.extraCapacity = 0;
	this.extraQuality = 0;
	this.medicalEducationPart = 0;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.isMedical = true;
};
$hxClasses["buildings.MedicalClinic"] = buildings_MedicalClinic;
buildings_MedicalClinic.__name__ = ["buildings","MedicalClinic"];
buildings_MedicalClinic.__interfaces__ = [buildings_IMedicalBuilding];
buildings_MedicalClinic.__super__ = buildings_Work;
buildings_MedicalClinic.prototype = $extend(buildings_Work.prototype,{
	get_medicalQuality: function() {
		return 50 + 0.25 * this.city.simulation.happiness.schoolHappiness * this.medicalEducationPart + this.extraQuality;
	}
	,get_medicalCapacity: function() {
		return (50 + this.extraCapacity) * (this.workers.length == 0 ? 0 : common_ArrayExtensions.sum(this.workers,function(w) {
			return w.get_educationSpeedModifier();
		}));
	}
	,get_possibleUpgrades: function() {
		return [buildingUpgrades_MedicalEducation,buildingUpgrades_AIAssistedDiagnosis];
	}
	,get_possibleCityUpgrades: function() {
		return [cityUpgrades_BirthControl];
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			return;
		}
		if(citizen.relativeY < 5 && this.workers.indexOf(citizen) == 1) {
			citizen.changeFloor();
		} else {
			var x = citizen.relativeY < 5 ? 5 : 3;
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(x - citizen.relativeX) < spd) {
				citizen.relativeX = x;
			} else {
				var num = x - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
			}
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "Quality: " + Math.floor(_gthis.get_medicalQuality());
		});
		this.city.gui.windowAddInfoText(null,function() {
			return "Capacity: " + Math.floor(_gthis.get_medicalCapacity());
		});
	}
	,createMainWindowPart: function() {
		var _gthis = this;
		buildings_Work.prototype.createMainWindowPart.call(this);
		var birthControlOptionContainer = new gui_GUIContainer(this.city.gui,this.city.gui.innerWindowStage,this.city.gui.windowInner);
		this.city.gui.windowInner.addChild(birthControlOptionContainer);
		var createBirthControlOption = function() {
			birthControlOptionContainer.padding.bottom = 6;
			var createBirthControlWindow = null;
			createBirthControlWindow = function() {
				_gthis.city.gui.createWindow("birthControlWindow");
				_gthis.city.gui.addWindowToStack(createBirthControlWindow);
				gui_BirthControlWindow.create(_gthis.city,_gthis.city.gui,_gthis.city.gui.innerWindowStage,_gthis.city.gui.windowInner);
				_gthis.city.gui.setWindowReload(createBirthControlWindow);
			};
			var createBirthControlWindow1 = createBirthControlWindow;
			birthControlOptionContainer.addChild(new gui_TextButton(_gthis.city.gui,_gthis.city.gui.innerWindowStage,birthControlOptionContainer,createBirthControlWindow,"Manage Birth Control"));
		};
		if(this.city.upgrades.vars.hasBirthControl) {
			createBirthControlOption();
		} else {
			var stillNeedsToAddBirthControlOption = true;
			birthControlOptionContainer.onUpdate = function() {
				if(stillNeedsToAddBirthControlOption && _gthis.city.upgrades.vars.hasBirthControl) {
					stillNeedsToAddBirthControlOption = false;
					createBirthControlOption();
				}
			};
		}
	}
	,__class__: buildings_MedicalClinic
});
var buildings_MisdirectorMode = $hxClasses["buildings.MisdirectorMode"] = { __ename__ : ["buildings","MisdirectorMode"], __constructs__ : ["Normal","Disabled","Always","MostlyDisabled"] };
buildings_MisdirectorMode.Normal = ["Normal",0];
buildings_MisdirectorMode.Normal.toString = $estr;
buildings_MisdirectorMode.Normal.__enum__ = buildings_MisdirectorMode;
buildings_MisdirectorMode.Disabled = ["Disabled",1];
buildings_MisdirectorMode.Disabled.toString = $estr;
buildings_MisdirectorMode.Disabled.__enum__ = buildings_MisdirectorMode;
buildings_MisdirectorMode.Always = ["Always",2];
buildings_MisdirectorMode.Always.toString = $estr;
buildings_MisdirectorMode.Always.__enum__ = buildings_MisdirectorMode;
buildings_MisdirectorMode.MostlyDisabled = ["MostlyDisabled",3];
buildings_MisdirectorMode.MostlyDisabled.toString = $estr;
buildings_MisdirectorMode.MostlyDisabled.__enum__ = buildings_MisdirectorMode;
var buildings_Misdirector = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.mode = buildings_MisdirectorMode.Normal;
	this.teleportX = 9.;
	this.timesUsedTo = 0;
	this.knowledgeGenerated = 0;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.doorX = 12;
	city.misdirector = this;
};
$hxClasses["buildings.Misdirector"] = buildings_Misdirector;
buildings_Misdirector.__name__ = ["buildings","Misdirector"];
buildings_Misdirector.__super__ = Building;
buildings_Misdirector.prototype = $extend(Building.prototype,{
	get_misdirectChance: function() {
		var _g = this.mode;
		switch(_g[1]) {
		case 0:
			return 0.025;
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 0.001;
		}
	}
	,get_possibleBuildingModes: function() {
		return [buildingUpgrades_MisdirectorNormal,buildingUpgrades_MisdirectorAlways,buildingUpgrades_MisdirectorMostlyDisabled,buildingUpgrades_MisdirectorDisabled];
	}
	,giveReward: function() {
		var newKnowledge = this.mode == buildings_MisdirectorMode.Always ? 0.05 : 0.5;
		this.city.materials.knowledge += newKnowledge;
		this.city.simulation.stats.materialProduction[8][0] += newKnowledge;
		this.knowledgeGenerated += newKnowledge;
	}
	,destroy: function() {
		Building.prototype.destroy.call(this);
		this.city.misdirector = null;
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		Building.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "Misdirected " + _gthis.timesUsedTo + " times.";
		});
		this.city.gui.windowAddInfoText(null,function() {
			return "Generated " + Math.floor(_gthis.knowledgeGenerated) + " knowledge.";
		});
	}
	,createTeleportParticle: function(rayTexture) {
		if(rayTexture == null) {
			rayTexture = "spr_teleporter_ray_misdirect";
		}
		this.city.particles.addParticle(Resources.getTexturesByWidth(rayTexture,4),new common_Point(this.position.x + 8,this.position.y + 4));
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Misdirector.saveDefinition);
		}
		var value = this.knowledgeGenerated;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.timesUsedTo;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["knowledgeGenerated"] != null ? loadMap.existsReserved("knowledgeGenerated") : loadMap.h.hasOwnProperty("knowledgeGenerated")) {
			this.knowledgeGenerated = __map_reserved["knowledgeGenerated"] != null ? loadMap.getReserved("knowledgeGenerated") : loadMap.h["knowledgeGenerated"];
		}
		if(__map_reserved["timesUsedTo"] != null ? loadMap.existsReserved("timesUsedTo") : loadMap.h.hasOwnProperty("timesUsedTo")) {
			this.timesUsedTo = __map_reserved["timesUsedTo"] != null ? loadMap.getReserved("timesUsedTo") : loadMap.h["timesUsedTo"];
		}
	}
	,__class__: buildings_Misdirector
});
var buildings_ModernArtMuseum = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.artSprite = null;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 9;
	this.endTime = 22;
	this.workTimePreferenceMod = 0.1;
	this.isEntertainment = true;
	this.artTextures = Resources.getTexturesByWidth("spr_modernart",20);
	this.currentTexture = random_Random.getInt(city.progress.unlocks.numberOfModernArtMuseumArtworksUnlocked);
	this.artSprite = new PIXI.Sprite(this.artTextures[this.currentTexture]);
	this.artSprite.position.set(position.x,position.y);
	bgStage.addChild(this.artSprite);
};
$hxClasses["buildings.ModernArtMuseum"] = buildings_ModernArtMuseum;
buildings_ModernArtMuseum.__name__ = ["buildings","ModernArtMuseum"];
buildings_ModernArtMuseum.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_ModernArtMuseum.__super__ = buildings_Work;
buildings_ModernArtMuseum.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 100;
	}
	,get_isOpen: function() {
		if(this.workers.length == 1 && this.workers[0].currentAction == LifeAction.Work) {
			return this.city.simulation.time.timeSinceStart / 60 % 24 < 21.5;
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 2;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 2;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 3;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 2;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,onBuild: function() {
		this.city.progress.unlocks.unlock(buildings_ArtColony);
	}
	,postLoad: function() {
		this.artSprite.texture = this.artTextures[this.currentTexture];
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		if(this.artSprite != null) {
			this.artSprite.position.set(this.position.x,this.position.y);
		}
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		this.bgStage.removeChild(this.artSprite);
	}
	,beEntertained: function(citizen,timeMod) {
		var moveFunction = function() {
			var moveFunction1 = random_Random.getInt(3,16);
			var moveFunction2 = random_Random.getInt(100,120);
			citizen.moveAndWait(moveFunction1,moveFunction2,null,false,true);
		};
		if(citizen.relativeY < 5) {
			citizen.changeFloor(moveFunction);
		} else {
			moveFunction();
		}
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		gui_windowParts_CycleValueButton.create(this.city.gui,function() {
			return _gthis.currentTexture;
		},function(t) {
			_gthis.currentTexture = t;
			_gthis.artSprite.texture = _gthis.artTextures[_gthis.currentTexture];
		},function() {
			return _gthis.city.progress.unlocks.numberOfModernArtMuseumArtworksUnlocked;
		},"Change Exhibition");
		buildings_Work.prototype.createWindowAddBottomButtons.call(this);
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else if(citizen.relativeX >= 4 && citizen.relativeX < 6) {
			if(random_Random.getInt(10) == 0) {
				citizen.changeFloorAndWaitRandom(30,60,function() {
					var moveToX = random_Random.getInt(14,15);
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[4].length > 0 ? pool[4].splice(pool[4].length - 1,1)[0] : new Int32Array(4);
					arr[0] = 12;
					arr[1] = 50;
					arr[2] = 4;
					arr[3] = moveToX;
					citizen.setPath(arr,0,4,true);
					citizen.pathEndFunction = function() {
						var pool1 = pooling_Int32ArrayPool.pool;
						var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
						arr1[0] = 8;
						arr1[1] = random_Random.getInt(30,60);
						citizen.setPath(arr1,0,2,true);
						citizen.pathEndFunction = function() {
							var moveToX1 = random_Random.getInt(4,6);
							var pool2 = pooling_Int32ArrayPool.pool;
							var arr2 = pool2[4].length > 0 ? pool2[4].splice(pool2[4].length - 1,1)[0] : new Int32Array(4);
							arr2[0] = 12;
							arr2[1] = 50;
							arr2[2] = 4;
							arr2[3] = moveToX1;
							citizen.setPath(arr2,0,4,true);
							citizen.pathEndFunction = function() {
								var pool3 = pooling_Int32ArrayPool.pool;
								var arr3 = pool3[2].length > 0 ? pool3[2].splice(pool3[2].length - 1,1)[0] : new Int32Array(2);
								arr3[0] = 8;
								arr3[1] = random_Random.getInt(30,60);
								citizen.setPath(arr3,0,2,true);
								citizen.pathEndFunction = function() {
									citizen.changeFloor();
								};
								citizen.pathOnlyRelatedTo = citizen.inPermanent;
							};
							citizen.pathOnlyRelatedTo = citizen.inPermanent;
						};
						citizen.pathOnlyRelatedTo = citizen.inPermanent;
					};
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
				});
			} else {
				var pool4 = pooling_Int32ArrayPool.pool;
				var arr4 = pool4[2].length > 0 ? pool4[2].splice(pool4[2].length - 1,1)[0] : new Int32Array(2);
				arr4[0] = 8;
				arr4[1] = random_Random.getInt(30,60);
				citizen.setPath(arr4,0,2,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
			}
		} else {
			var moveToX2 = random_Random.getInt(4,6);
			var pool5 = pooling_Int32ArrayPool.pool;
			var arr5 = pool5[2].length > 0 ? pool5[2].splice(pool5[2].length - 1,1)[0] : new Int32Array(2);
			arr5[0] = 4;
			arr5[1] = moveToX2;
			citizen.setPath(arr5,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_ModernArtMuseum.saveDefinition);
		}
		var value = this.currentTexture;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["currentTexture"] != null ? loadMap.existsReserved("currentTexture") : loadMap.h.hasOwnProperty("currentTexture")) {
			this.currentTexture = __map_reserved["currentTexture"] != null ? loadMap.getReserved("currentTexture") : loadMap.h["currentTexture"];
		}
		this.postLoad();
	}
	,__class__: buildings_ModernArtMuseum
});
var buildings_ModernRusticHome = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.currentAdjBonus = 0;
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.adjecentBuildingEffects.push({ name : "modernRusticHomeCommunityFeeling", intensity : 1});
};
$hxClasses["buildings.ModernRusticHome"] = buildings_ModernRusticHome;
buildings_ModernRusticHome.__name__ = ["buildings","ModernRusticHome"];
buildings_ModernRusticHome.__super__ = buildings_House;
buildings_ModernRusticHome.prototype = $extend(buildings_House.prototype,{
	get_possibleUpgrades: function() {
		return [buildingUpgrades_ModernConveniences];
	}
	,onCityChange: function() {
		var newAdjBonus = 0;
		if(this.getEffectsOfAdjecentBuildings("modernRusticHomeCommunityFeeling") >= 3) {
			newAdjBonus = 15;
		}
		this.bonusAttractiveness += newAdjBonus - this.currentAdjBonus;
		if(newAdjBonus != (this.currentAdjBonus | 0)) {
			this.city.simulation.houseAssigner.shouldUpdateHouses = true;
		}
		this.currentAdjBonus = newAdjBonus | 0;
	}
	,__class__: buildings_ModernRusticHome
});
var buildings_NightClub = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.knownEntertainedCitizenSet = 0;
	this.knownEntertainedCitizen = null;
	this.nightClubColor = 0;
	this.nightClubEntertainmentQuantity = 0;
	this.laserImages = Resources.getTexturesByWidth("spr_nightclub_laser",18);
	this.lights = [];
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	var _g = 0;
	while(_g < 2) {
		var i = _g++;
		var light = new PIXI.Sprite(Resources.getTexture("spr_nightclub_light"));
		bgStage.addChild(light);
		this.lights.push({ sprite : light, color : 0, alpha : 0, waiting : 1, alphaDir : 1});
		light.alpha = 0.8;
		var this1 = [150,1,0.5];
		light.tint = thx_color__$Rgb_Rgb_$Impl_$.toInt(thx_color__$Hsl_Hsl_$Impl_$.toRgb(this1));
	}
	this.laserStage = new PIXI.Container();
	bgStage.addChild(this.laserStage);
	this.laserStage.position.set(position.x,position.y);
	this.lasers = [];
	this.lasers.push({ start : new common_FPoint(2,3), end : new common_FPoint(6,18), hue : 180, speed : 1, targetLaserHue : -1, laserSprite : null});
	this.lasers.push({ start : new common_FPoint(17,3), end : new common_FPoint(6,18), hue : 0, speed : -1, targetLaserHue : -1, laserSprite : null});
	this.positionSprites();
	this.startTime = 20;
	this.endTime = 5.5;
	this.workTimePreferenceMod = 0.5;
	this.isEntertainment = true;
	this.lightsAreOn = -1;
};
$hxClasses["buildings.NightClub"] = buildings_NightClub;
buildings_NightClub.__name__ = ["buildings","NightClub"];
buildings_NightClub.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_NightClub.__super__ = buildings_Work;
buildings_NightClub.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * (40 + this.nightClubEntertainmentQuantity);
	}
	,get_isOpen: function() {
		if(this.workers.length == 1 && this.workers[0].currentAction == LifeAction.Work) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = this.startTime - this.workTimePreferenceMod;
			if(start < 6) {
				if(this1 >= start) {
					return this1 < 6;
				} else {
					return false;
				}
			} else if(!(this1 >= start)) {
				return this1 < 6;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 0;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 5;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 7;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,get_possibleUpgrades: function() {
		return [buildingUpgrades_BetterLightShow];
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_AutoMergingBuildingDrawer;
	}
	,get_hasLeftNightClub: function() {
		if(this.leftBuilding != null) {
			return this.leftBuilding["is"](buildings_NightClub);
		} else {
			return false;
		}
	}
	,get_hasRightNightClub: function() {
		if(this.rightBuilding != null) {
			return this.rightBuilding["is"](buildings_NightClub);
		} else {
			return false;
		}
	}
	,postLoad: function() {
		var _g = 0;
		var _g1 = this.lights;
		while(_g < _g1.length) {
			var light = _g1[_g];
			++_g;
			if(this.nightClubColor == 3) {
				light.sprite.texture = Resources.getTexture("spr_nightclub_light_rainbow");
			}
		}
	}
	,postCreate: function() {
		buildings_Work.prototype.postCreate.call(this);
		this.positionSprites();
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.lights;
		while(_g < _g1.length) {
			var light = _g1[_g];
			++_g;
			this.bgStage.removeChild(light.sprite);
		}
		this.laserStage.destroy();
		buildings_Work.prototype.destroy.call(this);
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking && this.city.simulation.time.timeSinceStart / 60 % 24 > 6) {
			citizen.currentAction = LifeAction.Nothing;
		} else if(this.get_hasLeftNightClub()) {
			citizen.moveAndWait(random_Random.getInt(0,this.get_hasRightNightClub() ? 19 : 17),random_Random.getInt(20,50),null,false,false);
			this.lightsAreOn = 60;
		} else {
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(1 - citizen.relativeX) < spd) {
				citizen.relativeX = 1;
			} else {
				var num = 1 - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
			}
			this.lightsAreOn = 3;
		}
	}
	,beEntertained: function(citizen,timeMod) {
		if(this.knownEntertainedCitizen == null) {
			this.knownEntertainedCitizen = citizen;
			this.knownEntertainedCitizenSet = 60;
		} else if(this.knownEntertainedCitizen == citizen) {
			this.knownEntertainedCitizenSet = 60;
		}
		var waitTimeMod;
		var _g = this.nightClubColor;
		switch(_g) {
		case 1:
			waitTimeMod = -3;
			break;
		case 2:
			waitTimeMod = 3;
			break;
		case 4:
			waitTimeMod = 3;
			break;
		default:
			waitTimeMod = 0;
		}
		var goTo = random_Random.getInt(2 + (this.get_hasLeftNightClub() ? 1 : 0) + (this.get_hasRightNightClub() ? 1 : 0));
		var canGoLR = this.nightClubColor != 4 || this.knownEntertainedCitizen != citizen;
		if(this.get_hasLeftNightClub() && canGoLR && goTo == 0 && this.leftBuilding.get_isOpen()) {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[6].length > 0 ? pool[6].splice(pool[6].length - 1,1)[0] : new Int32Array(6);
			arr[0] = 2;
			arr[1] = 0;
			arr[2] = 4;
			arr[3] = random_Random.getInt(5,19);
			arr[4] = 8;
			arr[5] = random_Random.getInt(5,6);
			citizen.setPath(arr,0,6,true);
		} else if(this.get_hasRightNightClub() && canGoLR && goTo == 1 && this.rightBuilding.get_isOpen()) {
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[6].length > 0 ? pool1[6].splice(pool1[6].length - 1,1)[0] : new Int32Array(6);
			arr1[0] = 3;
			arr1[1] = 0;
			arr1[2] = 4;
			arr1[3] = random_Random.getInt(0,17);
			arr1[4] = 8;
			arr1[5] = random_Random.getInt(5,6);
			citizen.setPath(arr1,0,6,true);
		} else {
			var xMin = this.get_hasLeftNightClub() ? 0 : 5;
			var xMax = this.get_hasRightNightClub() ? 19 : 17;
			var slowMove = this.nightClubColor == 2 || this.nightClubColor == 4;
			citizen.moveAndWait(random_Random.getInt(xMin,xMax),random_Random.getInt(5 + waitTimeMod,6 + waitTimeMod),null,false,slowMove);
		}
		if(!citizen.hasBuildingInited) {
			citizen.wantsNightEntertainmentIn = random_Random.getInt(1,5);
			citizen.hasBuildingInited = true;
		}
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		if(this.lights.length >= 2) {
			this.lights[0].sprite.position.set(this.position.x + 5,this.position.y + 4);
			this.lights[1].sprite.position.set(this.position.x + 10,this.position.y + 4);
		}
		this.laserStage.position.set(this.position.x,this.position.y);
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		if(Settings.hasSecretCode("nightClubColors")) {
			var cycleButton = gui_windowParts_CycleValueButton.create(this.city.gui,function() {
				return _gthis.nightClubColor;
			},function(t) {
				_gthis.nightClubColor = t;
				if(_gthis.nightClubColor == 0) {
					_gthis.lasers[0].hue = 0;
					_gthis.lasers[1].hue = 180;
					if(_gthis.lasers.length >= 4) {
						_gthis.lasers[2].hue = 90;
						_gthis.lasers[3].hue = 270;
					}
				}
				var _g = 0;
				var _g1 = _gthis.lasers;
				while(_g < _g1.length) {
					var laser = _g1[_g];
					++_g;
					laser.targetLaserHue = -1;
				}
				var _g2 = 0;
				var _g11 = _gthis.lights;
				while(_g2 < _g11.length) {
					var light = _g11[_g2];
					++_g2;
					if(_gthis.nightClubColor == 3) {
						light.sprite.texture = Resources.getTexture("spr_nightclub_light_rainbow");
					} else {
						light.sprite.texture = Resources.getTexture("spr_nightclub_light");
					}
				}
			},function() {
				return 5;
			},null,function() {
				var _g3 = _gthis.nightClubColor;
				var cycleButton1;
				switch(_g3) {
				case 0:
					cycleButton1 = "Colorful";
					break;
				case 1:
					cycleButton1 = "Fast & Red";
					break;
				case 2:
					cycleButton1 = "Slow & Blue";
					break;
				case 3:
					cycleButton1 = "Rainbow Light";
					break;
				case 4:
					cycleButton1 = "Romantic & Pink";
					break;
				default:
					cycleButton1 = "";
				}
				return "Change Light Show (" + cycleButton1 + ")";
			});
		}
		buildings_Work.prototype.createWindowAddBottomButtons.call(this);
	}
	,update: function(timeMod) {
		buildings_Work.prototype.update.call(this,timeMod);
		this.lightsAreOn -= Math.min(1,timeMod);
		if(this.lightsAreOn <= 0 && !(this.workers.length >= 1 && this.workers[0].inPermanent == this && this.workers[0].currentAction == LifeAction.Work)) {
			var _g = 0;
			var _g1 = this.lights;
			while(_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				l.sprite.alpha = 0;
			}
			var _g2 = 0;
			var _g11 = this.lasers;
			while(_g2 < _g11.length) {
				var l1 = _g11[_g2];
				++_g2;
				if(l1.laserSprite != null) {
					l1.laserSprite.destroy();
					l1.laserSprite = null;
				}
			}
			return;
		}
		var _g3 = 0;
		var _g12 = this.lasers;
		while(_g3 < _g12.length) {
			var laser = _g12[_g3];
			++_g3;
			if(this.nightClubColor == 4 && this.workers.length > 0 && this.workers[0].inPermanent == this && this.get_hasLeftNightClub()) {
				if(this.knownEntertainedCitizenSet >= 0) {
					if(this.knownEntertainedCitizen != null && this.knownEntertainedCitizen.inPermanent == this && !this.knownEntertainedCitizen.hasDied) {
						laser.end.x = this.knownEntertainedCitizen.relativeX;
					}
				} else {
					laser.end.x = this.workers[0].relativeX;
				}
			} else {
				laser.end.x += timeMod * laser.speed;
				if(laser.speed > 0) {
					if(laser.end.x > 18) {
						laser.end.x = 18;
						laser.speed = -laser.speed;
					}
				} else if(laser.end.x < (this.get_hasLeftNightClub() ? 1 : 6)) {
					var tmp = this.get_hasLeftNightClub() ? 1 : 6;
					laser.end.x = tmp;
					laser.speed = -laser.speed;
				}
			}
			var _g21 = this.nightClubColor;
			switch(_g21) {
			case 0:
				laser.hue += timeMod;
				if(laser.hue > 360) {
					laser.hue -= 360;
				}
				break;
			case 1:
				laser.hue = 0;
				break;
			case 2:
				if(laser.targetLaserHue == -1 || Math.abs(laser.hue - laser.targetLaserHue) < timeMod / 2) {
					laser.targetLaserHue = random_Random.getInt(170,245);
				}
				var spd = 1;
				if(laser.hue > 245 || laser.hue < 170) {
					spd = 12;
				}
				var num = laser.targetLaserHue - laser.hue;
				laser.hue += (num > 0 ? 1 : num < 0 ? -1 : 0) * 0.5 * timeMod * spd;
				break;
			case 3:
				if(laser.targetLaserHue == -1 || Math.abs(laser.hue - laser.targetLaserHue) < timeMod) {
					laser.targetLaserHue = random_Random.getInt(360);
				}
				var num1 = laser.targetLaserHue - laser.hue;
				laser.hue += (num1 > 0 ? 1 : num1 < 0 ? -1 : 0) * timeMod;
				break;
			case 4:
				if(laser.targetLaserHue == -1 || Math.abs(laser.hue - laser.targetLaserHue) < timeMod / 2) {
					laser.targetLaserHue = random_Random.getInt(270,330);
				}
				var spd1 = 1;
				if(laser.hue > 330 || laser.hue < 270) {
					spd1 = 12;
				}
				var num2 = laser.targetLaserHue - laser.hue;
				laser.hue += (num2 > 0 ? 1 : num2 < 0 ? -1 : 0) * 0.5 * timeMod * spd1;
				break;
			}
			if(random_Random.getInt(20) == 0) {
				var _g31 = this.nightClubColor;
				switch(_g31) {
				case 1:
					var num3 = laser.speed;
					laser.speed = (num3 > 0 ? 1 : num3 < 0 ? -1 : 0) * random_Random.getFloat(1,2);
					break;
				case 2:
					var num4 = laser.speed;
					laser.speed = (num4 > 0 ? 1 : num4 < 0 ? -1 : 0) * random_Random.getFloat(0.5,0.8);
					break;
				case 4:
					var num5 = laser.speed;
					laser.speed = (num5 > 0 ? 1 : num5 < 0 ? -1 : 0) * random_Random.getFloat(0.5,0.8);
					break;
				default:
					var num6 = laser.speed;
					laser.speed = (num6 > 0 ? 1 : num6 < 0 ? -1 : 0) * random_Random.getFloat(0.5,1.5);
				}
			}
			if(laser.laserSprite == null) {
				laser.laserSprite = new PIXI.Sprite();
				this.laserStage.addChild(laser.laserSprite);
			}
			var val = Math.floor(Math.abs(laser.end.x - laser.start.x));
			laser.laserSprite.texture = this.laserImages[val < 0 ? 0 : val > 17 ? 17 : val];
			laser.laserSprite.position.y = laser.start.y;
			var this1 = [laser.hue,0.7,1];
			var tmp1 = thx_color__$Hsv_Hsv_$Impl_$.toRgb(this1);
			laser.laserSprite.tint = common_ColorExtensions.toHexInt(tmp1);
			if(laser.end.x < laser.start.x) {
				laser.laserSprite.position.set(laser.start.x + 1,laser.start.y);
				laser.laserSprite.scale.x = -1;
			} else {
				laser.laserSprite.position.set(laser.start.x,laser.start.y);
				laser.laserSprite.scale.x = 1;
			}
		}
		var _g4 = 0;
		var _g13 = this.lights;
		while(_g4 < _g13.length) {
			var light = _g13[_g4];
			++_g4;
			if(light.alpha > 0) {
				light.alpha += light.alphaDir * 0.1 * (this.nightClubColor == 4 ? 0.25 : 1);
				if(light.alpha > 1) {
					light.alpha = 1;
					light.alphaDir = -1;
				} else if(light.alpha <= 0) {
					light.alpha = 0;
					if(this.nightClubColor == 1 || this.nightClubColor == 3) {
						light.waiting = random_Random.getInt(30);
					} else {
						light.waiting = random_Random.getInt(60);
					}
				}
				light.sprite.alpha = light.alpha;
			} else if(light.waiting > 0) {
				light.waiting -= timeMod;
			} else {
				light.waiting = 0;
				light.alpha = 0.01;
				light.alphaDir = 1;
				var _g22 = this.nightClubColor;
				switch(_g22) {
				case 0:
					var this2 = [random_Random.getInt(360),0.8,0.5];
					var tmp2 = thx_color__$Hsl_Hsl_$Impl_$.toRgb(this2);
					light.sprite.tint = thx_color__$Rgb_Rgb_$Impl_$.toInt(tmp2);
					break;
				case 1:
					var this3 = [random_Random.getInt(60),0.8,0.6];
					var tmp3 = thx_color__$Hsl_Hsl_$Impl_$.toRgb(this3);
					light.sprite.tint = thx_color__$Rgb_Rgb_$Impl_$.toInt(tmp3);
					break;
				case 2:
					var this4 = [random_Random.getInt(170,245),0.8,0.7];
					var tmp4 = thx_color__$Hsl_Hsl_$Impl_$.toRgb(this4);
					light.sprite.tint = thx_color__$Rgb_Rgb_$Impl_$.toInt(tmp4);
					break;
				case 3:
					light.sprite.tint = 16777215;
					break;
				case 4:
					var this5 = [random_Random.getInt(270,330),0.8,0.7];
					var tmp5 = thx_color__$Hsl_Hsl_$Impl_$.toRgb(this5);
					light.sprite.tint = thx_color__$Rgb_Rgb_$Impl_$.toInt(tmp5);
					break;
				}
			}
		}
		if(this.knownEntertainedCitizenSet >= 0) {
			this.knownEntertainedCitizenSet -= timeMod;
			if(this.knownEntertainedCitizenSet < 0) {
				this.knownEntertainedCitizen = null;
			}
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_NightClub.saveDefinition);
		}
		var value = this.nightClubColor;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(queue.version < 15) {
			return;
		}
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["nightClubColor"] != null ? loadMap.existsReserved("nightClubColor") : loadMap.h.hasOwnProperty("nightClubColor")) {
			this.nightClubColor = __map_reserved["nightClubColor"] != null ? loadMap.getReserved("nightClubColor") : loadMap.h["nightClubColor"];
		}
		this.postLoad();
	}
	,__class__: buildings_NightClub
});
var buildings_NormalHouse = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.doorMainTexture = 0;
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.doorTextures = Resources.getTexturesByWidth("spr_coloreddoors",20);
	this.makeDoorSpriteIfNeeded();
};
$hxClasses["buildings.NormalHouse"] = buildings_NormalHouse;
buildings_NormalHouse.__name__ = ["buildings","NormalHouse"];
buildings_NormalHouse.__super__ = buildings_House;
buildings_NormalHouse.prototype = $extend(buildings_House.prototype,{
	get_possibleUpgrades: function() {
		return [buildingUpgrades_Flowers];
	}
	,positionSprites: function() {
		buildings_House.prototype.positionSprites.call(this);
		if(this.doorSprite != null) {
			this.doorSprite.position.set(this.position.x,this.position.y);
			if(this.worldPosition.y != 0) {
				this.stage.removeChild(this.doorSprite);
				this.doorSprite = null;
			}
		} else {
			this.makeDoorSpriteIfNeeded();
		}
	}
	,postLoad: function() {
		if(this.doorSprite != null) {
			this.doorSprite.texture = this.doorTextures[this.doorMainTexture];
		}
	}
	,makeDoorSpriteIfNeeded: function() {
		if(this.doorSprite == null) {
			if(this.worldPosition.y == 0) {
				this.doorSprite = new PIXI.Sprite(this.doorTextures[this.doorMainTexture]);
				this.doorSprite.position.set(this.position.x,this.position.y);
				this.stage.addChild(this.doorSprite);
			}
		}
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		if(this.doorSprite != null) {
			var cycleButton = gui_windowParts_CycleValueButton.create(this.city.gui,function() {
				return _gthis.doorMainTexture;
			},function(t) {
				if(_gthis.doorSprite != null) {
					_gthis.doorMainTexture = t;
					_gthis.doorSprite.texture = _gthis.doorTextures[_gthis.doorMainTexture];
				}
			},function() {
				return _gthis.doorTextures.length;
			},"Change Door Color");
			cycleButton.onUpdate = function() {
				if(_gthis.doorSprite == null) {
					_gthis.city.gui.windowInner.removeChild(cycleButton);
				}
			};
		}
		buildings_House.prototype.createWindowAddBottomButtons.call(this);
	}
	,destroy: function() {
		if(this.doorSprite != null) {
			this.stage.removeChild(this.doorSprite);
		}
		buildings_House.prototype.destroy.call(this);
	}
	,addWindowInfoLines: function() {
		buildings_House.prototype.addWindowInfoLines.call(this);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_House.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_NormalHouse.saveDefinition);
		}
		var value = this.doorMainTexture;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_House.prototype.load.call(this,queue);
		if(queue.version < 18) {
			return;
		}
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["doorMainTexture"] != null ? loadMap.existsReserved("doorMainTexture") : loadMap.h.hasOwnProperty("doorMainTexture")) {
			this.doorMainTexture = __map_reserved["doorMainTexture"] != null ? loadMap.getReserved("doorMainTexture") : loadMap.h["doorMainTexture"];
		}
		this.postLoad();
	}
	,__class__: buildings_NormalHouse
});
var buildings_Observatory = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.hasStarDatabase = false;
	this.totalKnowledgeGenerated = 0;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 21;
	this.endTime = 4;
};
$hxClasses["buildings.Observatory"] = buildings_Observatory;
buildings_Observatory.__name__ = ["buildings","Observatory"];
buildings_Observatory.__super__ = buildings_Work;
buildings_Observatory.prototype = $extend(buildings_Work.prototype,{
	get_possibleUpgrades: function() {
		return [buildingUpgrades_StarDatabase];
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			var _g = this.workers.indexOf(citizen);
			switch(_g) {
			case 0:
				var spd = citizen.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				if(Math.abs(5 - citizen.relativeX) < spd) {
					citizen.relativeX = 5;
				} else {
					var num = 5 - citizen.relativeX;
					citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
				}
				break;
			case 1:
				var spd1 = citizen.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				if(Math.abs(13 - citizen.relativeX) < spd1) {
					citizen.relativeX = 13;
				} else {
					var num1 = 13 - citizen.relativeX;
					citizen.relativeX += (num1 > 0 ? 1 : num1 < 0 ? -1 : 0) * spd1;
				}
				break;
			case 2:
				var spd2 = citizen.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				if(Math.abs(9 - citizen.relativeX) < spd2) {
					citizen.relativeX = 9;
				} else {
					var num2 = 9 - citizen.relativeX;
					citizen.relativeX += (num2 > 0 ? 1 : num2 < 0 ? -1 : 0) * spd2;
				}
				break;
			}
			var currentKnowledgePerStep = 0.002 * (this.hasStarDatabase ? this.city.upgrades.vars.starDatabaseIsMoreEffective ? 6 : 1.5 : 1);
			var newKnowledge = currentKnowledgePerStep * timeMod * this.city.simulation.happiness.actionSpeedModifier * this.city.simulation.bonuses.labSpeed * citizen.get_educationSpeedModifier() * this.city.simulation.boostManager.currentGlobalBoostAmount;
			this.city.materials.knowledge += newKnowledge;
			this.city.simulation.stats.materialProduction[8][0] += newKnowledge;
			this.totalKnowledgeGenerated += newKnowledge;
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalKnowledgeGenerated | 0) + " knowledge gathered.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Observatory.saveDefinition);
		}
		var value = this.totalKnowledgeGenerated;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["totalKnowledgeGenerated"] != null ? loadMap.existsReserved("totalKnowledgeGenerated") : loadMap.h.hasOwnProperty("totalKnowledgeGenerated")) {
			this.totalKnowledgeGenerated = __map_reserved["totalKnowledgeGenerated"] != null ? loadMap.getReserved("totalKnowledgeGenerated") : loadMap.h["totalKnowledgeGenerated"];
		}
	}
	,__class__: buildings_Observatory
});
var buildings_OutpostHouse = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.OutpostHouse"] = buildings_OutpostHouse;
buildings_OutpostHouse.__name__ = ["buildings","OutpostHouse"];
buildings_OutpostHouse.__super__ = buildings_House;
buildings_OutpostHouse.prototype = $extend(buildings_House.prototype,{
	destroy: function() {
		buildings_House.prototype.destroy.call(this);
	}
	,addWindowInfoLines: function() {
		buildings_House.prototype.addWindowInfoLines.call(this);
	}
	,__class__: buildings_OutpostHouse
});
var buildings_Park = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.festivalJobs = 2;
	this.parkSprite = null;
	this.currentMainTexture = 0;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.isEntertainment = true;
	this.parkTextures = Resources.getTexturesByWidth(this.get_myParkTextures(),20);
	this.currentTexture = random_Random.getInt(this.parkTextures.length - this.get_numberOfLockedParkTextures());
	this.parkSprite = new PIXI.Sprite(this.parkTextures[this.currentTexture]);
	this.parkSprite.position.set(position.x,position.y);
	bgStage.cacheableChildren.push(this.parkSprite);
	bgStage.isInvalid = true;
	this.adjecentBuildingEffects.push({ name : "modernRusticHomeCommunityFeeling", intensity : 1});
	this.festivalEntertainment = null;
};
$hxClasses["buildings.Park"] = buildings_Park;
buildings_Park.__name__ = ["buildings","Park"];
buildings_Park.__interfaces__ = [buildings_IBuildingWithFestivalSpecials,buildings_IEntertainmentBuilding];
buildings_Park.__super__ = Building;
buildings_Park.prototype = $extend(Building.prototype,{
	get_myParkTextures: function() {
		return "spr_park_plants";
	}
	,get_changePlantsText: function() {
		return "Change Plants";
	}
	,get_baseEntertainmentCapacity: function() {
		return 30;
	}
	,get_isOpen: function() {
		var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
		if(this1 >= 6.0) {
			return this1 < 22;
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 3;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 1.5;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 2.5;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 1.75;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_AutoMergingBuildingDrawer;
	}
	,get_numberOfLockedParkTextures: function() {
		if(Settings.hasSecretCode("orchid")) {
			return 0;
		} else {
			return 3;
		}
	}
	,postLoad: function() {
		this.parkSprite.texture = this.parkTextures[this.currentTexture];
		this.bgStage.isInvalid = true;
		this.changeMainTexture(buildings_Park.mainTextures[this.currentMainTexture]);
	}
	,postCreate: function() {
		Building.prototype.postCreate.call(this);
		this.positionSprites();
	}
	,positionSprites: function() {
		Building.prototype.positionSprites.call(this);
		if(this.parkSprite != null) {
			this.parkSprite.position.set(this.position.x,this.position.y);
			this.bgStage.isInvalid = true;
		}
	}
	,beEntertained: function(citizen,timeMod) {
		buildings_buildingBehaviours_ParkWalk.beEntertainedPark(this.leftBuilding,this.rightBuilding,citizen);
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		gui_windowParts_CycleValueButton.create(this.city.gui,function() {
			return _gthis.currentMainTexture;
		},function(t) {
			_gthis.currentMainTexture = t;
			_gthis.changeMainTexture(buildings_Park.mainTextures[_gthis.currentMainTexture]);
		},function() {
			return buildings_Park.mainTextures.length;
		},"Change Building Color");
		gui_windowParts_CycleValueButton.create(this.city.gui,function() {
			return _gthis.currentTexture;
		},function(t1) {
			_gthis.currentTexture = t1;
			_gthis.parkSprite.texture = _gthis.parkTextures[_gthis.currentTexture];
			_gthis.bgStage.isInvalid = true;
		},function() {
			return _gthis.parkTextures.length - _gthis.get_numberOfLockedParkTextures();
		},this.get_changePlantsText());
		Building.prototype.createWindowAddBottomButtons.call(this);
	}
	,destroy: function() {
		Building.prototype.destroy.call(this);
		if(this.festivalEntertainment != null) {
			this.festivalEntertainment.destroy();
		}
		var _this = this.bgStage;
		var child = this.parkSprite;
		HxOverrides.remove(_this.cacheableChildren,child);
		_this.isInvalid = true;
		if(child.parent != null) {
			child.parent.removeChild(child);
		}
	}
	,initFestival: function() {
		if(this.festivalEntertainment == null) {
			this.festivalEntertainment = new buildings_buildingBehaviours_ParkFestivalEntertainment(this,this.bgStage);
		}
	}
	,stopFestival: function() {
		if(this.festivalEntertainment != null) {
			this.festivalEntertainment.stop();
			this.festivalEntertainment.destroy();
			this.festivalEntertainment = null;
		}
	}
	,doFestivalWork: function(festival,citizen,timeMod,citizenID) {
		this.festivalEntertainment.doFestivalWork(festival,citizen,timeMod,this.currentMainTexture,citizenID);
	}
	,beEntertainedFestival: function(festival,citizen,timeMod) {
		this.festivalEntertainment.beEntertainedFestival(festival,citizen,timeMod);
	}
	,endFestivalWork: function(festival,citizen) {
		citizen.setRelativeY(0);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Park.saveDefinition);
		}
		var value = this.currentTexture;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.currentMainTexture;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["currentTexture"] != null ? loadMap.existsReserved("currentTexture") : loadMap.h.hasOwnProperty("currentTexture")) {
			this.currentTexture = __map_reserved["currentTexture"] != null ? loadMap.getReserved("currentTexture") : loadMap.h["currentTexture"];
		}
		if(__map_reserved["currentMainTexture"] != null ? loadMap.existsReserved("currentMainTexture") : loadMap.h.hasOwnProperty("currentMainTexture")) {
			this.currentMainTexture = __map_reserved["currentMainTexture"] != null ? loadMap.getReserved("currentMainTexture") : loadMap.h["currentMainTexture"];
		}
		this.postLoad();
	}
	,__class__: buildings_Park
});
var buildings_ParkPod = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.parkSprite = null;
	this.currentMainTexture = 0;
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.parkTextures = Resources.getTexturesByWidth("spr_parkpod",20);
	this.currentTexture = random_Random.getInt(this.parkTextures.length);
	this.parkSprite = new PIXI.Sprite(this.parkTextures[this.currentTexture]);
	this.parkSprite.position.set(position.x,position.y);
	bgStage.addChild(this.parkSprite);
	this.adjecentBuildingEffects.push({ name : "modernRusticHomeCommunityFeeling", intensity : 1});
};
$hxClasses["buildings.ParkPod"] = buildings_ParkPod;
buildings_ParkPod.__name__ = ["buildings","ParkPod"];
buildings_ParkPod.__super__ = buildings_House;
buildings_ParkPod.prototype = $extend(buildings_House.prototype,{
	get_drawerType: function() {
		return buildings_buildingDrawers_AutoMergingBuildingDrawer;
	}
	,postLoad: function() {
		this.parkSprite.texture = this.parkTextures[this.currentTexture];
		this.changeMainTexture(buildings_ParkPod.mainTextures[this.currentMainTexture]);
	}
	,postCreate: function() {
		buildings_House.prototype.postCreate.call(this);
		this.positionSprites();
	}
	,positionSprites: function() {
		buildings_House.prototype.positionSprites.call(this);
		if(this.parkSprite != null) {
			this.parkSprite.position.set(this.position.x,this.position.y);
		}
	}
	,beEntertained: function(citizen,timeMod) {
		var leftPark = this.leftBuilding != null && this.leftBuilding["is"](buildings_Park);
		var rightPark = this.rightBuilding != null && this.rightBuilding["is"](buildings_Park);
		var goTo = random_Random.getInt(1 + (leftPark ? 1 : 0) + (rightPark ? 1 : 0));
		if(leftPark && goTo == 0) {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[8].length > 0 ? pool[8].splice(pool[8].length - 1,1)[0] : new Int32Array(8);
			arr[0] = 12;
			arr[1] = 50;
			arr[2] = 2;
			arr[3] = 0;
			arr[4] = 4;
			arr[5] = random_Random.getInt(0,18);
			arr[6] = 8;
			arr[7] = random_Random.getInt(100,180);
			citizen.setPath(arr,0,8,true);
		} else if(rightPark && goTo == 1) {
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[8].length > 0 ? pool1[8].splice(pool1[8].length - 1,1)[0] : new Int32Array(8);
			arr1[0] = 12;
			arr1[1] = 50;
			arr1[2] = 3;
			arr1[3] = 0;
			arr1[4] = 4;
			arr1[5] = random_Random.getInt(0,18);
			arr1[6] = 8;
			arr1[7] = random_Random.getInt(100,180);
			citizen.setPath(arr1,0,8,true);
		} else {
			citizen.moveAndWait(random_Random.getInt(leftPark ? 0 : 3,rightPark ? 18 : 15),random_Random.getInt(100,180),null,false,true);
		}
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		gui_windowParts_CycleValueButton.create(this.city.gui,function() {
			return _gthis.currentMainTexture;
		},function(t) {
			_gthis.currentMainTexture = t;
			_gthis.changeMainTexture(buildings_ParkPod.mainTextures[_gthis.currentMainTexture]);
		},function() {
			return buildings_ParkPod.mainTextures.length;
		},"Change Building Color");
		gui_windowParts_CycleValueButton.create(this.city.gui,function() {
			return _gthis.currentTexture;
		},function(t1) {
			_gthis.currentTexture = t1;
			_gthis.parkSprite.texture = _gthis.parkTextures[_gthis.currentTexture];
		},function() {
			return _gthis.parkTextures.length;
		},"Change Variant");
		buildings_House.prototype.createWindowAddBottomButtons.call(this);
	}
	,destroy: function() {
		buildings_House.prototype.destroy.call(this);
		this.bgStage.removeChild(this.parkSprite);
	}
	,walkAround: function(citizen,stepsInBuilding) {
		if(citizen.relativeX == 9) {
			citizen.canViewSelfInBuilding = false;
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 4;
			arr[1] = 9;
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_House.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_ParkPod.saveDefinition);
		}
		var value = this.currentTexture;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.currentMainTexture;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_House.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["currentTexture"] != null ? loadMap.existsReserved("currentTexture") : loadMap.h.hasOwnProperty("currentTexture")) {
			this.currentTexture = __map_reserved["currentTexture"] != null ? loadMap.getReserved("currentTexture") : loadMap.h["currentTexture"];
		}
		if(__map_reserved["currentMainTexture"] != null ? loadMap.existsReserved("currentMainTexture") : loadMap.h.hasOwnProperty("currentMainTexture")) {
			this.currentMainTexture = __map_reserved["currentMainTexture"] != null ? loadMap.getReserved("currentMainTexture") : loadMap.h["currentMainTexture"];
		}
		this.postLoad();
	}
	,__class__: buildings_ParkPod
});
var buildings_Pub = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.markingTexture = "";
	this.marking = null;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 20;
	this.endTime = 5.5;
	this.workTimePreferenceMod = 0.5;
	this.isEntertainment = true;
};
$hxClasses["buildings.Pub"] = buildings_Pub;
buildings_Pub.__name__ = ["buildings","Pub"];
buildings_Pub.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_Pub.__super__ = buildings_Work;
buildings_Pub.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 50;
	}
	,get_isOpen: function() {
		var tmp;
		if(this.workers.length == 1 && this.workers[0].currentAction == LifeAction.Work) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = this.startTime - this.workTimePreferenceMod;
			if(start < 4.5) {
				if(this1 >= start) {
					tmp = this1 < 4.5;
				} else {
					tmp = false;
				}
			} else if(!(this1 >= start)) {
				tmp = this1 < 4.5;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			return this.marking == null;
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 1;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 2;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 6;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,postLoad: function() {
		if(this.markingTexture != "") {
			this.setMarking(this.markingTexture);
		}
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		if(this.marking != null) {
			this.stage.removeChild(this.marking);
		}
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		if(this.marking != null) {
			this.marking.position.set(this.position.x + 2,this.position.y + 10);
		}
	}
	,setMarking: function(markingTexture) {
		this.markingTexture = markingTexture;
		if(this.marking == null) {
			this.marking = new PIXI.Sprite(Resources.getTexture(markingTexture));
		}
		this.marking.texture = Resources.getTexture(markingTexture);
		this.marking.position.set(this.position.x + 2,this.position.y + 10);
		this.stage.addChild(this.marking);
	}
	,beEntertained: function(citizen,timeMod) {
		var moveFunction = function() {
			var moveToX = random_Random.getInt(7,16);
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 4;
			arr[1] = moveToX;
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		};
		if(citizen.relativeY < 5) {
			citizen.changeFloor(moveFunction);
		} else {
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
			arr1[0] = 8;
			arr1[1] = random_Random.getInt(120,180);
			citizen.setPath(arr1,0,2,true);
			citizen.pathEndFunction = moveFunction;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
		if(!citizen.hasBuildingInited) {
			citizen.wantsNightEntertainmentIn = random_Random.getInt(1,5);
			citizen.hasBuildingInited = true;
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking && this.city.simulation.time.timeSinceStart / 60 % 24 > 4.5) {
			citizen.currentAction = LifeAction.Nothing;
		} else if(citizen.relativeY < 5) {
			citizen.changeFloor();
		} else {
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(3 - citizen.relativeX) < spd) {
				citizen.relativeX = 3;
			} else {
				var num = 3 - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
			}
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Pub.saveDefinition);
		}
		queue.addString(this.markingTexture);
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(queue.version < 7) {
			return;
		}
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["markingTexture"] != null ? loadMap.existsReserved("markingTexture") : loadMap.h.hasOwnProperty("markingTexture")) {
			this.markingTexture = __map_reserved["markingTexture"] != null ? loadMap.getReserved("markingTexture") : loadMap.h["markingTexture"];
		}
		this.postLoad();
	}
	,__class__: buildings_Pub
});
var buildings_Restaurant = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 16;
	this.endTime = 1;
	this.workTimePreferenceMod = 0.5;
	this.isEntertainment = true;
};
$hxClasses["buildings.Restaurant"] = buildings_Restaurant;
buildings_Restaurant.__name__ = ["buildings","Restaurant"];
buildings_Restaurant.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_Restaurant.__super__ = buildings_Work;
buildings_Restaurant.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 45;
	}
	,get_isOpen: function() {
		if(this.workers.length >= 1 && this.workers[0].currentAction == LifeAction.Work) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = this.startTime - this.workTimePreferenceMod;
			if(start < 0.5) {
				if(this1 >= start) {
					return this1 < 0.5;
				} else {
					return false;
				}
			} else if(!(this1 >= start)) {
				return this1 < 0.5;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 1;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 1;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 3;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_AutoMergingBuildingDrawer;
	}
	,beEntertained: function(citizen,timeMod) {
		if(!citizen.hasBuildingInited) {
			var hasLeftRestaurant = this.leftBuilding != null && this.leftBuilding["is"](buildings_Restaurant);
			var hasRightRestaurant = this.rightBuilding != null && this.rightBuilding["is"](buildings_Restaurant);
			var getTopTable = function() {
				var i = random_Random.getInt(3 + (hasRightRestaurant ? 1 : 0));
				switch(i) {
				case 0:
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
					arr[0] = 4;
					arr[1] = 4;
					citizen.setPath(arr,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 1:
					var pool1 = pooling_Int32ArrayPool.pool;
					var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
					arr1[0] = 4;
					arr1[1] = 7;
					citizen.setPath(arr1,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 2:
					var pool2 = pooling_Int32ArrayPool.pool;
					var arr2 = pool2[2].length > 0 ? pool2[2].splice(pool2[2].length - 1,1)[0] : new Int32Array(2);
					arr2[0] = 4;
					arr2[1] = 14;
					citizen.setPath(arr2,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				case 3:
					var pool3 = pooling_Int32ArrayPool.pool;
					var arr3 = pool3[2].length > 0 ? pool3[2].splice(pool3[2].length - 1,1)[0] : new Int32Array(2);
					arr3[0] = 4;
					arr3[1] = 17;
					citizen.setPath(arr3,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
					break;
				}
			};
			citizen.wantsNightEntertainmentIn = random_Random.getInt(1,5);
			citizen.hasBuildingInited = true;
			if(citizen.relativeY <= 5) {
				if(random_Random.getInt(3) <= 1) {
					citizen.changeFloor(getTopTable);
				} else if(hasLeftRestaurant) {
					if(random_Random.getInt(2) == 0) {
						var pool4 = pooling_Int32ArrayPool.pool;
						var arr4 = pool4[2].length > 0 ? pool4[2].splice(pool4[2].length - 1,1)[0] : new Int32Array(2);
						arr4[0] = 4;
						arr4[1] = 1;
						citizen.setPath(arr4,0,2,true);
						citizen.pathEndFunction = null;
						citizen.pathOnlyRelatedTo = citizen.inPermanent;
					} else {
						var pool5 = pooling_Int32ArrayPool.pool;
						var arr5 = pool5[2].length > 0 ? pool5[2].splice(pool5[2].length - 1,1)[0] : new Int32Array(2);
						arr5[0] = 4;
						arr5[1] = 6;
						citizen.setPath(arr5,0,2,true);
						citizen.pathEndFunction = null;
						citizen.pathOnlyRelatedTo = citizen.inPermanent;
					}
				} else if(random_Random.getInt(2) == 0) {
					var pool6 = pooling_Int32ArrayPool.pool;
					var arr6 = pool6[2].length > 0 ? pool6[2].splice(pool6[2].length - 1,1)[0] : new Int32Array(2);
					arr6[0] = 4;
					arr6[1] = 3;
					citizen.setPath(arr6,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
				} else {
					var pool7 = pooling_Int32ArrayPool.pool;
					var arr7 = pool7[2].length > 0 ? pool7[2].splice(pool7[2].length - 1,1)[0] : new Int32Array(2);
					arr7[0] = 4;
					arr7[1] = 6;
					citizen.setPath(arr7,0,2,true);
					citizen.pathEndFunction = null;
					citizen.pathOnlyRelatedTo = citizen.inPermanent;
				}
			} else {
				getTopTable();
			}
		} else {
			var pool8 = pooling_Int32ArrayPool.pool;
			var arr8 = pool8[2].length > 0 ? pool8[2].splice(pool8[2].length - 1,1)[0] : new Int32Array(2);
			arr8[0] = 8;
			arr8[1] = random_Random.getInt(30,60);
			citizen.setPath(arr8,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking && this.city.simulation.time.timeSinceStart / 60 % 24 > 0.5) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			var _g = this.workers.indexOf(citizen);
			switch(_g) {
			case 0:
				if(citizen.relativeY > 5) {
					citizen.changeFloor();
				} else {
					var spd = citizen.pathWalkSpeed * timeMod;
					Citizen.shouldUpdateDraw = true;
					if(Math.abs(12 - citizen.relativeX) < spd) {
						citizen.relativeX = 12;
					} else {
						var num = 12 - citizen.relativeX;
						citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
					}
				}
				break;
			case 1:
				if(citizen.relativeY < 5) {
					citizen.changeFloor();
				} else {
					var hasLeftRestaurant = this.leftBuilding != null && this.leftBuilding["is"](buildings_Restaurant);
					var hasRightRestaurant = this.rightBuilding != null && this.rightBuilding["is"](buildings_Restaurant);
					citizen.moveAndWait(random_Random.getInt(hasLeftRestaurant ? 0 : 3,hasRightRestaurant ? 19 : 16),random_Random.getInt(60,90),null,false,false);
				}
				break;
			}
		}
	}
	,__class__: buildings_Restaurant
});
var buildings_School = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.studentCapacity = 30;
	this.schoolEndTime = 16;
	this.schoolStartTime = 7;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.students = [];
};
$hxClasses["buildings.School"] = buildings_School;
buildings_School.__name__ = ["buildings","School"];
buildings_School.__super__ = buildings_Work;
buildings_School.prototype = $extend(buildings_Work.prototype,{
	work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			return;
		}
		var spd = citizen.pathWalkSpeed * timeMod;
		Citizen.shouldUpdateDraw = true;
		if(Math.abs(3 - citizen.relativeX) < spd) {
			citizen.relativeX = 3;
		} else {
			var num = 3 - citizen.relativeX;
			citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + _gthis.students.length + "/" + _gthis.studentCapacity + " students";
		});
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		var i = this.students.length;
		while(--i >= 0) {
			var student = this.students[i];
			student.leaveSchool();
		}
	}
	,afterGiveJob: function(citizen) {
		this.city.simulation.schoolAssigner.schoolsShouldBeUpdated = true;
	}
	,beAtSchool: function(citizen,timeMod) {
		if(!citizen.hasBuildingInited) {
			var i = this.students.indexOf(citizen);
			var _g = i % 3;
			switch(_g) {
			case 0:
				var moveToX = random_Random.getInt(6,7);
				var pool = pooling_Int32ArrayPool.pool;
				var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
				arr[0] = 4;
				arr[1] = moveToX;
				citizen.setPath(arr,0,2,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
				break;
			case 1:
				citizen.changeFloorAndMoveRandom(3,7);
				break;
			case 2:
				var moveToX1 = random_Random.getInt(12,16);
				var pool1 = pooling_Int32ArrayPool.pool;
				var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
				arr1[0] = 4;
				arr1[1] = moveToX1;
				citizen.setPath(arr1,0,2,true);
				citizen.pathEndFunction = null;
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
				break;
			}
			citizen.educationLevel = Math.max(Math.min(citizen.educationLevel + 0.07,1),citizen.educationLevel);
			citizen.hasBuildingInited = true;
		}
	}
	,__class__: buildings_School
});
var buildings_ScrapyardNightClub = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.isCurrentlyActive = false;
	this.mainTextureOther = 0;
	this.mainTextureLeft = 0;
	this.lightsAreOn = -1;
	this.knownEntertainedCitizenSet = 0;
	this.knownEntertainedCitizen = null;
	this.hadLeftNightClub = false;
	this.nightClubEntertainmentQuantity = 0;
	this.mainTexturesLeft = Resources.getTexturesByWidth("spr_synightclub_lefttextures",20);
	this.mainTextures = Resources.getTexturesByWidth("spr_synightclub_maintextures",20);
	this.secondaryBackgroundSprites = [];
	this.mainTextureLeft = random_Random.getInt(this.mainTexturesLeft.length);
	this.mainTextureOther = random_Random.getInt(this.mainTextures.length);
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.mainSprite = new PIXI.Sprite(this.mainTextures[this.mainTextureOther]);
	this.mainSprite.position.set(position.x,position.y);
	bgStage.addChild(this.mainSprite);
	this.positionSprites();
	this.startTime = 20;
	this.endTime = 5.5;
	this.workTimePreferenceMod = 0.5;
	this.isEntertainment = true;
};
$hxClasses["buildings.ScrapyardNightClub"] = buildings_ScrapyardNightClub;
buildings_ScrapyardNightClub.__name__ = ["buildings","ScrapyardNightClub"];
buildings_ScrapyardNightClub.__interfaces__ = [buildings_IEntertainmentBuilding];
buildings_ScrapyardNightClub.__super__ = buildings_Work;
buildings_ScrapyardNightClub.prototype = $extend(buildings_Work.prototype,{
	get_baseEntertainmentCapacity: function() {
		return this.workers.length * 120;
	}
	,get_isOpen: function() {
		if(this.workers.length == 1 && this.workers[0].currentAction == LifeAction.Work) {
			var this1 = this.city.simulation.time.timeSinceStart / 60 % 24;
			var start = this.startTime - this.workTimePreferenceMod;
			if(start < 6) {
				if(this1 >= start) {
					return this1 < 6;
				} else {
					return false;
				}
			} else if(!(this1 >= start)) {
				return this1 < 6;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,get_entertainmentType: function() {
		return 0;
	}
	,get_minimumNormalTimeToSpend: function() {
		return 5;
	}
	,get_maximumNormalTimeToSpend: function() {
		return 7;
	}
	,get_minimumEntertainmentGroupSatisfy: function() {
		return 1;
	}
	,get_maximumEntertainmentGroupSatisfy: function() {
		return 3;
	}
	,get_entertainmentQuality: function() {
		return 100;
	}
	,get_isOpenForExistingVisitors: function() {
		return this.get_isOpen();
	}
	,finishEntertainment: function(citizen,timeMod) {
		return true;
	}
	,get_drawerType: function() {
		return buildings_buildingDrawers_AutoMergingBuildingDrawer;
	}
	,get_hasLeftNightClub: function() {
		if(this.leftBuilding != null) {
			return this.leftBuilding["is"](buildings_ScrapyardNightClub);
		} else {
			return false;
		}
	}
	,get_hasRightNightClub: function() {
		if(this.rightBuilding != null) {
			return this.rightBuilding["is"](buildings_ScrapyardNightClub);
		} else {
			return false;
		}
	}
	,reRegisterSecondaryImages: function() {
		var _g = 0;
		var _g1 = this.secondaryBackgroundSprites;
		while(_g < _g1.length) {
			var spr = _g1[_g];
			++_g;
			spr.destroy();
		}
		this.secondaryBackgroundSprites.splice(0,this.secondaryBackgroundSprites.length);
		if(!this.get_hasLeftNightClub()) {
			var _g2 = this.mainTextureLeft;
			switch(_g2) {
			case 0:
				var sprite0 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights"));
				sprite0.scale.y = 0.8;
				this.secondaryBackgroundSprites.push(sprite0);
				this.bgStage.addChild(sprite0);
				var sprite1 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights"));
				sprite1.scale.y = 0.4;
				this.secondaryBackgroundSprites.push(sprite1);
				this.bgStage.addChild(sprite1);
				var sprite2 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights"));
				sprite2.scale.y = 0.8;
				this.secondaryBackgroundSprites.push(sprite2);
				this.bgStage.addChild(sprite2);
				var sprite3 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights"));
				sprite3.scale.y = 0.5;
				this.secondaryBackgroundSprites.push(sprite3);
				this.bgStage.addChild(sprite3);
				var _g3 = [];
				var _g11 = 0;
				while(_g11 < 4) {
					var i = _g11++;
					_g3.push({ sprite : this.secondaryBackgroundSprites[i], blend : i * 72});
				}
				this.lightColumnData = _g3;
				break;
			case 1:
				this.waterfallBaseHue = (this.position.x * 60 + this.position.y * 75) % 360;
				var _g4 = 0;
				while(_g4 < 3) {
					var i1 = _g4++;
					var spr1 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_waterfalllight"));
					this.secondaryBackgroundSprites.push(spr1);
					this.bgStage.addChild(spr1);
				}
				var spr2 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_waterfalllight_last"));
				this.secondaryBackgroundSprites.push(spr2);
				this.bgStage.addChild(spr2);
				break;
			case 2:
				this.lightColumnDataH = [];
				var _g5 = 0;
				while(_g5 < 3) {
					var i2 = _g5++;
					var spr3 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights_h"));
					spr3.alpha = 0;
					this.bgStage.addChild(spr3);
					this.secondaryBackgroundSprites.push(spr3);
					this.lightColumnDataH.push({ sprite : spr3, blend : i2 * 120, targetBlend : random_Random.getFloat(360)});
				}
				this.secondaryBackgroundSprites[0].scale.x = 1.4;
				this.secondaryBackgroundSprites[1].scale.x = 1.5;
				this.secondaryBackgroundSprites[2].scale.x = 1.2;
				break;
			}
		} else {
			var _g6 = this.mainTextureOther;
			switch(_g6) {
			case 0:
				var sprite01 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights"));
				sprite01.scale.y = 1.1;
				this.secondaryBackgroundSprites.push(sprite01);
				this.bgStage.addChild(sprite01);
				var sprite11 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights"));
				sprite11.scale.y = 1;
				this.secondaryBackgroundSprites.push(sprite11);
				this.bgStage.addChild(sprite11);
				var sprite21 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights"));
				sprite21.scale.y = 1.1;
				this.secondaryBackgroundSprites.push(sprite21);
				this.bgStage.addChild(sprite21);
				var sprite31 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights"));
				sprite31.scale.y = 1.3;
				this.secondaryBackgroundSprites.push(sprite31);
				this.bgStage.addChild(sprite31);
				var sprite4 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights"));
				sprite4.scale.y = 1;
				this.secondaryBackgroundSprites.push(sprite4);
				this.bgStage.addChild(sprite4);
				var _g7 = [];
				var _g12 = 0;
				while(_g12 < 5) {
					var i3 = _g12++;
					_g7.push({ sprite : this.secondaryBackgroundSprites[i3], blend : i3 * 60});
				}
				this.lightColumnData = _g7;
				break;
			case 1:
				this.miniLightData = [];
				var _g8 = 0;
				while(_g8 < 9) {
					var i4 = _g8++;
					var spr4 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_minilight"));
					spr4.alpha = 0;
					this.bgStage.addChild(spr4);
					this.secondaryBackgroundSprites.push(spr4);
					this.miniLightData.push({ waitTime : random_Random.getInt(50), stage : 0, sprite : spr4, alpha : 0});
				}
				break;
			case 2:
				this.lightColumnData = [];
				var _g9 = 0;
				while(_g9 < 6) {
					var i5 = _g9++;
					var spr5 = new PIXI.Sprite(Resources.getTexture("spr_synightclub_lights"));
					if(i5 < 2) {
						spr5.scale.y = 1.2;
					} else if(i5 < 4) {
						spr5.scale.y = 0.7;
					}
					spr5.alpha = 0;
					this.bgStage.addChild(spr5);
					this.secondaryBackgroundSprites.push(spr5);
					this.lightColumnData.push({ sprite : spr5, blend : i5 * 120});
				}
				break;
			}
		}
		this.positionSprites();
		this.activateOrDeactivateSprites(this.lightsAreOn >= 0);
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		if(this.mainSprite != null) {
			this.mainSprite.position.set(this.position.x,this.position.y);
		}
		if(!this.get_hasLeftNightClub()) {
			var _g = this.mainTextureLeft;
			switch(_g) {
			case 0:
				if(this.secondaryBackgroundSprites != null && this.secondaryBackgroundSprites.length >= 4) {
					this.secondaryBackgroundSprites[0].position.set(this.position.x + 3,this.position.y + 2);
					this.secondaryBackgroundSprites[1].position.set(this.position.x + 7,this.position.y + 4);
					this.secondaryBackgroundSprites[2].position.set(this.position.x + 12,this.position.y + 3);
					this.secondaryBackgroundSprites[3].position.set(this.position.x + 16,this.position.y + 4);
				}
				break;
			case 1:
				if(this.secondaryBackgroundSprites != null && this.secondaryBackgroundSprites.length >= 4) {
					this.secondaryBackgroundSprites[0].position.set(this.position.x + 2,this.position.y + 1);
					this.secondaryBackgroundSprites[1].position.set(this.position.x + 6,this.position.y + 5);
					this.secondaryBackgroundSprites[2].position.set(this.position.x + 10,this.position.y + 9);
					this.secondaryBackgroundSprites[3].position.set(this.position.x + 15,this.position.y + 13);
				}
				break;
			case 2:
				if(this.secondaryBackgroundSprites != null && this.secondaryBackgroundSprites.length >= 3) {
					this.secondaryBackgroundSprites[0].position.set(this.position.x + 4,this.position.y + 3);
					this.secondaryBackgroundSprites[1].position.set(this.position.x + 3,this.position.y + 7);
					this.secondaryBackgroundSprites[2].position.set(this.position.x + 6,this.position.y + 11);
				}
				break;
			}
		} else {
			var _g1 = this.mainTextureOther;
			switch(_g1) {
			case 0:
				if(this.secondaryBackgroundSprites != null && this.secondaryBackgroundSprites.length >= 5) {
					this.secondaryBackgroundSprites[0].position.set(this.position.x + 2,this.position.y + 3);
					this.secondaryBackgroundSprites[1].position.set(this.position.x + 6,this.position.y + 2);
					this.secondaryBackgroundSprites[2].position.set(this.position.x + 10,this.position.y + 3);
					this.secondaryBackgroundSprites[3].position.set(this.position.x + 14,this.position.y + 4);
					this.secondaryBackgroundSprites[4].position.set(this.position.x + 17,this.position.y + 2);
				}
				break;
			case 1:
				if(this.secondaryBackgroundSprites != null && this.secondaryBackgroundSprites.length >= 9) {
					this.secondaryBackgroundSprites[0].position.set(this.position.x - 1 + 3,this.position.y - 1 + 3);
					this.secondaryBackgroundSprites[1].position.set(this.position.x - 1 + 2,this.position.y - 1 + 8);
					this.secondaryBackgroundSprites[2].position.set(this.position.x - 1 + 3,this.position.y - 1 + 14);
					this.secondaryBackgroundSprites[3].position.set(this.position.x - 1 + 9,this.position.y - 1 + 4);
					this.secondaryBackgroundSprites[4].position.set(this.position.x - 1 + 7,this.position.y - 1 + 9);
					this.secondaryBackgroundSprites[5].position.set(this.position.x - 1 + 9,this.position.y - 1 + 14);
					this.secondaryBackgroundSprites[6].position.set(this.position.x - 1 + 14,this.position.y - 1 + 4);
					this.secondaryBackgroundSprites[7].position.set(this.position.x - 1 + 14,this.position.y - 1 + 9);
					this.secondaryBackgroundSprites[8].position.set(this.position.x - 1 + 13,this.position.y - 1 + 14);
				}
				break;
			case 2:
				if(this.secondaryBackgroundSprites != null && this.secondaryBackgroundSprites.length >= 6) {
					this.secondaryBackgroundSprites[0].position.set(this.position.x + 3,this.position.y + 3);
					this.secondaryBackgroundSprites[1].position.set(this.position.x + 4,this.position.y + 3);
					this.secondaryBackgroundSprites[2].position.set(this.position.x + 9,this.position.y + 8);
					this.secondaryBackgroundSprites[3].position.set(this.position.x + 10,this.position.y + 8);
					this.secondaryBackgroundSprites[4].position.set(this.position.x + 15,this.position.y + 5);
					this.secondaryBackgroundSprites[5].position.set(this.position.x + 16,this.position.y + 5);
				}
				break;
			}
		}
	}
	,updateSecondaryImages: function(timeMod) {
		if(!this.get_hasLeftNightClub()) {
			var _g = this.mainTextureLeft;
			switch(_g) {
			case 0:
				var _g1 = 0;
				var _g11 = this.lightColumnData;
				while(_g1 < _g11.length) {
					var lc = _g11[_g1];
					++_g1;
					var this1 = [lc.blend,0.65,1];
					var tmp = thx_color__$Hsv_Hsv_$Impl_$.toRgb(this1);
					lc.sprite.tint = common_ColorExtensions.toHexInt(tmp);
					lc.blend = (lc.blend + timeMod) % 360.0;
				}
				break;
			case 1:
				this.waterfallBaseHue += 0.5 * timeMod;
				var offset = 0;
				var _g2 = 0;
				var _g12 = this.secondaryBackgroundSprites;
				while(_g2 < _g12.length) {
					var spr = _g12[_g2];
					++_g2;
					var this2 = [(this.waterfallBaseHue + offset) % 360,0.7,1];
					spr.tint = common_ColorExtensions.toHexInt(thx_color__$Hsv_Hsv_$Impl_$.toRgb(this2));
					offset += 25;
				}
				break;
			case 2:
				var _g3 = 0;
				var _g13 = this.lightColumnDataH;
				while(_g3 < _g13.length) {
					var lc1 = _g13[_g3];
					++_g3;
					var this3 = [lc1.blend,0.65,1];
					var tmp1 = thx_color__$Hsv_Hsv_$Impl_$.toRgb(this3);
					lc1.sprite.tint = common_ColorExtensions.toHexInt(tmp1);
					var diff = lc1.targetBlend - lc1.blend;
					var sgn = diff > 0 ? 1 : diff < 0 ? -1 : 0;
					lc1.blend = (lc1.blend + (Math.abs(diff) > 180.0 ? -sgn : sgn) * timeMod + 360.0) % 360.0;
					if(Math.abs(diff) < 2) {
						lc1.targetBlend = random_Random.getFloat(360);
					}
				}
				break;
			}
		} else {
			var _g4 = this.mainTextureOther;
			switch(_g4) {
			case 0:
				var _g5 = 0;
				var _g14 = this.lightColumnData;
				while(_g5 < _g14.length) {
					var lc2 = _g14[_g5];
					++_g5;
					var this4 = [lc2.blend,0.65,1];
					var tmp2 = thx_color__$Hsv_Hsv_$Impl_$.toRgb(this4);
					lc2.sprite.tint = common_ColorExtensions.toHexInt(tmp2);
					lc2.blend = (lc2.blend + timeMod) % 360.0;
				}
				break;
			case 1:
				var _g6 = 0;
				var _g15 = this.miniLightData;
				while(_g6 < _g15.length) {
					var ml = _g15[_g6];
					++_g6;
					var _g21 = ml.stage;
					switch(_g21) {
					case 0:
						ml.waitTime -= timeMod;
						if(ml.waitTime <= 0) {
							ml.waitTime = 0;
							var this5 = [random_Random.getInt(360),random_Random.getFloat(0.6,0.9),1];
							var tmp3 = thx_color__$Hsv_Hsv_$Impl_$.toRgb(this5);
							ml.sprite.tint = common_ColorExtensions.toHexInt(tmp3);
							ml.stage = 1;
						}
						break;
					case 1:
						ml.alpha += 0.1 * timeMod;
						if(ml.alpha >= 1.0) {
							ml.alpha = 1.0;
							ml.stage = 2;
							ml.waitTime = random_Random.getFloat(20,90);
						}
						ml.sprite.alpha = ml.alpha;
						break;
					case 2:
						ml.waitTime -= timeMod;
						if(ml.waitTime <= 0) {
							ml.waitTime = 0;
							ml.stage = 3;
						}
						break;
					case 3:
						ml.alpha -= 0.1 * timeMod;
						if(ml.alpha <= 0.0) {
							ml.alpha = 0.0;
							ml.stage = 0;
							ml.waitTime = random_Random.getFloat(5);
						}
						ml.sprite.alpha = ml.alpha;
						break;
					}
				}
				break;
			case 2:
				var _g7 = 0;
				while(_g7 < 6) {
					var i = _g7++;
					var lc3 = this.lightColumnData[i];
					var this6 = [lc3.blend,0.75 - i * 0.01,1];
					var tmp4 = thx_color__$Hsv_Hsv_$Impl_$.toRgb(this6);
					lc3.sprite.tint = common_ColorExtensions.toHexInt(tmp4);
					lc3.blend = (lc3.blend + timeMod * (i % 2 == 0 ? 1.5 : -1.5) + 360.0) % 360.0;
				}
				break;
			}
		}
	}
	,activateOrDeactivateSprites: function(activate) {
		if(!this.get_hasLeftNightClub() && this.mainTextureLeft == 0 || !this.get_hasLeftNightClub() && this.mainTextureLeft == 1 || !this.get_hasLeftNightClub() && this.mainTextureLeft == 2 || this.get_hasLeftNightClub() && this.mainTextureOther == 0 || this.get_hasLeftNightClub() && this.mainTextureOther == 2) {
			var _g = 0;
			var _g1 = this.secondaryBackgroundSprites;
			while(_g < _g1.length) {
				var spr = _g1[_g];
				++_g;
				spr.alpha = activate ? 1 : 0;
			}
		} else if(this.get_hasLeftNightClub() && this.mainTextureOther == 1) {
			var _g2 = 0;
			var _g11 = this.miniLightData;
			while(_g2 < _g11.length) {
				var miniImg = _g11[_g2];
				++_g2;
				miniImg.sprite.alpha = activate ? 1 : 0;
				if(!activate) {
					miniImg.alpha = 0;
					miniImg.stage = 0;
				}
			}
		}
	}
	,onCityChange: function() {
		if(this.hadLeftNightClub != this.get_hasLeftNightClub()) {
			var tmp = this.get_hasLeftNightClub() ? this.mainTextures[this.mainTextureOther] : this.mainTexturesLeft[this.mainTextureLeft];
			this.mainSprite.texture = tmp;
			this.hadLeftNightClub = this.get_hasLeftNightClub();
			this.reRegisterSecondaryImages();
		}
	}
	,postCreate: function() {
		buildings_Work.prototype.postCreate.call(this);
		var tmp = this.get_hasLeftNightClub() ? this.mainTextures[this.mainTextureOther] : this.mainTexturesLeft[this.mainTextureLeft];
		this.mainSprite.texture = tmp;
		this.hadLeftNightClub = this.get_hasLeftNightClub();
		this.reRegisterSecondaryImages();
		this.positionSprites();
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		this.bgStage.removeChild(this.mainSprite);
		if(this.secondaryBackgroundSprites != null) {
			var _g = 0;
			var _g1 = this.secondaryBackgroundSprites;
			while(_g < _g1.length) {
				var extraSprite = _g1[_g];
				++_g;
				extraSprite.destroy();
			}
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking && this.city.simulation.time.timeSinceStart / 60 % 24 > 6) {
			citizen.currentAction = LifeAction.Nothing;
		} else if(this.get_hasLeftNightClub()) {
			citizen.moveAndWait(random_Random.getInt(0,this.get_hasRightNightClub() ? 19 : 17),random_Random.getInt(20,50),null,false,false);
			this.lightsAreOn = 60;
		} else {
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(1 - citizen.relativeX) < spd) {
				citizen.relativeX = 1;
			} else {
				var num = 1 - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
			}
			this.lightsAreOn = 3;
		}
	}
	,beEntertained: function(citizen,timeMod) {
		if(this.knownEntertainedCitizen == null) {
			this.knownEntertainedCitizen = citizen;
			this.knownEntertainedCitizenSet = 60;
		} else if(this.knownEntertainedCitizen == citizen) {
			this.knownEntertainedCitizenSet = 60;
		}
		var waitTimeMod = 3;
		var goTo = random_Random.getInt(2 + (this.get_hasLeftNightClub() ? 1 : 0) + (this.get_hasRightNightClub() ? 1 : 0));
		var canGoLR = true;
		if(this.get_hasLeftNightClub() && canGoLR && goTo == 0 && this.leftBuilding.get_isOpen()) {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[6].length > 0 ? pool[6].splice(pool[6].length - 1,1)[0] : new Int32Array(6);
			arr[0] = 2;
			arr[1] = 0;
			arr[2] = 4;
			arr[3] = random_Random.getInt(5,19);
			arr[4] = 8;
			arr[5] = random_Random.getInt(5,6);
			citizen.setPath(arr,0,6,true);
		} else if(this.get_hasRightNightClub() && canGoLR && goTo == 1 && this.rightBuilding.get_isOpen()) {
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[6].length > 0 ? pool1[6].splice(pool1[6].length - 1,1)[0] : new Int32Array(6);
			arr1[0] = 3;
			arr1[1] = 0;
			arr1[2] = 4;
			arr1[3] = random_Random.getInt(0,17);
			arr1[4] = 8;
			arr1[5] = random_Random.getInt(5,6);
			citizen.setPath(arr1,0,6,true);
		} else {
			citizen.moveAndWait(random_Random.getInt(this.get_hasLeftNightClub() ? 0 : 5,this.get_hasRightNightClub() ? 19 : 17),random_Random.getInt(5 + waitTimeMod,6 + waitTimeMod),null,false,false);
		}
		if(!citizen.hasBuildingInited) {
			citizen.wantsNightEntertainmentIn = random_Random.getInt(1,5);
			citizen.hasBuildingInited = true;
		}
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		gui_windowParts_CycleValueButton.create(this.city.gui,function() {
			if(!_gthis.get_hasLeftNightClub()) {
				return _gthis.mainTextureLeft;
			} else {
				return _gthis.mainTextureOther;
			}
		},function(t) {
			var tmp;
			if(_gthis.get_hasLeftNightClub()) {
				_gthis.mainTextureOther = t;
				tmp = _gthis.mainTextures[_gthis.mainTextureOther];
			} else {
				_gthis.mainTextureLeft = t;
				tmp = _gthis.mainTexturesLeft[_gthis.mainTextureLeft];
			}
			_gthis.mainSprite.texture = tmp;
			_gthis.reRegisterSecondaryImages();
		},function() {
			if(!_gthis.get_hasLeftNightClub()) {
				return _gthis.mainTexturesLeft.length;
			} else {
				return _gthis.mainTextures.length;
			}
		},"Change Machines");
		buildings_Work.prototype.createWindowAddBottomButtons.call(this);
	}
	,update: function(timeMod) {
		buildings_Work.prototype.update.call(this,timeMod);
		this.lightsAreOn -= Math.min(1,timeMod);
		var shouldBeActive = this.lightsAreOn > 0 || this.workers.length >= 1 && this.workers[0].inPermanent == this && this.workers[0].currentAction == LifeAction.Work;
		if(shouldBeActive != this.isCurrentlyActive) {
			this.isCurrentlyActive = shouldBeActive;
			this.activateOrDeactivateSprites(this.isCurrentlyActive);
		}
		if(this.isCurrentlyActive) {
			this.updateSecondaryImages(timeMod);
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_ScrapyardNightClub.saveDefinition);
		}
		var value = this.mainTextureLeft;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.mainTextureOther;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(queue.version < 15) {
			return;
		}
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["mainTextureLeft"] != null ? loadMap.existsReserved("mainTextureLeft") : loadMap.h.hasOwnProperty("mainTextureLeft")) {
			this.mainTextureLeft = __map_reserved["mainTextureLeft"] != null ? loadMap.getReserved("mainTextureLeft") : loadMap.h["mainTextureLeft"];
		}
		if(__map_reserved["mainTextureOther"] != null ? loadMap.existsReserved("mainTextureOther") : loadMap.h.hasOwnProperty("mainTextureOther")) {
			this.mainTextureOther = __map_reserved["mainTextureOther"] != null ? loadMap.getReserved("mainTextureOther") : loadMap.h["mainTextureOther"];
		}
	}
	,__class__: buildings_ScrapyardNightClub
});
var buildings_SecretSocietyHouse = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.givenStatueReward = false;
	this.timeToCheckBuildings = 0;
	this.currentMission = 0;
	this.ownPub = null;
	this.manyTeleportAlpha = 0;
	this.eventPhase = 0;
	this.doingEvent = -1;
	this.lastEventDoneOnDay = 0;
	buildings_WorkWithHome.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.startTime = 12;
	this.endTime = 2;
	this.workTimePreferenceMod = 0.3;
};
$hxClasses["buildings.SecretSocietyHouse"] = buildings_SecretSocietyHouse;
buildings_SecretSocietyHouse.__name__ = ["buildings","SecretSocietyHouse"];
buildings_SecretSocietyHouse.__super__ = buildings_WorkWithHome;
buildings_SecretSocietyHouse.prototype = $extend(buildings_WorkWithHome.prototype,{
	onBuild: function() {
		this.city.progress.unlocks.unlock(cityUpgrades_SecretiveLiving);
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_WorkWithHome.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowInner.addChild(new gui_GUISpacing(this.city.gui.window,new common_Point(4,4)));
		this.city.gui.windowAddInfoText(null,function() {
			return _gthis.missionGetTitle();
		},"Arial15");
		this.city.gui.windowAddInfoText(null,function() {
			return _gthis.missionGetText();
		});
	}
	,missionGetTitle: function() {
		if(this.currentMission == 8) {
			return "Thank You";
		}
		return "Current Task";
	}
	,missionGetText: function() {
		if(this.currentMission == 8) {
			return "We will be forever grateful.";
		}
		if(this.workers.length != this.get_jobs()) {
			return "Give us the followers we need:\nMake sure all 8 jobs are filled.";
		}
		var _g = this.currentMission;
		switch(_g) {
		case 0:
			return "Improve Our Home:\nResearch Secretive Living in the Living Research Center.";
		case 1:
			return "Increase Production:\nProduce 1000 Wood in one day.";
		case 2:
			return "Green the City:\nBuild fifty Botanical Gardens.";
		case 3:
			return "Display the Statues:\nBuild twelve Sculpture Gardens.";
		case 4:
			return "Improve Transportation:\nBuild seven Teleporters.";
		case 5:
			return "House the Rich:\nBuild five Villas.";
		case 6:
			return "Know the Hidden:\nGain at least 1000 Knowledge in a day.";
		case 7:
			return "Finish Our Project:\nBuild the Machine.";
		default:
			return "";
		}
	}
	,checkMissionCompletions: function() {
		var missionComplete = false;
		while(true) {
			missionComplete = false;
			var _g = this.currentMission;
			switch(_g) {
			case 0:
				missionComplete = common_ArrayExtensions.any(this.city.upgrades.upgrades,function(cu) {
					return js_Boot.__instanceof(cu,cityUpgrades_SecretiveLiving);
				});
				break;
			case 1:
				missionComplete = common_ArrayExtensions.any(this.city.simulation.stats.materialProduction[MaterialsHelper.findMaterialIndex("wood")],function(mt) {
					return mt >= 1000;
				});
				break;
			case 6:
				missionComplete = common_ArrayExtensions.any(this.city.simulation.stats.materialProduction[MaterialsHelper.findMaterialIndex("knowledge")],function(mt1) {
					return mt1 >= 1000;
				});
				if(missionComplete) {
					this.city.progress.unlocks.unlock(buildings_TheMachine);
				}
				break;
			}
			if(this.currentMission != 0 && this.currentMission != 1 && this.currentMission != 6 && this.currentMission < 8 && this.timeToCheckBuildings <= 0) {
				var buildingsByType = this.city.getAmountOfPermanentsPerType();
				var _g1 = this.currentMission;
				switch(_g1) {
				case 2:
					missionComplete = (__map_reserved["buildings.BotanicalGardens"] != null ? buildingsByType.getReserved("buildings.BotanicalGardens") : buildingsByType.h["buildings.BotanicalGardens"]) >= 50;
					if(missionComplete) {
						this.city.progress.unlocks.unlock(buildings_StatueGarden);
					}
					break;
				case 3:
					missionComplete = (__map_reserved["buildings.StatueGarden"] != null ? buildingsByType.getReserved("buildings.StatueGarden") : buildingsByType.h["buildings.StatueGarden"]) >= 12;
					break;
				case 4:
					missionComplete = (__map_reserved["buildings.Teleporter"] != null ? buildingsByType.getReserved("buildings.Teleporter") : buildingsByType.h["buildings.Teleporter"]) >= 7;
					if(missionComplete) {
						this.city.progress.unlocks.unlock(buildings_Villa);
					}
					break;
				case 5:
					missionComplete = (__map_reserved["buildings.Villa"] != null ? buildingsByType.getReserved("buildings.Villa") : buildingsByType.h["buildings.Villa"]) >= 5;
					break;
				case 7:
					missionComplete = (__map_reserved["buildings.TheMachine"] != null ? buildingsByType.getReserved("buildings.TheMachine") : buildingsByType.h["buildings.TheMachine"]) >= 1;
					break;
				}
				this.timeToCheckBuildings = 30;
			}
			if(missionComplete) {
				this.currentMission += 1;
				this.timeToCheckBuildings = 0;
				this.city.progress.goalHelp.updateHasBuildingGoal();
			}
			if(!missionComplete) {
				break;
			}
		}
	}
	,update: function(timeMod) {
		buildings_WorkWithHome.prototype.update.call(this,timeMod);
		if(this.doingEvent == 1 && this.eventPhase >= 1) {
			if(this.manyTeleportAlpha < 1) {
				this.manyTeleportAlpha += 0.05;
				var _g = 0;
				var _g1 = this.workers;
				while(_g < _g1.length) {
					var worker = _g1[_g];
					++_g;
					worker.sprite.alpha = this.manyTeleportAlpha;
				}
			} else {
				this.doingEvent = -1;
				this.eventPhase = 0;
				var _g2 = 0;
				var _g11 = this.workers;
				while(_g2 < _g11.length) {
					var worker1 = _g11[_g2];
					++_g2;
					worker1.sprite.alpha = 1;
				}
			}
		}
		this.checkMissionCompletions();
		this.timeToCheckBuildings -= timeMod;
		if(!this.givenStatueReward) {
			var _g3 = 0;
			var _g12 = this.workers;
			while(_g3 < _g12.length) {
				var worker2 = _g12[_g3];
				++_g3;
				if(worker2.get_age() >= 500) {
					if(!this.givenStatueReward) {
						this.city.progress.unlocks.unlock(buildings_StatueOfTheKey);
					}
					this.givenStatueReward = true;
				}
			}
		}
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		var _gthis = this;
		if(this.doingEvent != -1) {
			if(this.doingEvent == 1) {
				if(this.eventPhase == 0) {
					if(common_ArrayExtensions.all(this.workers,function(w) {
						if(w.inPermanent != null && w.inPermanent["is"](buildings_Teleporter) && w.relativeX == w.inPermanent.teleportX && w.path == null) {
							return !w.isRequestingPath;
						} else {
							return false;
						}
					})) {
						this.eventPhase = 1;
						var _g = 0;
						var _g1 = this.workers;
						while(_g < _g1.length) {
							var worker = _g1[_g];
							++_g;
							var inPermanent = worker.inPermanent;
							inPermanent.createTeleportParticle("spr_teleporter_ray_key");
							inPermanent.timesUsed += 1;
							worker.onWorld = this.world;
							worker.setRelativePos(random_Random.getInt(this.world.rect.width - 2),0);
							worker.inPermanent = null;
							worker.addToOnWorldStage();
							worker.sprite.alpha = 0;
							this.manyTeleportAlpha = 0;
						}
					} else if(citizen.inPermanent == null || !citizen.inPermanent["is"](buildings_Teleporter)) {
						var _this = this.city.simulation.permanentFinder;
						var time = _this.city.simulation.time.timeSinceStart;
						var xInd;
						var yInd;
						if(citizen.inPermanent != null) {
							xInd = citizen.inPermanent.worldPosition.x;
							yInd = citizen.inPermanent.worldPosition.y / 5 | 0;
						} else {
							xInd = (citizen.relativeX | 0) / 20 | 0;
							yInd = 0;
						}
						var key = citizen.onWorld.rect.x + ";" + citizen.onWorld.rect.y + ";" + xInd + ";" + yInd + ("secretSocietyTeleporterQuery" + this.id);
						var savedResult = _this.savedResults.get(key);
						var permanentToReturn = null;
						if(savedResult != null) {
							if(time < savedResult.expiry) {
								permanentToReturn = savedResult.permanent;
							} else if(savedResult.permanent != null && savedResult.permanent["is"](buildings_Teleporter)) {
								savedResult.expiry += 180;
								permanentToReturn = savedResult.permanent;
							}
						}
						if(permanentToReturn == null) {
							var foundPermanent;
							if(citizen.inPermanent != null) {
								var from = citizen.inPermanent;
								var citizen1 = null;
								var _gthis1 = _this;
								_this.updateQueries += 1;
								_this.pfSeenStart += 3;
								if(_this.pfSeenStart > 100000) {
									_this.pfSeenStart = 1;
								}
								if(from != null) {
									var newPrioritizable = pathfinder_PermanentPrioritizable.create(0,from);
									from.pfRelatedPrioritizable = newPrioritizable;
									_this.pathQueue.enqueue(newPrioritizable);
								} else {
									var _g2 = 0;
									var _g11 = null.permanents;
									while(_g2 < _g11.length) {
										var bottomPermanents = _g11[_g2];
										++_g2;
										if(bottomPermanents.length == 0 || bottomPermanents[0] == null) {
											continue;
										}
										var newPriority = Math.abs(bottomPermanents[0].position.x);
										bottomPermanents[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority,bottomPermanents[0]);
										_this.pathQueue.enqueue(bottomPermanents[0].pfRelatedPrioritizable);
										bottomPermanents[0].pfSeen = _this.pfSeenStart;
									}
								}
								var maxNiceNess = -10000.0;
								var bestPermanent = null;
								var landingSiteGroups = _this.city.connections.landingSiteGroups;
								var teleportersDone = false;
								var _g3 = [];
								var _g12 = 0;
								while(_g12 < landingSiteGroups.length) {
									var i = landingSiteGroups[_g12];
									++_g12;
									_g3.push(false);
								}
								var landingSitesDone = _g3;
								var privateTeleporter = null;
								if(citizen1 != null && citizen1.home != null) {
									if(citizen1.home.get_hasPrivateTeleporter()) {
										privateTeleporter = citizen1.home;
									} else {
										privateTeleporter = null;
									}
								}
								while(_this.pathQueue.mSize != 0) {
									var currentQueueItem = _this.pathQueue.dequeue();
									var currentPermanent = currentQueueItem.permanent;
									currentPermanent.pfSeen = _this.pfSeenStart + 1;
									if(currentPermanent["is"](buildings_Teleporter)) {
										while(_this.pathQueue.mSize != 0) _this.pathQueue.dequeue().destroy();
										bestPermanent = currentPermanent;
										break;
									}
									if(currentPermanent.isBuilding) {
										var currentBuilding = currentPermanent;
										var permanentTo = currentBuilding.leftBuilding;
										if(permanentTo != null) {
											if(permanentTo.pfSeen == _gthis1.pfSeenStart) {
												var relatedPrioritizable = permanentTo.pfRelatedPrioritizable;
												var newPriority1 = currentQueueItem.priority + 20;
												if(newPriority1 < relatedPrioritizable.priority) {
													_gthis1.pathQueue.reprioritize(relatedPrioritizable,newPriority1);
												}
											} else if(permanentTo.pfSeen != _gthis1.pfSeenStart + 1) {
												var newPriority2 = currentQueueItem.priority + 20;
												permanentTo.pfSeen = _gthis1.pfSeenStart;
												permanentTo.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority2,permanentTo);
												_gthis1.pathQueue.enqueue(permanentTo.pfRelatedPrioritizable);
											}
										}
										var permanentTo1 = currentBuilding.rightBuilding;
										if(permanentTo1 != null) {
											if(permanentTo1.pfSeen == _gthis1.pfSeenStart) {
												var relatedPrioritizable1 = permanentTo1.pfRelatedPrioritizable;
												var newPriority3 = currentQueueItem.priority + 20;
												if(newPriority3 < relatedPrioritizable1.priority) {
													_gthis1.pathQueue.reprioritize(relatedPrioritizable1,newPriority3);
												}
											} else if(permanentTo1.pfSeen != _gthis1.pfSeenStart + 1) {
												var newPriority4 = currentQueueItem.priority + 20;
												permanentTo1.pfSeen = _gthis1.pfSeenStart;
												permanentTo1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority4,permanentTo1);
												_gthis1.pathQueue.enqueue(permanentTo1.pfRelatedPrioritizable);
											}
										}
										var permanentTo2 = currentBuilding.topBuilding;
										if(permanentTo2 != null) {
											if(permanentTo2.pfSeen == _gthis1.pfSeenStart) {
												var relatedPrioritizable2 = permanentTo2.pfRelatedPrioritizable;
												var newPriority5 = currentQueueItem.priority + 20;
												if(newPriority5 < relatedPrioritizable2.priority) {
													_gthis1.pathQueue.reprioritize(relatedPrioritizable2,newPriority5);
												}
											} else if(permanentTo2.pfSeen != _gthis1.pfSeenStart + 1) {
												var newPriority6 = currentQueueItem.priority + 20;
												permanentTo2.pfSeen = _gthis1.pfSeenStart;
												permanentTo2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority6,permanentTo2);
												_gthis1.pathQueue.enqueue(permanentTo2.pfRelatedPrioritizable);
											}
										}
										var permanentTo3 = currentBuilding.bottomBuilding;
										if(permanentTo3 != null) {
											if(permanentTo3.pfSeen == _gthis1.pfSeenStart) {
												var relatedPrioritizable3 = permanentTo3.pfRelatedPrioritizable;
												var newPriority7 = currentQueueItem.priority + 20;
												if(newPriority7 < relatedPrioritizable3.priority) {
													_gthis1.pathQueue.reprioritize(relatedPrioritizable3,newPriority7);
												}
											} else if(permanentTo3.pfSeen != _gthis1.pfSeenStart + 1) {
												var newPriority8 = currentQueueItem.priority + 20;
												permanentTo3.pfSeen = _gthis1.pfSeenStart;
												permanentTo3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority8,permanentTo3);
												_gthis1.pathQueue.enqueue(permanentTo3.pfRelatedPrioritizable);
											}
										}
										var isPrivateTeleporter = privateTeleporter == currentPermanent;
										var canTeleportFromHere = currentPermanent["is"](buildings_Teleporter) || isPrivateTeleporter;
										if(!teleportersDone && canTeleportFromHere) {
											var rnd = random_Random.getFloat(2);
											var tp = 0;
											var len = _this.city.teleporters.length;
											var invlen = 2 / len;
											var _g21 = 0;
											var _g13 = len;
											while(_g21 < _g13) {
												var tp1 = _g21++;
												var teleporter = _this.city.teleporters[tp1];
												var priorityAdd = 9 + (rnd + tp1 * invlen) % 2.0;
												if(teleporter != null) {
													if(teleporter.pfSeen == _gthis1.pfSeenStart) {
														var relatedPrioritizable4 = teleporter.pfRelatedPrioritizable;
														var newPriority9 = currentQueueItem.priority + priorityAdd;
														if(newPriority9 < relatedPrioritizable4.priority) {
															_gthis1.pathQueue.reprioritize(relatedPrioritizable4,newPriority9);
														}
													} else if(teleporter.pfSeen != _gthis1.pfSeenStart + 1) {
														var newPriority10 = currentQueueItem.priority + priorityAdd;
														teleporter.pfSeen = _gthis1.pfSeenStart;
														teleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority10,teleporter);
														_gthis1.pathQueue.enqueue(teleporter.pfRelatedPrioritizable);
													}
												}
											}
											if(!isPrivateTeleporter && privateTeleporter != null) {
												if(privateTeleporter != null) {
													if(privateTeleporter.pfSeen == _gthis1.pfSeenStart) {
														var relatedPrioritizable5 = privateTeleporter.pfRelatedPrioritizable;
														var newPriority11 = currentQueueItem.priority + 10;
														if(newPriority11 < relatedPrioritizable5.priority) {
															_gthis1.pathQueue.reprioritize(relatedPrioritizable5,newPriority11);
														}
													} else if(privateTeleporter.pfSeen != _gthis1.pfSeenStart + 1) {
														var newPriority12 = currentQueueItem.priority + 10;
														privateTeleporter.pfSeen = _gthis1.pfSeenStart;
														privateTeleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority12,privateTeleporter);
														_gthis1.pathQueue.enqueue(privateTeleporter.pfRelatedPrioritizable);
													}
												}
											}
											teleportersDone = true;
										} else if(currentPermanent["is"](buildings_LandingSite) && !landingSitesDone[currentPermanent.landingSiteGroup]) {
											var thisGroup = currentPermanent.landingSiteGroup;
											var _g14 = 0;
											var _g22 = _this.city.connections.landingSiteGroups[thisGroup];
											while(_g14 < _g22.length) {
												var landingSite = _g22[_g14];
												++_g14;
												var priorityAdd1 = landingSite.estimatedFlyingDistanceTo(currentPermanent);
												if(landingSite != null) {
													if(landingSite.pfSeen == _gthis1.pfSeenStart) {
														var relatedPrioritizable6 = landingSite.pfRelatedPrioritizable;
														var newPriority13 = currentQueueItem.priority + priorityAdd1;
														if(newPriority13 < relatedPrioritizable6.priority) {
															_gthis1.pathQueue.reprioritize(relatedPrioritizable6,newPriority13);
														}
													} else if(landingSite.pfSeen != _gthis1.pfSeenStart + 1) {
														var newPriority14 = currentQueueItem.priority + priorityAdd1;
														landingSite.pfSeen = _gthis1.pfSeenStart;
														landingSite.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority14,landingSite);
														_gthis1.pathQueue.enqueue(landingSite.pfRelatedPrioritizable);
													}
												}
											}
											landingSitesDone[thisGroup] = true;
										} else if(!currentQueueItem.dontCheckElevators && currentPermanent["is"](buildings_HyperElevator) && currentPermanent.pfSeen != 3) {
											var _g15 = 0;
											var _g23 = _this.city.connections.elevatorConnections.get(currentBuilding.world)[currentBuilding.worldPosition.x];
											while(_g15 < _g23.length) {
												var elevator = _g23[_g15];
												++_g15;
												var priorityAdd2 = Math.abs(elevator.worldPosition.y - currentBuilding.worldPosition.y);
												if(elevator != null) {
													if(elevator.pfSeen == _gthis1.pfSeenStart) {
														var relatedPrioritizable7 = elevator.pfRelatedPrioritizable;
														var newPriority15 = currentQueueItem.priority + priorityAdd2;
														if(newPriority15 < relatedPrioritizable7.priority) {
															_gthis1.pathQueue.reprioritize(relatedPrioritizable7,newPriority15);
														}
													} else if(elevator.pfSeen != _gthis1.pfSeenStart + 1) {
														var newPriority16 = currentQueueItem.priority + priorityAdd2;
														elevator.pfSeen = _gthis1.pfSeenStart;
														elevator.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority16,elevator);
														_gthis1.pathQueue.enqueue(elevator.pfRelatedPrioritizable);
													}
												}
												if(elevator.pfRelatedPrioritizable != null) {
													elevator.pfRelatedPrioritizable.dontCheckElevators = true;
												}
											}
										}
									}
									if(currentPermanent.worldPosition.y == 0) {
										var _g16 = 0;
										var _g24 = currentPermanent.world.permanents;
										while(_g16 < _g24.length) {
											var bottomPermanents1 = _g24[_g16];
											++_g16;
											if(bottomPermanents1.length == 0 || bottomPermanents1[0] == null) {
												continue;
											}
											var permanentTo4 = bottomPermanents1[0];
											var priorityAdd3 = Math.abs(bottomPermanents1[0].position.x - currentPermanent.position.x);
											if(permanentTo4 != null) {
												if(permanentTo4.pfSeen == _gthis1.pfSeenStart) {
													var relatedPrioritizable8 = permanentTo4.pfRelatedPrioritizable;
													var newPriority17 = currentQueueItem.priority + priorityAdd3;
													if(newPriority17 < relatedPrioritizable8.priority) {
														_gthis1.pathQueue.reprioritize(relatedPrioritizable8,newPriority17);
													}
												} else if(permanentTo4.pfSeen != _gthis1.pfSeenStart + 1) {
													var newPriority18 = currentQueueItem.priority + priorityAdd3;
													permanentTo4.pfSeen = _gthis1.pfSeenStart;
													permanentTo4.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority18,permanentTo4);
													_gthis1.pathQueue.enqueue(permanentTo4.pfRelatedPrioritizable);
												}
											}
										}
									}
									currentQueueItem.destroy();
								}
								foundPermanent = bestPermanent;
							} else {
								var fromWorldX = citizen.relativeX;
								var citizen2 = null;
								var _gthis2 = _this;
								_this.updateQueries += 1;
								_this.pfSeenStart += 3;
								if(_this.pfSeenStart > 100000) {
									_this.pfSeenStart = 1;
								}
								var _g4 = 0;
								var _g17 = citizen.onWorld.permanents;
								while(_g4 < _g17.length) {
									var bottomPermanents2 = _g17[_g4];
									++_g4;
									if(bottomPermanents2.length == 0 || bottomPermanents2[0] == null) {
										continue;
									}
									var newPriority19 = Math.abs(bottomPermanents2[0].position.x - fromWorldX);
									bottomPermanents2[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority19,bottomPermanents2[0]);
									_this.pathQueue.enqueue(bottomPermanents2[0].pfRelatedPrioritizable);
									bottomPermanents2[0].pfSeen = _this.pfSeenStart;
								}
								var maxNiceNess1 = -10000.0;
								var bestPermanent1 = null;
								var landingSiteGroups1 = _this.city.connections.landingSiteGroups;
								var teleportersDone1 = false;
								var _g5 = [];
								var _g18 = 0;
								while(_g18 < landingSiteGroups1.length) {
									var i1 = landingSiteGroups1[_g18];
									++_g18;
									_g5.push(false);
								}
								var landingSitesDone1 = _g5;
								var privateTeleporter1 = null;
								if(citizen2 != null && citizen2.home != null) {
									if(citizen2.home.get_hasPrivateTeleporter()) {
										privateTeleporter1 = citizen2.home;
									} else {
										privateTeleporter1 = null;
									}
								}
								while(_this.pathQueue.mSize != 0) {
									var currentQueueItem1 = _this.pathQueue.dequeue();
									var currentPermanent1 = currentQueueItem1.permanent;
									currentPermanent1.pfSeen = _this.pfSeenStart + 1;
									if(currentPermanent1["is"](buildings_Teleporter)) {
										while(_this.pathQueue.mSize != 0) _this.pathQueue.dequeue().destroy();
										bestPermanent1 = currentPermanent1;
										break;
									}
									if(currentPermanent1.isBuilding) {
										var currentBuilding1 = currentPermanent1;
										var permanentTo5 = currentBuilding1.leftBuilding;
										if(permanentTo5 != null) {
											if(permanentTo5.pfSeen == _gthis2.pfSeenStart) {
												var relatedPrioritizable9 = permanentTo5.pfRelatedPrioritizable;
												var newPriority20 = currentQueueItem1.priority + 20;
												if(newPriority20 < relatedPrioritizable9.priority) {
													_gthis2.pathQueue.reprioritize(relatedPrioritizable9,newPriority20);
												}
											} else if(permanentTo5.pfSeen != _gthis2.pfSeenStart + 1) {
												var newPriority21 = currentQueueItem1.priority + 20;
												permanentTo5.pfSeen = _gthis2.pfSeenStart;
												permanentTo5.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority21,permanentTo5);
												_gthis2.pathQueue.enqueue(permanentTo5.pfRelatedPrioritizable);
											}
										}
										var permanentTo6 = currentBuilding1.rightBuilding;
										if(permanentTo6 != null) {
											if(permanentTo6.pfSeen == _gthis2.pfSeenStart) {
												var relatedPrioritizable10 = permanentTo6.pfRelatedPrioritizable;
												var newPriority22 = currentQueueItem1.priority + 20;
												if(newPriority22 < relatedPrioritizable10.priority) {
													_gthis2.pathQueue.reprioritize(relatedPrioritizable10,newPriority22);
												}
											} else if(permanentTo6.pfSeen != _gthis2.pfSeenStart + 1) {
												var newPriority23 = currentQueueItem1.priority + 20;
												permanentTo6.pfSeen = _gthis2.pfSeenStart;
												permanentTo6.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority23,permanentTo6);
												_gthis2.pathQueue.enqueue(permanentTo6.pfRelatedPrioritizable);
											}
										}
										var permanentTo7 = currentBuilding1.topBuilding;
										if(permanentTo7 != null) {
											if(permanentTo7.pfSeen == _gthis2.pfSeenStart) {
												var relatedPrioritizable11 = permanentTo7.pfRelatedPrioritizable;
												var newPriority24 = currentQueueItem1.priority + 20;
												if(newPriority24 < relatedPrioritizable11.priority) {
													_gthis2.pathQueue.reprioritize(relatedPrioritizable11,newPriority24);
												}
											} else if(permanentTo7.pfSeen != _gthis2.pfSeenStart + 1) {
												var newPriority25 = currentQueueItem1.priority + 20;
												permanentTo7.pfSeen = _gthis2.pfSeenStart;
												permanentTo7.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority25,permanentTo7);
												_gthis2.pathQueue.enqueue(permanentTo7.pfRelatedPrioritizable);
											}
										}
										var permanentTo8 = currentBuilding1.bottomBuilding;
										if(permanentTo8 != null) {
											if(permanentTo8.pfSeen == _gthis2.pfSeenStart) {
												var relatedPrioritizable12 = permanentTo8.pfRelatedPrioritizable;
												var newPriority26 = currentQueueItem1.priority + 20;
												if(newPriority26 < relatedPrioritizable12.priority) {
													_gthis2.pathQueue.reprioritize(relatedPrioritizable12,newPriority26);
												}
											} else if(permanentTo8.pfSeen != _gthis2.pfSeenStart + 1) {
												var newPriority27 = currentQueueItem1.priority + 20;
												permanentTo8.pfSeen = _gthis2.pfSeenStart;
												permanentTo8.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority27,permanentTo8);
												_gthis2.pathQueue.enqueue(permanentTo8.pfRelatedPrioritizable);
											}
										}
										var isPrivateTeleporter1 = privateTeleporter1 == currentPermanent1;
										var canTeleportFromHere1 = currentPermanent1["is"](buildings_Teleporter) || isPrivateTeleporter1;
										if(!teleportersDone1 && canTeleportFromHere1) {
											var rnd1 = random_Random.getFloat(2);
											var tp2 = 0;
											var len1 = _this.city.teleporters.length;
											var invlen1 = 2 / len1;
											var _g25 = 0;
											var _g19 = len1;
											while(_g25 < _g19) {
												var tp3 = _g25++;
												var teleporter1 = _this.city.teleporters[tp3];
												var priorityAdd4 = 9 + (rnd1 + tp3 * invlen1) % 2.0;
												if(teleporter1 != null) {
													if(teleporter1.pfSeen == _gthis2.pfSeenStart) {
														var relatedPrioritizable13 = teleporter1.pfRelatedPrioritizable;
														var newPriority28 = currentQueueItem1.priority + priorityAdd4;
														if(newPriority28 < relatedPrioritizable13.priority) {
															_gthis2.pathQueue.reprioritize(relatedPrioritizable13,newPriority28);
														}
													} else if(teleporter1.pfSeen != _gthis2.pfSeenStart + 1) {
														var newPriority29 = currentQueueItem1.priority + priorityAdd4;
														teleporter1.pfSeen = _gthis2.pfSeenStart;
														teleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority29,teleporter1);
														_gthis2.pathQueue.enqueue(teleporter1.pfRelatedPrioritizable);
													}
												}
											}
											if(!isPrivateTeleporter1 && privateTeleporter1 != null) {
												if(privateTeleporter1 != null) {
													if(privateTeleporter1.pfSeen == _gthis2.pfSeenStart) {
														var relatedPrioritizable14 = privateTeleporter1.pfRelatedPrioritizable;
														var newPriority30 = currentQueueItem1.priority + 10;
														if(newPriority30 < relatedPrioritizable14.priority) {
															_gthis2.pathQueue.reprioritize(relatedPrioritizable14,newPriority30);
														}
													} else if(privateTeleporter1.pfSeen != _gthis2.pfSeenStart + 1) {
														var newPriority31 = currentQueueItem1.priority + 10;
														privateTeleporter1.pfSeen = _gthis2.pfSeenStart;
														privateTeleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority31,privateTeleporter1);
														_gthis2.pathQueue.enqueue(privateTeleporter1.pfRelatedPrioritizable);
													}
												}
											}
											teleportersDone1 = true;
										} else if(currentPermanent1["is"](buildings_LandingSite) && !landingSitesDone1[currentPermanent1.landingSiteGroup]) {
											var thisGroup1 = currentPermanent1.landingSiteGroup;
											var _g110 = 0;
											var _g26 = _this.city.connections.landingSiteGroups[thisGroup1];
											while(_g110 < _g26.length) {
												var landingSite1 = _g26[_g110];
												++_g110;
												var priorityAdd5 = landingSite1.estimatedFlyingDistanceTo(currentPermanent1);
												if(landingSite1 != null) {
													if(landingSite1.pfSeen == _gthis2.pfSeenStart) {
														var relatedPrioritizable15 = landingSite1.pfRelatedPrioritizable;
														var newPriority32 = currentQueueItem1.priority + priorityAdd5;
														if(newPriority32 < relatedPrioritizable15.priority) {
															_gthis2.pathQueue.reprioritize(relatedPrioritizable15,newPriority32);
														}
													} else if(landingSite1.pfSeen != _gthis2.pfSeenStart + 1) {
														var newPriority33 = currentQueueItem1.priority + priorityAdd5;
														landingSite1.pfSeen = _gthis2.pfSeenStart;
														landingSite1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority33,landingSite1);
														_gthis2.pathQueue.enqueue(landingSite1.pfRelatedPrioritizable);
													}
												}
											}
											landingSitesDone1[thisGroup1] = true;
										} else if(!currentQueueItem1.dontCheckElevators && currentPermanent1["is"](buildings_HyperElevator) && currentPermanent1.pfSeen != 3) {
											var _g111 = 0;
											var _g27 = _this.city.connections.elevatorConnections.get(currentBuilding1.world)[currentBuilding1.worldPosition.x];
											while(_g111 < _g27.length) {
												var elevator1 = _g27[_g111];
												++_g111;
												var priorityAdd6 = Math.abs(elevator1.worldPosition.y - currentBuilding1.worldPosition.y);
												if(elevator1 != null) {
													if(elevator1.pfSeen == _gthis2.pfSeenStart) {
														var relatedPrioritizable16 = elevator1.pfRelatedPrioritizable;
														var newPriority34 = currentQueueItem1.priority + priorityAdd6;
														if(newPriority34 < relatedPrioritizable16.priority) {
															_gthis2.pathQueue.reprioritize(relatedPrioritizable16,newPriority34);
														}
													} else if(elevator1.pfSeen != _gthis2.pfSeenStart + 1) {
														var newPriority35 = currentQueueItem1.priority + priorityAdd6;
														elevator1.pfSeen = _gthis2.pfSeenStart;
														elevator1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority35,elevator1);
														_gthis2.pathQueue.enqueue(elevator1.pfRelatedPrioritizable);
													}
												}
												if(elevator1.pfRelatedPrioritizable != null) {
													elevator1.pfRelatedPrioritizable.dontCheckElevators = true;
												}
											}
										}
									}
									if(currentPermanent1.worldPosition.y == 0) {
										var _g112 = 0;
										var _g28 = currentPermanent1.world.permanents;
										while(_g112 < _g28.length) {
											var bottomPermanents3 = _g28[_g112];
											++_g112;
											if(bottomPermanents3.length == 0 || bottomPermanents3[0] == null) {
												continue;
											}
											var permanentTo9 = bottomPermanents3[0];
											var priorityAdd7 = Math.abs(bottomPermanents3[0].position.x - currentPermanent1.position.x);
											if(permanentTo9 != null) {
												if(permanentTo9.pfSeen == _gthis2.pfSeenStart) {
													var relatedPrioritizable17 = permanentTo9.pfRelatedPrioritizable;
													var newPriority36 = currentQueueItem1.priority + priorityAdd7;
													if(newPriority36 < relatedPrioritizable17.priority) {
														_gthis2.pathQueue.reprioritize(relatedPrioritizable17,newPriority36);
													}
												} else if(permanentTo9.pfSeen != _gthis2.pfSeenStart + 1) {
													var newPriority37 = currentQueueItem1.priority + priorityAdd7;
													permanentTo9.pfSeen = _gthis2.pfSeenStart;
													permanentTo9.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority37,permanentTo9);
													_gthis2.pathQueue.enqueue(permanentTo9.pfRelatedPrioritizable);
												}
											}
										}
									}
									currentQueueItem1.destroy();
								}
								foundPermanent = bestPermanent1;
							}
							var v = { permanent : foundPermanent, expiry : time + 180};
							_this.savedResults.set(key,v);
							permanentToReturn = foundPermanent;
						}
						var manyTeleportTeleporter = permanentToReturn;
						if(manyTeleportTeleporter == null) {
							this.doingEvent = -1;
						} else {
							citizen.simulation.pathfinder.findPath(citizen,manyTeleportTeleporter);
							citizen.pathOnFail = null;
						}
					} else {
						var x = citizen.inPermanent.teleportX;
						var spd = citizen.pathWalkSpeed * timeMod;
						Citizen.shouldUpdateDraw = true;
						if(Math.abs(x - citizen.relativeX) < spd) {
							citizen.relativeX = x;
						} else {
							var num = x - citizen.relativeX;
							citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
						}
					}
				}
				return;
			}
			if(this.doingEvent == 2) {
				if(citizen.inPermanent != null && citizen.inPermanent == this.ownPub) {
					var thisPub = citizen.inPermanent;
					if(thisPub.markingTexture == "") {
						thisPub.setMarking("spr_pub_marking_key");
					}
					if(((this.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 >= 5 && ((this.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 < 10) {
						this.doingEvent = -1;
					} else {
						thisPub.beEntertained(citizen,timeMod);
					}
					return;
				}
				var thereAreNoPubs = true;
				if(this.ownPub != null && this.ownPub.destroyed) {
					this.ownPub = null;
				}
				if(this.ownPub == null) {
					var _g6 = 0;
					var _g113 = this.city.permanents;
					while(_g6 < _g113.length) {
						var pm = _g113[_g6];
						++_g6;
						if(pm["is"](buildings_Pub)) {
							var thisPub1 = pm;
							if(thisPub1.markingTexture == "spr_pub_marking_key") {
								this.ownPub = thisPub1;
								break;
							}
							thereAreNoPubs = false;
						}
					}
				}
				if(this.ownPub == null && !thereAreNoPubs) {
					var _this1 = this.city.simulation.permanentFinder;
					var time1 = _this1.city.simulation.time.timeSinceStart;
					var xInd1;
					var yInd1;
					if(citizen.inPermanent != null) {
						xInd1 = citizen.inPermanent.worldPosition.x;
						yInd1 = citizen.inPermanent.worldPosition.y / 5 | 0;
					} else {
						xInd1 = (citizen.relativeX | 0) / 20 | 0;
						yInd1 = 0;
					}
					var key1 = citizen.onWorld.rect.x + ";" + citizen.onWorld.rect.y + ";" + xInd1 + ";" + yInd1 + ("secretSocietyPub" + this.id);
					var savedResult1 = _this1.savedResults.get(key1);
					var permanentToReturn1 = null;
					if(savedResult1 != null) {
						if(time1 < savedResult1.expiry) {
							permanentToReturn1 = savedResult1.permanent;
						} else {
							var tmp;
							if(savedResult1.permanent != null) {
								var pm1 = savedResult1.permanent;
								if(pm1["is"](buildings_Pub)) {
									tmp = pm1.markingTexture == "";
								} else {
									tmp = false;
								}
							} else {
								tmp = false;
							}
							if(tmp) {
								savedResult1.expiry += 180;
								permanentToReturn1 = savedResult1.permanent;
							}
						}
					}
					if(permanentToReturn1 == null) {
						var foundPermanent1;
						if(citizen.inPermanent != null) {
							var from1 = citizen.inPermanent;
							var citizen3 = null;
							var _gthis3 = _this1;
							_this1.updateQueries += 1;
							_this1.pfSeenStart += 3;
							if(_this1.pfSeenStart > 100000) {
								_this1.pfSeenStart = 1;
							}
							if(from1 != null) {
								var newPrioritizable1 = pathfinder_PermanentPrioritizable.create(0,from1);
								from1.pfRelatedPrioritizable = newPrioritizable1;
								_this1.pathQueue.enqueue(newPrioritizable1);
							} else {
								var _g7 = 0;
								var _g114 = null.permanents;
								while(_g7 < _g114.length) {
									var bottomPermanents4 = _g114[_g7];
									++_g7;
									if(bottomPermanents4.length == 0 || bottomPermanents4[0] == null) {
										continue;
									}
									var newPriority38 = Math.abs(bottomPermanents4[0].position.x);
									bottomPermanents4[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority38,bottomPermanents4[0]);
									_this1.pathQueue.enqueue(bottomPermanents4[0].pfRelatedPrioritizable);
									bottomPermanents4[0].pfSeen = _this1.pfSeenStart;
								}
							}
							var maxNiceNess2 = -10000.0;
							var bestPermanent2 = null;
							var landingSiteGroups2 = _this1.city.connections.landingSiteGroups;
							var teleportersDone2 = false;
							var _g8 = [];
							var _g115 = 0;
							while(_g115 < landingSiteGroups2.length) {
								var i2 = landingSiteGroups2[_g115];
								++_g115;
								_g8.push(false);
							}
							var landingSitesDone2 = _g8;
							var privateTeleporter2 = null;
							if(citizen3 != null && citizen3.home != null) {
								if(citizen3.home.get_hasPrivateTeleporter()) {
									privateTeleporter2 = citizen3.home;
								} else {
									privateTeleporter2 = null;
								}
							}
							while(_this1.pathQueue.mSize != 0) {
								var currentQueueItem2 = _this1.pathQueue.dequeue();
								var currentPermanent2 = currentQueueItem2.permanent;
								currentPermanent2.pfSeen = _this1.pfSeenStart + 1;
								if(currentPermanent2["is"](buildings_Pub) && currentPermanent2.markingTexture == "") {
									while(_this1.pathQueue.mSize != 0) _this1.pathQueue.dequeue().destroy();
									bestPermanent2 = currentPermanent2;
									break;
								}
								if(currentPermanent2.isBuilding) {
									var currentBuilding2 = currentPermanent2;
									var permanentTo10 = currentBuilding2.leftBuilding;
									if(permanentTo10 != null) {
										if(permanentTo10.pfSeen == _gthis3.pfSeenStart) {
											var relatedPrioritizable18 = permanentTo10.pfRelatedPrioritizable;
											var newPriority39 = currentQueueItem2.priority + 20;
											if(newPriority39 < relatedPrioritizable18.priority) {
												_gthis3.pathQueue.reprioritize(relatedPrioritizable18,newPriority39);
											}
										} else if(permanentTo10.pfSeen != _gthis3.pfSeenStart + 1) {
											var newPriority40 = currentQueueItem2.priority + 20;
											permanentTo10.pfSeen = _gthis3.pfSeenStart;
											permanentTo10.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority40,permanentTo10);
											_gthis3.pathQueue.enqueue(permanentTo10.pfRelatedPrioritizable);
										}
									}
									var permanentTo11 = currentBuilding2.rightBuilding;
									if(permanentTo11 != null) {
										if(permanentTo11.pfSeen == _gthis3.pfSeenStart) {
											var relatedPrioritizable19 = permanentTo11.pfRelatedPrioritizable;
											var newPriority41 = currentQueueItem2.priority + 20;
											if(newPriority41 < relatedPrioritizable19.priority) {
												_gthis3.pathQueue.reprioritize(relatedPrioritizable19,newPriority41);
											}
										} else if(permanentTo11.pfSeen != _gthis3.pfSeenStart + 1) {
											var newPriority42 = currentQueueItem2.priority + 20;
											permanentTo11.pfSeen = _gthis3.pfSeenStart;
											permanentTo11.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority42,permanentTo11);
											_gthis3.pathQueue.enqueue(permanentTo11.pfRelatedPrioritizable);
										}
									}
									var permanentTo12 = currentBuilding2.topBuilding;
									if(permanentTo12 != null) {
										if(permanentTo12.pfSeen == _gthis3.pfSeenStart) {
											var relatedPrioritizable20 = permanentTo12.pfRelatedPrioritizable;
											var newPriority43 = currentQueueItem2.priority + 20;
											if(newPriority43 < relatedPrioritizable20.priority) {
												_gthis3.pathQueue.reprioritize(relatedPrioritizable20,newPriority43);
											}
										} else if(permanentTo12.pfSeen != _gthis3.pfSeenStart + 1) {
											var newPriority44 = currentQueueItem2.priority + 20;
											permanentTo12.pfSeen = _gthis3.pfSeenStart;
											permanentTo12.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority44,permanentTo12);
											_gthis3.pathQueue.enqueue(permanentTo12.pfRelatedPrioritizable);
										}
									}
									var permanentTo13 = currentBuilding2.bottomBuilding;
									if(permanentTo13 != null) {
										if(permanentTo13.pfSeen == _gthis3.pfSeenStart) {
											var relatedPrioritizable21 = permanentTo13.pfRelatedPrioritizable;
											var newPriority45 = currentQueueItem2.priority + 20;
											if(newPriority45 < relatedPrioritizable21.priority) {
												_gthis3.pathQueue.reprioritize(relatedPrioritizable21,newPriority45);
											}
										} else if(permanentTo13.pfSeen != _gthis3.pfSeenStart + 1) {
											var newPriority46 = currentQueueItem2.priority + 20;
											permanentTo13.pfSeen = _gthis3.pfSeenStart;
											permanentTo13.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority46,permanentTo13);
											_gthis3.pathQueue.enqueue(permanentTo13.pfRelatedPrioritizable);
										}
									}
									var isPrivateTeleporter2 = privateTeleporter2 == currentPermanent2;
									var canTeleportFromHere2 = currentPermanent2["is"](buildings_Teleporter) || isPrivateTeleporter2;
									if(!teleportersDone2 && canTeleportFromHere2) {
										var rnd2 = random_Random.getFloat(2);
										var tp4 = 0;
										var len2 = _this1.city.teleporters.length;
										var invlen2 = 2 / len2;
										var _g29 = 0;
										var _g116 = len2;
										while(_g29 < _g116) {
											var tp5 = _g29++;
											var teleporter2 = _this1.city.teleporters[tp5];
											var priorityAdd8 = 9 + (rnd2 + tp5 * invlen2) % 2.0;
											if(teleporter2 != null) {
												if(teleporter2.pfSeen == _gthis3.pfSeenStart) {
													var relatedPrioritizable22 = teleporter2.pfRelatedPrioritizable;
													var newPriority47 = currentQueueItem2.priority + priorityAdd8;
													if(newPriority47 < relatedPrioritizable22.priority) {
														_gthis3.pathQueue.reprioritize(relatedPrioritizable22,newPriority47);
													}
												} else if(teleporter2.pfSeen != _gthis3.pfSeenStart + 1) {
													var newPriority48 = currentQueueItem2.priority + priorityAdd8;
													teleporter2.pfSeen = _gthis3.pfSeenStart;
													teleporter2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority48,teleporter2);
													_gthis3.pathQueue.enqueue(teleporter2.pfRelatedPrioritizable);
												}
											}
										}
										if(!isPrivateTeleporter2 && privateTeleporter2 != null) {
											if(privateTeleporter2 != null) {
												if(privateTeleporter2.pfSeen == _gthis3.pfSeenStart) {
													var relatedPrioritizable23 = privateTeleporter2.pfRelatedPrioritizable;
													var newPriority49 = currentQueueItem2.priority + 10;
													if(newPriority49 < relatedPrioritizable23.priority) {
														_gthis3.pathQueue.reprioritize(relatedPrioritizable23,newPriority49);
													}
												} else if(privateTeleporter2.pfSeen != _gthis3.pfSeenStart + 1) {
													var newPriority50 = currentQueueItem2.priority + 10;
													privateTeleporter2.pfSeen = _gthis3.pfSeenStart;
													privateTeleporter2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority50,privateTeleporter2);
													_gthis3.pathQueue.enqueue(privateTeleporter2.pfRelatedPrioritizable);
												}
											}
										}
										teleportersDone2 = true;
									} else if(currentPermanent2["is"](buildings_LandingSite) && !landingSitesDone2[currentPermanent2.landingSiteGroup]) {
										var thisGroup2 = currentPermanent2.landingSiteGroup;
										var _g117 = 0;
										var _g210 = _this1.city.connections.landingSiteGroups[thisGroup2];
										while(_g117 < _g210.length) {
											var landingSite2 = _g210[_g117];
											++_g117;
											var priorityAdd9 = landingSite2.estimatedFlyingDistanceTo(currentPermanent2);
											if(landingSite2 != null) {
												if(landingSite2.pfSeen == _gthis3.pfSeenStart) {
													var relatedPrioritizable24 = landingSite2.pfRelatedPrioritizable;
													var newPriority51 = currentQueueItem2.priority + priorityAdd9;
													if(newPriority51 < relatedPrioritizable24.priority) {
														_gthis3.pathQueue.reprioritize(relatedPrioritizable24,newPriority51);
													}
												} else if(landingSite2.pfSeen != _gthis3.pfSeenStart + 1) {
													var newPriority52 = currentQueueItem2.priority + priorityAdd9;
													landingSite2.pfSeen = _gthis3.pfSeenStart;
													landingSite2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority52,landingSite2);
													_gthis3.pathQueue.enqueue(landingSite2.pfRelatedPrioritizable);
												}
											}
										}
										landingSitesDone2[thisGroup2] = true;
									} else if(!currentQueueItem2.dontCheckElevators && currentPermanent2["is"](buildings_HyperElevator) && currentPermanent2.pfSeen != 3) {
										var _g118 = 0;
										var _g211 = _this1.city.connections.elevatorConnections.get(currentBuilding2.world)[currentBuilding2.worldPosition.x];
										while(_g118 < _g211.length) {
											var elevator2 = _g211[_g118];
											++_g118;
											var priorityAdd10 = Math.abs(elevator2.worldPosition.y - currentBuilding2.worldPosition.y);
											if(elevator2 != null) {
												if(elevator2.pfSeen == _gthis3.pfSeenStart) {
													var relatedPrioritizable25 = elevator2.pfRelatedPrioritizable;
													var newPriority53 = currentQueueItem2.priority + priorityAdd10;
													if(newPriority53 < relatedPrioritizable25.priority) {
														_gthis3.pathQueue.reprioritize(relatedPrioritizable25,newPriority53);
													}
												} else if(elevator2.pfSeen != _gthis3.pfSeenStart + 1) {
													var newPriority54 = currentQueueItem2.priority + priorityAdd10;
													elevator2.pfSeen = _gthis3.pfSeenStart;
													elevator2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority54,elevator2);
													_gthis3.pathQueue.enqueue(elevator2.pfRelatedPrioritizable);
												}
											}
											if(elevator2.pfRelatedPrioritizable != null) {
												elevator2.pfRelatedPrioritizable.dontCheckElevators = true;
											}
										}
									}
								}
								if(currentPermanent2.worldPosition.y == 0) {
									var _g119 = 0;
									var _g212 = currentPermanent2.world.permanents;
									while(_g119 < _g212.length) {
										var bottomPermanents5 = _g212[_g119];
										++_g119;
										if(bottomPermanents5.length == 0 || bottomPermanents5[0] == null) {
											continue;
										}
										var permanentTo14 = bottomPermanents5[0];
										var priorityAdd11 = Math.abs(bottomPermanents5[0].position.x - currentPermanent2.position.x);
										if(permanentTo14 != null) {
											if(permanentTo14.pfSeen == _gthis3.pfSeenStart) {
												var relatedPrioritizable26 = permanentTo14.pfRelatedPrioritizable;
												var newPriority55 = currentQueueItem2.priority + priorityAdd11;
												if(newPriority55 < relatedPrioritizable26.priority) {
													_gthis3.pathQueue.reprioritize(relatedPrioritizable26,newPriority55);
												}
											} else if(permanentTo14.pfSeen != _gthis3.pfSeenStart + 1) {
												var newPriority56 = currentQueueItem2.priority + priorityAdd11;
												permanentTo14.pfSeen = _gthis3.pfSeenStart;
												permanentTo14.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority56,permanentTo14);
												_gthis3.pathQueue.enqueue(permanentTo14.pfRelatedPrioritizable);
											}
										}
									}
								}
								currentQueueItem2.destroy();
							}
							foundPermanent1 = bestPermanent2;
						} else {
							var fromWorldX1 = citizen.relativeX;
							var citizen4 = null;
							var _gthis4 = _this1;
							_this1.updateQueries += 1;
							_this1.pfSeenStart += 3;
							if(_this1.pfSeenStart > 100000) {
								_this1.pfSeenStart = 1;
							}
							var _g9 = 0;
							var _g120 = citizen.onWorld.permanents;
							while(_g9 < _g120.length) {
								var bottomPermanents6 = _g120[_g9];
								++_g9;
								if(bottomPermanents6.length == 0 || bottomPermanents6[0] == null) {
									continue;
								}
								var newPriority57 = Math.abs(bottomPermanents6[0].position.x - fromWorldX1);
								bottomPermanents6[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority57,bottomPermanents6[0]);
								_this1.pathQueue.enqueue(bottomPermanents6[0].pfRelatedPrioritizable);
								bottomPermanents6[0].pfSeen = _this1.pfSeenStart;
							}
							var maxNiceNess3 = -10000.0;
							var bestPermanent3 = null;
							var landingSiteGroups3 = _this1.city.connections.landingSiteGroups;
							var teleportersDone3 = false;
							var _g10 = [];
							var _g121 = 0;
							while(_g121 < landingSiteGroups3.length) {
								var i3 = landingSiteGroups3[_g121];
								++_g121;
								_g10.push(false);
							}
							var landingSitesDone3 = _g10;
							var privateTeleporter3 = null;
							if(citizen4 != null && citizen4.home != null) {
								if(citizen4.home.get_hasPrivateTeleporter()) {
									privateTeleporter3 = citizen4.home;
								} else {
									privateTeleporter3 = null;
								}
							}
							while(_this1.pathQueue.mSize != 0) {
								var currentQueueItem3 = _this1.pathQueue.dequeue();
								var currentPermanent3 = currentQueueItem3.permanent;
								currentPermanent3.pfSeen = _this1.pfSeenStart + 1;
								if(currentPermanent3["is"](buildings_Pub) && currentPermanent3.markingTexture == "") {
									while(_this1.pathQueue.mSize != 0) _this1.pathQueue.dequeue().destroy();
									bestPermanent3 = currentPermanent3;
									break;
								}
								if(currentPermanent3.isBuilding) {
									var currentBuilding3 = currentPermanent3;
									var permanentTo15 = currentBuilding3.leftBuilding;
									if(permanentTo15 != null) {
										if(permanentTo15.pfSeen == _gthis4.pfSeenStart) {
											var relatedPrioritizable27 = permanentTo15.pfRelatedPrioritizable;
											var newPriority58 = currentQueueItem3.priority + 20;
											if(newPriority58 < relatedPrioritizable27.priority) {
												_gthis4.pathQueue.reprioritize(relatedPrioritizable27,newPriority58);
											}
										} else if(permanentTo15.pfSeen != _gthis4.pfSeenStart + 1) {
											var newPriority59 = currentQueueItem3.priority + 20;
											permanentTo15.pfSeen = _gthis4.pfSeenStart;
											permanentTo15.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority59,permanentTo15);
											_gthis4.pathQueue.enqueue(permanentTo15.pfRelatedPrioritizable);
										}
									}
									var permanentTo16 = currentBuilding3.rightBuilding;
									if(permanentTo16 != null) {
										if(permanentTo16.pfSeen == _gthis4.pfSeenStart) {
											var relatedPrioritizable28 = permanentTo16.pfRelatedPrioritizable;
											var newPriority60 = currentQueueItem3.priority + 20;
											if(newPriority60 < relatedPrioritizable28.priority) {
												_gthis4.pathQueue.reprioritize(relatedPrioritizable28,newPriority60);
											}
										} else if(permanentTo16.pfSeen != _gthis4.pfSeenStart + 1) {
											var newPriority61 = currentQueueItem3.priority + 20;
											permanentTo16.pfSeen = _gthis4.pfSeenStart;
											permanentTo16.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority61,permanentTo16);
											_gthis4.pathQueue.enqueue(permanentTo16.pfRelatedPrioritizable);
										}
									}
									var permanentTo17 = currentBuilding3.topBuilding;
									if(permanentTo17 != null) {
										if(permanentTo17.pfSeen == _gthis4.pfSeenStart) {
											var relatedPrioritizable29 = permanentTo17.pfRelatedPrioritizable;
											var newPriority62 = currentQueueItem3.priority + 20;
											if(newPriority62 < relatedPrioritizable29.priority) {
												_gthis4.pathQueue.reprioritize(relatedPrioritizable29,newPriority62);
											}
										} else if(permanentTo17.pfSeen != _gthis4.pfSeenStart + 1) {
											var newPriority63 = currentQueueItem3.priority + 20;
											permanentTo17.pfSeen = _gthis4.pfSeenStart;
											permanentTo17.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority63,permanentTo17);
											_gthis4.pathQueue.enqueue(permanentTo17.pfRelatedPrioritizable);
										}
									}
									var permanentTo18 = currentBuilding3.bottomBuilding;
									if(permanentTo18 != null) {
										if(permanentTo18.pfSeen == _gthis4.pfSeenStart) {
											var relatedPrioritizable30 = permanentTo18.pfRelatedPrioritizable;
											var newPriority64 = currentQueueItem3.priority + 20;
											if(newPriority64 < relatedPrioritizable30.priority) {
												_gthis4.pathQueue.reprioritize(relatedPrioritizable30,newPriority64);
											}
										} else if(permanentTo18.pfSeen != _gthis4.pfSeenStart + 1) {
											var newPriority65 = currentQueueItem3.priority + 20;
											permanentTo18.pfSeen = _gthis4.pfSeenStart;
											permanentTo18.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority65,permanentTo18);
											_gthis4.pathQueue.enqueue(permanentTo18.pfRelatedPrioritizable);
										}
									}
									var isPrivateTeleporter3 = privateTeleporter3 == currentPermanent3;
									var canTeleportFromHere3 = currentPermanent3["is"](buildings_Teleporter) || isPrivateTeleporter3;
									if(!teleportersDone3 && canTeleportFromHere3) {
										var rnd3 = random_Random.getFloat(2);
										var tp6 = 0;
										var len3 = _this1.city.teleporters.length;
										var invlen3 = 2 / len3;
										var _g213 = 0;
										var _g122 = len3;
										while(_g213 < _g122) {
											var tp7 = _g213++;
											var teleporter3 = _this1.city.teleporters[tp7];
											var priorityAdd12 = 9 + (rnd3 + tp7 * invlen3) % 2.0;
											if(teleporter3 != null) {
												if(teleporter3.pfSeen == _gthis4.pfSeenStart) {
													var relatedPrioritizable31 = teleporter3.pfRelatedPrioritizable;
													var newPriority66 = currentQueueItem3.priority + priorityAdd12;
													if(newPriority66 < relatedPrioritizable31.priority) {
														_gthis4.pathQueue.reprioritize(relatedPrioritizable31,newPriority66);
													}
												} else if(teleporter3.pfSeen != _gthis4.pfSeenStart + 1) {
													var newPriority67 = currentQueueItem3.priority + priorityAdd12;
													teleporter3.pfSeen = _gthis4.pfSeenStart;
													teleporter3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority67,teleporter3);
													_gthis4.pathQueue.enqueue(teleporter3.pfRelatedPrioritizable);
												}
											}
										}
										if(!isPrivateTeleporter3 && privateTeleporter3 != null) {
											if(privateTeleporter3 != null) {
												if(privateTeleporter3.pfSeen == _gthis4.pfSeenStart) {
													var relatedPrioritizable32 = privateTeleporter3.pfRelatedPrioritizable;
													var newPriority68 = currentQueueItem3.priority + 10;
													if(newPriority68 < relatedPrioritizable32.priority) {
														_gthis4.pathQueue.reprioritize(relatedPrioritizable32,newPriority68);
													}
												} else if(privateTeleporter3.pfSeen != _gthis4.pfSeenStart + 1) {
													var newPriority69 = currentQueueItem3.priority + 10;
													privateTeleporter3.pfSeen = _gthis4.pfSeenStart;
													privateTeleporter3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority69,privateTeleporter3);
													_gthis4.pathQueue.enqueue(privateTeleporter3.pfRelatedPrioritizable);
												}
											}
										}
										teleportersDone3 = true;
									} else if(currentPermanent3["is"](buildings_LandingSite) && !landingSitesDone3[currentPermanent3.landingSiteGroup]) {
										var thisGroup3 = currentPermanent3.landingSiteGroup;
										var _g123 = 0;
										var _g214 = _this1.city.connections.landingSiteGroups[thisGroup3];
										while(_g123 < _g214.length) {
											var landingSite3 = _g214[_g123];
											++_g123;
											var priorityAdd13 = landingSite3.estimatedFlyingDistanceTo(currentPermanent3);
											if(landingSite3 != null) {
												if(landingSite3.pfSeen == _gthis4.pfSeenStart) {
													var relatedPrioritizable33 = landingSite3.pfRelatedPrioritizable;
													var newPriority70 = currentQueueItem3.priority + priorityAdd13;
													if(newPriority70 < relatedPrioritizable33.priority) {
														_gthis4.pathQueue.reprioritize(relatedPrioritizable33,newPriority70);
													}
												} else if(landingSite3.pfSeen != _gthis4.pfSeenStart + 1) {
													var newPriority71 = currentQueueItem3.priority + priorityAdd13;
													landingSite3.pfSeen = _gthis4.pfSeenStart;
													landingSite3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority71,landingSite3);
													_gthis4.pathQueue.enqueue(landingSite3.pfRelatedPrioritizable);
												}
											}
										}
										landingSitesDone3[thisGroup3] = true;
									} else if(!currentQueueItem3.dontCheckElevators && currentPermanent3["is"](buildings_HyperElevator) && currentPermanent3.pfSeen != 3) {
										var _g124 = 0;
										var _g215 = _this1.city.connections.elevatorConnections.get(currentBuilding3.world)[currentBuilding3.worldPosition.x];
										while(_g124 < _g215.length) {
											var elevator3 = _g215[_g124];
											++_g124;
											var priorityAdd14 = Math.abs(elevator3.worldPosition.y - currentBuilding3.worldPosition.y);
											if(elevator3 != null) {
												if(elevator3.pfSeen == _gthis4.pfSeenStart) {
													var relatedPrioritizable34 = elevator3.pfRelatedPrioritizable;
													var newPriority72 = currentQueueItem3.priority + priorityAdd14;
													if(newPriority72 < relatedPrioritizable34.priority) {
														_gthis4.pathQueue.reprioritize(relatedPrioritizable34,newPriority72);
													}
												} else if(elevator3.pfSeen != _gthis4.pfSeenStart + 1) {
													var newPriority73 = currentQueueItem3.priority + priorityAdd14;
													elevator3.pfSeen = _gthis4.pfSeenStart;
													elevator3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority73,elevator3);
													_gthis4.pathQueue.enqueue(elevator3.pfRelatedPrioritizable);
												}
											}
											if(elevator3.pfRelatedPrioritizable != null) {
												elevator3.pfRelatedPrioritizable.dontCheckElevators = true;
											}
										}
									}
								}
								if(currentPermanent3.worldPosition.y == 0) {
									var _g125 = 0;
									var _g216 = currentPermanent3.world.permanents;
									while(_g125 < _g216.length) {
										var bottomPermanents7 = _g216[_g125];
										++_g125;
										if(bottomPermanents7.length == 0 || bottomPermanents7[0] == null) {
											continue;
										}
										var permanentTo19 = bottomPermanents7[0];
										var priorityAdd15 = Math.abs(bottomPermanents7[0].position.x - currentPermanent3.position.x);
										if(permanentTo19 != null) {
											if(permanentTo19.pfSeen == _gthis4.pfSeenStart) {
												var relatedPrioritizable35 = permanentTo19.pfRelatedPrioritizable;
												var newPriority74 = currentQueueItem3.priority + priorityAdd15;
												if(newPriority74 < relatedPrioritizable35.priority) {
													_gthis4.pathQueue.reprioritize(relatedPrioritizable35,newPriority74);
												}
											} else if(permanentTo19.pfSeen != _gthis4.pfSeenStart + 1) {
												var newPriority75 = currentQueueItem3.priority + priorityAdd15;
												permanentTo19.pfSeen = _gthis4.pfSeenStart;
												permanentTo19.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority75,permanentTo19);
												_gthis4.pathQueue.enqueue(permanentTo19.pfRelatedPrioritizable);
											}
										}
									}
								}
								currentQueueItem3.destroy();
							}
							foundPermanent1 = bestPermanent3;
						}
						var v1 = { permanent : foundPermanent1, expiry : time1 + 180};
						_this1.savedResults.set(key1,v1);
						permanentToReturn1 = foundPermanent1;
					}
					var newOwnPub = permanentToReturn1;
					if(newOwnPub == null) {
						this.doingEvent = -1;
					} else {
						this.ownPub = newOwnPub;
					}
				}
				if(this.ownPub != null) {
					citizen.simulation.pathfinder.findPath(citizen,this.ownPub);
					citizen.pathOnFail = function() {
						_gthis.doingEvent = -1;
					};
				}
				return;
			}
		}
		if(citizen.inPermanent != this) {
			citizen.simulation.pathfinder.findPath(citizen,this);
			citizen.pathOnFail = null;
			return;
		}
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			return;
		}
		this.walkAround(citizen,150);
		if(((this.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 > 15) {
			if(1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0) > this.lastEventDoneOnDay) {
				this.doingEvent = random_Random.getInt(1,3);
				this.eventPhase = 0;
				this.lastEventDoneOnDay = 1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0);
			}
		}
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var r = random_Random.getInt(5);
		if(r == 0 && stepsInBuilding > 120) {
			citizen.changeFloorAndWaitRandom(30,60);
		} else if(r == 1 || r == 2 && citizen.relativeY < 5) {
			citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(30,60),null,false,false);
		} else if(r == 2) {
			citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(30,60),null,false,false);
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = random_Random.getInt(90,120);
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,getGlobalGoal: function() {
		if(this.currentMission == 8) {
			return null;
		}
		return { category : "Secret Society Mission", text : this.missionGetText()};
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_WorkWithHome.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_SecretSocietyHouse.saveDefinition);
		}
		var value = this.lastEventDoneOnDay;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.doingEvent;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var value2 = this.eventPhase;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
		var value3 = this.currentMission;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value3);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_WorkWithHome.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["lastEventDoneOnDay"] != null ? loadMap.existsReserved("lastEventDoneOnDay") : loadMap.h.hasOwnProperty("lastEventDoneOnDay")) {
			this.lastEventDoneOnDay = __map_reserved["lastEventDoneOnDay"] != null ? loadMap.getReserved("lastEventDoneOnDay") : loadMap.h["lastEventDoneOnDay"];
		}
		if(__map_reserved["doingEvent"] != null ? loadMap.existsReserved("doingEvent") : loadMap.h.hasOwnProperty("doingEvent")) {
			this.doingEvent = __map_reserved["doingEvent"] != null ? loadMap.getReserved("doingEvent") : loadMap.h["doingEvent"];
		}
		if(__map_reserved["eventPhase"] != null ? loadMap.existsReserved("eventPhase") : loadMap.h.hasOwnProperty("eventPhase")) {
			this.eventPhase = __map_reserved["eventPhase"] != null ? loadMap.getReserved("eventPhase") : loadMap.h["eventPhase"];
		}
		if(__map_reserved["currentMission"] != null ? loadMap.existsReserved("currentMission") : loadMap.h.hasOwnProperty("currentMission")) {
			this.currentMission = __map_reserved["currentMission"] != null ? loadMap.getReserved("currentMission") : loadMap.h["currentMission"];
		}
	}
	,__class__: buildings_SecretSocietyHouse
});
var buildings_ShadyHome = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.ShadyHome"] = buildings_ShadyHome;
buildings_ShadyHome.__name__ = ["buildings","ShadyHome"];
buildings_ShadyHome.__super__ = buildings_House;
buildings_ShadyHome.prototype = $extend(buildings_House.prototype,{
	get_possibleUpgrades: function() {
		return [];
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var r = random_Random.getInt(3);
		if(r == 0 && stepsInBuilding > 120) {
			citizen.changeFloorAndWaitRandom(30,60);
		} else if(r == 1) {
			if(citizen.relativeY < 5) {
				var r2 = random_Random.getInt(3);
				if(r2 == 0) {
					citizen.moveAndWait(random_Random.getInt(3,5),random_Random.getInt(30,60),null,false,false);
				} else if(r2 == 1) {
					citizen.moveAndWait(random_Random.getInt(9,10),random_Random.getInt(30,60),null,false,false);
				} else {
					citizen.moveAndWait(random_Random.getInt(14,15),random_Random.getInt(30,60),null,false,false);
				}
			} else {
				citizen.moveAndWait(random_Random.getInt(5,15),random_Random.getInt(30,60),null,false,false);
			}
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = random_Random.getInt(90,120);
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,__class__: buildings_ShadyHome
});
var buildings_SpaciousHouse = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.SpaciousHouse"] = buildings_SpaciousHouse;
buildings_SpaciousHouse.__name__ = ["buildings","SpaciousHouse"];
buildings_SpaciousHouse.__super__ = buildings_House;
buildings_SpaciousHouse.prototype = $extend(buildings_House.prototype,{
	get_possibleUpgrades: function() {
		return [buildingUpgrades_SmartLights,buildingUpgrades_SofterBeds];
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var r = random_Random.getInt(3);
		if(r == 0 && stepsInBuilding > 120) {
			citizen.changeFloorAndWaitRandom(30,60);
		} else if(r == 1) {
			if(citizen.relativeY < 5) {
				citizen.moveAndWait(random_Random.getInt(3,15),random_Random.getInt(30,60),null,false,false);
			} else if(random_Random.getInt(2) == 1) {
				citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(30,60),null,false,false);
			} else {
				citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(30,60),null,false,false);
			}
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = random_Random.getInt(90,120);
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,update: function(timeMod) {
		buildings_House.prototype.update.call(this,timeMod);
	}
	,__class__: buildings_SpaciousHouse
});
var buildings_StatueGarden = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_Park.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.StatueGarden"] = buildings_StatueGarden;
buildings_StatueGarden.__name__ = ["buildings","StatueGarden"];
buildings_StatueGarden.__super__ = buildings_Park;
buildings_StatueGarden.prototype = $extend(buildings_Park.prototype,{
	get_myParkTextures: function() {
		return "spr_statuegarden_statues";
	}
	,get_changePlantsText: function() {
		return "Change Sculptures";
	}
	,get_entertainmentType: function() {
		return 2;
	}
	,get_baseEntertainmentCapacity: function() {
		return 40;
	}
	,get_numberOfLockedParkTextures: function() {
		return 0;
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Park.prototype.addWindowInfoLines.call(this);
		var devMessageShown = false;
		var devMessageContainerOuter = new gui_GUIContainer(this.city.gui,this.city.gui.innerWindowStage,this.city.gui.windowInner);
		var devMessageContainer;
		this.city.gui.windowInner.addChild(devMessageContainerOuter);
		this.city.gui.windowInner.onUpdate = function() {
			if(_gthis.currentTexture == 0) {
				if(!devMessageShown) {
					devMessageShown = true;
					devMessageContainer = new gui_GUIContainer(_gthis.city.gui,_gthis.city.gui.innerWindowStage,devMessageContainerOuter);
					devMessageContainer.direction = gui_GUIContainerDirection.Vertical;
					devMessageContainer.addChild(new gui_GUISpacing(devMessageContainer,new common_Point(2,6)));
					devMessageContainer.addChild(new gui_TextElement(devMessageContainer,_gthis.city.gui.innerWindowStage,"A Message from the Developer",null,"Arial15"));
					devMessageContainer.addChild(new gui_TextElement(devMessageContainer,_gthis.city.gui.innerWindowStage,"Let's ensure elephants are not just pixely statues on tiny worlds in 2142. The climate crisis is the most important threat facing wildlife - and humans."));
					var createClimateCrisisExplainerWindow = null;
					createClimateCrisisExplainerWindow = function() {
						_gthis.city.gui.createWindow("climateCrisisWindow",Resources.getTexture("spr_9p_window_moreopaque"));
						_gthis.city.gui.addWindowToStack(createClimateCrisisExplainerWindow);
						gui_ClimateCrisisExplainerWindow.create(_gthis.city,_gthis.city.gui,_gthis.city.gui.innerWindowStage,_gthis.city.gui.windowInner);
					};
					var createClimateCrisisExplainerWindow1 = createClimateCrisisExplainerWindow;
					devMessageContainer.addChild(new gui_TextButton(_gthis.city.gui,_gthis.city.gui.innerWindowStage,devMessageContainer,createClimateCrisisExplainerWindow,"See What You Can Do"));
					devMessageContainer.addChild(new gui_GUISpacing(devMessageContainer,new common_Point(2,6)));
					devMessageContainerOuter.addChild(devMessageContainer);
					_gthis.city.gui.setWindowPositioning(gui_WindowPosition.CenterOffset(devMessageContainer.rect.height / 2 | 0));
				}
			} else if(devMessageShown) {
				devMessageShown = false;
				devMessageContainerOuter.removeChild(devMessageContainer);
				_gthis.city.gui.setWindowPositioning(gui_WindowPosition.Center);
			}
		};
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Park.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_StatueGarden.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_Park.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_StatueGarden
});
var buildings_StatueOfHappiness = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_Park.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.currentTexture = 0;
	this.parkSprite.texture = this.parkTextures[this.currentTexture];
};
$hxClasses["buildings.StatueOfHappiness"] = buildings_StatueOfHappiness;
buildings_StatueOfHappiness.__name__ = ["buildings","StatueOfHappiness"];
buildings_StatueOfHappiness.__super__ = buildings_Park;
buildings_StatueOfHappiness.prototype = $extend(buildings_Park.prototype,{
	get_myParkTextures: function() {
		return "spr_statueofhappiness";
	}
	,get_changePlantsText: function() {
		return "Change Statue";
	}
	,get_entertainmentType: function() {
		return 2;
	}
	,get_baseEntertainmentCapacity: function() {
		return 80;
	}
	,get_numberOfLockedParkTextures: function() {
		return 0;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Park.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_StatueOfHappiness.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_Park.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_StatueOfHappiness
});
var buildings_StatueOfTheKey = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_Park.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.currentTexture = 0;
	this.parkSprite.texture = this.parkTextures[this.currentTexture];
};
$hxClasses["buildings.StatueOfTheKey"] = buildings_StatueOfTheKey;
buildings_StatueOfTheKey.__name__ = ["buildings","StatueOfTheKey"];
buildings_StatueOfTheKey.__super__ = buildings_Park;
buildings_StatueOfTheKey.prototype = $extend(buildings_Park.prototype,{
	get_myParkTextures: function() {
		return "spr_statueofthekey";
	}
	,get_changePlantsText: function() {
		return "Change Statue";
	}
	,get_entertainmentType: function() {
		return 2;
	}
	,get_baseEntertainmentCapacity: function() {
		return 80;
	}
	,get_numberOfLockedParkTextures: function() {
		return 0;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Park.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_StatueOfTheKey.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		buildings_Park.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: buildings_StatueOfTheKey
});
var buildings_StoneMine = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.stoneMinedPerActionBoost = 1;
	buildings_BlueCollarWork.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.StoneMine"] = buildings_StoneMine;
buildings_StoneMine.__name__ = ["buildings","StoneMine"];
buildings_StoneMine.__super__ = buildings_BlueCollarWork;
buildings_StoneMine.prototype = $extend(buildings_BlueCollarWork.prototype,{
	get_stoneMinedPerAction: function() {
		return 0.2 * this.stoneMinedPerActionBoost;
	}
	,get_possibleUpgrades: function() {
		return [buildingUpgrades_BetterPickaxes,buildingUpgrades_AIMining];
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		var _gthis = this;
		this.doBlueCollarJob(citizen,timeMod,shouldStopWorking,[worldResources_Rock,buildings_StoneTeleporter],function(rock) {
			var finalStoneMineAction = _gthis.get_stoneMinedPerAction();
			var _this = _gthis.city.simulation;
			var finalStoneMineAction1 = finalStoneMineAction * (_gthis.city.progress.story.hiddenBoost && _gthis.city.materials.stone <= 4 ? Config.earlyGameFix1 ? 1.6 : 2 : 1) * _gthis.city.upgrades.vars.stoneMiningSpeed * (Config.earlyGameFix1 && _this.citizens.length < 30 ? 1.3 - 0.3 * (_this.citizens.length / 60) : 1) * _gthis.city.simulation.boostManager.currentGlobalBoostAmount;
			_gthis.city.materials.stone += finalStoneMineAction1;
			_gthis.city.simulation.stats.materialProduction[2][0] += finalStoneMineAction1;
			rock.materialsLeft -= finalStoneMineAction1;
		},90,120);
	}
	,__class__: buildings_StoneMine
});
var buildings_StoneResearchCenter = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.hasPickaxeTech = false;
	this.currentBonus = 0;
	this.totalKnowledgeGenerated = 0;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.StoneResearchCenter"] = buildings_StoneResearchCenter;
buildings_StoneResearchCenter.__name__ = ["buildings","StoneResearchCenter"];
buildings_StoneResearchCenter.__super__ = buildings_Work;
buildings_StoneResearchCenter.prototype = $extend(buildings_Work.prototype,{
	get_possibleUpgrades: function() {
		return [buildingUpgrades_PickaxeTech,buildingUpgrades_FossilScanner];
	}
	,postCreate: function() {
		this.recalculateBonus();
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			return;
		}
		var rnd = random_Random.getInt(3);
		if(rnd == 0) {
			citizen.changeFloorAndWait(50);
		} else if(rnd == 1) {
			citizen.moveAndWait(random_Random.getInt(3,7),random_Random.getInt(50,80),null,false,false);
		} else if(rnd == 2) {
			citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(50,80),null,false,false);
		}
	}
	,update: function(timeMod) {
		this.recalculateBonus();
	}
	,recalculateBonus: function() {
		this.currentBonus = 0.0;
		var knowledgeProd = this.city.simulation.stats.materialProduction[MaterialsHelper.findMaterialIndex("knowledge")];
		var baseBonusOn = 0.0;
		if(knowledgeProd.length >= 2) {
			baseBonusOn = knowledgeProd[1];
		} else if(knowledgeProd.length >= 1) {
			baseBonusOn = knowledgeProd[0];
		}
		var currBonusDivider = this.hasPickaxeTech ? 195 : 200;
		var currBonusMultiplier = this.hasPickaxeTech ? 0.1 : 0.075;
		var currBonusLogFactor = this.hasPickaxeTech ? 1.65 : 2;
		if(baseBonusOn < currBonusDivider) {
			this.currentBonus = baseBonusOn / currBonusDivider * 0.15;
		} else {
			this.currentBonus = Math.log(baseBonusOn / currBonusDivider) / Math.log(currBonusLogFactor) * currBonusMultiplier + 0.15;
		}
		if(this.hasPickaxeTech) {
			this.currentBonus += 2.5e-005 * baseBonusOn;
		}
		this.currentBonus *= this.workers.length / this.get_jobs();
		this.currentBonus = Math.max(0,this.currentBonus);
		this.city.upgrades.vars.stoneMiningSpeed = 1.0 + this.currentBonus;
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			_gthis.recalculateBonus();
			return "Current stone mining boost: " + (_gthis.currentBonus * 100 | 0) + "%";
		});
		this.city.gui.windowAddInfoText("This is based on the number of workers and on yesterday's knowledge production.");
		if(this.city.upgrades.vars.stoneResearchCenterWithFossils == this) {
			this.city.gui.windowAddInfoText(null,function() {
				return "Fossils found: " + (_gthis.city.simulation.bonuses.fossilsCollected | 0);
			});
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_StoneResearchCenter.saveDefinition);
		}
		var value = this.totalKnowledgeGenerated;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["totalKnowledgeGenerated"] != null ? loadMap.existsReserved("totalKnowledgeGenerated") : loadMap.h.hasOwnProperty("totalKnowledgeGenerated")) {
			this.totalKnowledgeGenerated = __map_reserved["totalKnowledgeGenerated"] != null ? loadMap.getReserved("totalKnowledgeGenerated") : loadMap.h["totalKnowledgeGenerated"];
		}
	}
	,__class__: buildings_StoneResearchCenter
});
var worldResources_ILimitedMaterialGatherPlace = function() { };
$hxClasses["worldResources.ILimitedMaterialGatherPlace"] = worldResources_ILimitedMaterialGatherPlace;
worldResources_ILimitedMaterialGatherPlace.__name__ = ["worldResources","ILimitedMaterialGatherPlace"];
worldResources_ILimitedMaterialGatherPlace.prototype = {
	__class__: worldResources_ILimitedMaterialGatherPlace
};
var buildings_StoneTeleporter = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.hasBigStone = false;
	this.hasRemoteControl = false;
	this.teleportButtonNotPressedTime = 0;
	this.teleportButtonPressed = false;
	this.maxCitizenX = 13;
	this.minCitizenX = 5;
	this.initialMaterials = 50;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.updateStoneTextures();
	this.stoneSprite = new PIXI.Sprite(this.stoneTextures[0]);
	bgStage.addChild(this.stoneSprite);
	this.positionSprites();
	this.doorX = 12;
	this.materialsLeft = 0;
	this.regrowProgress = 0;
	this.teleportButtonNotPressedTime = 0;
	this.updateTexture();
};
$hxClasses["buildings.StoneTeleporter"] = buildings_StoneTeleporter;
buildings_StoneTeleporter.__name__ = ["buildings","StoneTeleporter"];
buildings_StoneTeleporter.__interfaces__ = [worldResources_ILimitedMaterialGatherPlace];
buildings_StoneTeleporter.__super__ = buildings_Work;
buildings_StoneTeleporter.prototype = $extend(buildings_Work.prototype,{
	get_destroyedOnEmpty: function() {
		return false;
	}
	,get_resourceName: function() {
		return "stone";
	}
	,get_doNotGather: function() {
		return false;
	}
	,get_regrowSpeed: function() {
		return 0.0;
	}
	,get_stayIfEmpty: function() {
		return true;
	}
	,get_possibleUpgrades: function() {
		return [buildingUpgrades_StoneTeleporterRemote];
	}
	,postLoad: function() {
		if(this.hasBigStone) {
			this.initialMaterials = 150;
			this.updateStoneTextures();
		}
		this.updateTexture();
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		var _gthis = this;
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
		} else {
			if(!this.hasRemoteControl) {
				var spd = citizen.pathWalkSpeed * timeMod;
				Citizen.shouldUpdateDraw = true;
				if(Math.abs(3 - citizen.relativeX) < spd) {
					citizen.relativeX = 3;
				} else {
					var num = 3 - citizen.relativeX;
					citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
				}
			}
			if(this.materialsLeft <= 0) {
				this.teleportButtonPressed = true;
				this.teleportButtonNotPressedTime = 0;
			} else if(this.hasRemoteControl) {
				citizen.moveAndWait(random_Random.getInt(this.minCitizenX,this.maxCitizenX),random_Random.getInt(90,120),function() {
					if(_gthis.materialsLeft > 0) {
						var stoneProduced = _gthis.city.simulation.boostManager.currentGlobalBoostAmount * 0.2 * _gthis.city.upgrades.vars.stoneMiningSpeed;
						_gthis.materialsLeft -= stoneProduced;
						_gthis.city.materials.stone += stoneProduced;
						_gthis.city.simulation.stats.materialProduction[2][0] += stoneProduced;
					}
					_gthis.updateTexture();
				},true,false);
			}
		}
	}
	,update: function(timeMod) {
		buildings_Work.prototype.update.call(this,timeMod);
		if(this.materialsLeft <= 0) {
			if(this.teleportButtonPressed) {
				if(this.regrowProgress == 0) {
					this.hasBigStone = this.city.upgrades.vars.stoneTeleporterHasBigStones;
					this.updateStoneTextures();
				}
				this.regrowProgress += 2 * timeMod;
				if(this.regrowProgress >= 100) {
					this.regrowProgress = 0;
					if(this.hasBigStone) {
						this.initialMaterials = 150;
					}
					this.materialsLeft = this.initialMaterials;
					this.teleportButtonPressed = false;
					this.teleportButtonNotPressedTime = 0;
					if(this.city.upgrades.vars.stoneResearchCenterWithFossils != null && random_Random.getFloat() < 0.00001 * this.initialMaterials) {
						this.city.materials.knowledge += 10000;
						this.city.simulation.stats.materialProduction[8][0] += 10000;
						this.city.simulation.bonuses.fossilsCollected++;
					}
				}
				this.updateTexture();
			} else if(this.hasRemoteControl && this.workers.length > 0) {
				this.teleportButtonPressed = true;
				this.teleportButtonNotPressedTime = 0;
			} else {
				this.teleportButtonNotPressedTime += timeMod;
			}
		}
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		this.bgStage.removeChild(this.stoneSprite);
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		if(this.stoneSprite != null) {
			this.stoneSprite.position.set(this.position.x,this.position.y);
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			if(_gthis.materialsLeft > 0 || !_gthis.teleportButtonPressed && _gthis.teleportButtonNotPressedTime < 3) {
				return "" + (_gthis.materialsLeft | 0) + " stone left in this meteoroid.";
			}
			if(!_gthis.teleportButtonPressed) {
				return "Waiting for a worker to press the teleport button...";
			}
			return "Teleporting a meteoroid...";
		});
	}
	,updateStoneTextures: function() {
		this.stoneTextures = Resources.getTexturesByWidth(this.hasBigStone ? "spr_stoneteleporter_stone_big" : "spr_stoneteleporter_stone",20);
	}
	,updateTexture: function() {
		if(this.materialsLeft <= 0) {
			this.stoneSprite.texture = this.stoneTextures[0];
			this.stoneSprite.alpha = this.regrowProgress / 100;
		} else {
			var materialsLeft = this.materialsLeft;
			var initialMaterials = this.initialMaterials;
			var regrowProgress = this.regrowProgress;
			var textures = this.stoneTextures;
			var sprite = this.stoneSprite;
			if(materialsLeft <= 0.0000001) {
				sprite.texture = textures[textures.length - 1];
			} else {
				var i = Math.floor((initialMaterials - materialsLeft) / initialMaterials * textures.length);
				if(initialMaterials != materialsLeft && i == 0 && textures.length > 1) {
					i = 1;
				}
				sprite.texture = textures[i];
			}
			this.stoneSprite.alpha = 1;
		}
		if(this.stoneSprite.texture == null) {
			debugger;
			console.log("Something went wrong while updating the stone sprite.");
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_StoneTeleporter.saveDefinition);
		}
		var value = this.regrowProgress;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.materialsLeft;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.hasBigStone ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["regrowProgress"] != null ? loadMap.existsReserved("regrowProgress") : loadMap.h.hasOwnProperty("regrowProgress")) {
			this.regrowProgress = __map_reserved["regrowProgress"] != null ? loadMap.getReserved("regrowProgress") : loadMap.h["regrowProgress"];
		}
		if(__map_reserved["materialsLeft"] != null ? loadMap.existsReserved("materialsLeft") : loadMap.h.hasOwnProperty("materialsLeft")) {
			this.materialsLeft = __map_reserved["materialsLeft"] != null ? loadMap.getReserved("materialsLeft") : loadMap.h["materialsLeft"];
		}
		if(__map_reserved["hasBigStone"] != null ? loadMap.existsReserved("hasBigStone") : loadMap.h.hasOwnProperty("hasBigStone")) {
			this.hasBigStone = __map_reserved["hasBigStone"] != null ? loadMap.getReserved("hasBigStone") : loadMap.h["hasBigStone"];
		}
		this.postLoad();
	}
	,__class__: buildings_StoneTeleporter
});
var buildings_Supercomputer = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.numberOfLabs = 0;
	this.knowledgeSoFar = 0;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.Supercomputer"] = buildings_Supercomputer;
buildings_Supercomputer.__name__ = ["buildings","Supercomputer"];
buildings_Supercomputer.__super__ = Building;
buildings_Supercomputer.prototype = $extend(Building.prototype,{
	get_knowledgePerDay: function() {
		return 2 * this.city.simulation.stats.peopleWorkingAtLabs;
	}
	,get_possibleCityUpgrades: function() {
		return [cityUpgrades_UniverseMapping,cityUpgrades_OptimizedChipLayouts,cityUpgrades_MedicalMachineLearning];
	}
	,update: function(timeMod) {
		var addKnowledge = timeMod * (this.get_knowledgePerDay() / (1440 / this.city.simulation.time.minutesPerTick)) * this.city.simulation.boostManager.currentGlobalBoostAmount;
		this.city.materials.knowledge += addKnowledge;
		this.city.simulation.stats.materialProduction[8][0] += addKnowledge;
		this.knowledgeSoFar += addKnowledge;
	}
	,onCityChange: function() {
		this.numberOfLabs = Lambda.count(this.city.permanents,function(pm) {
			return pm["is"](buildings_Laboratory);
		});
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		Building.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.get_knowledgePerDay() | 0) + " knowledge gathered per day.";
		});
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.knowledgeSoFar | 0) + " knowledge gathered so far.";
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Supercomputer.saveDefinition);
		}
		var value = this.knowledgeSoFar;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["knowledgeSoFar"] != null ? loadMap.existsReserved("knowledgeSoFar") : loadMap.h.hasOwnProperty("knowledgeSoFar")) {
			this.knowledgeSoFar = __map_reserved["knowledgeSoFar"] != null ? loadMap.getReserved("knowledgeSoFar") : loadMap.h["knowledgeSoFar"];
		}
	}
	,__class__: buildings_Supercomputer
});
var buildings_Teleporter = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.teleportX = 9.;
	this.timesUsedTo = 0;
	this.timesUsed = 0;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.doorX = 12;
	city.teleporters.push(this);
};
$hxClasses["buildings.Teleporter"] = buildings_Teleporter;
buildings_Teleporter.__name__ = ["buildings","Teleporter"];
buildings_Teleporter.__super__ = Building;
buildings_Teleporter.prototype = $extend(Building.prototype,{
	get_typeID: function() {
		return 1;
	}
	,destroy: function() {
		HxOverrides.remove(this.city.teleporters,this);
		Building.prototype.destroy.call(this);
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		Building.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "Teleported from " + _gthis.timesUsed + " times.";
		});
		this.city.gui.windowAddInfoText(null,function() {
			return "Teleported to " + _gthis.timesUsedTo + " times.";
		});
	}
	,createTeleportParticle: function(rayTexture) {
		if(rayTexture == null) {
			rayTexture = "spr_teleporter_ray";
		}
		this.city.particles.addParticle(Resources.getTexturesByWidth(rayTexture,4),new common_Point(this.position.x + 8,this.position.y + 4));
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Teleporter.saveDefinition);
		}
		var value = this.timesUsed;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.timesUsedTo;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["timesUsed"] != null ? loadMap.existsReserved("timesUsed") : loadMap.h.hasOwnProperty("timesUsed")) {
			this.timesUsed = __map_reserved["timesUsed"] != null ? loadMap.getReserved("timesUsed") : loadMap.h["timesUsed"];
		}
		if(__map_reserved["timesUsedTo"] != null ? loadMap.existsReserved("timesUsedTo") : loadMap.h.hasOwnProperty("timesUsedTo")) {
			this.timesUsedTo = __map_reserved["timesUsedTo"] != null ? loadMap.getReserved("timesUsedTo") : loadMap.h["timesUsedTo"];
		}
	}
	,__class__: buildings_Teleporter
});
var buildings_TheContraption = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.TheContraption"] = buildings_TheContraption;
buildings_TheContraption.__name__ = ["buildings","TheContraption"];
buildings_TheContraption.__super__ = Building;
buildings_TheContraption.prototype = $extend(Building.prototype,{
	__class__: buildings_TheContraption
});
var buildings_TheMachine = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.totalMaterialReward = null;
	this.thisDayMaterialReward = null;
	this.lastDayReward = -1;
	this.animProgress = 0;
	this.secretSocietyHouse = null;
	Building.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.bgTextures = Resources.getTexturesByWidth("spr_secretsocietymachine_anim",20);
	this.backSprite = new PIXI.Sprite(this.bgTextures[0]);
	this.backSprite.position.set(position.x,position.y);
	bgStage.addChild(this.backSprite);
	this.totalMaterialReward = new Materials();
};
$hxClasses["buildings.TheMachine"] = buildings_TheMachine;
buildings_TheMachine.__name__ = ["buildings","TheMachine"];
buildings_TheMachine.__super__ = Building;
buildings_TheMachine.prototype = $extend(Building.prototype,{
	update: function(timeMod) {
		if(this.secretSocietyHouse == null || this.secretSocietyHouse.destroyed) {
			this.secretSocietyHouse = Lambda.find(this.city.permanents,function(pm) {
				return pm["is"](buildings_SecretSocietyHouse);
			});
		}
		if(this.secretSocietyHouse != null) {
			var _g = 0;
			var _g1 = this.secretSocietyHouse.workers;
			while(_g < _g1.length) {
				var cit = _g1[_g];
				++_g;
				cit.dieAgeModifier = cit.get_age() - 75 + 3;
			}
		}
		var mainAnimSpeed = 4;
		var maxWaitTime = 180;
		var beginAnimTime = 480;
		var animLength = this.bgTextures.length * mainAnimSpeed * 2 + beginAnimTime + maxWaitTime;
		this.animProgress = (this.animProgress + timeMod) % animLength;
		if(this.animProgress < beginAnimTime) {
			this.backSprite.texture = this.bgTextures[(Math.floor(this.animProgress) / 4 | 0) % 2];
		} else if(this.animProgress - beginAnimTime - maxWaitTime > this.bgTextures.length * mainAnimSpeed) {
			var val = this.bgTextures.length - 1 - (Math.floor(this.animProgress - this.bgTextures.length * mainAnimSpeed - beginAnimTime - maxWaitTime) / mainAnimSpeed | 0);
			var maxVal = this.bgTextures.length - 1;
			this.backSprite.texture = this.bgTextures[val < 0 ? 0 : val > maxVal ? maxVal : val];
		} else if(this.animProgress - beginAnimTime > this.bgTextures.length * mainAnimSpeed) {
			this.backSprite.texture = this.bgTextures[this.bgTextures.length - 1];
		} else {
			var val1 = Math.floor(this.animProgress - beginAnimTime) / mainAnimSpeed | 0;
			var maxVal1 = this.bgTextures.length - 1;
			this.backSprite.texture = this.bgTextures[val1 < 0 ? 0 : val1 > maxVal1 ? maxVal1 : val1];
		}
		if(this.lastDayReward != 1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0)) {
			this.setReward();
		}
	}
	,setReward: function() {
		var _g = random_Random.getInt(10);
		var tmp;
		switch(_g) {
		case 0:
			tmp = new Materials(random_Random.getInt(150,301));
			break;
		case 1:
			tmp = new Materials(0,random_Random.getInt(100,501));
			break;
		case 2:
			tmp = new Materials(0,0,random_Random.getInt(200,2001));
			break;
		case 3:
			tmp = new Materials(random_Random.getInt(100,301),random_Random.getInt(50,301),random_Random.getInt(25,201));
			break;
		case 4:
			tmp = new Materials(random_Random.getInt(100,201),random_Random.getInt(150,251));
			break;
		case 5:
			tmp = new Materials(0,0,0,random_Random.getInt(20,31));
			break;
		case 6:
			tmp = new Materials(0,0,0,0,0,random_Random.getInt(40,81));
			break;
		case 7:
			tmp = new Materials(0,0,0,0,0,0,random_Random.getInt(5,11));
			break;
		case 8:
			tmp = new Materials(0,0,0,random_Random.getInt(15,31),0,random_Random.getInt(20,51));
			break;
		default:
			var _g1 = random_Random.getInt(5);
			switch(_g1) {
			case 0:
				tmp = new Materials(random_Random.getInt(500,1501),0,random_Random.getInt(1000,2001));
				break;
			case 1:
				tmp = new Materials(0,0,0,0,random_Random.getInt(500,1501));
				break;
			case 2:
				tmp = new Materials(0,random_Random.getInt(1000,2001),0,random_Random.getInt(50,101),0);
				break;
			case 3:
				tmp = new Materials(0,0,0,0,0,random_Random.getInt(200,301));
				break;
			default:
				var _g2 = random_Random.getInt(5);
				switch(_g2) {
				case 0:
					tmp = new Materials(1000,0,1000,20,0,40,16);
					break;
				case 1:
					tmp = new Materials(0,0,0,0,0,0,100);
					break;
				case 2:
					tmp = new Materials(0,0,0,0,0,1000);
					break;
				case 3:
					tmp = new Materials(0,10000);
					break;
				default:
					tmp = new Materials(1000,1000,1000,500);
				}
			}
		}
		this.thisDayMaterialReward = tmp;
		this.thisDayMaterialReward.multiply(this.city.simulation.boostManager.currentGlobalBoostAmount);
		this.lastDayReward = 1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0);
		this.thisDayMaterialReward.addToProduction(this.city.simulation.stats);
		this.city.materials.add(this.thisDayMaterialReward);
		this.totalMaterialReward.add(this.thisDayMaterialReward);
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		if(this.thisDayMaterialReward == null) {
			this.setReward();
		}
		Building.prototype.addWindowInfoLines.call(this);
		var lastUpdated = this.lastDayReward;
		var lastTotalReward = this.lastDayReward;
		this.city.gui.windowAddInfoText("Today's Production:");
		var rewardContainer = new gui_MaterialsDisplay(this.thisDayMaterialReward);
		var rewardHolder = new gui_ContainerHolder(this.city.gui.windowInner,this.city.gui.innerWindowStage,rewardContainer,null,function() {
			if(_gthis.lastDayReward != lastUpdated) {
				rewardContainer.setMaterials(_gthis.thisDayMaterialReward);
				lastUpdated = _gthis.lastDayReward;
				rewardHolder.updateSize();
			}
		});
		this.city.gui.windowInner.addChild(rewardHolder);
		this.city.gui.windowInner.addChild(new gui_GUISpacing(this.city.gui.windowInner,new common_Point(2,6)));
		this.city.gui.windowAddInfoText("Total Production:");
		var rewardContainer2 = new gui_MaterialsDisplay(this.totalMaterialReward);
		var rewardHolder2 = new gui_ContainerHolder(this.city.gui.windowInner,this.city.gui.innerWindowStage,rewardContainer2,null,function() {
			if(_gthis.lastDayReward != lastTotalReward) {
				rewardContainer2.setMaterials(_gthis.totalMaterialReward);
				lastTotalReward = _gthis.lastDayReward;
				rewardHolder2.updateSize();
			}
		});
		this.city.gui.windowInner.addChild(rewardHolder2);
		this.city.gui.windowInner.addChild(new gui_GUISpacing(this.city.gui.windowInner,new common_Point(2,6)));
		this.city.gui.windowAddInfoText(null,function() {
			return "Next production in " + (24 - ((_gthis.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24) + " hour" + (((_gthis.city.simulation.time.timeSinceStart | 0) / 60 | 0) % 24 == 23 ? "" : "s") + ".";
		});
	}
	,positionSprites: function() {
		Building.prototype.positionSprites.call(this);
		if(this.backSprite != null) {
			this.backSprite.position.set(this.position.x,this.position.y);
		}
	}
	,destroy: function() {
		Building.prototype.destroy.call(this);
		if(this.backSprite != null) {
			this.bgStage.removeChild(this.backSprite);
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		Building.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_TheMachine.saveDefinition);
		}
		var value = this.animProgress;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.lastDayReward;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		queue.addString(haxe_Serializer.run(this.thisDayMaterialReward));
		queue.addString(haxe_Serializer.run(this.totalMaterialReward));
	}
	,load: function(queue,definition) {
		Building.prototype.load.call(this,queue);
		if(queue.version < 8) {
			return;
		}
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["animProgress"] != null ? loadMap.existsReserved("animProgress") : loadMap.h.hasOwnProperty("animProgress")) {
			this.animProgress = __map_reserved["animProgress"] != null ? loadMap.getReserved("animProgress") : loadMap.h["animProgress"];
		}
		if(__map_reserved["lastDayReward"] != null ? loadMap.existsReserved("lastDayReward") : loadMap.h.hasOwnProperty("lastDayReward")) {
			this.lastDayReward = __map_reserved["lastDayReward"] != null ? loadMap.getReserved("lastDayReward") : loadMap.h["lastDayReward"];
		}
		if(__map_reserved["thisDayMaterialReward"] != null ? loadMap.existsReserved("thisDayMaterialReward") : loadMap.h.hasOwnProperty("thisDayMaterialReward")) {
			this.thisDayMaterialReward = __map_reserved["thisDayMaterialReward"] != null ? loadMap.getReserved("thisDayMaterialReward") : loadMap.h["thisDayMaterialReward"];
		}
		if(__map_reserved["totalMaterialReward"] != null ? loadMap.existsReserved("totalMaterialReward") : loadMap.h.hasOwnProperty("totalMaterialReward")) {
			this.totalMaterialReward = __map_reserved["totalMaterialReward"] != null ? loadMap.getReserved("totalMaterialReward") : loadMap.h["totalMaterialReward"];
		}
	}
	,__class__: buildings_TheMachine
});
var buildings_TinkerersHome = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.backTextureUsed = 0;
	this.frontTextureUsed = 0;
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	if(buildings_TinkerersHome.frontTextures == null) {
		buildings_TinkerersHome.frontTextures = Resources.getTexturesByWidth("spr_tinkerershouse_front_alt",20);
		buildings_TinkerersHome.backTextures = Resources.getTexturesByWidth("spr_tinkerershouse_back_alt",20);
	}
	this.frontTextureUsed = random_Random.getInt(buildings_TinkerersHome.frontTextures.length);
	this.backTextureUsed = random_Random.getInt(buildings_TinkerersHome.backTextures.length);
	this.get_customizableDrawer().setCustomTextures(buildings_TinkerersHome.frontTextures[this.frontTextureUsed],null,buildings_TinkerersHome.backTextures[this.backTextureUsed]);
};
$hxClasses["buildings.TinkerersHome"] = buildings_TinkerersHome;
buildings_TinkerersHome.__name__ = ["buildings","TinkerersHome"];
buildings_TinkerersHome.__super__ = buildings_House;
buildings_TinkerersHome.prototype = $extend(buildings_House.prototype,{
	get_drawerType: function() {
		return buildings_buildingDrawers_CustomizableBuildingDrawer;
	}
	,get_customizableDrawer: function() {
		return this.drawer;
	}
	,get_possibleUpgrades: function() {
		return [buildingUpgrades_BetterTools];
	}
	,onBuild: function() {
		buildings_House.prototype.onBuild.call(this);
		this.city.progress.unlocks.unlock(cityUpgrades_MechanicalLiving);
	}
	,postLoad: function() {
		this.get_customizableDrawer().setCustomTextures(buildings_TinkerersHome.frontTextures[this.frontTextureUsed],null,buildings_TinkerersHome.backTextures[this.backTextureUsed]);
	}
	,walkAround: function(citizen,stepsInBuilding) {
		if(!citizen.hasBuildingInited) {
			citizen.educationLevel = Math.max(Math.min(citizen.educationLevel + 0.01,1.25),citizen.educationLevel);
			citizen.hasBuildingInited = true;
		}
		var r = random_Random.getInt(6);
		if(r < 2 && stepsInBuilding > 120) {
			citizen.changeFloorAndWaitRandom(30,60);
		} else if(r == 2 || r == 3 || stepsInBuilding < 10) {
			if(citizen.relativeY < 5) {
				if(r == 2) {
					citizen.moveAndWait(random_Random.getInt(3,6),random_Random.getInt(30,60),null,false,false);
				} else {
					citizen.moveAndWait(random_Random.getInt(15,16),random_Random.getInt(30,60),null,false,false);
				}
			} else if(r == 2) {
				citizen.moveAndWait(random_Random.getInt(3,6),random_Random.getInt(30,60),null,false,false);
			} else {
				citizen.moveAndWait(random_Random.getInt(12,16),random_Random.getInt(30,60),null,false,false);
			}
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = random_Random.getInt(90,120);
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_House.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_TinkerersHome.saveDefinition);
		}
		var value = this.frontTextureUsed;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.backTextureUsed;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_House.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["frontTextureUsed"] != null ? loadMap.existsReserved("frontTextureUsed") : loadMap.h.hasOwnProperty("frontTextureUsed")) {
			this.frontTextureUsed = __map_reserved["frontTextureUsed"] != null ? loadMap.getReserved("frontTextureUsed") : loadMap.h["frontTextureUsed"];
		}
		if(__map_reserved["backTextureUsed"] != null ? loadMap.existsReserved("backTextureUsed") : loadMap.h.hasOwnProperty("backTextureUsed")) {
			this.backTextureUsed = __map_reserved["backTextureUsed"] != null ? loadMap.getReserved("backTextureUsed") : loadMap.h["backTextureUsed"];
		}
		this.postLoad();
	}
	,__class__: buildings_TinkerersHome
});
var buildings_TreeHuggerBase = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.parkSprite = null;
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.parkSprite = new PIXI.Sprite(Resources.getTexture("spr_treehuggerbase"));
	this.parkSprite.position.set(position.x,position.y);
	bgStage.addChild(this.parkSprite);
};
$hxClasses["buildings.TreeHuggerBase"] = buildings_TreeHuggerBase;
buildings_TreeHuggerBase.__name__ = ["buildings","TreeHuggerBase"];
buildings_TreeHuggerBase.__super__ = buildings_House;
buildings_TreeHuggerBase.prototype = $extend(buildings_House.prototype,{
	get_drawerType: function() {
		return buildings_buildingDrawers_AutoMergingBuildingDrawer;
	}
	,get_mergingDrawer: function() {
		return this.drawer;
	}
	,postCreate: function() {
		buildings_House.prototype.postCreate.call(this);
		this.positionSprites();
	}
	,positionSprites: function() {
		buildings_House.prototype.positionSprites.call(this);
		if(this.parkSprite != null) {
			this.parkSprite.position.set(this.position.x,this.position.y);
		}
	}
	,destroy: function() {
		buildings_House.prototype.destroy.call(this);
		this.bgStage.removeChild(this.parkSprite);
	}
	,walkAround: function(citizen,stepsInBuilding) {
		if(citizen.relativeX == 10) {
			citizen.canViewSelfInBuilding = false;
		} else {
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 4;
			arr[1] = 10;
			citizen.setPath(arr,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,__class__: buildings_TreeHuggerBase
});
var buildings_TreePlantation = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.regrowSpeedBoost = 1;
	this.initialMaterials = 100;
	this.regrowProgress = 0;
	this.maxCitizenX = 14;
	this.minCitizenX = 4;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
	this.materialsLeft = 0;
	this.treesCutTextures = Resources.getTexturesByWidth("spr_treeplantation_trees",20);
	this.regrowTextures = Resources.getTexturesByWidth("spr_treeplantation_trees_grow",20);
	this.treesSprite = new PIXI.Sprite(this.regrowTextures[0]);
	this.treesSprite.position.set(position.x,position.y);
	bgStage.addChild(this.treesSprite);
};
$hxClasses["buildings.TreePlantation"] = buildings_TreePlantation;
buildings_TreePlantation.__name__ = ["buildings","TreePlantation"];
buildings_TreePlantation.__interfaces__ = [worldResources_ILimitedMaterialGatherPlace];
buildings_TreePlantation.__super__ = buildings_Work;
buildings_TreePlantation.prototype = $extend(buildings_Work.prototype,{
	get_destroyedOnEmpty: function() {
		return false;
	}
	,get_resourceName: function() {
		return "wood";
	}
	,get_regrowSpeed: function() {
		return 0.008 * this.getExtraTreeGrowth() * this.regrowSpeedBoost;
	}
	,get_doNotGather: function() {
		return false;
	}
	,get_stayIfEmpty: function() {
		return false;
	}
	,get_possibleUpgrades: function() {
		return [buildingUpgrades_AutomaticWaterManagement];
	}
	,update: function(timeMod) {
		buildings_Work.prototype.update.call(this,timeMod);
		var city = this.city;
		if(this.materialsLeft <= 0) {
			var this1 = city.simulation.time.timeSinceStart / 60 % 24;
			var start = 7;
			var end = 20;
			if(start < end ? this1 >= start && this1 < end : this1 >= start || this1 < end) {
				this.regrowProgress += this.get_regrowSpeed() * timeMod;
			} else {
				var this2 = city.simulation.time.timeSinceStart / 60 % 24;
				var start1 = 7 - 1;
				var end1 = 20 + 1;
				if(start1 < end1 ? this2 >= start1 && this2 < end1 : this2 >= start1 || this2 < end1) {
					this.regrowProgress += this.get_regrowSpeed() * timeMod * 0.5;
				}
			}
			if(this.regrowProgress >= 100) {
				this.materialsLeft = this.initialMaterials;
				this.regrowProgress = 0;
			}
			this.updateTexture();
		}
	}
	,updateTexture: function() {
		var materialsLeft = this.materialsLeft;
		var initialMaterials = this.initialMaterials;
		var textures = this.treesCutTextures;
		var regrowTextures = this.regrowTextures;
		var sprite = this.treesSprite;
		if(materialsLeft <= 0.0000001) {
			sprite.texture = regrowTextures != null ? regrowTextures[this.regrowProgress / 100 * regrowTextures.length | 0] : textures[textures.length - 1];
		} else {
			var i = Math.floor((initialMaterials - materialsLeft) / initialMaterials * textures.length);
			if(initialMaterials != materialsLeft && i == 0 && textures.length > 1) {
				i = 1;
			}
			sprite.texture = textures[i];
		}
	}
	,positionSprites: function() {
		buildings_Work.prototype.positionSprites.call(this);
		if(this.treesSprite != null) {
			this.treesSprite.position.set(this.position.x,this.position.y);
		}
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		this.bgStage.removeChild(this.treesSprite);
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		var _gthis = this;
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			return;
		}
		var anyMaterialsLeft = this.materialsLeft > 0;
		citizen.moveAndWait(random_Random.getInt(this.minCitizenX,this.maxCitizenX),random_Random.getInt(anyMaterialsLeft ? 60 : 120,anyMaterialsLeft ? 90 : 180),function() {
			if(anyMaterialsLeft) {
				var woodCut = _gthis.city.simulation.boostManager.currentGlobalBoostAmount * 0.2;
				_gthis.materialsLeft -= woodCut;
				_gthis.city.materials.wood += woodCut;
				_gthis.city.simulation.stats.materialProduction[1][0] += woodCut;
			} else {
				_gthis.regrowProgress += 0.5 * _gthis.getExtraTreeGrowth();
			}
			_gthis.updateTexture();
		},true,false);
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			if(_gthis.materialsLeft <= 0) {
				return "Trees " + (_gthis.regrowProgress | 0) + "% grown.";
			} else {
				return "" + (_gthis.materialsLeft | 0) + "/" + (_gthis.initialMaterials | 0) + " wood left.";
			}
		});
	}
	,getExtraTreeGrowth: function() {
		return 1 + this.getEffectsOfAdjecentBuildings("increaseTreeGrowth");
	}
	,postLoad: function() {
		this.updateTexture();
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_TreePlantation.saveDefinition);
		}
		var value = this.regrowProgress;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.materialsLeft;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["regrowProgress"] != null ? loadMap.existsReserved("regrowProgress") : loadMap.h.hasOwnProperty("regrowProgress")) {
			this.regrowProgress = __map_reserved["regrowProgress"] != null ? loadMap.getReserved("regrowProgress") : loadMap.h["regrowProgress"];
		}
		if(__map_reserved["materialsLeft"] != null ? loadMap.existsReserved("materialsLeft") : loadMap.h.hasOwnProperty("materialsLeft")) {
			this.materialsLeft = __map_reserved["materialsLeft"] != null ? loadMap.getReserved("materialsLeft") : loadMap.h["materialsLeft"];
		}
		this.postLoad();
	}
	,__class__: buildings_TreePlantation
});
var buildings_Villa = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.teleportX = 3;
	this.currentAdjBonus = 0;
	this.timesUsedTo = 0;
	this.timesUsed = 0;
	buildings_House.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.Villa"] = buildings_Villa;
buildings_Villa.__name__ = ["buildings","Villa"];
buildings_Villa.__super__ = buildings_House;
buildings_Villa.prototype = $extend(buildings_House.prototype,{
	get_hasPrivateTeleporter: function() {
		return true;
	}
	,get_possibleUpgrades: function() {
		return [];
	}
	,walkAround: function(citizen,stepsInBuilding) {
		var r = random_Random.getInt(3);
		if(r == 0 && stepsInBuilding > 120) {
			if(citizen.relativeX < 5) {
				var pool = pooling_Int32ArrayPool.pool;
				var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
				arr[0] = 4;
				arr[1] = 5;
				citizen.setPath(arr,0,2,true);
				citizen.pathEndFunction = function() {
					citizen.changeFloorAndWaitRandom(30,60);
				};
				citizen.pathOnlyRelatedTo = citizen.inPermanent;
			} else {
				citizen.changeFloorAndWaitRandom(30,60);
			}
		} else if(r == 1 || stepsInBuilding <= 10 && citizen.relativeX < this.teleportX + 0.5) {
			if(citizen.relativeY < 5) {
				var tmp = random_Random.getInt(10,16);
				var tmp1 = random_Random.getInt(30,60);
				citizen.moveAndWait(tmp,tmp1,null,false,false);
			} else if(random_Random.getInt(2) == 1) {
				var tmp2 = random_Random.getInt(5,8);
				var tmp3 = random_Random.getInt(30,60);
				citizen.moveAndWait(tmp2,tmp3,null,false,false);
			} else {
				var tmp4 = random_Random.getInt(13,16);
				var tmp5 = random_Random.getInt(30,60);
				citizen.moveAndWait(tmp4,tmp5,null,false,false);
			}
		} else {
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
			arr1[0] = 8;
			arr1[1] = random_Random.getInt(90,120);
			citizen.setPath(arr1,0,2,true);
			citizen.pathEndFunction = null;
			citizen.pathOnlyRelatedTo = citizen.inPermanent;
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_House.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "Teleported from " + _gthis.timesUsed + " times.";
		});
		this.city.gui.windowAddInfoText(null,function() {
			return "Teleported to " + _gthis.timesUsedTo + " times.";
		});
	}
	,createTeleportParticle: function(rayTexture) {
		if(rayTexture == null) {
			rayTexture = "unused";
		}
		this.city.particles.addParticle(Resources.getTexturesByWidth("spr_smallteleporter_ray",3),new common_Point(this.position.x + 3,this.position.y + 12));
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_House.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Villa.saveDefinition);
		}
		var value = this.timesUsed;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.timesUsedTo;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		buildings_House.prototype.load.call(this,queue);
		if(queue.version < 6) {
			return;
		}
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["timesUsed"] != null ? loadMap.existsReserved("timesUsed") : loadMap.h.hasOwnProperty("timesUsed")) {
			this.timesUsed = __map_reserved["timesUsed"] != null ? loadMap.getReserved("timesUsed") : loadMap.h["timesUsed"];
		}
		if(__map_reserved["timesUsedTo"] != null ? loadMap.existsReserved("timesUsedTo") : loadMap.h.hasOwnProperty("timesUsedTo")) {
			this.timesUsedTo = __map_reserved["timesUsedTo"] != null ? loadMap.getReserved("timesUsedTo") : loadMap.h["timesUsedTo"];
		}
	}
	,__class__: buildings_Villa
});
var buildings_WoodcuttingCentre = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	buildings_BlueCollarWork.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.WoodcuttingCentre"] = buildings_WoodcuttingCentre;
buildings_WoodcuttingCentre.__name__ = ["buildings","WoodcuttingCentre"];
buildings_WoodcuttingCentre.__super__ = buildings_BlueCollarWork;
buildings_WoodcuttingCentre.prototype = $extend(buildings_BlueCollarWork.prototype,{
	work: function(citizen,timeMod,shouldStopWorking) {
		var _gthis = this;
		this.doBlueCollarJob(citizen,timeMod,shouldStopWorking,[worldResources_Forest,buildings_TreePlantation],function(forest) {
			var _this = _gthis.city.simulation;
			var finalWoodCutPerAction = 0.2 * (_gthis.city.progress.story.hiddenBoost && _gthis.city.materials.wood <= 6 ? 1.75 : 1) * (Config.earlyGameFix1 && _this.citizens.length < 30 ? 1.3 - 0.3 * (_this.citizens.length / 60) : 1) * _gthis.city.simulation.boostManager.currentGlobalBoostAmount;
			_gthis.city.materials.wood += finalWoodCutPerAction;
			_gthis.city.simulation.stats.materialProduction[1][0] += finalWoodCutPerAction;
			forest.materialsLeft -= finalWoodCutPerAction;
		},60,90);
	}
	,__class__: buildings_WoodcuttingCentre
});
var buildings_Workshop = function(game,stage,bgStage,city,world,position,worldPosition,id) {
	this.totalKnowledgeGenerated = 0;
	this.totalMaterialUsed = 0;
	this.materialMade = 0;
	this.isProducingKnowledge = true;
	buildings_Work.call(this,game,stage,bgStage,city,world,position,worldPosition,id);
};
$hxClasses["buildings.Workshop"] = buildings_Workshop;
buildings_Workshop.__name__ = ["buildings","Workshop"];
buildings_Workshop.__super__ = buildings_Work;
buildings_Workshop.prototype = $extend(buildings_Work.prototype,{
	onBuild: function() {
		this.city.simulation.bonuses.machinePartsFactorySpeed *= 1.25;
	}
	,get_possibleBuildingModes: function() {
		return [buildingUpgrades_WorkshopKnowledge,buildingUpgrades_WorkshopMachineParts];
	}
	,get_possibleCityUpgrades: function() {
		return [cityUpgrades_BuildingRecycling,cityUpgrades_BuildingRecycling2,cityUpgrades_BuildingRecycling3];
	}
	,work: function(citizen,timeMod,shouldStopWorking) {
		if(shouldStopWorking) {
			citizen.currentAction = LifeAction.Nothing;
			return;
		}
		if(this.workers.indexOf(citizen) == 0) {
			if(random_Random.getInt(5) < 4) {
				citizen.moveAndWait(random_Random.getInt(4,8),random_Random.getInt(60,120),null,false,true);
			} else {
				citizen.moveAndWait(random_Random.getInt(11,14),random_Random.getInt(60,120),null,false,true);
			}
		} else if(citizen.relativeY < 2) {
			citizen.changeFloor();
		} else if(random_Random.getInt(2) == 0) {
			citizen.moveAndWait(random_Random.getInt(3,6),random_Random.getInt(60,120),null,false,true);
		} else {
			citizen.moveAndWait(random_Random.getInt(13,14),random_Random.getInt(60,120),null,false,true);
		}
		if(this.isProducingKnowledge) {
			var newKnowledge = 0.15 * citizen.get_educationSpeedModifier() * this.city.simulation.boostManager.currentGlobalBoostAmount;
			this.city.materials.knowledge += newKnowledge;
			this.city.simulation.stats.materialProduction[8][0] += newKnowledge;
			this.totalKnowledgeGenerated += newKnowledge;
		} else if(this.city.materials.wood >= 1) {
			var convertedInto = 0.075 * citizen.get_educationSpeedModifier() * this.city.simulation.boostManager.currentGlobalBoostAmount;
			this.city.materials.machineParts += convertedInto;
			this.city.simulation.stats.materialProduction[3][0] += convertedInto;
			this.materialMade += convertedInto;
			var materialsUsed = convertedInto * 2;
			this.city.materials.wood -= materialsUsed;
			this.city.simulation.stats.materialUsed[1][0] += materialsUsed;
			this.totalMaterialUsed += materialsUsed;
		}
	}
	,update: function(timeMod) {
		buildings_Work.prototype.update.call(this,timeMod);
	}
	,destroy: function() {
		buildings_Work.prototype.destroy.call(this);
		this.city.simulation.bonuses.machinePartsFactorySpeed /= 1.25;
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		buildings_Work.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			return "" + (_gthis.totalKnowledgeGenerated | 0) + " knowledge gathered. " + ("" + (_gthis.totalMaterialUsed | 0) + " wood used to make " + (_gthis.materialMade | 0) + " machine parts.");
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		buildings_Work.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(buildings_Workshop.saveDefinition);
		}
		var value = this.materialMade;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.totalMaterialUsed;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.totalKnowledgeGenerated;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		buildings_Work.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["materialMade"] != null ? loadMap.existsReserved("materialMade") : loadMap.h.hasOwnProperty("materialMade")) {
			this.materialMade = __map_reserved["materialMade"] != null ? loadMap.getReserved("materialMade") : loadMap.h["materialMade"];
		}
		if(__map_reserved["totalMaterialUsed"] != null ? loadMap.existsReserved("totalMaterialUsed") : loadMap.h.hasOwnProperty("totalMaterialUsed")) {
			this.totalMaterialUsed = __map_reserved["totalMaterialUsed"] != null ? loadMap.getReserved("totalMaterialUsed") : loadMap.h["totalMaterialUsed"];
		}
		if(__map_reserved["totalKnowledgeGenerated"] != null ? loadMap.existsReserved("totalKnowledgeGenerated") : loadMap.h.hasOwnProperty("totalKnowledgeGenerated")) {
			this.totalKnowledgeGenerated = __map_reserved["totalKnowledgeGenerated"] != null ? loadMap.getReserved("totalKnowledgeGenerated") : loadMap.h["totalKnowledgeGenerated"];
		}
	}
	,__class__: buildings_Workshop
});
var buildings_buildingBehaviours_ParkFestivalEntertainment = function(park,bgStage) {
	this.park = park;
	this.podiumSprite = null;
	this.bgStage = bgStage;
};
$hxClasses["buildings.buildingBehaviours.ParkFestivalEntertainment"] = buildings_buildingBehaviours_ParkFestivalEntertainment;
buildings_buildingBehaviours_ParkFestivalEntertainment.__name__ = ["buildings","buildingBehaviours","ParkFestivalEntertainment"];
buildings_buildingBehaviours_ParkFestivalEntertainment.prototype = {
	doFestivalWork: function(festival,citizen,timeMod,currentMainTexture,citizenID) {
		var shouldShowBGSprite = true;
		var bgSpriteXPos = 3;
		if(this.park.leftBuilding != null) {
			if(shouldShowBGSprite && this.park.leftBuilding["is"](buildings_Park)) {
				shouldShowBGSprite = false;
			}
			if(shouldShowBGSprite && this.park.leftBuilding["is"](buildings_BotanicalGardens)) {
				shouldShowBGSprite = false;
				if(this.park.leftBuilding.bottomBuilding != null && this.park.leftBuilding.bottomBuilding["is"](buildings_BotanicalGardens)) {
					if(currentMainTexture == 0) {
						bgSpriteXPos = -3;
					}
					shouldShowBGSprite = true;
				}
			}
		}
		if(shouldShowBGSprite) {
			if(this.podiumSprite == null) {
				this.podiumSprite = new PIXI.Sprite(Resources.getTexture("spr_festival_podium_small"));
				this.bgStage.addChild(this.podiumSprite);
			}
			this.podiumSprite.position.set(this.park.position.x + bgSpriteXPos,this.park.position.y + 20 - this.podiumSprite.height - 1);
			var myXPos = citizenID == 0 ? bgSpriteXPos + 3 : bgSpriteXPos;
			var spd = citizen.pathWalkSpeed * timeMod;
			Citizen.shouldUpdateDraw = true;
			if(Math.abs(myXPos - citizen.relativeX) < spd) {
				citizen.relativeX = myXPos;
			} else {
				var num = myXPos - citizen.relativeX;
				citizen.relativeX += (num > 0 ? 1 : num < 0 ? -1 : 0) * spd;
			}
			if(citizen.relativeX >= myXPos && citizen.relativeX <= myXPos + 1) {
				citizen.setRelativePos(myXPos,4);
			}
		} else {
			if(this.podiumSprite != null) {
				this.podiumSprite.destroy();
				this.podiumSprite = null;
			}
			citizen.moveAndWait(random_Random.getInt(0,17),random_Random.getInt(60,90),null,false,false);
		}
	}
	,beEntertainedFestival: function(festival,citizen,timeMod) {
		if(this.podiumSprite == null) {
			buildings_buildingBehaviours_ParkWalk.beEntertainedPark(this.park.leftBuilding,this.park.rightBuilding,citizen);
		} else {
			citizen.moveAndWait(random_Random.getInt(Math.ceil(this.podiumSprite.position.x + this.podiumSprite.width - this.park.position.x),this.park.rightBuilding != null && (this.park.rightBuilding["is"](buildings_Park) || this.park.rightBuilding["is"](buildings_BotanicalGardens)) ? 19 : 16),random_Random.getInt(100,180),null,false,true);
		}
	}
	,destroy: function() {
		if(this.podiumSprite != null) {
			this.podiumSprite.destroy();
		}
	}
	,stop: function() {
	}
	,__class__: buildings_buildingBehaviours_ParkFestivalEntertainment
};
var buildings_buildingBehaviours_ParkWalk = function() { };
$hxClasses["buildings.buildingBehaviours.ParkWalk"] = buildings_buildingBehaviours_ParkWalk;
buildings_buildingBehaviours_ParkWalk.__name__ = ["buildings","buildingBehaviours","ParkWalk"];
buildings_buildingBehaviours_ParkWalk.beEntertainedPark = function(leftBuilding,rightBuilding,citizen) {
	var leftGardensSkipBuilding = false;
	var rightGardensSkipBuilding = false;
	if(leftBuilding != null && leftBuilding["is"](buildings_ParkPod)) {
		leftBuilding = leftBuilding.leftBuilding;
		leftGardensSkipBuilding = true;
	}
	if(rightBuilding != null && rightBuilding["is"](buildings_ParkPod)) {
		rightBuilding = rightBuilding.rightBuilding;
		rightGardensSkipBuilding = true;
	}
	var leftGardens = leftBuilding != null && leftBuilding["is"](buildings_BotanicalGardens);
	var rightGardens = rightBuilding != null && rightBuilding["is"](buildings_BotanicalGardens);
	var leftGardensCanWalk = leftGardens && (leftBuilding.bottomBuilding == null || !leftBuilding.bottomBuilding["is"](buildings_BotanicalGardens));
	var rightGardensCanWalk = rightGardens && (rightBuilding.bottomBuilding == null || !rightBuilding.bottomBuilding["is"](buildings_BotanicalGardens));
	if(!leftGardens) {
		if(leftBuilding != null) {
			if(leftBuilding["is"](buildings_Park)) {
				leftGardens = true;
				leftGardensCanWalk = true;
			}
		}
	}
	if(!rightGardens) {
		if(rightBuilding != null) {
			if(rightBuilding["is"](buildings_Park)) {
				rightGardens = true;
				rightGardensCanWalk = true;
			}
		}
	}
	var doingSomething = false;
	var goTo = random_Random.getInt(1 + (leftGardens ? 1 : 0) + (rightGardens ? 1 : 0));
	if(leftGardens && goTo == 0) {
		if(leftGardensSkipBuilding) {
			if(leftGardensCanWalk) {
				var pool = pooling_Int32ArrayPool.pool;
				var arr = pool[10].length > 0 ? pool[10].splice(pool[10].length - 1,1)[0] : new Int32Array(10);
				arr[0] = 12;
				arr[1] = 50;
				arr[2] = 2;
				arr[3] = 0;
				arr[4] = 2;
				arr[5] = 0;
				arr[6] = 4;
				arr[7] = random_Random.getInt(0,18);
				arr[8] = 8;
				arr[9] = random_Random.getInt(100,180);
				citizen.setPath(arr,0,8,true);
				doingSomething = true;
			}
		} else if(leftGardensCanWalk) {
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[8].length > 0 ? pool1[8].splice(pool1[8].length - 1,1)[0] : new Int32Array(8);
			arr1[0] = 12;
			arr1[1] = 50;
			arr1[2] = 2;
			arr1[3] = 0;
			arr1[4] = 4;
			arr1[5] = random_Random.getInt(0,18);
			arr1[6] = 8;
			arr1[7] = random_Random.getInt(100,180);
			citizen.setPath(arr1,0,8,true);
			doingSomething = true;
		} else if(random_Random.getInt(2) == 0) {
			citizen.moveAndWait(random_Random.getInt(-3,-3),random_Random.getInt(70,90),null,false,true);
			doingSomething = true;
		}
	} else if(rightGardens && goTo == 1) {
		if(rightGardensSkipBuilding) {
			if(rightGardensCanWalk) {
				var pool2 = pooling_Int32ArrayPool.pool;
				var arr2 = pool2[10].length > 0 ? pool2[10].splice(pool2[10].length - 1,1)[0] : new Int32Array(10);
				arr2[0] = 12;
				arr2[1] = 50;
				arr2[2] = 3;
				arr2[3] = 0;
				arr2[4] = 3;
				arr2[5] = 0;
				arr2[6] = 4;
				arr2[7] = random_Random.getInt(0,18);
				arr2[8] = 8;
				arr2[9] = random_Random.getInt(100,180);
				citizen.setPath(arr2,0,8,true);
				doingSomething = true;
			}
		} else if(rightGardensCanWalk) {
			var pool3 = pooling_Int32ArrayPool.pool;
			var arr3 = pool3[8].length > 0 ? pool3[8].splice(pool3[8].length - 1,1)[0] : new Int32Array(8);
			arr3[0] = 12;
			arr3[1] = 50;
			arr3[2] = 3;
			arr3[3] = 0;
			arr3[4] = 4;
			arr3[5] = random_Random.getInt(0,18);
			arr3[6] = 8;
			arr3[7] = random_Random.getInt(100,180);
			citizen.setPath(arr3,0,8,true);
			doingSomething = true;
		} else if(random_Random.getInt(2) == 0) {
			citizen.moveAndWait(random_Random.getInt(21,21),random_Random.getInt(70,90),null,false,true);
			doingSomething = true;
		}
	}
	if(!doingSomething) {
		citizen.moveAndWait(random_Random.getInt(leftGardens ? 0 : 3,rightGardens ? 18 : 15),random_Random.getInt(100,180),null,false,true);
	}
};
var buildings_buildingDrawers_BuildingDrawer = function(building,stage,bgStage,textureName) {
	this.building = building;
	this.stage = stage;
	this.bgStage = bgStage;
	this.currentTextureName = textureName;
	this.canMergeH = false;
	this.canMergeV = false;
};
$hxClasses["buildings.buildingDrawers.BuildingDrawer"] = buildings_buildingDrawers_BuildingDrawer;
buildings_buildingDrawers_BuildingDrawer.__name__ = ["buildings","buildingDrawers","BuildingDrawer"];
buildings_buildingDrawers_BuildingDrawer.prototype = {
	positionSpritesMerging: function() {
	}
	,positionSprites: function() {
	}
	,changeMainTexture: function(textureName) {
		this.currentTextureName = textureName;
	}
	,destroy: function() {
	}
	,__class__: buildings_buildingDrawers_BuildingDrawer
};
var buildings_buildingDrawers_AllDirMergingBuildingDrawer = function(building,stage,bgStage,textureName) {
	this.fgTexturesSet = null;
	this.bgTexturesSet = null;
	this.currentSecondaryTexture = 0;
	this.secondaryBackgroundTextureName = null;
	buildings_buildingDrawers_BuildingDrawer.call(this,building,stage,bgStage,textureName);
	this.canMergeH = true;
	this.canMergeV = true;
	this.bgSpriteTopLeft = new PIXI.Sprite();
	bgStage.cacheableChildren.push(this.bgSpriteTopLeft);
	bgStage.isInvalid = true;
	this.bgSpriteTopRight = new PIXI.Sprite();
	bgStage.cacheableChildren.push(this.bgSpriteTopRight);
	bgStage.isInvalid = true;
	this.spriteTopLeft = new PIXI.Sprite();
	stage.cacheableChildren.push(this.spriteTopLeft);
	stage.isInvalid = true;
	this.spriteTopRight = new PIXI.Sprite();
	stage.cacheableChildren.push(this.spriteTopRight);
	stage.isInvalid = true;
	this.bgSpriteBottomLeft = new PIXI.Sprite();
	bgStage.cacheableChildren.push(this.bgSpriteBottomLeft);
	bgStage.isInvalid = true;
	this.bgSpriteBottomRight = new PIXI.Sprite();
	bgStage.cacheableChildren.push(this.bgSpriteBottomRight);
	bgStage.isInvalid = true;
	this.spriteBottomLeft = new PIXI.Sprite();
	stage.cacheableChildren.push(this.spriteBottomLeft);
	stage.isInvalid = true;
	this.spriteBottomRight = new PIXI.Sprite();
	stage.cacheableChildren.push(this.spriteBottomRight);
	stage.isInvalid = true;
	this.spriteSecondaryBackground = new PIXI.Sprite();
	bgStage.cacheableChildren.push(this.spriteSecondaryBackground);
	bgStage.isInvalid = true;
	this.positionSprites();
	this.secondaryBackgroundTextureName = null;
};
$hxClasses["buildings.buildingDrawers.AllDirMergingBuildingDrawer"] = buildings_buildingDrawers_AllDirMergingBuildingDrawer;
buildings_buildingDrawers_AllDirMergingBuildingDrawer.__name__ = ["buildings","buildingDrawers","AllDirMergingBuildingDrawer"];
buildings_buildingDrawers_AllDirMergingBuildingDrawer.__super__ = buildings_buildingDrawers_BuildingDrawer;
buildings_buildingDrawers_AllDirMergingBuildingDrawer.prototype = $extend(buildings_buildingDrawers_BuildingDrawer.prototype,{
	positionSprites: function() {
		this.building.city.updateConnectedBuildingSprites = true;
	}
	,setBackgroundTextures: function(bgTextures) {
		this.bgTexturesSet = Resources.getTexturesAsGrid(bgTextures,10,2,2,true);
	}
	,setForegroundTextures: function(fgTextures) {
		this.fgTexturesSet = Resources.getTexturesAsGrid(fgTextures,10,2,2,true);
	}
	,positionSpritesMerging: function() {
		var halfPermWidth = 10. | 0;
		var halfPermHeight = 10. | 0;
		this.spriteTopLeft.position.set(this.building.position.x,this.building.position.y);
		this.bgSpriteTopLeft.position.set(this.building.position.x,this.building.position.y);
		this.spriteTopRight.position.set(this.building.position.x + halfPermWidth,this.building.position.y);
		this.bgSpriteTopRight.position.set(this.building.position.x + halfPermWidth,this.building.position.y);
		this.spriteBottomLeft.position.set(this.building.position.x,this.building.position.y + halfPermHeight);
		this.bgSpriteBottomLeft.position.set(this.building.position.x,this.building.position.y + halfPermHeight);
		this.spriteBottomRight.position.set(this.building.position.x + halfPermWidth,this.building.position.y + halfPermHeight);
		this.bgSpriteBottomRight.position.set(this.building.position.x + halfPermWidth,this.building.position.y + halfPermHeight);
		this.spriteSecondaryBackground.position.set(this.building.position.x,this.building.position.y);
		var hasLeftBuilding = this.isConnectedBuilding(this.building.leftBuilding);
		var hasRightBuilding = this.isConnectedBuilding(this.building.rightBuilding);
		var hasTopBuilding = this.isConnectedBuilding(this.building.topBuilding);
		var hasBottomBuilding = this.isConnectedBuilding(this.building.bottomBuilding);
		var hasTopLeftBuilding = false;
		var hasTopRightBuilding = false;
		var hasBottomLeftBuilding = false;
		var hasBottomRightBuilding = false;
		if(hasLeftBuilding && hasTopBuilding) {
			hasTopLeftBuilding = this.isConnectedBuilding(this.building.leftBuilding.topBuilding);
		}
		if(hasRightBuilding && hasTopBuilding) {
			hasTopRightBuilding = this.isConnectedBuilding(this.building.rightBuilding.topBuilding);
		}
		if(hasLeftBuilding && hasBottomBuilding) {
			hasBottomLeftBuilding = this.isConnectedBuilding(this.building.leftBuilding.bottomBuilding);
		}
		if(hasRightBuilding && hasBottomBuilding) {
			hasBottomRightBuilding = this.isConnectedBuilding(this.building.rightBuilding.bottomBuilding);
		}
		if(!hasLeftBuilding) {
			hasLeftBuilding = this.isConnectedBuildingHOnly(this.building.leftBuilding);
		} else {
			hasLeftBuilding = true;
		}
		if(!hasRightBuilding) {
			hasRightBuilding = this.isConnectedBuildingHOnly(this.building.rightBuilding);
		} else {
			hasRightBuilding = true;
		}
		var textures = Resources.getTexturesBySize(this.currentTextureName,halfPermWidth,halfPermHeight,2,true);
		var useDoor = this.building.worldPosition.y == 0;
		var topLeftIndex = 6 * ((hasLeftBuilding ? 1 : 0) + (hasTopBuilding ? 2 : 0) + (hasTopLeftBuilding ? 1 : 0));
		var topRightIndex = 1 + 6 * ((hasRightBuilding ? 1 : 0) + (hasTopBuilding ? 2 : 0) + (hasTopRightBuilding ? 1 : 0));
		var bottomLeftIndex = 6 * ((hasLeftBuilding ? 1 : 0) + (hasBottomBuilding ? 2 : 0) + (hasBottomLeftBuilding ? 1 : 0));
		var bottomRightIndex = 1 + 6 * ((hasRightBuilding ? 1 : 0) + (hasBottomBuilding ? 2 : 0) + (hasBottomRightBuilding ? 1 : 0));
		if(this.fgTexturesSet != null && !useDoor) {
			var topLeftIndex2 = 2 * ((hasLeftBuilding ? 1 : 0) + (hasTopBuilding ? 2 : 0) + (hasTopLeftBuilding ? 1 : 0));
			this.spriteTopLeft.texture = this.fgTexturesSet[topLeftIndex2][0];
			var topRightIndex2 = 1 + 2 * ((hasRightBuilding ? 1 : 0) + (hasTopBuilding ? 2 : 0) + (hasTopRightBuilding ? 1 : 0));
			this.spriteTopRight.texture = this.fgTexturesSet[topRightIndex2][0];
			var bottomLeftIndex2 = 2 * ((hasLeftBuilding ? 1 : 0) + (hasBottomBuilding ? 2 : 0) + (hasBottomLeftBuilding ? 1 : 0));
			this.spriteBottomLeft.texture = this.fgTexturesSet[bottomLeftIndex2][1];
			var bottomRightIndex2 = 1 + 2 * ((hasRightBuilding ? 1 : 0) + (hasBottomBuilding ? 2 : 0) + (hasBottomRightBuilding ? 1 : 0));
			this.spriteBottomRight.texture = this.fgTexturesSet[bottomRightIndex2][1];
		} else {
			this.spriteTopLeft.texture = textures[topLeftIndex + (useDoor ? 2 : 0)][0];
			this.spriteTopRight.texture = textures[topRightIndex + (useDoor ? 2 : 0)][0];
			this.spriteBottomLeft.texture = textures[bottomLeftIndex + (useDoor ? 2 : 0)][1];
			this.spriteBottomRight.texture = textures[bottomRightIndex + (useDoor ? 2 : 0)][1];
		}
		if(this.bgTexturesSet != null) {
			var topLeftIndex21 = 2 * ((hasLeftBuilding ? 1 : 0) + (hasTopBuilding ? 2 : 0) + (hasTopLeftBuilding ? 1 : 0));
			this.bgSpriteTopLeft.texture = this.bgTexturesSet[topLeftIndex21][0];
			var topRightIndex21 = 1 + 2 * ((hasRightBuilding ? 1 : 0) + (hasTopBuilding ? 2 : 0) + (hasTopRightBuilding ? 1 : 0));
			this.bgSpriteTopRight.texture = this.bgTexturesSet[topRightIndex21][0];
			var bottomLeftIndex21 = 2 * ((hasLeftBuilding ? 1 : 0) + (hasBottomBuilding ? 2 : 0) + (hasBottomLeftBuilding ? 1 : 0));
			this.bgSpriteBottomLeft.texture = this.bgTexturesSet[bottomLeftIndex21][1];
			var bottomRightIndex21 = 1 + 2 * ((hasRightBuilding ? 1 : 0) + (hasBottomBuilding ? 2 : 0) + (hasBottomRightBuilding ? 1 : 0));
			this.bgSpriteBottomRight.texture = this.bgTexturesSet[bottomRightIndex21][1];
		} else {
			this.bgSpriteTopLeft.texture = textures[topLeftIndex + 4][0];
			this.bgSpriteTopRight.texture = textures[topRightIndex + 4][0];
			this.bgSpriteBottomLeft.texture = textures[bottomLeftIndex + 4][1];
			this.bgSpriteBottomRight.texture = textures[bottomRightIndex + 4][1];
		}
		this.bgStage.isInvalid = true;
		this.stage.isInvalid = true;
		if(this.secondaryBackgroundTextureName != null) {
			var leaderBuilding = this.building;
			var o = this.building;
			var cl = o == null ? null : js_Boot.getClass(o);
			while(leaderBuilding.bottomBuilding != null && leaderBuilding.bottomBuilding["is"](cl)) leaderBuilding = leaderBuilding.bottomBuilding;
			if(leaderBuilding != this.building) {
				var drawer = leaderBuilding.drawer;
				if(drawer.secondaryBackgroundTextureName != null) {
					var leaderGroup = drawer.getCurrentSecondaryTextureGroup();
					if(leaderGroup != this.getCurrentSecondaryTextureGroup()) {
						this.setGroupOfSecondaryTextureForBuilding(this.building,leaderGroup);
					}
				}
			}
			this.updateSecondaryBackgroundImage(hasTopBuilding,hasBottomBuilding);
		}
	}
	,setSecondaryBackgroundImages: function(image,secondaryBackgroundSets,currentTexture,secondaryTextureOnSet) {
		this.secondaryBackgroundTextureName = image;
		this.secondaryBackgroundSets = secondaryBackgroundSets;
		this.currentSecondaryTexture = currentTexture;
		this.secondaryTextureOnSet = secondaryTextureOnSet;
		this.updateSecondaryBackgroundImageNoExtraInfo();
	}
	,updateSecondaryBackgroundImageNoExtraInfo: function() {
		this.updateSecondaryBackgroundImage(this.isConnectedBuilding(this.building.topBuilding),this.isConnectedBuilding(this.building.bottomBuilding));
	}
	,updateSecondaryBackgroundImage: function(hasTopBuilding,hasBottomBuilding) {
		if(this.secondaryBackgroundTextureName == null) {
			return;
		}
		var tmp = this.getCurrentSecondaryBackTextures();
		this.spriteSecondaryBackground.texture = tmp[(hasBottomBuilding ? 1 : 0) + (hasTopBuilding ? 3 : 0) + (hasTopBuilding && hasBottomBuilding ? -2 : 0)];
		this.bgStage.isInvalid = true;
	}
	,changeMainTexture: function(textureName) {
		buildings_buildingDrawers_BuildingDrawer.prototype.changeMainTexture.call(this,textureName);
		this.positionSprites();
	}
	,destroy: function() {
		buildings_buildingDrawers_BuildingDrawer.prototype.destroy.call(this);
		var _this = this.bgStage;
		var child = this.bgSpriteTopLeft;
		HxOverrides.remove(_this.cacheableChildren,child);
		_this.isInvalid = true;
		if(child.parent != null) {
			child.parent.removeChild(child);
		}
		var _this1 = this.bgStage;
		var child1 = this.bgSpriteTopRight;
		HxOverrides.remove(_this1.cacheableChildren,child1);
		_this1.isInvalid = true;
		if(child1.parent != null) {
			child1.parent.removeChild(child1);
		}
		var _this2 = this.bgStage;
		var child2 = this.bgSpriteBottomLeft;
		HxOverrides.remove(_this2.cacheableChildren,child2);
		_this2.isInvalid = true;
		if(child2.parent != null) {
			child2.parent.removeChild(child2);
		}
		var _this3 = this.bgStage;
		var child3 = this.bgSpriteBottomRight;
		HxOverrides.remove(_this3.cacheableChildren,child3);
		_this3.isInvalid = true;
		if(child3.parent != null) {
			child3.parent.removeChild(child3);
		}
		var _this4 = this.bgStage;
		var child4 = this.spriteSecondaryBackground;
		HxOverrides.remove(_this4.cacheableChildren,child4);
		_this4.isInvalid = true;
		if(child4.parent != null) {
			child4.parent.removeChild(child4);
		}
		var _this5 = this.stage;
		var child5 = this.spriteTopLeft;
		HxOverrides.remove(_this5.cacheableChildren,child5);
		_this5.isInvalid = true;
		if(child5.parent != null) {
			child5.parent.removeChild(child5);
		}
		var _this6 = this.stage;
		var child6 = this.spriteTopRight;
		HxOverrides.remove(_this6.cacheableChildren,child6);
		_this6.isInvalid = true;
		if(child6.parent != null) {
			child6.parent.removeChild(child6);
		}
		var _this7 = this.stage;
		var child7 = this.spriteBottomLeft;
		HxOverrides.remove(_this7.cacheableChildren,child7);
		_this7.isInvalid = true;
		if(child7.parent != null) {
			child7.parent.removeChild(child7);
		}
		var _this8 = this.stage;
		var child8 = this.spriteBottomRight;
		HxOverrides.remove(_this8.cacheableChildren,child8);
		_this8.isInvalid = true;
		if(child8.parent != null) {
			child8.parent.removeChild(child8);
		}
		this.building.city.updateConnectedBuildingSprites = true;
	}
	,isConnectedBuilding: function(otherBuilding) {
		if(otherBuilding == null) {
			return false;
		}
		var otherAMDrawer = this.getOtherAMDrawer(otherBuilding);
		if(otherAMDrawer == null) {
			return false;
		}
		return otherAMDrawer.currentTextureName == this.currentTextureName;
	}
	,isConnectedBuildingHOnly: function(otherBuilding) {
		if(otherBuilding == null) {
			return false;
		}
		var otherAMDrawer = this.getOtherAMDrawerHOnly(otherBuilding);
		if(otherAMDrawer == null) {
			return false;
		}
		return otherAMDrawer.currentTextureName == this.currentTextureName;
	}
	,getOtherAMDrawer: function(otherBuilding) {
		if(otherBuilding == null) {
			return null;
		}
		var otherDrawer = otherBuilding.drawer;
		if(!otherDrawer.canMergeH || !otherDrawer.canMergeV) {
			return null;
		}
		return otherDrawer;
	}
	,getOtherAMDrawerHOnly: function(otherBuilding) {
		if(otherBuilding == null) {
			return null;
		}
		var otherDrawer = otherBuilding.drawer;
		if(!otherDrawer.canMergeH) {
			return null;
		}
		return otherDrawer;
	}
	,getSecondaryBackTextures: function() {
		return Resources.getTexturesBySize(this.secondaryBackgroundTextureName,20,20);
	}
	,getCurrentSecondaryBackTextures: function() {
		return this.getSecondaryBackTextures()[this.currentSecondaryTexture];
	}
	,getCurrentSecondaryTextureGroup: function() {
		return this.getSecondaryTextureGroup(this.currentSecondaryTexture);
	}
	,getSecondaryTextureGroup: function(tex) {
		var currentGroup = -1;
		var i = 0;
		while(i <= tex) {
			++currentGroup;
			i += this.secondaryBackgroundSets[currentGroup];
		}
		return currentGroup;
	}
	,getFirstSecondaryTextureOfGroup: function(group) {
		var actualTexture = 0;
		var i = 0;
		while(i < group) {
			actualTexture += this.secondaryBackgroundSets[i];
			++i;
		}
		return actualTexture;
	}
	,setSecondaryTextureWithinGroup: function(num) {
		this.currentSecondaryTexture = this.getFirstSecondaryTextureOfGroup(this.getCurrentSecondaryTextureGroup()) + num;
		this.secondaryTextureOnSet(this.currentSecondaryTexture);
		this.updateSecondaryBackgroundImageNoExtraInfo();
	}
	,setGroupOfSecondaryTexture: function(t) {
		var o = this.building;
		var cl = o == null ? null : js_Boot.getClass(o);
		var currentBuilding = this.building;
		while(currentBuilding.bottomBuilding != null && currentBuilding.bottomBuilding["is"](cl)) currentBuilding = currentBuilding.bottomBuilding;
		while(true) {
			this.setGroupOfSecondaryTextureForBuilding(currentBuilding,t);
			if(currentBuilding.topBuilding != null && currentBuilding.topBuilding["is"](cl)) {
				currentBuilding = currentBuilding.topBuilding;
			} else {
				break;
			}
		}
	}
	,setGroupOfSecondaryTextureForThisBuilding: function(group) {
		this.setGroupOfSecondaryTextureForBuilding(this.building,group);
	}
	,setGroupOfSecondaryTextureForBuilding: function(currentBuilding,group) {
		var drawer = currentBuilding.drawer;
		drawer.currentSecondaryTexture = this.getFirstSecondaryTextureOfGroup(group) + random_Random.getInt(this.secondaryBackgroundSets[group]);
		drawer.secondaryTextureOnSet(drawer.currentSecondaryTexture);
		drawer.updateSecondaryBackgroundImageNoExtraInfo();
	}
	,__class__: buildings_buildingDrawers_AllDirMergingBuildingDrawer
});
var buildings_buildingDrawers_AutoMergingBuildingDrawer = function(building,stage,bgStage,textureName) {
	buildings_buildingDrawers_BuildingDrawer.call(this,building,stage,bgStage,textureName);
	this.canMergeH = true;
	this.canMergeV = false;
	this.bgSpriteLeft = new PIXI.Sprite();
	bgStage.cacheableChildren.push(this.bgSpriteLeft);
	bgStage.isInvalid = true;
	this.bgSpriteRight = new PIXI.Sprite();
	bgStage.cacheableChildren.push(this.bgSpriteRight);
	bgStage.isInvalid = true;
	this.spriteLeft = new PIXI.Sprite();
	stage.cacheableChildren.push(this.spriteLeft);
	stage.isInvalid = true;
	this.spriteRight = new PIXI.Sprite();
	stage.cacheableChildren.push(this.spriteRight);
	stage.isInvalid = true;
	this.positionSprites();
};
$hxClasses["buildings.buildingDrawers.AutoMergingBuildingDrawer"] = buildings_buildingDrawers_AutoMergingBuildingDrawer;
buildings_buildingDrawers_AutoMergingBuildingDrawer.__name__ = ["buildings","buildingDrawers","AutoMergingBuildingDrawer"];
buildings_buildingDrawers_AutoMergingBuildingDrawer.__super__ = buildings_buildingDrawers_BuildingDrawer;
buildings_buildingDrawers_AutoMergingBuildingDrawer.prototype = $extend(buildings_buildingDrawers_BuildingDrawer.prototype,{
	positionSpritesMerging: function() {
		var halfPermWidth = 10. | 0;
		this.spriteLeft.position.set(this.building.position.x,this.building.position.y);
		this.bgSpriteLeft.position.set(this.building.position.x,this.building.position.y);
		this.spriteRight.position.set(this.building.position.x + halfPermWidth,this.building.position.y);
		this.bgSpriteRight.position.set(this.building.position.x + halfPermWidth,this.building.position.y);
		var useDoor = this.building.worldPosition.y == 0;
		var hasLeftBuilding = this.isConnectedBuilding(this.building.leftBuilding);
		var hasRightBuilding = this.isConnectedBuilding(this.building.rightBuilding);
		var textures = Resources.getTexturesByWidth(this.currentTextureName,halfPermWidth,true);
		this.bgSpriteLeft.texture = textures[4 + (hasLeftBuilding ? 6 : 0)];
		this.bgSpriteRight.texture = textures[5 + (hasRightBuilding ? 6 : 0)];
		this.spriteLeft.texture = textures[(useDoor ? 2 : 0) + (hasLeftBuilding ? 6 : 0)];
		this.spriteRight.texture = textures[1 + (useDoor ? 2 : 0) + (hasRightBuilding ? 6 : 0)];
		this.stage.isInvalid = true;
		this.bgStage.isInvalid = true;
	}
	,positionSprites: function() {
		this.building.city.updateConnectedBuildingSprites = true;
	}
	,changeMainTexture: function(textureName) {
		buildings_buildingDrawers_BuildingDrawer.prototype.changeMainTexture.call(this,textureName);
		this.positionSprites();
	}
	,destroy: function() {
		buildings_buildingDrawers_BuildingDrawer.prototype.destroy.call(this);
		var _this = this.bgStage;
		var child = this.bgSpriteLeft;
		HxOverrides.remove(_this.cacheableChildren,child);
		_this.isInvalid = true;
		if(child.parent != null) {
			child.parent.removeChild(child);
		}
		var _this1 = this.bgStage;
		var child1 = this.bgSpriteRight;
		HxOverrides.remove(_this1.cacheableChildren,child1);
		_this1.isInvalid = true;
		if(child1.parent != null) {
			child1.parent.removeChild(child1);
		}
		var _this2 = this.stage;
		var child2 = this.spriteLeft;
		HxOverrides.remove(_this2.cacheableChildren,child2);
		_this2.isInvalid = true;
		if(child2.parent != null) {
			child2.parent.removeChild(child2);
		}
		var _this3 = this.stage;
		var child3 = this.spriteRight;
		HxOverrides.remove(_this3.cacheableChildren,child3);
		_this3.isInvalid = true;
		if(child3.parent != null) {
			child3.parent.removeChild(child3);
		}
		this.building.city.updateConnectedBuildingSprites = true;
	}
	,isConnectedBuilding: function(otherBuilding) {
		if(otherBuilding == null) {
			return false;
		}
		var otherAMDrawer = this.getOtherAMDrawer(otherBuilding);
		if(otherAMDrawer == null) {
			return false;
		}
		return otherAMDrawer.currentTextureName == this.currentTextureName;
	}
	,getOtherAMDrawer: function(otherBuilding) {
		if(otherBuilding == null) {
			return null;
		}
		var otherDrawer = otherBuilding.drawer;
		if(!otherDrawer.canMergeH) {
			return null;
		}
		return otherDrawer;
	}
	,__class__: buildings_buildingDrawers_AutoMergingBuildingDrawer
});
var buildings_buildingDrawers_AutoMergingBuildingDrawerUD = function(building,stage,bgStage,textureName) {
	buildings_buildingDrawers_BuildingDrawer.call(this,building,stage,bgStage,textureName);
	this.canMergeH = false;
	this.canMergeV = true;
	this.bgSpriteTop = new PIXI.Sprite();
	bgStage.cacheableChildren.push(this.bgSpriteTop);
	bgStage.isInvalid = true;
	this.bgSpriteBottom = new PIXI.Sprite();
	bgStage.cacheableChildren.push(this.bgSpriteBottom);
	bgStage.isInvalid = true;
	this.spriteTop = new PIXI.Sprite();
	stage.cacheableChildren.push(this.spriteTop);
	stage.isInvalid = true;
	this.spriteBottom = new PIXI.Sprite();
	stage.cacheableChildren.push(this.spriteBottom);
	stage.isInvalid = true;
	this.positionSprites();
};
$hxClasses["buildings.buildingDrawers.AutoMergingBuildingDrawerUD"] = buildings_buildingDrawers_AutoMergingBuildingDrawerUD;
buildings_buildingDrawers_AutoMergingBuildingDrawerUD.__name__ = ["buildings","buildingDrawers","AutoMergingBuildingDrawerUD"];
buildings_buildingDrawers_AutoMergingBuildingDrawerUD.__super__ = buildings_buildingDrawers_BuildingDrawer;
buildings_buildingDrawers_AutoMergingBuildingDrawerUD.prototype = $extend(buildings_buildingDrawers_BuildingDrawer.prototype,{
	positionSpritesMerging: function() {
		var halfPermHeight = 10. | 0;
		this.spriteTop.position.set(this.building.position.x,this.building.position.y);
		this.bgSpriteTop.position.set(this.building.position.x,this.building.position.y);
		this.spriteBottom.position.set(this.building.position.x,this.building.position.y + halfPermHeight);
		this.bgSpriteBottom.position.set(this.building.position.x,this.building.position.y + halfPermHeight);
		var useDoor = this.building.worldPosition.y == 0;
		var hasTopBuilding = this.isConnectedBuilding(this.building.topBuilding);
		var hasBottomBuilding = this.isConnectedBuilding(this.building.bottomBuilding);
		var textures = Resources.getTexturesAsGrid(this.currentTextureName,6,2,2);
		this.bgSpriteTop.texture = textures[2 + (hasTopBuilding ? 3 : 0)][0];
		this.bgSpriteBottom.texture = textures[2 + (hasBottomBuilding ? 3 : 0)][1];
		this.spriteTop.texture = textures[(useDoor ? 1 : 0) + (hasTopBuilding ? 3 : 0)][0];
		this.spriteBottom.texture = textures[(useDoor ? 1 : 0) + (hasBottomBuilding ? 3 : 0)][1];
		this.stage.isInvalid = true;
		this.bgStage.isInvalid = true;
	}
	,positionSprites: function() {
		this.building.city.updateConnectedBuildingSprites = true;
	}
	,changeMainTexture: function(textureName) {
		buildings_buildingDrawers_BuildingDrawer.prototype.changeMainTexture.call(this,textureName);
		this.positionSprites();
	}
	,destroy: function() {
		buildings_buildingDrawers_BuildingDrawer.prototype.destroy.call(this);
		var _this = this.bgStage;
		var child = this.bgSpriteTop;
		HxOverrides.remove(_this.cacheableChildren,child);
		_this.isInvalid = true;
		if(child.parent != null) {
			child.parent.removeChild(child);
		}
		var _this1 = this.bgStage;
		var child1 = this.bgSpriteBottom;
		HxOverrides.remove(_this1.cacheableChildren,child1);
		_this1.isInvalid = true;
		if(child1.parent != null) {
			child1.parent.removeChild(child1);
		}
		var _this2 = this.stage;
		var child2 = this.spriteTop;
		HxOverrides.remove(_this2.cacheableChildren,child2);
		_this2.isInvalid = true;
		if(child2.parent != null) {
			child2.parent.removeChild(child2);
		}
		var _this3 = this.stage;
		var child3 = this.spriteBottom;
		HxOverrides.remove(_this3.cacheableChildren,child3);
		_this3.isInvalid = true;
		if(child3.parent != null) {
			child3.parent.removeChild(child3);
		}
		this.building.city.updateConnectedBuildingSprites = true;
	}
	,isConnectedBuilding: function(otherBuilding) {
		if(otherBuilding == null) {
			return false;
		}
		var otherAMDrawer = this.getOtherAMDrawer(otherBuilding);
		if(otherAMDrawer == null) {
			return false;
		}
		return otherAMDrawer.currentTextureName == this.currentTextureName;
	}
	,getOtherAMDrawer: function(otherBuilding) {
		if(otherBuilding == null) {
			return null;
		}
		var otherDrawer = otherBuilding.drawer;
		if(!otherDrawer.canMergeV) {
			return null;
		}
		return otherDrawer;
	}
	,__class__: buildings_buildingDrawers_AutoMergingBuildingDrawerUD
});
var buildings_buildingDrawers_NormalBuildingDrawer = function(building,stage,bgStage,textureName) {
	buildings_buildingDrawers_BuildingDrawer.call(this,building,stage,bgStage,textureName);
	this.bgSprite = Resources.makeSprite(this.currentTextureName,new common_Rectangle(44,0,20,20));
	bgStage.cacheableChildren.push(this.bgSprite);
	bgStage.isInvalid = true;
	this.sprite = new PIXI.Sprite();
	stage.cacheableChildren.push(this.sprite);
	stage.isInvalid = true;
	this.positionSprites();
};
$hxClasses["buildings.buildingDrawers.NormalBuildingDrawer"] = buildings_buildingDrawers_NormalBuildingDrawer;
buildings_buildingDrawers_NormalBuildingDrawer.__name__ = ["buildings","buildingDrawers","NormalBuildingDrawer"];
buildings_buildingDrawers_NormalBuildingDrawer.__super__ = buildings_buildingDrawers_BuildingDrawer;
buildings_buildingDrawers_NormalBuildingDrawer.prototype = $extend(buildings_buildingDrawers_BuildingDrawer.prototype,{
	positionSprites: function() {
		this.sprite.position.set(this.building.position.x,this.building.position.y);
		this.bgSprite.position.set(this.building.position.x,this.building.position.y);
		var mainSpriteRect = new common_Rectangle(0,0,20,20);
		if(this.building.worldPosition.y == 0) {
			mainSpriteRect.x += 22;
		}
		this.sprite.texture = Resources.getTexture(this.currentTextureName,mainSpriteRect);
		this.stage.isInvalid = true;
	}
	,mirror: function() {
		this.bgSprite.anchor.x = 1 - this.bgSprite.anchor.x;
		this.bgSprite.scale.x = -this.bgSprite.scale.x;
		this.sprite.anchor.x = 1 - this.sprite.anchor.x;
		this.sprite.scale.x = -this.sprite.scale.x;
		this.bgStage.isInvalid = true;
		this.stage.isInvalid = true;
	}
	,changeMainTexture: function(textureName) {
		buildings_buildingDrawers_BuildingDrawer.prototype.changeMainTexture.call(this,textureName);
		this.bgSprite.texture = Resources.getTexture(this.currentTextureName,new common_Rectangle(44,0,20,20));
		this.bgStage.isInvalid = true;
		this.positionSprites();
	}
	,destroy: function() {
		buildings_buildingDrawers_BuildingDrawer.prototype.destroy.call(this);
		var _this = this.bgStage;
		var child = this.bgSprite;
		HxOverrides.remove(_this.cacheableChildren,child);
		_this.isInvalid = true;
		if(child.parent != null) {
			child.parent.removeChild(child);
		}
		var _this1 = this.stage;
		var child1 = this.sprite;
		HxOverrides.remove(_this1.cacheableChildren,child1);
		_this1.isInvalid = true;
		if(child1.parent != null) {
			child1.parent.removeChild(child1);
		}
	}
	,getBackgroundTexture: function() {
		return this.bgSprite.texture;
	}
	,__class__: buildings_buildingDrawers_NormalBuildingDrawer
});
var buildings_buildingDrawers_CustomizableBuildingDrawer = function(building,stage,bgStage,standardTextureName) {
	this.backTexture = null;
	this.frontTextureWithDoor = null;
	this.frontTextureNoDoor = null;
	buildings_buildingDrawers_NormalBuildingDrawer.call(this,building,stage,bgStage,standardTextureName);
};
$hxClasses["buildings.buildingDrawers.CustomizableBuildingDrawer"] = buildings_buildingDrawers_CustomizableBuildingDrawer;
buildings_buildingDrawers_CustomizableBuildingDrawer.__name__ = ["buildings","buildingDrawers","CustomizableBuildingDrawer"];
buildings_buildingDrawers_CustomizableBuildingDrawer.__super__ = buildings_buildingDrawers_NormalBuildingDrawer;
buildings_buildingDrawers_CustomizableBuildingDrawer.prototype = $extend(buildings_buildingDrawers_NormalBuildingDrawer.prototype,{
	positionSprites: function() {
		this.sprite.position.set(this.building.position.x,this.building.position.y);
		this.bgSprite.position.set(this.building.position.x,this.building.position.y);
		var customTexture = this.frontTextureNoDoor;
		var mainSpriteRect = new common_Rectangle(0,0,20,20);
		if(this.building.worldPosition.y == 0) {
			mainSpriteRect.x += 22;
			customTexture = this.frontTextureWithDoor;
		}
		var tmp = customTexture != null ? customTexture : Resources.getTexture(this.currentTextureName,mainSpriteRect);
		this.sprite.texture = tmp;
		this.stage.isInvalid = true;
	}
	,setCustomTextures: function(frontTextureNoDoor,frontTextureWithDoor,backTexture) {
		this.frontTextureNoDoor = frontTextureNoDoor;
		this.frontTextureWithDoor = frontTextureWithDoor;
		this.backTexture = backTexture;
		if(backTexture != null) {
			this.bgSprite.texture = backTexture;
			this.bgStage.isInvalid = true;
		}
		this.positionSprites();
	}
	,__class__: buildings_buildingDrawers_CustomizableBuildingDrawer
});
var cityActions_CitySpecialAction = function(city) {
	this.isActive = false;
	this.city = city;
	this.gui = city.gui;
};
$hxClasses["cityActions.CitySpecialAction"] = cityActions_CitySpecialAction;
cityActions_CitySpecialAction.__name__ = ["cityActions","CitySpecialAction"];
cityActions_CitySpecialAction.prototype = {
	get_specialActionID: function() {
		return "";
	}
	,activate: function() {
		this.isActive = true;
	}
	,deactivate: function() {
		this.isActive = false;
		this.city.specialAction = null;
	}
	,__class__: cityActions_CitySpecialAction
};
var cityActions_ChangeCitizenVitalBuildings = function(city,citizen) {
	cityActions_CitySpecialAction.call(this,city);
	this.citizen = citizen;
};
$hxClasses["cityActions.ChangeCitizenVitalBuildings"] = cityActions_ChangeCitizenVitalBuildings;
cityActions_ChangeCitizenVitalBuildings.__name__ = ["cityActions","ChangeCitizenVitalBuildings"];
cityActions_ChangeCitizenVitalBuildings.__super__ = cityActions_CitySpecialAction;
cityActions_ChangeCitizenVitalBuildings.prototype = $extend(cityActions_CitySpecialAction.prototype,{
	get_specialActionID: function() {
		return "ChangeCitizenVitalBuildings";
	}
	,activate: function() {
		cityActions_CitySpecialAction.prototype.activate.call(this);
	}
	,deactivate: function() {
		cityActions_CitySpecialAction.prototype.deactivate.call(this);
	}
	,performPermanentAction: function(pm) {
		var work = pm;
		if(pm["is"](buildings_Work) && this.citizen.school == null && this.citizen.get_age() >= 16) {
			var theWork = work;
			var workerWhoLostJob = null;
			if(this.citizen.job != theWork) {
				workerWhoLostJob = theWork.workers[0];
				if(theWork.workers.length >= theWork.get_jobs()) {
					workerWhoLostJob.loseJob(false);
				}
				this.citizen.loseJob(true);
				this.city.simulation.jobAssigner.giveCitizenJob(this.citizen,theWork);
				if(this.citizen.home != null && this.citizen.home != theWork && this.citizen.home["is"](buildings_Work)) {
					var workBuilding = this.citizen.home;
					if(this.citizen.home.get_residentCapacity() <= workBuilding.get_jobs()) {
						this.citizen.evictFromHome();
					}
				}
			}
			if(theWork["is"](buildings_House)) {
				var theHouse = theWork;
				if(this.citizen.home != theHouse) {
					var houseIsAtCap = theHouse.residents.length >= theHouse.get_residentCapacity();
					var canEnterInHouse = false;
					if(workerWhoLostJob != null && workerWhoLostJob.home == theHouse && houseIsAtCap) {
						workerWhoLostJob.evictFromHome();
						canEnterInHouse = true;
					} else if(houseIsAtCap) {
						theHouse.residents[0].evictFromHome();
						canEnterInHouse = true;
					}
					if(!houseIsAtCap || canEnterInHouse) {
						this.citizen.evictFromHome();
						var citizen = this.citizen;
						citizen.home = theHouse;
						theHouse.residents.push(citizen);
						if(!this.citizen.isForcedHome) {
							this.city.simulation.houseAssigner.citizensWithFixedHomes.push(this.citizen);
						}
						this.citizen.isForcedHome = true;
					}
				}
			}
		} else {
			var house = pm;
			if(pm["is"](buildings_House)) {
				var theHouse1 = house;
				if(this.citizen.home != theHouse1) {
					if(theHouse1.residents.length >= theHouse1.get_residentCapacity()) {
						theHouse1.residents[0].evictFromHome();
					}
					this.citizen.evictFromHome();
					var citizen1 = this.citizen;
					citizen1.home = theHouse1;
					theHouse1.residents.push(citizen1);
					if(!this.citizen.isForcedHome) {
						this.city.simulation.houseAssigner.citizensWithFixedHomes.push(this.citizen);
					}
					this.citizen.isForcedHome = true;
					if(this.citizen.job != null && this.citizen.home != this.citizen.job && this.citizen.job["is"](buildings_House)) {
						var houseBuilding = this.citizen.job;
						if(houseBuilding.get_residentCapacity() <= this.citizen.job.get_jobs()) {
							this.citizen.loseJob(false);
						}
					}
				}
			} else {
				var school = pm;
				if(pm["is"](buildings_School)) {
					if(this.citizen.get_age() < 16) {
						var theSchool = school;
						if(this.citizen.school != theSchool) {
							if(theSchool.students.length >= theSchool.studentCapacity) {
								theSchool.students[0].leaveSchool();
							}
							this.citizen.leaveSchool();
							this.citizen.school = theSchool;
							theSchool.students.push(this.citizen);
						}
					}
				}
			}
		}
	}
	,__class__: cityActions_ChangeCitizenVitalBuildings
});
var cityActions_FollowCitizenAction = function(city) {
	cityActions_CitySpecialAction.call(this,city);
};
$hxClasses["cityActions.FollowCitizenAction"] = cityActions_FollowCitizenAction;
cityActions_FollowCitizenAction.__name__ = ["cityActions","FollowCitizenAction"];
cityActions_FollowCitizenAction.__super__ = cityActions_CitySpecialAction;
cityActions_FollowCitizenAction.prototype = $extend(cityActions_CitySpecialAction.prototype,{
	get_specialActionID: function() {
		return "FollowCitizenAction";
	}
	,activate: function() {
		var _gthis = this;
		cityActions_CitySpecialAction.prototype.activate.call(this);
		this.gui.showSimpleWindow(this.city.game.textHelper.clickOrTap() + " near a citizen to follow them.",null,true);
		this.city.gui.setWindowPositioning(gui_WindowPosition.Top);
		this.gui.windowRelatedTo = this;
		this.gui.windowOnDestroy = function() {
			_gthis.isActive = false;
			_gthis.deactivate();
		};
	}
	,deactivate: function() {
		if(this.isActive) {
			if(this.gui.window != null && this.gui.windowRelatedTo == this) {
				this.gui.closeWindow();
			}
		}
		cityActions_CitySpecialAction.prototype.deactivate.call(this);
	}
	,__class__: cityActions_FollowCitizenAction
});
var cityActions_ViewActions = function(city) {
	this.city = city;
	this.gui = city.gui;
};
$hxClasses["cityActions.ViewActions"] = cityActions_ViewActions;
cityActions_ViewActions.__name__ = ["cityActions","ViewActions"];
cityActions_ViewActions.prototype = {
	showFollow: function() {
		if(this.gui.get_keyboard().down[17] && this.city.simulation.citizens.length > 0) {
			random_Random.fromArray(this.city.simulation.citizens).onClick();
			if(this.city.specialAction != null) {
				this.city.specialAction.deactivate();
			}
		} else {
			this.city.activateSpecialCityAction(new cityActions_FollowCitizenAction(this.city));
		}
	}
	,isFollowOpen: function() {
		if(this.city.specialAction != null) {
			return this.city.specialAction.get_specialActionID() == "FollowCitizenAction";
		} else {
			return false;
		}
	}
	,__class__: cityActions_ViewActions
};
var cityUpgrades_CityUpgrade = function() {
	var className = Type.getClassName(js_Boot.getClass(this));
	this.info = Lambda.find(Resources.cityUpgradesInfo,function(i) {
		return "cityUpgrades." + i.className == className;
	});
};
$hxClasses["cityUpgrades.CityUpgrade"] = cityUpgrades_CityUpgrade;
cityUpgrades_CityUpgrade.__name__ = ["cityUpgrades","CityUpgrade"];
cityUpgrades_CityUpgrade.__interfaces__ = [ICreatableCityElement];
cityUpgrades_CityUpgrade.prototype = {
	addToCity: function(city) {
		this.city = city;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(cityUpgrades_CityUpgrade.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: cityUpgrades_CityUpgrade
};
var cityUpgrades_BirthControl = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.BirthControl"] = cityUpgrades_BirthControl;
cityUpgrades_BirthControl.__name__ = ["cityUpgrades","BirthControl"];
cityUpgrades_BirthControl.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_BirthControl.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		this.city = city;
		city.upgrades.vars.hasBirthControl = true;
	}
	,__class__: cityUpgrades_BirthControl
});
var cityUpgrades_BuildingRecycling = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.BuildingRecycling"] = cityUpgrades_BuildingRecycling;
cityUpgrades_BuildingRecycling.__name__ = ["cityUpgrades","BuildingRecycling"];
cityUpgrades_BuildingRecycling.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_BuildingRecycling.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		cityUpgrades_CityUpgrade.prototype.addToCity.call(this,city);
		city.upgrades.vars.recyclingAmount = Math.max(city.upgrades.vars.recyclingAmount,0.5);
		city.progress.unlocks.unlock(cityUpgrades_BuildingRecycling2);
	}
	,__class__: cityUpgrades_BuildingRecycling
});
var cityUpgrades_BuildingRecycling2 = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.BuildingRecycling2"] = cityUpgrades_BuildingRecycling2;
cityUpgrades_BuildingRecycling2.__name__ = ["cityUpgrades","BuildingRecycling2"];
cityUpgrades_BuildingRecycling2.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_BuildingRecycling2.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		cityUpgrades_CityUpgrade.prototype.addToCity.call(this,city);
		city.upgrades.vars.recyclingAmount = Math.max(city.upgrades.vars.recyclingAmount,0.75);
		city.progress.unlocks.unlock(cityUpgrades_BuildingRecycling3);
	}
	,__class__: cityUpgrades_BuildingRecycling2
});
var cityUpgrades_BuildingRecycling3 = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.BuildingRecycling3"] = cityUpgrades_BuildingRecycling3;
cityUpgrades_BuildingRecycling3.__name__ = ["cityUpgrades","BuildingRecycling3"];
cityUpgrades_BuildingRecycling3.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_BuildingRecycling3.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		cityUpgrades_CityUpgrade.prototype.addToCity.call(this,city);
		city.upgrades.vars.recyclingAmount = Math.max(city.upgrades.vars.recyclingAmount,0.9);
	}
	,__class__: cityUpgrades_BuildingRecycling3
});
var cityUpgrades_ChipBinning = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.ChipBinning"] = cityUpgrades_ChipBinning;
cityUpgrades_ChipBinning.__name__ = ["cityUpgrades","ChipBinning"];
cityUpgrades_ChipBinning.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_ChipBinning.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		this.city = city;
		city.upgrades.vars.computerChipFactorySpeed *= 1.2;
	}
	,__class__: cityUpgrades_ChipBinning
});
var cityUpgrades_CityUpgrades = function(city) {
	this.city = city;
	this.upgrades = [];
	this.vars = new cityUpgrades_UpgradeVars();
};
$hxClasses["cityUpgrades.CityUpgrades"] = cityUpgrades_CityUpgrades;
cityUpgrades_CityUpgrades.__name__ = ["cityUpgrades","CityUpgrades"];
cityUpgrades_CityUpgrades.prototype = {
	addUpgrade: function(upgrade) {
		this.upgrades.push(upgrade);
		upgrade.addToCity(this.city);
	}
	,save: function(queue) {
		var value = this.upgrades.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var _g = 0;
		var _g1 = this.upgrades;
		while(_g < _g1.length) {
			var upgrade = _g1[_g];
			++_g;
			queue.addString(Type.getClassName(upgrade == null ? null : js_Boot.getClass(upgrade)));
			upgrade.save(queue);
		}
	}
	,load: function(queue) {
		var intToRead = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var len = intToRead;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var upg;
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead1;
				var stringLength = queue.bytes.getInt32(readPos);
				upg = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len1 = intToRead2;
				var str = queue.bytes.getString(queue.readStart,len1);
				queue.readStart += len1;
				upg = str;
			}
			var upg1 = Type.createInstance(Type.resolveClass(upg),[]);
			upg1.load(queue);
			this.addUpgrade(upg1);
			if(queue.version <= 11) {
				if(js_Boot.__instanceof(upg1,cityUpgrades_SlimyLiving)) {
					var _g2 = 0;
					var _g3 = this.city.permanents;
					while(_g2 < _g3.length) {
						var pm = _g3[_g2];
						++_g2;
						if(pm["is"](buildings_AlienHouse)) {
							var buildingToUpgrade = pm;
							if(!common_ArrayExtensions.any(buildingToUpgrade.upgrades,function(bu) {
								return js_Boot.__instanceof(bu,buildingUpgrades_LivingComputer);
							})) {
								buildingToUpgrade.upgrades.push(Type.createInstance(buildingUpgrades_LivingComputer,[buildingToUpgrade.stage,this.city.cityMidStage,buildingToUpgrade.bgStage,buildingToUpgrade]));
							}
						}
					}
				}
			}
		}
	}
	,__class__: cityUpgrades_CityUpgrades
};
var cityUpgrades_MechanicalLiving = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.MechanicalLiving"] = cityUpgrades_MechanicalLiving;
cityUpgrades_MechanicalLiving.__name__ = ["cityUpgrades","MechanicalLiving"];
cityUpgrades_MechanicalLiving.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_MechanicalLiving.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		cityUpgrades_CityUpgrade.prototype.addToCity.call(this,city);
		var _this = city.progress.resources.buildingInfo;
		(__map_reserved["buildings.MechanicalHouse"] != null ? _this.getReserved("buildings.MechanicalHouse") : _this.h["buildings.MechanicalHouse"]).residents += 1;
		var _this1 = city.progress.resources.buildingInfo;
		(__map_reserved["buildings.TinkerersHome"] != null ? _this1.getReserved("buildings.TinkerersHome") : _this1.h["buildings.TinkerersHome"]).residents += 1;
	}
	,__class__: cityUpgrades_MechanicalLiving
});
var cityUpgrades_MedicalMachineLearning = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.MedicalMachineLearning"] = cityUpgrades_MedicalMachineLearning;
cityUpgrades_MedicalMachineLearning.__name__ = ["cityUpgrades","MedicalMachineLearning"];
cityUpgrades_MedicalMachineLearning.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_MedicalMachineLearning.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		this.city = city;
		city.upgrades.vars.extendAgeBy += 0.05;
	}
	,__class__: cityUpgrades_MedicalMachineLearning
});
var cityUpgrades_OptimizedChipLayouts = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.OptimizedChipLayouts"] = cityUpgrades_OptimizedChipLayouts;
cityUpgrades_OptimizedChipLayouts.__name__ = ["cityUpgrades","OptimizedChipLayouts"];
cityUpgrades_OptimizedChipLayouts.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_OptimizedChipLayouts.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		this.city = city;
		city.upgrades.vars.computerChipFactorySpeed *= 1.33;
	}
	,__class__: cityUpgrades_OptimizedChipLayouts
});
var cityUpgrades_SecretiveLiving = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.SecretiveLiving"] = cityUpgrades_SecretiveLiving;
cityUpgrades_SecretiveLiving.__name__ = ["cityUpgrades","SecretiveLiving"];
cityUpgrades_SecretiveLiving.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_SecretiveLiving.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		cityUpgrades_CityUpgrade.prototype.addToCity.call(this,city);
		var _this = city.progress.resources.buildingInfo;
		(__map_reserved["buildings.SecretSocietyHouse"] != null ? _this.getReserved("buildings.SecretSocietyHouse") : _this.h["buildings.SecretSocietyHouse"]).quality += 25;
	}
	,__class__: cityUpgrades_SecretiveLiving
});
var cityUpgrades_SlimyLiving = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.SlimyLiving"] = cityUpgrades_SlimyLiving;
cityUpgrades_SlimyLiving.__name__ = ["cityUpgrades","SlimyLiving"];
cityUpgrades_SlimyLiving.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_SlimyLiving.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		cityUpgrades_CityUpgrade.prototype.addToCity.call(this,city);
		var _this = city.progress.resources.buildingInfo;
		(__map_reserved["buildings.AlienHouse"] != null ? _this.getReserved("buildings.AlienHouse") : _this.h["buildings.AlienHouse"]).quality += 25;
		city.progress.unlocks.unlock(buildingUpgrades_LivingComputer,true);
	}
	,__class__: cityUpgrades_SlimyLiving
});
var cityUpgrades_SpaciousLiving = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.SpaciousLiving"] = cityUpgrades_SpaciousLiving;
cityUpgrades_SpaciousLiving.__name__ = ["cityUpgrades","SpaciousLiving"];
cityUpgrades_SpaciousLiving.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_SpaciousLiving.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		cityUpgrades_CityUpgrade.prototype.addToCity.call(this,city);
		var _this = city.progress.resources.buildingInfo;
		(__map_reserved["buildings.SpaciousHouse"] != null ? _this.getReserved("buildings.SpaciousHouse") : _this.h["buildings.SpaciousHouse"]).quality += 15;
	}
	,__class__: cityUpgrades_SpaciousLiving
});
var cityUpgrades_SuperSpaciousLiving = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.SuperSpaciousLiving"] = cityUpgrades_SuperSpaciousLiving;
cityUpgrades_SuperSpaciousLiving.__name__ = ["cityUpgrades","SuperSpaciousLiving"];
cityUpgrades_SuperSpaciousLiving.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_SuperSpaciousLiving.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		cityUpgrades_CityUpgrade.prototype.addToCity.call(this,city);
		var _this = city.progress.resources.buildingInfo;
		(__map_reserved["buildings.SpaciousHouse"] != null ? _this.getReserved("buildings.SpaciousHouse") : _this.h["buildings.SpaciousHouse"]).residents += 1;
	}
	,__class__: cityUpgrades_SuperSpaciousLiving
});
var cityUpgrades_UniverseMapping = function() {
	cityUpgrades_CityUpgrade.call(this);
};
$hxClasses["cityUpgrades.UniverseMapping"] = cityUpgrades_UniverseMapping;
cityUpgrades_UniverseMapping.__name__ = ["cityUpgrades","UniverseMapping"];
cityUpgrades_UniverseMapping.__super__ = cityUpgrades_CityUpgrade;
cityUpgrades_UniverseMapping.prototype = $extend(cityUpgrades_CityUpgrade.prototype,{
	addToCity: function(city) {
		this.city = city;
		city.upgrades.vars.stoneTeleporterChanceForRefinedMetals = 0.04;
		city.upgrades.vars.stoneTeleporterHasBigStones = true;
		city.upgrades.vars.starDatabaseIsMoreEffective = true;
	}
	,__class__: cityUpgrades_UniverseMapping
});
var cityUpgrades_UpgradeVars = function() {
	this.advancedBuildingAllowed = false;
	this.stoneResearchCenterWithFossils = null;
	this.stoneMiningSpeed = 1.0;
	this.computerChipFactorySpeed = 1.0;
	this.recyclingAmount = 0.0;
	this.hasBirthControl = false;
	this.extendAgeBy = 0.0;
	this.stoneTeleporterChanceForRefinedMetals = 0.0;
	this.starDatabaseIsMoreEffective = false;
	this.stoneTeleporterHasBigStones = false;
};
$hxClasses["cityUpgrades.UpgradeVars"] = cityUpgrades_UpgradeVars;
cityUpgrades_UpgradeVars.__name__ = ["cityUpgrades","UpgradeVars"];
cityUpgrades_UpgradeVars.prototype = {
	__class__: cityUpgrades_UpgradeVars
};
var common_AdHelper = function() { };
$hxClasses["common.AdHelper"] = common_AdHelper;
common_AdHelper.__name__ = ["common","AdHelper"];
common_AdHelper.init = function(game) {
	var _g = 5;
	var tmp;
	switch(_g) {
	case 3:
		tmp = new common_CPMStarHelper(game);
		break;
	case 6:
		tmp = new common_PokiAdsHelper(game);
		break;
	case 7:
		tmp = new common_GogyAdsHelper(game);
		break;
	default:
		tmp = null;
	}
	common_AdHelper.provider = tmp;
	if(5 == 6) {
		common_AdHelper.adExpireTime = 0;
	} else if(5 == 7) {
		common_AdHelper.adExpireTime = common_AdHelper.standardAdExpireTime;
		common_AdHelper.adCapRemaining = 3;
	}
};
common_AdHelper.update = function(timeMod) {
	if(common_AdHelper.adExpireTime >= 0) {
		common_AdHelper.adExpireTime -= timeMod;
	}
	if(common_AdHelper.adExpireTimeRewarded >= 0) {
		common_AdHelper.adExpireTimeRewarded -= timeMod;
	}
};
common_AdHelper.cityUpdate = function(city,mouse) {
};
common_AdHelper.adAvailable = function() {
	return common_AdHelper.provider.adAvailable();
};
common_AdHelper.adAvailableRewarded = function() {
	if(common_AdHelper.adAvailable() && common_AdHelper.adExpireTimeRewarded <= 0) {
		return false;
	} else {
		return false;
	}
};
common_AdHelper.showRewardedInterstitial = function(onDone) {
	common_AdHelper.adExpireTimeRewarded += common_AdHelper.minTimeBetweenRewarded;
	common_AdHelper.provider.showRewardedInterstitial(onDone);
	common_AdHelper.adExpireTime = Math.min(Math.max(common_AdHelper.adExpireTime,common_AdHelper.minTimeBetweenRewarded),common_AdHelper.standardAdExpireTime);
};
common_AdHelper.showNonRewardedInterstitialIfAllowed = function() {
	if(common_AdHelper.adExpireTime <= 0) {
		if(common_AdHelper.provider.showNonRewardedInterstitialIfAllowed()) {
			common_AdHelper.adExpireTime += common_AdHelper.standardAdExpireTime;
		}
	}
};
var common_AdProviderHelper = function() { };
$hxClasses["common.AdProviderHelper"] = common_AdProviderHelper;
common_AdProviderHelper.__name__ = ["common","AdProviderHelper"];
common_AdProviderHelper.prototype = {
	__class__: common_AdProviderHelper
};
var common_ArrayExtensions = function() { };
$hxClasses["common.ArrayExtensions"] = common_ArrayExtensions;
common_ArrayExtensions.__name__ = ["common","ArrayExtensions"];
common_ArrayExtensions.whereMax = function(array,whereTrue,fn) {
	if(fn == null) {
		fn = function(val) {
			return val;
		};
	}
	var arrayMaxVal = -Infinity;
	var arrayMaxItem = null;
	var _g = 0;
	while(_g < array.length) {
		var item = array[_g];
		++_g;
		if(!whereTrue(item)) {
			continue;
		}
		var val1 = fn(item);
		if(val1 > arrayMaxVal) {
			arrayMaxItem = item;
			arrayMaxVal = val1;
		}
	}
	return arrayMaxItem;
};
common_ArrayExtensions.max = function(array,fn) {
	if(fn == null) {
		fn = function(val) {
			return val;
		};
	}
	var arrayMaxVal = -Infinity;
	var arrayMaxItem = null;
	var _g = 0;
	while(_g < array.length) {
		var item = array[_g];
		++_g;
		var val1 = fn(item);
		if(val1 > arrayMaxVal) {
			arrayMaxItem = item;
			arrayMaxVal = val1;
		}
	}
	return arrayMaxItem;
};
common_ArrayExtensions.min = function(array,fn) {
	if(fn == null) {
		fn = function(val) {
			return val;
		};
	}
	var arrayMinVal = Infinity;
	var arrayMinItem = null;
	var _g = 0;
	while(_g < array.length) {
		var item = array[_g];
		++_g;
		var val1 = fn(item);
		if(val1 < arrayMinVal) {
			arrayMinItem = item;
			arrayMinVal = val1;
		}
	}
	return arrayMinItem;
};
common_ArrayExtensions.sum = function(array,fn) {
	if(fn == null) {
		fn = function(val) {
			return val;
		};
	}
	var total = 0;
	var _g = 0;
	while(_g < array.length) {
		var val1 = array[_g];
		++_g;
		total += fn(val1);
	}
	return total;
};
common_ArrayExtensions.sumFPoint = function(array,fn) {
	if(fn == null) {
		fn = function(val) {
			return val;
		};
	}
	var total = new common_FPoint(0,0);
	var _g = 0;
	while(_g < array.length) {
		var val1 = array[_g];
		++_g;
		var otherPoint = fn(val1);
		total = new common_FPoint(total.x + otherPoint.x,total.y + otherPoint.y);
	}
	return total;
};
common_ArrayExtensions.isum = function(array,fn) {
	if(fn == null) {
		fn = function(val) {
			return val;
		};
	}
	var total = 0;
	var _g = 0;
	while(_g < array.length) {
		var val1 = array[_g];
		++_g;
		total += fn(val1);
	}
	return total;
};
common_ArrayExtensions.any = function(array,fn) {
	var _g = 0;
	while(_g < array.length) {
		var val = array[_g];
		++_g;
		if(fn(val)) {
			return true;
		}
	}
	return false;
};
common_ArrayExtensions.all = function(array,fn) {
	var _g = 0;
	while(_g < array.length) {
		var val = array[_g];
		++_g;
		if(!fn(val)) {
			return false;
		}
	}
	return true;
};
common_ArrayExtensions.contains = function(array,element) {
	return array.indexOf(element) != -1;
};
common_ArrayExtensions.findRandom = function(array,query) {
	var i = random_Random.getInt(array.length);
	var orig = i;
	while(i < array.length) {
		var item = array[i];
		if(query(item)) {
			return item;
		}
		++i;
	}
	i = 0;
	while(i < orig) {
		var item1 = array[i];
		if(query(item1)) {
			return item1;
		}
		++i;
	}
	return null;
};
var common_CPMStarHelper = function(game) {
	this.adOnDoneFunction = null;
	this.inited = false;
	var _gthis = this;
	jsFunctions.loadJS("site-specific/armorgames/cpmstar.js",function() {
		try {
			cpmStar.init(function() {
				game.pause("AdShown");
			},function() {
				game.resume("AdShown");
				if(_gthis.adOnDoneFunction != null) {
					_gthis.adOnDoneFunction();
				}
			});
			_gthis.inited = true;
		} catch( e ) {
		}
	});
};
$hxClasses["common.CPMStarHelper"] = common_CPMStarHelper;
common_CPMStarHelper.__name__ = ["common","CPMStarHelper"];
common_CPMStarHelper.__interfaces__ = [common_AdProviderHelper];
common_CPMStarHelper.prototype = {
	adAvailable: function() {
		if(this.inited) {
			return cpmStar.couldBeAvailable();
		}
		return false;
	}
	,showRewardedInterstitial: function(onDone) {
		this.adOnDoneFunction = onDone;
		this.showInterstitial("rewarded");
	}
	,showInterstitial: function(type) {
		if(this.inited) {
			cpmStar.showInterstitial();
			Analytics.sendEvent("ads","showInterstitial",null,type,true);
		}
	}
	,showNonRewardedInterstitialIfAllowed: function() {
		if(!this.inited) {
			return false;
		}
		this.adOnDoneFunction = null;
		this.showInterstitial("interstitial");
		return true;
	}
	,__class__: common_CPMStarHelper
};
var common_ColorExtensions = function() { };
$hxClasses["common.ColorExtensions"] = common_ColorExtensions;
common_ColorExtensions.__name__ = ["common","ColorExtensions"];
common_ColorExtensions.toHexInt = function(col) {
	return thx_color__$Rgb_Rgb_$Impl_$.get_red(col) * 65536 + thx_color__$Rgb_Rgb_$Impl_$.get_green(col) * 256 + thx_color__$Rgb_Rgb_$Impl_$.get_blue(col);
};
var common_Rectangle = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["common.Rectangle"] = common_Rectangle;
common_Rectangle.__name__ = ["common","Rectangle"];
common_Rectangle.fromPixiRect = function(rect) {
	return new common_Rectangle(rect.x | 0,rect.y | 0,rect.width | 0,rect.height | 0);
};
common_Rectangle.fromStoryRect = function(rect) {
	return new common_Rectangle(rect.x,rect.y,rect.width,rect.height);
};
common_Rectangle.prototype = {
	get_x2: function() {
		return this.x + this.width;
	}
	,get_y2: function() {
		return this.y + this.height;
	}
	,get_center: function() {
		return new common_Point(this.x + (this.width / 2 | 0),this.y + (this.height / 2 | 0));
	}
	,clone: function() {
		return new common_Rectangle(this.x,this.y,this.width,this.height);
	}
	,intersects: function(other) {
		var tmp;
		var val = this.x;
		if(!(val >= other.x && val < other.x + other.width)) {
			var val1 = other.x;
			if(val1 >= this.x) {
				tmp = val1 < this.x + this.width;
			} else {
				tmp = false;
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			var val2 = other.y;
			if(!(val2 >= this.y && val2 < this.y + this.height)) {
				var val3 = this.y;
				if(val3 >= other.y) {
					return val3 < other.y + other.height;
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,fullyContains: function(other) {
		if(this.x <= other.x && this.y <= other.y && this.get_x2() > other.get_x2()) {
			return this.get_y2() > other.get_y2();
		} else {
			return false;
		}
	}
	,contains: function(point) {
		var val = point.x;
		if(val >= this.x && val < this.x + this.width) {
			var val1 = point.y;
			if(val1 >= this.y) {
				return val1 < this.y + this.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,__class__: common_Rectangle
};
var common_FRectangle = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["common.FRectangle"] = common_FRectangle;
common_FRectangle.__name__ = ["common","FRectangle"];
common_FRectangle.prototype = {
	get_x2: function() {
		return this.x + this.width;
	}
	,get_y2: function() {
		return this.y + this.height;
	}
	,clone: function() {
		return new common_FRectangle(this.x,this.y,this.width,this.height);
	}
	,__class__: common_FRectangle
};
var common_Point = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["common.Point"] = common_Point;
common_Point.__name__ = ["common","Point"];
common_Point.distance = function(point1,point2) {
	return Math.sqrt((point2.x - point1.x) * (point2.x - point1.x) + (point2.y - point1.y) * (point2.y - point1.y));
};
common_Point.mean = function(point1,point2) {
	return new common_FPoint(0.5 * (point1.x + point2.x),0.5 * (point1.y + point2.y));
};
common_Point.prototype = {
	__class__: common_Point
};
var common_FPoint = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["common.FPoint"] = common_FPoint;
common_FPoint.__name__ = ["common","FPoint"];
common_FPoint.distance = function(point1,point2) {
	return Math.sqrt((point2.x - point1.x) * (point2.x - point1.x) + (point2.y - point1.y) * (point2.y - point1.y));
};
common_FPoint.prototype = {
	get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: common_FPoint
};
var common_GogyAdsHelper = function(game) {
	this.game = game;
};
$hxClasses["common.GogyAdsHelper"] = common_GogyAdsHelper;
common_GogyAdsHelper.__name__ = ["common","GogyAdsHelper"];
common_GogyAdsHelper.__interfaces__ = [common_AdProviderHelper];
common_GogyAdsHelper.prototype = {
	adAvailable: function() {
		return common_GogyAdsHelper.loadedCorrectly;
	}
	,showRewardedInterstitial: function(onDone) {
	}
	,showNonRewardedInterstitialIfAllowed: function() {
		var _gthis = this;
		if(!common_GogyAdsHelper.loadedCorrectly) {
			return false;
		}
		Analytics.sendEvent("ads","showInterstitial",null,"interstitial",true);
		if(window.__gogy_ads_callback == undefined) {
			var gogyCallBack = function(arg) {
				if(arg.toLowerCase() == "pause") {
					_gthis.game.pause("AdShown");
				} else if(arg.toLowerCase() == "resume") {
					_gthis.game.resume("AdShown");
				}
			};
			window.__gogy_ads_callback = gogyCallBack;
		}
		this.game.pause("AdShown");
		window[preroll.config.loaderObjectName].refetchAd();
		return true;
	}
	,__class__: common_GogyAdsHelper
};
var common_KongTools = function() { };
$hxClasses["common.KongTools"] = common_KongTools;
common_KongTools.__name__ = ["common","KongTools"];
common_KongTools.init = function() {
	jsFunctions.loadJS("site-specific/kong/quickKong.js",function() {
		try {
			QuickKong.doInitKong();
			common_KongTools.kongJSLoaded = true;
		} catch( e ) {
		}
	});
};
common_KongTools.reportHappiness = function(happiness) {
	if(happiness > common_KongTools.highestHappinessKnown) {
		common_KongTools.highestHappinessKnown = happiness;
		common_KongTools.statTimeout = 60;
	}
	if(common_KongTools.statTimeout <= 0 && common_KongTools.highestHappinessKnown > common_KongTools.highestHappinessReported && common_KongTools.kongJSLoaded) {
		QuickKong.setStat("happiness",common_KongTools.highestHappinessKnown);
		common_KongTools.highestHappinessReported = common_KongTools.highestHappinessKnown;
		common_KongTools.statTimeout = 120;
	}
};
common_KongTools.setStat = function(statName,statAmount) {
	if(common_KongTools.kongJSLoaded) {
		QuickKong.setStat(statName,statAmount);
	}
};
common_KongTools.update = function() {
	if(common_KongTools.statTimeout > 0) {
		common_KongTools.statTimeout -= 1;
	}
};
var common_MathExtensions = function() { };
$hxClasses["common.MathExtensions"] = common_MathExtensions;
common_MathExtensions.__name__ = ["common","MathExtensions"];
common_MathExtensions.largeNumberFormat = function(cls,n) {
	if(n > 1e6) {
		return "" + common_MathExtensions.floatFormat(Math,n / 1e6,1) + "m";
	}
	if(n > 1e4) {
		return "" + common_MathExtensions.floatFormat(Math,n / 1e3,0) + "k";
	}
	if(n > 1e3) {
		return "" + common_MathExtensions.floatFormat(Math,n / 1e3,1) + "k";
	}
	return "" + n;
};
common_MathExtensions.largeNumberFormatAlt = function(cls,n) {
	if(n > 1e6) {
		return "" + common_MathExtensions.floatFormat(Math,n / 1e6,1) + "m";
	}
	if(n > 1e5) {
		return "" + common_MathExtensions.floatFormat(Math,n / 1e3,0) + "k";
	}
	return "" + n;
};
common_MathExtensions.floatFormat = function(cls,n,prec) {
	if(prec == 0) {
		return Std.string(Math.floor(n));
	}
	n = Math.round(n * Math.pow(10,prec));
	var str = "" + n;
	var len = str.length;
	if(len <= prec) {
		while(len < prec) {
			str = "0" + str;
			++len;
		}
		return "0." + str;
	} else {
		return HxOverrides.substr(str,0,str.length - prec) + "." + HxOverrides.substr(str,str.length - prec,null);
	}
};
var common_Performance = function() { };
$hxClasses["common.Performance"] = common_Performance;
common_Performance.__name__ = ["common","Performance"];
common_Performance.registerFrame = function() {
	var currentTime = window.performance.now();
	if(common_Performance.frameTimeValues.length > 60) {
		common_Performance.frameTimeValues.splice(0,1);
	}
	if(common_Performance.previousTime != 0) {
		common_Performance.frameTimeValues.push(currentTime - common_Performance.previousTime);
	}
	common_Performance.previousTime = currentTime;
};
var common_PleaseRotateDevice = function(stage) {
	this.text2 = null;
	this.stage = stage;
	this.subStage1 = new PIXI.Container();
	stage.addChild(this.subStage1);
	this.subStage2 = new PIXI.Container();
	stage.addChild(this.subStage2);
	this.logoSprite = new PIXI.Sprite(Resources.getTexture("spr_title"));
	this.subStage2.addChild(this.logoSprite);
	this.graphics = new PIXI.Graphics();
	this.subStage1.addChild(this.graphics);
	if(jsFunctions.orientationLockSupported()) {
		this.text = new PIXI.extras.BitmapText("Please tap anywhere to continue.",{ font : "Arial18", tint : 16777215});
		this.text2 = new PIXI.extras.BitmapText("(if this has no effect, please rotate your device manually)",{ font : "Arial16", tint : 12632256});
		this.text.anchor.set(0.5,1);
		this.text2.anchor.set(0.5,1);
	} else {
		this.text = new PIXI.extras.BitmapText("Please rotate your device to continue.",{ font : "Arial18", tint : 16777215});
		this.text.anchor.set(0.5,1);
	}
	this.text.align = "center";
	if(this.text2 != null) {
		this.text2.align = "center";
		this.subStage1.addChild(this.text2);
	}
	this.subStage1.addChild(this.text);
};
$hxClasses["common.PleaseRotateDevice"] = common_PleaseRotateDevice;
common_PleaseRotateDevice.__name__ = ["common","PleaseRotateDevice"];
common_PleaseRotateDevice.prototype = {
	update: function(width,height,scaling) {
		this.subStage1.scale.x = this.subStage1.scale.y = scaling;
		var val1 = Math.floor(width * scaling / this.logoSprite.width);
		var subStage2Scale = 1 > val1 ? 1 : val1;
		this.subStage2.scale.x = this.subStage2.scale.y = subStage2Scale;
		this.logoSprite.anchor.set(0.5,0);
		this.logoSprite.position.set(width / subStage2Scale * scaling / 2,20);
		this.graphics.clear();
		this.graphics.beginFill(2626656,1).drawRect(0,0,width,height);
		this.text.maxWidth = width - 20;
		if(this.text2 != null) {
			this.text2.maxWidth = width - 20;
			this.text2.position.set(width / 2,height - 20);
			this.text.position.set(width / 2,height - 20 - this.text2.textHeight - 10);
		} else {
			this.text.position.set(width / 2,height - 20);
		}
	}
	,destroy: function() {
		this.subStage1.destroy();
		this.subStage2.destroy();
	}
	,__class__: common_PleaseRotateDevice
};
var common_PokiAdsHelper = function(game) {
	this.adsBlocked = false;
	this.game = game;
	this.adsBlocked = common_PokiHelpers.isAdBlockEnabled;
};
$hxClasses["common.PokiAdsHelper"] = common_PokiAdsHelper;
common_PokiAdsHelper.__name__ = ["common","PokiAdsHelper"];
common_PokiAdsHelper.__interfaces__ = [common_AdProviderHelper];
common_PokiAdsHelper.prototype = {
	adAvailable: function() {
		return !this.adsBlocked;
	}
	,showRewardedInterstitial: function(onDone) {
		var _gthis = this;
		Analytics.sendEvent("ads","showInterstitial",null,"rewarded",true);
		this.game.pause("AdShown");
		var pokiWasPlaying = common_PokiHelpers.isReportedAsGameplay;
		common_PokiHelpers.reportStopGameplay();
		PokiSDK.rewardedBreak().then(function(hasReward) {
			_gthis.game.resume("AdShown");
			if(pokiWasPlaying) {
				common_PokiHelpers.reportStartGameplay();
			}
			if(hasReward) {
				onDone();
				Analytics.sendEvent("ads","rewardedAward",null,"",true);
			}
		});
	}
	,showNonRewardedInterstitialIfAllowed: function() {
		var _gthis = this;
		Analytics.sendEvent("ads","showInterstitial",null,"interstitial",true);
		this.game.pause("AdShown");
		var pokiWasPlaying = common_PokiHelpers.isReportedAsGameplay;
		common_PokiHelpers.reportStopGameplay();
		PokiSDK.commercialBreak().then(function(_) {
			_gthis.game.resume("AdShown");
			if(pokiWasPlaying) {
				common_PokiHelpers.reportStartGameplay();
			}
		});
		return true;
	}
	,__class__: common_PokiAdsHelper
};
var common_PokiHelpers = function() { };
$hxClasses["common.PokiHelpers"] = common_PokiHelpers;
common_PokiHelpers.__name__ = ["common","PokiHelpers"];
common_PokiHelpers.reportStartGameplay = function() {
};
common_PokiHelpers.reportStopGameplay = function() {
};
var common_Splash = function(stage,logoUrl,logoWidth,logoHeight,width,height,displayFor,onDone) {
	this.stage = stage;
	this.splashSprite = new PIXI.Sprite(PIXI.Texture.fromImage(logoUrl,null,0));
	stage.addChild(this.splashSprite);
	this.logoWidth = logoWidth;
	this.logoHeight = logoHeight;
	this.resize(width,height);
	this.displayTimeLeft = displayFor;
	this.onDone = onDone;
};
$hxClasses["common.Splash"] = common_Splash;
common_Splash.__name__ = ["common","Splash"];
common_Splash.prototype = {
	update: function(timeMod) {
		if(this.splashSprite.texture.baseTexture.hasLoaded) {
			this.displayTimeLeft -= timeMod;
			if(this.displayTimeLeft <= 0) {
				this.destroy();
				this.onDone();
			}
		}
	}
	,resize: function(width,height) {
		var baseScale = Math.min(width / this.logoWidth,height / this.logoHeight);
		this.splashSprite.scale.x = baseScale;
		this.splashSprite.scale.y = baseScale;
		this.splashSprite.position.set((width / this.logoWidth - baseScale) * this.logoWidth / 2,(height / this.logoHeight - baseScale) * this.logoHeight / 2);
	}
	,destroy: function() {
		this.splashSprite.destroy();
	}
	,__class__: common_Splash
};
var common_Storage = function() { };
$hxClasses["common.Storage"] = common_Storage;
common_Storage.__name__ = ["common","Storage"];
common_Storage.testSupport = function(ifSupported,ifUnsupported) {
	if(common_Storage.knowsSupport && !common_Storage.hasSupport) {
		ifUnsupported();
		return;
	}
	if(common_Storage.knowsSupport && common_Storage.hasSupport) {
		ifSupported();
		return;
	}
	try {
		nodestorage.ready().then(function() {
			common_Storage.hasSupport = true;
			common_Storage.knowsSupport = true;
			ifSupported();
		})["catch"](function() {
			common_Storage.hasSupport = false;
			common_Storage.knowsSupport = true;
			common_Storage.storageReplacement = new haxe_ds_StringMap();
			ifUnsupported();
		});
	} catch( e ) {
		common_Storage.knowsSupport = true;
		common_Storage.hasSupport = true;
		ifSupported();
	}
};
common_Storage.getItem = function(key,onSuccess,returnBuffer) {
	if(returnBuffer == null) {
		returnBuffer = false;
	}
	if(common_Storage.hasSupport) {
		if(returnBuffer) {
			return nodestorage.getItemBuffer(key,onSuccess);
		} else {
			return nodestorage.getItemParsed(key,onSuccess);
		}
	}
	common_Storage.testSupport(function() {
		if((returnBuffer ? nodestorage.getItemBuffer(key,onSuccess) : nodestorage.getItemParsed(key,onSuccess)) == null) {
			onSuccess("error",null);
		}
	},function() {
		var _this = common_Storage.storageReplacement;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			onSuccess("error",null);
		} else {
			var _this1 = common_Storage.storageReplacement;
			var tmp = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
			onSuccess(null,tmp);
		}
	});
	return -1;
};
common_Storage.setItem = function(key,value,onSuccess) {
	common_Storage.testSupport(function() {
		nodestorage.setItem(key,value,onSuccess);
	},function() {
		var _this = common_Storage.storageReplacement;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
		onSuccess();
	});
};
common_Storage.storageSupported = function() {
	if(!(!common_Storage.knowsSupport)) {
		return common_Storage.hasSupport;
	} else {
		return true;
	}
};
var common_StringExtensions = function() { };
$hxClasses["common.StringExtensions"] = common_StringExtensions;
common_StringExtensions.__name__ = ["common","StringExtensions"];
common_StringExtensions.firstToUpper = function(str) {
	if(str.length == 0) {
		return str;
	}
	return str.charAt(0).toUpperCase() + HxOverrides.substr(str,1,null);
};
var common_TextHelper = function(game) {
	this.game = game;
};
$hxClasses["common.TextHelper"] = common_TextHelper;
common_TextHelper.__name__ = ["common","TextHelper"];
common_TextHelper.prototype = {
	ifNotMobile: function(thisText) {
		if(this.game.isMobile) {
			return "";
		}
		return thisText;
	}
	,clickOrTap: function(capital) {
		if(capital == null) {
			capital = true;
		}
		if(capital) {
			if(this.game.isMobile) {
				return "Tap";
			} else {
				return "Click";
			}
		}
		if(this.game.isMobile) {
			return "tap";
		} else {
			return "click";
		}
	}
	,__class__: common_TextHelper
};
var de_polygonal_ds_Hashable = function() { };
$hxClasses["de.polygonal.ds.Hashable"] = de_polygonal_ds_Hashable;
de_polygonal_ds_Hashable.__name__ = ["de","polygonal","ds","Hashable"];
var de_polygonal_ds_Collection = function() { };
$hxClasses["de.polygonal.ds.Collection"] = de_polygonal_ds_Collection;
de_polygonal_ds_Collection.__name__ = ["de","polygonal","ds","Collection"];
de_polygonal_ds_Collection.__interfaces__ = [de_polygonal_ds_Hashable];
de_polygonal_ds_Collection.prototype = {
	__class__: de_polygonal_ds_Collection
};
var de_polygonal_ds_Queue = function() { };
$hxClasses["de.polygonal.ds.Queue"] = de_polygonal_ds_Queue;
de_polygonal_ds_Queue.__name__ = ["de","polygonal","ds","Queue"];
de_polygonal_ds_Queue.__interfaces__ = [de_polygonal_ds_Collection];
var de_polygonal_ds_ArrayedQueue = function(initialCapacity,source,fixed) {
	if(initialCapacity == null) {
		initialCapacity = 16;
	}
	this.mIterator = null;
	this.mFront = 0;
	this.mSize = 0;
	this.reuseIterator = false;
	this.growthRate = -2;
	this.mInitialCapacity = 1 > initialCapacity ? 1 : initialCapacity;
	this.capacity = this.mInitialCapacity;
	if(source != null) {
		this.mSize = source.length;
		var x = this.mSize;
		var y = this.capacity;
		this.capacity = x > y ? x : y;
	}
	var len = this.capacity;
	this.mData = new Array(len);
	if(source != null) {
		var d = this.mData;
		var _g1 = 0;
		var _g = this.mSize;
		while(_g1 < _g) {
			var i = _g1++;
			d[i] = source[i];
		}
	}
	if(fixed) {
		this.growthRate = 0;
	}
};
$hxClasses["de.polygonal.ds.ArrayedQueue"] = de_polygonal_ds_ArrayedQueue;
de_polygonal_ds_ArrayedQueue.__name__ = ["de","polygonal","ds","ArrayedQueue"];
de_polygonal_ds_ArrayedQueue.__interfaces__ = [de_polygonal_ds_Queue];
de_polygonal_ds_ArrayedQueue.prototype = {
	clear: function(gc) {
		if(gc == null) {
			gc = false;
		}
		if(gc) {
			de_polygonal_ds_tools_NativeArrayTools.nullify(this.mData);
		}
		this.mFront = this.mSize = 0;
	}
	,iterator: function() {
		if(this.reuseIterator) {
			if(this.mIterator == null) {
				this.mIterator = new de_polygonal_ds_ArrayedQueueIterator(this);
			} else {
				this.mIterator.reset();
			}
			return this.mIterator;
		} else {
			return new de_polygonal_ds_ArrayedQueueIterator(this);
		}
	}
	,grow: function() {
		var t = this.capacity;
		this.capacity = de_polygonal_ds_tools_GrowthRate.compute(this.growthRate,this.capacity);
		this.resizeContainer(t,this.capacity);
	}
	,resizeContainer: function(oldSize,newSize) {
		var dst = new Array(newSize);
		if(oldSize < newSize) {
			if(this.mFront + this.mSize > oldSize) {
				var n1 = oldSize - this.mFront;
				var n2 = oldSize - n1;
				de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,this.mFront,dst,0,n1);
				de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,0,dst,n1,n2);
			} else {
				de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,this.mFront,dst,0,this.mSize);
			}
		} else if(this.mFront + this.mSize > oldSize) {
			var n11 = oldSize - this.mFront;
			var n21 = this.mSize - this.mFront;
			de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,this.mFront,dst,0,n11);
			de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,0,dst,this.mFront,n21);
		} else {
			de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,this.mFront,dst,0,this.mSize);
		}
		this.mData = dst;
		this.mFront = 0;
	}
	,__class__: de_polygonal_ds_ArrayedQueue
};
var de_polygonal_ds_Itr = function() { };
$hxClasses["de.polygonal.ds.Itr"] = de_polygonal_ds_Itr;
de_polygonal_ds_Itr.__name__ = ["de","polygonal","ds","Itr"];
de_polygonal_ds_Itr.prototype = {
	__class__: de_polygonal_ds_Itr
};
var de_polygonal_ds_ArrayedQueueIterator = function(x) {
	this.mObject = x;
	this.reset();
};
$hxClasses["de.polygonal.ds.ArrayedQueueIterator"] = de_polygonal_ds_ArrayedQueueIterator;
de_polygonal_ds_ArrayedQueueIterator.__name__ = ["de","polygonal","ds","ArrayedQueueIterator"];
de_polygonal_ds_ArrayedQueueIterator.__interfaces__ = [de_polygonal_ds_Itr];
de_polygonal_ds_ArrayedQueueIterator.prototype = {
	reset: function() {
		this.mFront = this.mObject.mFront;
		this.mCapacity = this.mObject.capacity;
		this.mSize = this.mObject.mSize;
		this.mI = 0;
		this.mData = this.mObject.mData.slice();
		return this;
	}
	,hasNext: function() {
		return this.mI < this.mSize;
	}
	,next: function() {
		return this.mData[(this.mI++ + this.mFront) % this.mCapacity];
	}
	,__class__: de_polygonal_ds_ArrayedQueueIterator
};
var de_polygonal_ds_Prioritizable = function() { };
$hxClasses["de.polygonal.ds.Prioritizable"] = de_polygonal_ds_Prioritizable;
de_polygonal_ds_Prioritizable.__name__ = ["de","polygonal","ds","Prioritizable"];
de_polygonal_ds_Prioritizable.prototype = {
	__class__: de_polygonal_ds_Prioritizable
};
var de_polygonal_ds_PriorityQueue = function(initalCapacity,inverse,source) {
	if(inverse == null) {
		inverse = false;
	}
	if(initalCapacity == null) {
		initalCapacity = 1;
	}
	this.mSize = 0;
	this.growthRate = -2;
	this.mInitialCapacity = 1 > initalCapacity ? 1 : initalCapacity;
	this.capacity = initalCapacity;
	this.mInverse = inverse;
	if(source != null) {
		this.mSize = source.length;
		var x = this.mSize;
		var y = this.capacity;
		this.capacity = x > y ? x : y;
	}
	var len = this.capacity + 1;
	this.mData = new Array(len);
	this.mData[0] = null;
	if(source != null) {
		var d = this.mData;
		var _g1 = 1;
		var _g = this.mSize + 1;
		while(_g1 < _g) {
			var i = _g1++;
			d[i] = source[i - 1];
		}
		this.repair();
	}
};
$hxClasses["de.polygonal.ds.PriorityQueue"] = de_polygonal_ds_PriorityQueue;
de_polygonal_ds_PriorityQueue.__name__ = ["de","polygonal","ds","PriorityQueue"];
de_polygonal_ds_PriorityQueue.__interfaces__ = [de_polygonal_ds_Queue];
de_polygonal_ds_PriorityQueue.prototype = {
	enqueue: function(val) {
		if(this.mSize == this.capacity) {
			this.grow();
		}
		this.mData[++this.mSize] = val;
		val.position = this.mSize;
		var index = this.mSize;
		var d = this.mData;
		var parent = index >> 1;
		var t = d[index];
		var p = t.priority;
		if(this.mInverse) {
			while(parent > 0) {
				var parentVal = d[parent];
				if(p - parentVal.priority < 0) {
					d[index] = parentVal;
					parentVal.position = index;
					index = parent;
					parent >>= 1;
				} else {
					break;
				}
			}
		} else {
			while(parent > 0) {
				var parentVal1 = d[parent];
				if(p - parentVal1.priority > 0) {
					d[index] = parentVal1;
					parentVal1.position = index;
					index = parent;
					parent >>= 1;
				} else {
					break;
				}
			}
		}
		d[index] = t;
		t.position = index;
	}
	,dequeue: function() {
		var d = this.mData;
		var x = d[1];
		var d1 = this.mData;
		x.position = -1;
		d1[1] = d1[this.mSize];
		var index = 1;
		var d2 = this.mData;
		var child = index << 1;
		var childVal;
		var t = d2[index];
		var p = t.priority;
		if(this.mInverse) {
			while(child < this.mSize) {
				if(child < this.mSize - 1) {
					if(d2[child].priority - d2[child + 1].priority > 0) {
						++child;
					}
				}
				childVal = d2[child];
				if(p - childVal.priority > 0) {
					d2[index] = childVal;
					childVal.position = index;
					t.position = child;
					index = child;
					child <<= 1;
				} else {
					break;
				}
			}
		} else {
			while(child < this.mSize) {
				if(child < this.mSize - 1) {
					if(d2[child].priority - d2[child + 1].priority < 0) {
						++child;
					}
				}
				childVal = d2[child];
				if(p - childVal.priority < 0) {
					d2[index] = childVal;
					childVal.position = index;
					t.position = child;
					index = child;
					child <<= 1;
				} else {
					break;
				}
			}
		}
		d2[index] = t;
		t.position = index;
		this.mSize--;
		return x;
	}
	,reprioritize: function(val,priority) {
		var oldPriority = val.priority;
		if(oldPriority == priority) {
			return this;
		}
		val.priority = priority;
		var pos = val.position;
		if(this.mInverse) {
			if(priority < oldPriority) {
				var index = pos;
				var d = this.mData;
				var parent = index >> 1;
				var t = d[index];
				var p = t.priority;
				if(this.mInverse) {
					while(parent > 0) {
						var parentVal = d[parent];
						if(p - parentVal.priority < 0) {
							d[index] = parentVal;
							parentVal.position = index;
							index = parent;
							parent >>= 1;
						} else {
							break;
						}
					}
				} else {
					while(parent > 0) {
						var parentVal1 = d[parent];
						if(p - parentVal1.priority > 0) {
							d[index] = parentVal1;
							parentVal1.position = index;
							index = parent;
							parent >>= 1;
						} else {
							break;
						}
					}
				}
				d[index] = t;
				t.position = index;
			} else {
				var index1 = pos;
				var d1 = this.mData;
				var child = index1 << 1;
				var childVal;
				var t1 = d1[index1];
				var p1 = t1.priority;
				if(this.mInverse) {
					while(child < this.mSize) {
						if(child < this.mSize - 1) {
							if(d1[child].priority - d1[child + 1].priority > 0) {
								++child;
							}
						}
						childVal = d1[child];
						if(p1 - childVal.priority > 0) {
							d1[index1] = childVal;
							childVal.position = index1;
							t1.position = child;
							index1 = child;
							child <<= 1;
						} else {
							break;
						}
					}
				} else {
					while(child < this.mSize) {
						if(child < this.mSize - 1) {
							if(d1[child].priority - d1[child + 1].priority < 0) {
								++child;
							}
						}
						childVal = d1[child];
						if(p1 - childVal.priority < 0) {
							d1[index1] = childVal;
							childVal.position = index1;
							t1.position = child;
							index1 = child;
							child <<= 1;
						} else {
							break;
						}
					}
				}
				d1[index1] = t1;
				t1.position = index1;
				var index2 = this.mSize;
				var d2 = this.mData;
				var parent1 = index2 >> 1;
				var t2 = d2[index2];
				var p2 = t2.priority;
				if(this.mInverse) {
					while(parent1 > 0) {
						var parentVal2 = d2[parent1];
						if(p2 - parentVal2.priority < 0) {
							d2[index2] = parentVal2;
							parentVal2.position = index2;
							index2 = parent1;
							parent1 >>= 1;
						} else {
							break;
						}
					}
				} else {
					while(parent1 > 0) {
						var parentVal3 = d2[parent1];
						if(p2 - parentVal3.priority > 0) {
							d2[index2] = parentVal3;
							parentVal3.position = index2;
							index2 = parent1;
							parent1 >>= 1;
						} else {
							break;
						}
					}
				}
				d2[index2] = t2;
				t2.position = index2;
			}
		} else if(priority > oldPriority) {
			var index3 = pos;
			var d3 = this.mData;
			var parent2 = index3 >> 1;
			var t3 = d3[index3];
			var p3 = t3.priority;
			if(this.mInverse) {
				while(parent2 > 0) {
					var parentVal4 = d3[parent2];
					if(p3 - parentVal4.priority < 0) {
						d3[index3] = parentVal4;
						parentVal4.position = index3;
						index3 = parent2;
						parent2 >>= 1;
					} else {
						break;
					}
				}
			} else {
				while(parent2 > 0) {
					var parentVal5 = d3[parent2];
					if(p3 - parentVal5.priority > 0) {
						d3[index3] = parentVal5;
						parentVal5.position = index3;
						index3 = parent2;
						parent2 >>= 1;
					} else {
						break;
					}
				}
			}
			d3[index3] = t3;
			t3.position = index3;
		} else {
			var index4 = pos;
			var d4 = this.mData;
			var child1 = index4 << 1;
			var childVal1;
			var t4 = d4[index4];
			var p4 = t4.priority;
			if(this.mInverse) {
				while(child1 < this.mSize) {
					if(child1 < this.mSize - 1) {
						if(d4[child1].priority - d4[child1 + 1].priority > 0) {
							++child1;
						}
					}
					childVal1 = d4[child1];
					if(p4 - childVal1.priority > 0) {
						d4[index4] = childVal1;
						childVal1.position = index4;
						t4.position = child1;
						index4 = child1;
						child1 <<= 1;
					} else {
						break;
					}
				}
			} else {
				while(child1 < this.mSize) {
					if(child1 < this.mSize - 1) {
						if(d4[child1].priority - d4[child1 + 1].priority < 0) {
							++child1;
						}
					}
					childVal1 = d4[child1];
					if(p4 - childVal1.priority < 0) {
						d4[index4] = childVal1;
						childVal1.position = index4;
						t4.position = child1;
						index4 = child1;
						child1 <<= 1;
					} else {
						break;
					}
				}
			}
			d4[index4] = t4;
			t4.position = index4;
			var index5 = this.mSize;
			var d5 = this.mData;
			var parent3 = index5 >> 1;
			var t5 = d5[index5];
			var p5 = t5.priority;
			if(this.mInverse) {
				while(parent3 > 0) {
					var parentVal6 = d5[parent3];
					if(p5 - parentVal6.priority < 0) {
						d5[index5] = parentVal6;
						parentVal6.position = index5;
						index5 = parent3;
						parent3 >>= 1;
					} else {
						break;
					}
				}
			} else {
				while(parent3 > 0) {
					var parentVal7 = d5[parent3];
					if(p5 - parentVal7.priority > 0) {
						d5[index5] = parentVal7;
						parentVal7.position = index5;
						index5 = parent3;
						parent3 >>= 1;
					} else {
						break;
					}
				}
			}
			d5[index5] = t5;
			t5.position = index5;
		}
		return this;
	}
	,repair: function() {
		var i = this.mSize >> 1;
		while(i >= 1) {
			this.heapify(i,this.mSize);
			--i;
		}
	}
	,heapify: function(p,s) {
		var d = this.mData;
		var l = p << 1;
		var r = l + 1;
		var max = p;
		if(this.mInverse) {
			if(l <= s && d[l].priority - d[max].priority < 0) {
				max = l;
			}
			if(l + 1 <= s && d[l + 1].priority - d[max].priority < 0) {
				max = r;
			}
		} else {
			if(l <= s && d[l].priority - d[max].priority > 0) {
				max = l;
			}
			if(l + 1 <= s && d[l + 1].priority - d[max].priority > 0) {
				max = r;
			}
		}
		var a;
		var b;
		var t;
		if(max != p) {
			a = d[max];
			b = d[p];
			d[max] = b;
			d[p] = a;
			t = a.position;
			a.position = b.position;
			b.position = t;
			this.heapify(max,s);
		}
	}
	,grow: function() {
		this.capacity = de_polygonal_ds_tools_GrowthRate.compute(this.growthRate,this.capacity);
		this.resizeContainer(this.capacity);
	}
	,resizeContainer: function(newSize) {
		var t = new Array(newSize + 1);
		de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,0,t,0,this.mSize + 1);
		this.mData = t;
	}
	,__class__: de_polygonal_ds_PriorityQueue
};
var de_polygonal_ds_tools_GrowthRate = function() { };
$hxClasses["de.polygonal.ds.tools.GrowthRate"] = de_polygonal_ds_tools_GrowthRate;
de_polygonal_ds_tools_GrowthRate.__name__ = ["de","polygonal","ds","tools","GrowthRate"];
de_polygonal_ds_tools_GrowthRate.compute = function(rate,capacity) {
	if(rate > 0) {
		capacity += rate;
	} else {
		switch(rate) {
		case -3:
			capacity <<= 1;
			break;
		case -2:
			capacity = (capacity * 3 >> 1) + 1;
			break;
		case -1:
			var newSize = capacity + 1;
			capacity = (newSize >> 3) + (newSize < 9 ? 3 : 6);
			capacity += newSize;
			break;
		case 0:
			throw new js__$Boot_HaxeError("out of space");
			break;
		}
	}
	return capacity;
};
var de_polygonal_ds_tools_NativeArrayTools = function() { };
$hxClasses["de.polygonal.ds.tools.NativeArrayTools"] = de_polygonal_ds_tools_NativeArrayTools;
de_polygonal_ds_tools_NativeArrayTools.__name__ = ["de","polygonal","ds","tools","NativeArrayTools"];
de_polygonal_ds_tools_NativeArrayTools.blit = function(src,srcPos,dst,dstPos,n) {
	if(n > 0) {
		if(src == dst) {
			if(srcPos < dstPos) {
				var i = srcPos + n;
				var j = dstPos + n;
				var _g1 = 0;
				var _g = n;
				while(_g1 < _g) {
					var k = _g1++;
					--i;
					--j;
					src[j] = src[i];
				}
			} else if(srcPos > dstPos) {
				var i1 = srcPos;
				var j1 = dstPos;
				var _g11 = 0;
				var _g2 = n;
				while(_g11 < _g2) {
					var k1 = _g11++;
					src[j1] = src[i1];
					++i1;
					++j1;
				}
			}
		} else if(srcPos == 0 && dstPos == 0) {
			var _g12 = 0;
			var _g3 = n;
			while(_g12 < _g3) {
				var i2 = _g12++;
				dst[i2] = src[i2];
			}
		} else if(srcPos == 0) {
			var _g13 = 0;
			var _g4 = n;
			while(_g13 < _g4) {
				var i3 = _g13++;
				dst[dstPos + i3] = src[i3];
			}
		} else if(dstPos == 0) {
			var _g14 = 0;
			var _g5 = n;
			while(_g14 < _g5) {
				var i4 = _g14++;
				dst[i4] = src[srcPos + i4];
			}
		} else {
			var _g15 = 0;
			var _g6 = n;
			while(_g15 < _g6) {
				var i5 = _g15++;
				dst[dstPos + i5] = src[srcPos + i5];
			}
		}
	}
};
de_polygonal_ds_tools_NativeArrayTools.nullify = function(a,first,n) {
	if(n == null) {
		n = 0;
	}
	if(first == null) {
		first = 0;
	}
	var min = first;
	var max = n <= 0 ? a.length : min + n;
	while(min < max) a[min++] = null;
	return a;
};
var gamesave_ResizingBytesQueue = function(startWithBytes) {
	this.version = 0;
	this.bytes = startWithBytes != null ? startWithBytes : new haxe_io_Bytes(new ArrayBuffer(10));
	this.size = 0;
	this.readStart = 0;
	this.stringLocations = new haxe_ds_StringMap();
};
$hxClasses["gamesave.ResizingBytesQueue"] = gamesave_ResizingBytesQueue;
gamesave_ResizingBytesQueue.__name__ = ["gamesave","ResizingBytesQueue"];
gamesave_ResizingBytesQueue.fromBase64 = function(str) {
	var newQueue = new gamesave_ResizingBytesQueue();
	newQueue.bytes = haxe_crypto_Base64.decode(str);
	newQueue.size = newQueue.bytes.length;
	return newQueue;
};
gamesave_ResizingBytesQueue.fromData = function(data) {
	var newQueue = new gamesave_ResizingBytesQueue();
	newQueue.bytes = haxe_io_Bytes.ofData(data.buffer);
	newQueue.size = newQueue.bytes.length;
	return newQueue;
};
gamesave_ResizingBytesQueue.prototype = {
	addString: function(str) {
		var _this = this.stringLocations;
		var stringLoc = __map_reserved[str] != null ? _this.getReserved(str) : _this.h[str];
		if(stringLoc != null) {
			if(this.size + 1 > this.bytes.length) {
				var oldBytes = this.bytes;
				this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
				this.bytes.blit(0,oldBytes,0,this.size);
			}
			this.bytes.b[this.size] = 1 & 255;
			this.size += 1;
			if(this.size + 4 > this.bytes.length) {
				var oldBytes1 = this.bytes;
				this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 4) * 2));
				this.bytes.blit(0,oldBytes1,0,this.size);
			}
			this.bytes.setInt32(this.size,stringLoc);
			this.size += 4;
			return;
		}
		if(this.size + 1 > this.bytes.length) {
			var oldBytes2 = this.bytes;
			this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
			this.bytes.blit(0,oldBytes2,0,this.size);
		}
		this.bytes.b[this.size] = 0 & 255;
		this.size += 1;
		var v = this.size;
		var _this1 = this.stringLocations;
		if(__map_reserved[str] != null) {
			_this1.setReserved(str,v);
		} else {
			_this1.h[str] = v;
		}
		var addSizeAt = this.size;
		var strSize = str.length;
		if(this.size + 4 > this.bytes.length) {
			var oldBytes3 = this.bytes;
			this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 4) * 2));
			this.bytes.blit(0,oldBytes3,0,this.size);
		}
		this.bytes.setInt32(this.size,0);
		this.size += 4;
		var i = 0;
		while(i < str.length) {
			var c = str.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | str.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				if(this.size + 1 > this.bytes.length) {
					var oldBytes4 = this.bytes;
					this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
					this.bytes.blit(0,oldBytes4,0,this.size);
				}
				this.bytes.b[this.size] = c & 255;
				this.size += 1;
			} else if(c <= 2047) {
				if(this.size + 1 > this.bytes.length) {
					var oldBytes5 = this.bytes;
					this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
					this.bytes.blit(0,oldBytes5,0,this.size);
				}
				this.bytes.b[this.size] = (192 | c >> 6) & 255;
				this.size += 1;
				if(this.size + 1 > this.bytes.length) {
					var oldBytes6 = this.bytes;
					this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
					this.bytes.blit(0,oldBytes6,0,this.size);
				}
				this.bytes.b[this.size] = (128 | c & 63) & 255;
				this.size += 1;
				++strSize;
			} else if(c <= 65535) {
				if(this.size + 1 > this.bytes.length) {
					var oldBytes7 = this.bytes;
					this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
					this.bytes.blit(0,oldBytes7,0,this.size);
				}
				this.bytes.b[this.size] = (224 | c >> 12) & 255;
				this.size += 1;
				if(this.size + 1 > this.bytes.length) {
					var oldBytes8 = this.bytes;
					this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
					this.bytes.blit(0,oldBytes8,0,this.size);
				}
				this.bytes.b[this.size] = (128 | c >> 6 & 63) & 255;
				this.size += 1;
				if(this.size + 1 > this.bytes.length) {
					var oldBytes9 = this.bytes;
					this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
					this.bytes.blit(0,oldBytes9,0,this.size);
				}
				this.bytes.b[this.size] = (128 | c & 63) & 255;
				this.size += 1;
				strSize += 2;
			} else {
				if(this.size + 1 > this.bytes.length) {
					var oldBytes10 = this.bytes;
					this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
					this.bytes.blit(0,oldBytes10,0,this.size);
				}
				this.bytes.b[this.size] = (240 | c >> 18) & 255;
				this.size += 1;
				if(this.size + 1 > this.bytes.length) {
					var oldBytes11 = this.bytes;
					this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
					this.bytes.blit(0,oldBytes11,0,this.size);
				}
				this.bytes.b[this.size] = (128 | c >> 12 & 63) & 255;
				this.size += 1;
				if(this.size + 1 > this.bytes.length) {
					var oldBytes12 = this.bytes;
					this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
					this.bytes.blit(0,oldBytes12,0,this.size);
				}
				this.bytes.b[this.size] = (128 | c >> 6 & 63) & 255;
				this.size += 1;
				if(this.size + 1 > this.bytes.length) {
					var oldBytes13 = this.bytes;
					this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 1) * 2));
					this.bytes.blit(0,oldBytes13,0,this.size);
				}
				this.bytes.b[this.size] = (128 | c & 63) & 255;
				this.size += 1;
				strSize += 3;
			}
		}
		this.bytes.setInt32(addSizeAt,strSize);
	}
	,addRectangle: function(rect) {
		var value = rect.x;
		if(this.size + 4 > this.bytes.length) {
			var oldBytes = this.bytes;
			this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 4) * 2));
			this.bytes.blit(0,oldBytes,0,this.size);
		}
		this.bytes.setInt32(this.size,value);
		this.size += 4;
		var value1 = rect.y;
		if(this.size + 4 > this.bytes.length) {
			var oldBytes1 = this.bytes;
			this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 4) * 2));
			this.bytes.blit(0,oldBytes1,0,this.size);
		}
		this.bytes.setInt32(this.size,value1);
		this.size += 4;
		var value2 = rect.width;
		if(this.size + 4 > this.bytes.length) {
			var oldBytes2 = this.bytes;
			this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 4) * 2));
			this.bytes.blit(0,oldBytes2,0,this.size);
		}
		this.bytes.setInt32(this.size,value2);
		this.size += 4;
		var value3 = rect.height;
		if(this.size + 4 > this.bytes.length) {
			var oldBytes3 = this.bytes;
			this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 4) * 2));
			this.bytes.blit(0,oldBytes3,0,this.size);
		}
		this.bytes.setInt32(this.size,value3);
		this.size += 4;
	}
	,readRectangle: function() {
		var intToRead = this.bytes.getInt32(this.readStart);
		this.readStart += 4;
		var intToRead1 = this.bytes.getInt32(this.readStart);
		this.readStart += 4;
		var intToRead2 = this.bytes.getInt32(this.readStart);
		this.readStart += 4;
		var intToRead3 = this.bytes.getInt32(this.readStart);
		this.readStart += 4;
		return new common_Rectangle(intToRead,intToRead1,intToRead2,intToRead3);
	}
	,addFPoint: function(point) {
		var value = point.x;
		if(this.size + 8 > this.bytes.length) {
			var oldBytes = this.bytes;
			this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 8) * 2));
			this.bytes.blit(0,oldBytes,0,this.size);
		}
		this.bytes.setDouble(this.size,value);
		this.size += 8;
		var value1 = point.y;
		if(this.size + 8 > this.bytes.length) {
			var oldBytes1 = this.bytes;
			this.bytes = new haxe_io_Bytes(new ArrayBuffer((this.size + 8) * 2));
			this.bytes.blit(0,oldBytes1,0,this.size);
		}
		this.bytes.setDouble(this.size,value1);
		this.size += 8;
	}
	,addJSON: function(object) {
		this.addString(JSON.stringify(object));
	}
	,readJSON: function() {
		var tmp;
		var byteToRead = this.bytes.b[this.readStart];
		this.readStart += 1;
		if(byteToRead == 1) {
			var intToRead = this.bytes.getInt32(this.readStart);
			this.readStart += 4;
			var readPos = intToRead;
			var stringLength = this.bytes.getInt32(readPos);
			tmp = this.bytes.getString(readPos + 4,stringLength);
		} else {
			var intToRead1 = this.bytes.getInt32(this.readStart);
			this.readStart += 4;
			var len = intToRead1;
			var str = this.bytes.getString(this.readStart,len);
			this.readStart += len;
			tmp = str;
		}
		return JSON.parse(tmp);
	}
	,readPoint: function() {
		var intToRead = this.bytes.getInt32(this.readStart);
		this.readStart += 4;
		var intToRead1 = this.bytes.getInt32(this.readStart);
		this.readStart += 4;
		return new common_Point(intToRead,intToRead1);
	}
	,readFPoint: function() {
		var floatToRead = this.bytes.getDouble(this.readStart);
		this.readStart += 8;
		var floatToRead1 = this.bytes.getDouble(this.readStart);
		this.readStart += 8;
		return new common_FPoint(floatToRead,floatToRead1);
	}
	,toBase64: function() {
		var filledBytes = new haxe_io_Bytes(new ArrayBuffer(this.size));
		filledBytes.blit(0,this.bytes,0,this.size);
		return haxe_crypto_Base64.encode(filledBytes);
	}
	,getData: function() {
		var filledBytes = new haxe_io_Bytes(new ArrayBuffer(this.size));
		filledBytes.blit(0,this.bytes,0,this.size);
		return filledBytes.b;
	}
	,__class__: gamesave_ResizingBytesQueue
};
var gamesave_SaveMetaData = function() { };
$hxClasses["gamesave.SaveMetaData"] = gamesave_SaveMetaData;
gamesave_SaveMetaData.__name__ = ["gamesave","SaveMetaData"];
gamesave_SaveMetaData.saveMetaData = function(fileName,city) {
	var possibleStory = Lambda.find(Resources.allStoriesInfo,function(x) {
		return x.link == city.progress.story.storyName;
	});
	var cityName = "City";
	if(possibleStory != null) {
		cityName = possibleStory.name;
	}
	var metaText = "" + cityName + " - " + city.simulation.citizens.length + " citizens";
	common_Storage.setItem(fileName + "__meta",metaText,function() {
	});
	common_Storage.setItem("__meta__mostRecentlyPlayed",fileName,function() {
	});
};
var graphics_CachingContainer = function(cacheWithinRect) {
	this.previousCullRectangle = null;
	this.isInvalid = true;
	PIXI.Container.call(this);
	this.cacheWithinRect = cacheWithinRect;
	this.cacheableChildren = [];
	this.cacheContainer = new PIXI.Container();
	this.explicitUncachedContainer = new PIXI.Container();
	this.addChild(this.cacheContainer);
	this.addChild(this.explicitUncachedContainer);
};
$hxClasses["graphics.CachingContainer"] = graphics_CachingContainer;
graphics_CachingContainer.__name__ = ["graphics","CachingContainer"];
graphics_CachingContainer.__super__ = PIXI.Container;
graphics_CachingContainer.prototype = $extend(PIXI.Container.prototype,{
	preDraw: function(cullRectangle) {
		if(this.isInvalid) {
			if(Main.isCanvasRenderer && !Main.isMobile || this.cacheableChildren.length < 512 && (!Main.isMobile || this.cacheableChildren.length == 0)) {
				this.cacheContainer.cacheAsBitmap = false;
				var _g = 0;
				var _g1 = this.cacheableChildren;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					if(child.parent != this.explicitUncachedContainer) {
						if(child.parent != null) {
							child.parent.removeChild(this.parent);
						}
						this.explicitUncachedContainer.addChild(child);
						child.visible = true;
					}
				}
			} else {
				var _g2 = 0;
				var _g11 = this.cacheableChildren;
				while(_g2 < _g11.length) {
					var child1 = _g11[_g2];
					++_g2;
					var childRect;
					var childAsDynamic = child1;
					if(childAsDynamic.width != null) {
						childRect = new common_Rectangle(Math.floor(child1.x),Math.floor(child1.y),Math.ceil(childAsDynamic.width + 1),Math.ceil(childAsDynamic.height + 1));
					} else {
						childRect = common_Rectangle.fromPixiRect(child1.getLocalBounds());
					}
					if(this.cacheWithinRect.fullyContains(childRect)) {
						if(child1.parent != this.cacheContainer) {
							if(child1.parent != null) {
								child1.parent.removeChild(this.parent);
							}
							this.cacheContainer.addChild(child1);
							child1.visible = true;
						}
					} else if(child1.parent != this.explicitUncachedContainer) {
						if(child1.parent != null) {
							child1.parent.removeChild(this.parent);
						}
						this.explicitUncachedContainer.addChild(child1);
					}
				}
				this.cacheContainer.cacheAsBitmap = false;
				this.cacheContainer.cacheAsBitmap = true;
			}
			this.isInvalid = false;
			this.cull(cullRectangle);
			this.previousCullRectangle = cullRectangle.clone();
		} else if(this.previousCullRectangle == null || this.previousCullRectangle.x != cullRectangle.x || this.previousCullRectangle.y != cullRectangle.y || this.previousCullRectangle.width != cullRectangle.width || this.previousCullRectangle.height != cullRectangle.height) {
			this.cull(cullRectangle);
			this.previousCullRectangle = cullRectangle.clone();
		}
	}
	,uncull: function() {
		var _g = 0;
		var _g1 = this.explicitUncachedContainer.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.visible = true;
		}
		this.previousCullRectangle = null;
	}
	,cull: function(cullRectangle) {
		var x2 = cullRectangle.get_x2();
		var y2 = cullRectangle.get_y2();
		var _g = 0;
		var _g1 = this.explicitUncachedContainer.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var childAsDynamic = child;
			if(childAsDynamic.width != null) {
				child.visible = child.x + childAsDynamic.width >= cullRectangle.x && child.y + childAsDynamic.height >= cullRectangle.y && child.x < x2 && child.y < y2;
			}
		}
	}
	,removeCache: function() {
		this.cacheContainer.cacheAsBitmap = false;
	}
	,__class__: graphics_CachingContainer
});
var graphics_GroundDecoration = function(stage,position,textureName,subImage) {
	this.stage = stage;
	this.position = position;
	this.textureName = textureName;
	this.textures = Resources.getTexturesByWidth(textureName,20);
	if(subImage == null) {
		subImage = random_Random.getInt(this.textures.length);
	}
	this.sprite = new PIXI.Sprite(this.textures[subImage]);
	this.subImage = subImage;
	this.sprite.position.set(position.x,position.y);
	stage.addChild(this.sprite);
};
$hxClasses["graphics.GroundDecoration"] = graphics_GroundDecoration;
graphics_GroundDecoration.__name__ = ["graphics","GroundDecoration"];
graphics_GroundDecoration.prototype = {
	destroy: function() {
		this.stage.removeChild(this.sprite);
	}
	,__class__: graphics_GroundDecoration
};
var graphics_Particle = function() {
};
$hxClasses["graphics.Particle"] = graphics_Particle;
graphics_Particle.__name__ = ["graphics","Particle"];
graphics_Particle.create = function(stage,textures,position) {
	var inst = graphics_Particle.pool.length == 0 ? new graphics_Particle() : graphics_Particle.pool.pop();
	inst.___internal_pooling_initObject(stage,textures,position);
	return inst;
};
graphics_Particle.prototype = {
	___internal_pooling_initObject: function(stage,textures,position) {
		this.stage = stage;
		this.textures = textures;
		this.frame = 0;
		this.animSpeed = 0.5;
		this.sprite = pooling__$PooledSprite_PooledSprite_$Impl_$.create(textures[0],stage);
		this.sprite.position.set(position.x,position.y);
	}
	,update: function(timeMod) {
		this.frame += this.animSpeed * timeMod;
		if(this.frame >= this.textures.length) {
			var this1 = this.sprite;
			var stage = this.stage;
			this1.visible = false;
			this1.position.set(-100000,-100000);
			pooling__$PooledSprite_PooledSprite_$Impl_$.pool.get(stage).push(this1);
			this.destroy();
			return true;
		}
		this.sprite.texture = this.textures[this.frame | 0];
		return false;
	}
	,destroy: function() {
		graphics_Particle.pool.push(this);
	}
	,__class__: graphics_Particle
};
var graphics_Particles = function(stage) {
	this.stage = stage;
	this.particles = [];
};
$hxClasses["graphics.Particles"] = graphics_Particles;
graphics_Particles.__name__ = ["graphics","Particles"];
graphics_Particles.prototype = {
	update: function(timeMod) {
		var i = this.particles.length;
		while(--i >= 0) if(this.particles[i].update(timeMod)) {
			this.particles[i] = this.particles[this.particles.length - 1];
			this.particles.pop();
		}
	}
	,addParticle: function(textures,position) {
		var newParticle = graphics_Particle.create(this.stage,textures,position);
		this.particles.push(newParticle);
		return newParticle;
	}
	,__class__: graphics_Particles
};
var graphics_Stars = function(stage,city) {
	this.maxStarY = 800;
	this.maxStarX = 800;
	this.stage = stage;
	this.city = city;
	this.sprites = [];
	this.resize();
};
$hxClasses["graphics.Stars"] = graphics_Stars;
graphics_Stars.__name__ = ["graphics","Stars"];
graphics_Stars.prototype = {
	get_requiredNumberOfStars: function() {
		return this.maxStarX * this.maxStarY / 1000 | 0;
	}
	,resize: function() {
		var xScale = 1.0;
		var yScale = 1.0;
		if(this.city.get_displayWidth() > this.maxStarX) {
			xScale = this.city.get_displayWidth() / this.maxStarX;
			this.maxStarX = this.city.get_displayWidth();
		}
		if(this.city.get_displayHeight() > this.maxStarY) {
			yScale = this.city.get_displayHeight() / this.maxStarY;
			this.maxStarY = this.city.get_displayHeight();
		}
		var _g = 0;
		var _g1 = this.sprites;
		while(_g < _g1.length) {
			var spr = _g1[_g];
			++_g;
			spr.position.x *= xScale;
			spr.position.y *= yScale;
		}
		var _g11 = this.sprites.length;
		var _g2 = this.get_requiredNumberOfStars();
		while(_g11 < _g2) {
			var i = _g11++;
			var spr1 = Resources.makeSprite("spr_pixel");
			var this1 = [random_Random.getFloat(360),random_Random.getFloat(0,1),random_Random.getFloat(0.9,1)];
			spr1.tint = thx_color__$Rgb_Rgb_$Impl_$.toInt(thx_color__$Hsl_Hsl_$Impl_$.toRgb(this1));
			spr1.position.set(random_Random.getInt(this.maxStarX),random_Random.getInt(this.maxStarY));
			spr1.alpha = random_Random.getFloat(0.2,0.6);
			this.sprites.push(spr1);
			this.stage.addChild(spr1);
		}
	}
	,update: function() {
		var time = this.city.simulation.time.timeSinceStart / 60 % 24;
		if(time >= 23 || time < 4) {
			this.stage.alpha = 1;
		} else if(time >= 4 && time < 6.) {
			this.stage.alpha = 1 - (time - 4) / 2;
		} else if(time >= 21. && time < 23) {
			this.stage.alpha = 1 - (23 - time) / 2;
		} else {
			this.stage.alpha = 0;
		}
		this.stage.visible = this.stage.alpha != 0;
	}
	,__class__: graphics_Stars
};
var graphics_WorldImage = function() { };
$hxClasses["graphics.WorldImage"] = graphics_WorldImage;
graphics_WorldImage.__name__ = ["graphics","WorldImage"];
graphics_WorldImage.makeWorldSprite = function(random,width,height) {
	var outlineColor = 2103312;
	var fillColor = 5259312;
	var val = height - 10;
	var belowWorldHeight = val < 0 ? 0 : val > 12 ? 12 : val;
	var worldHeight = height - belowWorldHeight;
	var spriteCanvas = window.document.createElement("canvas");
	spriteCanvas.width = width;
	spriteCanvas.height = height;
	var ctx = spriteCanvas.getContext("2d");
	var worldSpriteData = ctx.createImageData(width,height);
	var _g = [];
	var _g2 = 0;
	var _g1 = width / 20 | 0;
	while(_g2 < _g1) {
		var x = _g2++;
		var _g3 = [];
		var _g5 = 0;
		var _g4 = height / 20 | 0;
		while(_g5 < _g4) {
			var y = _g5++;
			_g3.push(false);
		}
		_g.push(_g3);
	}
	var collisionMask = _g;
	var minimumYMax = Math.floor(worldHeight - worldHeight / 4);
	var minimumYMin = Math.floor(worldHeight - worldHeight / 2);
	var maximumYMin = Math.floor(worldHeight - worldHeight / 3);
	var outlinePoints = [{ x : 0, y : 0}];
	var pixelsFromSide = Math.min(worldHeight / 4 + random.getInt(-5,6),width / 3) | 0;
	var numberOfOtherOutlinePoints = Math.max(1,Math.floor((width - pixelsFromSide * 2) / (random.getInt(25,35) + width / 40))) | 0;
	var xchange = Math.floor((width - pixelsFromSide * 2) / numberOfOtherOutlinePoints);
	var xx = pixelsFromSide + ((width - pixelsFromSide * 2 - xchange * (numberOfOtherOutlinePoints - 0.5)) / 2 | 0);
	var _g21 = 0;
	var _g11 = numberOfOtherOutlinePoints;
	while(_g21 < _g11) {
		var i = _g21++;
		outlinePoints.push({ x : xx + random.getInt(-6,7), y : random.getInt(minimumYMax,worldHeight)});
		if(i != numberOfOtherOutlinePoints - 1) {
			outlinePoints.push({ x : xx + (xchange / 2 | 0) + random.getInt(-6,7), y : random.getInt(minimumYMin,maximumYMin)});
		}
		xx += xchange;
	}
	outlinePoints.push({ x : width - 1, y : 0});
	var fillPixel = function(x1,y1) {
		var dataPos = 4 * (width * y1 + x1);
		worldSpriteData.data[dataPos] = fillColor >> 16 & 255;
		worldSpriteData.data[dataPos + 1] = fillColor >> 8 & 255;
		worldSpriteData.data[dataPos + 2] = fillColor & 255;
		worldSpriteData.data[dataPos + 3] = 255;
		collisionMask[x1 / 20 | 0][y1 / 20 | 0] = true;
	};
	var powfactor1 = 1.6;
	var powfactor2 = 1.2;
	var powChangeFactor = 8;
	var currentOutlinePoint = 0;
	var addPowFactor = 0.0;
	var _g22 = 0;
	var _g12 = width;
	while(_g22 < _g12) {
		var i1 = _g22++;
		var maxAddPowFactorXChange = powChangeFactor / (Math.abs(outlinePoints[currentOutlinePoint + 1].y - outlinePoints[currentOutlinePoint].y) + 5);
		var val1 = addPowFactor + random.getFloat(-maxAddPowFactorXChange,maxAddPowFactorXChange);
		if(val1 < -0.2) {
			addPowFactor = -0.2;
		} else if(val1 > 0.2) {
			addPowFactor = 0.2;
		} else {
			addPowFactor = val1;
		}
		if(i1 > outlinePoints[currentOutlinePoint + 1].x) {
			if(outlinePoints[currentOutlinePoint + 1].y > outlinePoints[currentOutlinePoint].y) {
				var numberOfEarthParts = random.getInt(1,3);
				var distBetweenEarthParts = random.getInt(5,8);
				var _g41 = 0;
				var _g31 = numberOfEarthParts;
				while(_g41 < _g31) {
					var op = _g41++;
					var bx = random.getInt(-2,3) + i1 - (numberOfEarthParts - 1) * distBetweenEarthParts + (distBetweenEarthParts * 2 * op | 0);
					var by = outlinePoints[currentOutlinePoint + 1].y + random.getInt(3);
					var fromX = bx - 1;
					var toX = bx;
					var _g6 = by + 2;
					var _g51 = by + 11;
					while(_g6 < _g51) {
						var y2 = _g6++;
						if(y2 <= by + 5) {
							fromX -= random.getInt(y2 < by + 5 ? 3 : 2);
							toX += random.getInt(y2 < by + 5 ? 3 : 2);
						} else {
							var val11 = fromX + random.getInt(y2 > by + 6 ? 3 : 2);
							if(toX < val11) {
								fromX = toX;
							} else {
								fromX = val11;
							}
							var val12 = toX - random.getInt(y2 > by + 6 ? 3 : 2);
							if(fromX > val12) {
								toX = fromX;
							} else {
								toX = val12;
							}
						}
						if(y2 == by + 2 && toX - fromX == 1) {
							++toX;
						}
						if(y2 == by + 3 && toX - fromX == 2) {
							--fromX;
						}
						var _g8 = fromX;
						var _g7 = toX;
						while(_g8 < _g7) {
							var x2 = _g8++;
							if(x2 >= 0 && x2 < width && y2 + 2 < height) {
								fillPixel(x2,y2);
							}
						}
					}
				}
			}
			++currentOutlinePoint;
		}
		var pnt = outlinePoints[currentOutlinePoint];
		var nextPnt = outlinePoints[currentOutlinePoint + 1];
		var interpolate = (i1 - pnt.x) / (nextPnt.x - pnt.x);
		if(nextPnt.y < pnt.y) {
			interpolate = Math.pow(interpolate,powfactor1 - interpolate * powfactor2 + addPowFactor);
		} else {
			interpolate = 1 - Math.pow(1 - interpolate,powfactor1 - (1 - interpolate) * powfactor2 - addPowFactor);
		}
		var val13 = Math.floor(interpolate * (nextPnt.y - pnt.y) + pnt.y);
		var val2 = worldHeight - 1;
		var bottomPixel = val2 < val13 ? val2 : val13;
		var _g42 = 0;
		var _g32 = bottomPixel + 1;
		while(_g42 < _g32) {
			var j = _g42++;
			fillPixel(i1,j);
		}
	}
	var _g23 = 0;
	var _g13 = worldSpriteData.data.length / 4 | 0;
	while(_g23 < _g13) {
		var i2 = _g23++;
		var x3 = i2 % width;
		var y3 = Math.floor(i2 / width);
		if(worldSpriteData.data[i2 * 4 + 3] == 255 && (x3 == 0 || y3 == 0 || x3 == width - 1 || y3 == height - 1 || worldSpriteData.data[i2 * 4 - 1] == 0 || worldSpriteData.data[i2 * 4 + 7] == 0 || worldSpriteData.data[((y3 - 1) * width + x3) * 4 + 3] == 0 || worldSpriteData.data[((y3 + 1) * width + x3) * 4 + 3] == 0)) {
			worldSpriteData.data[i2 * 4] = outlineColor >> 16 & 255;
			worldSpriteData.data[i2 * 4 + 1] = outlineColor >> 8 & 255;
			worldSpriteData.data[i2 * 4 + 2] = outlineColor & 255;
		}
	}
	ctx.putImageData(worldSpriteData,0,0);
	return { sprite : new PIXI.Sprite(PIXI.Texture.fromCanvas(spriteCanvas)), mask : collisionMask};
};
var gui_ActivableButton = function() { };
$hxClasses["gui.ActivableButton"] = gui_ActivableButton;
gui_ActivableButton.__name__ = ["gui","ActivableButton"];
gui_ActivableButton.create = function(gui1,stage,parent,onClick,isActive,text) {
	var button1 = new gui_ContainerButton(gui1,stage,parent,onClick,isActive,null,"spr_button_activable");
	var extraSpacing = gui1.game.isMobile ? 3 : 0;
	button1.container.padding.top = 3 + extraSpacing;
	button1.container.padding.left = 3;
	button1.container.padding.right = 3;
	button1.container.padding.bottom = extraSpacing;
	if(text != null) {
		button1.container.addChild(new gui_TextElement(button1.container,gui1.innerWindowStage,text));
	}
	button1.container.fillSecondarySize = true;
	return button1;
};
var gui_AdRewardWindow = function() { };
$hxClasses["gui.AdRewardWindow"] = gui_AdRewardWindow;
gui_AdRewardWindow.__name__ = ["gui","AdRewardWindow"];
gui_AdRewardWindow.create = function(city,gui1,stage,thisWindow,extraReward) {
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Thank You!",null,"Arial16"));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"All resource production is now doubled for a while! Additionally, you got the following bonus reward:",null,"Arial"));
	thisWindow.addChild(new gui_GUISpacing(thisWindow,new common_Point(2,6)));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,extraReward.text,null,"Arial15"));
	var rewardContainer = new gui_MaterialsDisplay(extraReward.materials);
	var rewardHolder = new gui_ContainerHolder(city.gui.windowInner,city.gui.innerWindowStage,rewardContainer);
	thisWindow.addChild(rewardHolder);
	gui1.windowAddBottomButtons();
};
var gui_IGUIElement = function() { };
$hxClasses["gui.IGUIElement"] = gui_IGUIElement;
gui_IGUIElement.__name__ = ["gui","IGUIElement"];
gui_IGUIElement.prototype = {
	__class__: gui_IGUIElement
};
var gui_Scrollable = function(game,outerStage,parent,position,width,height,origin) {
	this.destroyed = false;
	this.maskRect = null;
	this.game = game;
	this.outerStage = outerStage;
	this.parent = parent;
	this.stage = new PIXI.Container();
	outerStage.addChild(this.stage);
	this.scrollPosition = new common_Point(0,0);
	this.rect = new common_Rectangle(0,0,width,height);
	this.origin = origin;
	this.updatePosition(position);
	this.updateSize();
	this.dragDir = new common_FPoint(0,0);
	this.dragDirRemaining = new common_FPoint(0,0);
	this.remainingStepDragDir = new common_FPoint(0,0);
};
$hxClasses["gui.Scrollable"] = gui_Scrollable;
gui_Scrollable.__name__ = ["gui","Scrollable"];
gui_Scrollable.__interfaces__ = [gui_IGUIElement];
gui_Scrollable.prototype = {
	get_innerHeight: function() {
		return this.child.rect.height;
	}
	,setChild: function(child) {
		this.child = child;
		this.updateSize();
	}
	,updateSize: function() {
		if(this.child != null) {
			var val = this.scrollPosition.y;
			var val2 = this.get_innerHeight() - this.rect.height;
			var maxVal = val2 > 0 ? val2 : 0;
			this.scrollPosition.y = val < 0 ? 0 : val > maxVal ? maxVal : val;
		}
		if(this.parent != null) {
			this.parent.updateSize();
		} else {
			this.updatePosition(this.position);
		}
	}
	,updateScrollPosition: function(newPosition) {
		this.scrollPosition = newPosition;
		this.updateSize();
	}
	,updateStageMask: function() {
		if(this.child == null || this.child.rect.width <= this.rect.width && this.get_innerHeight() <= this.rect.height) {
			if(this.stage.mask != null) {
				this.stage.mask.destroy();
			}
			this.stage.mask = null;
			this.maskRect = null;
			return;
		}
		if(this.maskRect == null || (this.maskRect.x != this.rect.x || this.maskRect.y != this.rect.y || this.maskRect.width != this.rect.width || this.maskRect.height != this.rect.height)) {
			this.maskRect = this.rect.clone();
			if(this.stage.mask != null) {
				this.stage.mask.destroy();
			}
			var mask = new PIXI.Graphics();
			mask.beginFill(0);
			mask.alpha = 0;
			this.stage.addChild(mask);
			mask.drawRect(this.rect.x,this.rect.y,this.rect.width,this.rect.height);
			mask.endFill();
			this.stage.mask = mask;
		}
	}
	,updatePosition: function(newPosition) {
		this.position = newPosition;
		var _this = this.rect;
		var newPos_y;
		var newPos_x;
		var _this1 = this.position;
		var otherPoint_y;
		var otherPoint_x = this.origin.x * this.rect.width | 0;
		otherPoint_y = this.origin.y * this.rect.height | 0;
		newPos_x = _this1.x - otherPoint_x;
		newPos_y = _this1.y - otherPoint_y;
		new common_Point(_this.x = newPos_x,_this.y = newPos_y);
		if(this.child != null) {
			var _this_y;
			var _this_x;
			var _this2 = this.rect;
			_this_x = _this2.x;
			_this_y = _this2.y;
			var otherPoint = this.scrollPosition;
			this.child.updatePosition(new common_Point(_this_x - otherPoint.x,_this_y - otherPoint.y));
		}
		this.updateStageMask();
	}
	,destroy: function() {
		if(this.child != null) {
			this.child.destroy();
		}
		this.stage.destroy(true);
		this.destroyed = true;
	}
	,claimMouseForScroll: function(mouse,needsPress) {
		if(needsPress == null) {
			needsPress = true;
		}
		var _gthis = this;
		if(mouse.hasNoClaim()) {
			this.mousePreviousY = mouse.position.y;
			mouse.strongClaimMouse("scrollWindow",function() {
				if(_gthis.destroyed) {
					return;
				}
				var scrollAmount = _gthis.mousePreviousY - mouse.position.y;
				_gthis.updateScrollPosition(new common_Point(_gthis.scrollPosition.x,_gthis.scrollPosition.y + scrollAmount));
				_gthis.mousePreviousY = mouse.position.y;
			},needsPress);
			return true;
		}
		return false;
	}
	,handleMouse: function(mouse) {
		if(this.rect.contains(mouse.position)) {
			this.handleScrollWheel(mouse);
			if(mouse.isTouch) {
				if(mouse.weakClaimForScroll(this)) {
					if(this.claimMouseForScroll(mouse,false)) {
						return true;
					}
				}
			}
			if(this.child != null) {
				if(this.child.handleMouse(mouse)) {
					return true;
				}
			}
			if(mouse.isTouch) {
				if(this.claimMouseForScroll(mouse)) {
					return true;
				}
			}
			mouse.claimMouse(this);
			return true;
		}
		return false;
	}
	,handleScrollWheel: function(mouse) {
		var maxScroll = this.rect.height - 10;
		if(mouse.scrollBarMovement != 0) {
			var val = Math.round(mouse.scrollBarMovement);
			var minVal = -maxScroll;
			this.updateScrollPosition(new common_Point(this.scrollPosition.x,this.scrollPosition.y + (val < minVal ? minVal : val > maxScroll ? maxScroll : val)));
		}
		if(mouse.scrollBarMovementPages != 0) {
			var val1 = Math.round(this.rect.height * mouse.scrollBarMovementPages);
			var minVal1 = -maxScroll;
			this.updateScrollPosition(new common_Point(this.scrollPosition.x,this.scrollPosition.y + (val1 < minVal1 ? minVal1 : val1 > maxScroll ? maxScroll : val1)));
		}
	}
	,update: function() {
		if(this.child != null) {
			this.child.update();
		}
		if(this.game.mouse.pressed || this.dragDir.get_length() < 0.5) {
			this.dragDir.x = 0;
			this.dragDir.y = 0;
			this.remainingStepDragDir.x = 0;
			this.remainingStepDragDir.y = 0;
		} else if(!this.game.mouse.hasSpecificClaim("scrollWindow")) {
			var dragSpeedTimeout = this.game.mouse.isTouch ? 0.933 : 0.8;
			this.dragDir.x *= dragSpeedTimeout;
			this.dragDir.y *= dragSpeedTimeout;
			var stepDragDir_y;
			var stepDragDir_x = this.dragDir.x + this.dragDirRemaining.x;
			stepDragDir_y = this.dragDir.y + this.dragDirRemaining.y;
			this.dragDirRemaining.x += this.dragDir.x - stepDragDir_x;
			this.dragDirRemaining.y += this.dragDir.y - stepDragDir_y;
			this.remainingStepDragDir.x += stepDragDir_x;
			this.remainingStepDragDir.y += stepDragDir_y;
			var remStepDragDirToUse = Math.floor(this.remainingStepDragDir.y);
			this.updateScrollPosition(new common_Point(this.scrollPosition.x,this.scrollPosition.y + remStepDragDirToUse));
			this.remainingStepDragDir.y -= remStepDragDirToUse;
		}
	}
	,__class__: gui_Scrollable
};
var gui_AutoScrollable = function(game,outerStage,parent,position,width,height,origin) {
	this.maxWidth = width;
	this.maxHeight = height;
	gui_Scrollable.call(this,game,outerStage,parent,position,width,height,origin);
};
$hxClasses["gui.AutoScrollable"] = gui_AutoScrollable;
gui_AutoScrollable.__name__ = ["gui","AutoScrollable"];
gui_AutoScrollable.__super__ = gui_Scrollable;
gui_AutoScrollable.prototype = $extend(gui_Scrollable.prototype,{
	updateSize: function() {
		if(this.child != null) {
			var val1 = this.maxWidth;
			var val2 = this.child.rect.width;
			this.rect.width = val2 < val1 ? val2 : val1;
			var val11 = this.maxHeight;
			var val21 = this.child.rect.height;
			this.rect.height = val21 < val11 ? val21 : val11;
		}
		gui_Scrollable.prototype.updateSize.call(this);
	}
	,__class__: gui_AutoScrollable
});
var gui_BirthControlWindow = function() { };
$hxClasses["gui.BirthControlWindow"] = gui_BirthControlWindow;
gui_BirthControlWindow.__name__ = ["gui","BirthControlWindow"];
gui_BirthControlWindow.create = function(city,gui1,stage,thisWindow) {
	gui1.windowAddTitleText("Birth Control");
	var currentType = city.simulation.babyMaker.mode;
	gui_UpgradeWindowParts.createActivatableButton(gui1,currentType == 1,function() {
		city.simulation.babyMaker.mode = 1;
		city.simulation.babyMaker.targetPopAmount = city.simulation.citizens.length;
		gui1.reloadWindow();
	},"Greatly Discourage Getting Children","The population will roughly stabilize.");
	gui_UpgradeWindowParts.createActivatableButton(gui1,currentType == 2,function() {
		city.simulation.babyMaker.mode = 2;
		gui1.reloadWindow();
	},"Encourage Contraception","The population will grow slowly.");
	gui_UpgradeWindowParts.createActivatableButton(gui1,currentType == 0,function() {
		city.simulation.babyMaker.mode = 0;
		gui1.reloadWindow();
	},"No Special Policy","Babies will be born at the normal rate.");
	gui_UpgradeWindowParts.createActivatableButton(gui1,currentType == 3,function() {
		city.simulation.babyMaker.mode = 3;
		gui1.reloadWindow();
	},"Encourage Parenthood","More babies will be born, as long as the happiness is high enough.");
	gui1.windowAddBottomButtons();
};
var gui_BuildingButtons = function(gui1,city) {
	this.wasLargeMobile = false;
	this.previouslyShownCategory = "";
	this.mobileStopBuildingOrManagingButton = null;
	this.activateBuildModeButton = null;
	this.buildingModeEnabled = false;
	this.shownManagementOptions = false;
	this.shownBuildingModes = false;
	this.creatableCityElementsThatNeededAttention = [];
	this.categoryButtonPosition = new haxe_ds_StringMap();
	this.gui = gui1;
	this.city = city;
	this.createBuildingButtons();
	this.shownCategory = "";
	this.buttonsByCategory = new haxe_ds_StringMap();
	this.buttonsInCategory = new haxe_ds_StringMap();
	this.wasLargeMobile = this.gui.game.isLargeMobile;
};
$hxClasses["gui.BuildingButtons"] = gui_BuildingButtons;
gui_BuildingButtons.__name__ = ["gui","BuildingButtons"];
gui_BuildingButtons.prototype = {
	resize: function() {
		this.buildingButtons.updatePosition(new common_Point(0,this.gui.game.rect.height));
		this.allBuildingModeButtons.updatePosition(new common_Point(0,this.gui.game.rect.height - 20 - 2));
		this.allManagementOptionsButtons.updatePosition(new common_Point(0,this.gui.game.rect.height - 20 - 2));
		if(this.gui.game.isMobile) {
			if(this.gui.game.isLargeMobile != this.wasLargeMobile) {
				if(this.wasLargeMobile) {
					this.buildingModeEnabled = this.city.builder != null || this.shownCategory != "" || this.shownBuildingModes;
				} else {
					if(this.buildingModeEnabled) {
						this.mobileStopBuildingOrManagingButton = null;
						this.gui.createCityInfo();
					}
					this.buildingModeEnabled = false;
				}
				this.refreshCategoryBuildingsShown();
				this.wasLargeMobile = this.gui.game.isLargeMobile;
			}
		}
	}
	,update: function(timeMod) {
		this.buildingButtons.update();
		this.allBuildingModeButtons.update();
		this.allManagementOptionsButtons.update();
		this.updateGoalAttentions();
	}
	,handleMouse: function(mouse) {
		if(this.buildingButtons.handleMouse(mouse)) {
			return true;
		}
		if(this.allBuildingModeButtons.handleMouse(mouse)) {
			return true;
		}
		if(this.allManagementOptionsButtons.handleMouse(mouse)) {
			return true;
		}
		return false;
	}
	,activateLoserState: function() {
		this.buildingButtons.clear();
		this.allBuildingModeButtons.clear();
		this.allManagementOptionsButtons.clear();
	}
	,createBuildingButtons: function() {
		this.buildingButtons = new gui_GUIContainer(this.gui,this.gui.stage,null,new common_Point(0,this.gui.game.rect.height),new common_FPoint(0,1));
		this.categoryButtons = new gui_GUIContainer(this.gui,this.gui.stage,this.buildingButtons);
		this.allBuildingModeButtons = new gui_GUIContainer(this.gui,this.gui.stage,null,new common_Point(0,this.gui.game.rect.height - 20 - 2),new common_FPoint(0,1));
		this.allManagementOptionsButtons = new gui_GUIContainer(this.gui,this.gui.stage,null,new common_Point(0,this.gui.game.rect.height - 20 - 2),new common_FPoint(0,1));
		this.buildingInCategoryButtons = new gui_GUIContainer(this.gui,this.gui.stage,this.buildingButtons);
		this.buildingButtons.direction = gui_GUIContainerDirection.Vertical;
		this.buildingInCategoryButtons.direction = this.gui.game.isMobile ? gui_GUIContainerDirection.Vertical : gui_GUIContainerDirection.Horizontal;
		this.buildingInCategoryButtonsCol = null;
		this.buildingInCategoryButtonsColAmount = 0;
		this.allBuildingModeButtons.direction = this.gui.game.isMobile ? gui_GUIContainerDirection.Horizontal : gui_GUIContainerDirection.Vertical;
		this.allManagementOptionsButtons.direction = this.gui.game.isMobile ? gui_GUIContainerDirection.Horizontal : gui_GUIContainerDirection.Vertical;
		this.buildingButtons.addChild(this.buildingInCategoryButtons);
		this.buildingButtons.addChild(this.categoryButtons);
		if(this.gui.game.isMobile && !this.gui.game.isLargeMobile) {
			this.createMobileBuildButton();
		} else {
			this.createBuildingCategoryButtons();
		}
	}
	,showTutorialArrows1: function(overlayElements,windowClosed,gameHelpStage) {
		var _gthis = this;
		var firstBuildArrow = new gui_HelpArrow(this.gui,gameHelpStage,function() {
			return _gthis.categoryButtons.children[_gthis.buildingModeEnabled && !_gthis.gui.game.isLargeMobile ? 1 : 0];
		},function() {
			if(windowClosed() && _gthis.city.builder == null) {
				return _gthis.shownCategory == "";
			} else {
				return false;
			}
		});
		if(!this.gui.game.isMobile) {
			firstBuildArrow.useBigMovement();
		}
		overlayElements.push(firstBuildArrow);
		var secondBuildArrow = new gui_HelpArrow(this.gui,gameHelpStage,function() {
			var currentCategoryButtons = _gthis.buildingInCategoryButtons.children[0];
			return currentCategoryButtons.children[currentCategoryButtons.children.length - 1];
		},function() {
			if(windowClosed() && _gthis.city.builder == null) {
				return _gthis.shownCategory != "";
			} else {
				return false;
			}
		},gui_HelpArrowDirection.Left);
		overlayElements.push(secondBuildArrow);
	}
	,showTutorialArrows101: function(overlayElements,shouldShow,gameHelpStage) {
		var _gthis = this;
		var helpArrow1 = new gui_HelpArrow(this.gui,gameHelpStage,function() {
			return _gthis.categoryButtons.children[_gthis.buildingModeEnabled && !_gthis.gui.game.isLargeMobile ? 1 : 0];
		},function() {
			if(shouldShow() && _gthis.city.builder == null) {
				return _gthis.shownCategory == "";
			} else {
				return false;
			}
		});
		overlayElements.push(helpArrow1);
		var helpArrow2 = new gui_HelpArrow(this.gui,gameHelpStage,function() {
			var currentCategoryButtons = _gthis.buildingInCategoryButtons.children[0];
			return currentCategoryButtons.children[currentCategoryButtons.direction == gui_GUIContainerDirection.Horizontal ? currentCategoryButtons.children.length - 1 : currentCategoryButtons.children.length - 2];
		},function() {
			if(shouldShow() && _gthis.city.builder == null) {
				return _gthis.shownCategory != "";
			} else {
				return false;
			}
		},gui_HelpArrowDirection.Left);
		overlayElements.push(helpArrow2);
		var text = "You have enough wood. Let's build the stone mine!";
		helpArrow1.addText(text);
		helpArrow2.addText(text);
	}
	,showTutorialArrows2: function(overlayElements,everHadPrio,gameHelpStage,windowClosed) {
		var _gthis = this;
		overlayElements.push(new gui_HelpArrow(this.gui,gameHelpStage,function() {
			return _gthis.mobileStopBuildingOrManagingButton;
		},function() {
			if(windowClosed() && gui_WorkerDistributionWindow.tutorialStoneMineUpButton == null) {
				return !everHadPrio();
			} else {
				return false;
			}
		},gui_HelpArrowDirection.Down));
	}
	,createMobileBuildButton: function() {
		var _gthis = this;
		var createMobileStopBuildingOrManagingButton;
		var activateMobileBuild = function(wasAlreadyOpen) {
			if(wasAlreadyOpen == null) {
				wasAlreadyOpen = false;
			}
			_gthis.buildingModeEnabled = true;
			_gthis.activateBuildModeButton = null;
			if(!wasAlreadyOpen) {
				_gthis.gui.closeWindow();
			}
			_gthis.gui.hideCityInfo();
			_gthis.categoryButtons.clear();
			createMobileStopBuildingOrManagingButton();
			_gthis.createBuildingCategoryButtons();
			if(_gthis.previouslyShownCategory != "") {
				var _gthis1 = _gthis.previouslyShownCategory;
				var key = _gthis.previouslyShownCategory;
				var _this = _gthis.categoryButtonPosition;
				var activateMobileBuild1 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				_gthis.showOrHideBuildingsOfCategory(_gthis1,activateMobileBuild1,false,true,true);
				_gthis.previouslyShownCategory = "";
			}
		};
		var createMobileBuildButtonInternal = function() {
			var mobileBuildButton = new gui_ImageButton(_gthis.gui,_gthis.gui.stage,_gthis.categoryButtons,function() {
				activateMobileBuild();
			},Resources.getTexture("spr_icon_build"),function() {
				return false;
			},function() {
				_gthis.gui.tooltip.setText(mobileBuildButton,"Build");
			});
			_gthis.categoryButtons.addChild(mobileBuildButton);
			_gthis.activateBuildModeButton = mobileBuildButton;
		};
		createMobileStopBuildingOrManagingButton = function() {
			var _gthis2 = _gthis.gui;
			var _gthis3 = _gthis.gui.stage;
			var _gthis4 = _gthis.categoryButtons;
			var createMobileStopBuildingOrManagingButton1 = Resources.getTexture("spr_arrow_back");
			_gthis.mobileStopBuildingOrManagingButton = new gui_ImageButton(_gthis2,_gthis3,_gthis4,function() {
				_gthis.mobileStopBuildingOrManaging();
			},createMobileStopBuildingOrManagingButton1,function() {
				return false;
			},function() {
				_gthis.gui.tooltip.setText(_gthis.mobileStopBuildingOrManagingButton,"Back");
			});
			_gthis.categoryButtons.addChild(_gthis.mobileStopBuildingOrManagingButton);
		};
		if(this.buildingModeEnabled) {
			activateMobileBuild(true);
			this.shownManagementOptions = false;
			return;
		}
		var activateMobileManagement = function(wasAlreadyOpen1) {
			if(wasAlreadyOpen1 == null) {
				wasAlreadyOpen1 = false;
			}
			_gthis.shownManagementOptions = true;
			_gthis.activateBuildModeButton = null;
			if(!wasAlreadyOpen1) {
				_gthis.gui.closeWindow();
			}
			_gthis.gui.hideCityInfo();
			_gthis.categoryButtons.clear();
			createMobileStopBuildingOrManagingButton();
			_gthis.showManagementOptions(_gthis.categoryButtons);
		};
		var createMobileManageButtonInternal = function() {
			var mobileManageButton = new gui_ImageButton(_gthis.gui,_gthis.gui.stage,_gthis.categoryButtons,function() {
				activateMobileManagement();
			},Resources.getTexture("spr_icon_management"),function() {
				return false;
			},function() {
				_gthis.gui.tooltip.setText(mobileManageButton,"Management");
			});
			_gthis.categoryButtons.addChild(mobileManageButton);
		};
		if(this.shownManagementOptions) {
			activateMobileManagement(true);
			this.buildingModeEnabled = false;
			return;
		}
		createMobileBuildButtonInternal();
		if(this.city.progress.unlocks.unlockedManagementOptions) {
			createMobileManageButtonInternal();
		}
	}
	,mobileStopBuildingOrManaging: function() {
		if(!this.buildingModeEnabled && !this.shownManagementOptions) {
			return;
		}
		this.mobileStopBuildingOrManagingButton = null;
		this.buildingModeEnabled = false;
		this.shownManagementOptions = false;
		this.gui.createCityInfo();
		this.categoryButtons.clear();
		if(this.shownCategory != "") {
			this.previouslyShownCategory = this.shownCategory;
			var key = this.shownCategory;
			var _this = this.categoryButtonPosition;
			this.showOrHideBuildingsOfCategory(this.shownCategory,__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key],false,true,true);
		}
		this.closeExtraBuildingModes();
		this.createMobileBuildButton();
	}
	,createBuildingCategoryButtons: function() {
		var _gthis = this;
		var totalWidth = 0;
		this.buttonsByCategory = new haxe_ds_StringMap();
		this.buttonsInCategory = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Resources.buildingCategoriesInfo;
		while(_g < _g1.length) {
			var category = [_g1[_g]];
			++_g;
			var anyUnlocked = false;
			var _g2 = 0;
			var _g3 = this.city.progress.resources.buildingInfoArray;
			while(_g2 < _g3.length) {
				var building = _g3[_g2];
				++_g2;
				var classToBuild = Type.resolveClass("buildings." + building.className);
				var unlockState = this.city.progress.unlocks.getUnlockState(classToBuild);
				if(building.category == category[0].name && (unlockState == progress_UnlockState.Unlocked || unlockState == progress_UnlockState.Researched || unlockState == progress_UnlockState.Createable)) {
					anyUnlocked = true;
				}
			}
			var _g21 = 0;
			var _g31 = Resources.decorationsInfo;
			while(_g21 < _g31.length) {
				var decoration = _g31[_g21];
				++_g21;
				if(decoration.category == category[0].name && this.city.progress.unlocks.unlockedDecorationTab) {
					anyUnlocked = true;
				}
			}
			var _g22 = 0;
			var _g32 = Resources.worldResourcesInfo;
			while(_g22 < _g32.length) {
				var worldInfo = _g32[_g22];
				++_g22;
				if(worldInfo.category == category[0].name && this.city.progress.unlocks.unlockedDecorationTab) {
					anyUnlocked = true;
				}
			}
			if(anyUnlocked) {
				var categoryButton = [];
				var totalWidthNow = [totalWidth];
				var tmp = this.gui;
				var tmp1 = this.gui.stage;
				var tmp2 = this.categoryButtons;
				var tmp3 = (function(totalWidthNow1,category1) {
					return function() {
						_gthis.showOrHideBuildingsOfCategory(category1[0].name,totalWidthNow1[0]);
						_gthis.updateGoalAttentions();
					};
				})(totalWidthNow,category);
				var tmp4 = Resources.getTexture(category[0].image);
				var tmp5 = (function(category2) {
					return function() {
						return _gthis.shownCategory == category2[0].name;
					};
				})(category);
				var tmp6 = (function(categoryButton1,category3) {
					return function() {
						_gthis.gui.tooltip.setText(categoryButton1[0],category3[0].description,category3[0].name);
					};
				})(categoryButton,category);
				categoryButton[0] = new gui_ImageButton(tmp,tmp1,tmp2,tmp3,tmp4,tmp5,tmp6,null,"spr_transparentbutton");
				this.categoryButtons.addChild(categoryButton[0]);
				var k = category[0].name;
				var _this = this.categoryButtonPosition;
				if(__map_reserved[k] != null) {
					_this.setReserved(k,totalWidth);
				} else {
					_this.h[k] = totalWidth;
				}
				var k1 = category[0].name;
				var _this1 = this.buttonsByCategory;
				if(__map_reserved[k1] != null) {
					_this1.setReserved(k1,categoryButton[0]);
				} else {
					_this1.h[k1] = categoryButton[0];
				}
				totalWidth += 22;
				if(this.city.progress.unlocks.getShouldNotifyForCategoryUnlock(category[0].name)) {
					if(this.shownCategory == category[0].name) {
						this.city.progress.unlocks.stopNotifyCategoryUnlock(category[0].name);
					} else {
						var tmp7 = (function(a1,f) {
							return function() {
								f[0](a1[0]);
							};
						})([category[0].name],[($_=this.city.progress.unlocks,$bind($_,$_.stopNotifyCategoryUnlock))]);
						categoryButton[0].notify(false,tmp7);
					}
				}
			}
		}
		if(this.city.progress.unlocks.unlockedBuildingModeButton) {
			this.addBuildingModeButtons();
		}
		if(!this.gui.game.isMobile || this.gui.game.isLargeMobile) {
			if(this.city.progress.unlocks.unlockedManagementOptions) {
				this.addManagementButtons();
			}
		}
	}
	,showOrHideBuildingsOfCategory: function(category,atWidth,neverHide,destroyBuilder,keepExtraBuildingModesOpen) {
		if(keepExtraBuildingModesOpen == null) {
			keepExtraBuildingModesOpen = false;
		}
		if(destroyBuilder == null) {
			destroyBuilder = true;
		}
		if(neverHide == null) {
			neverHide = false;
		}
		this.buildingInCategoryButtons.clear();
		if(!keepExtraBuildingModesOpen) {
			this.closeExtraBuildingModes();
		}
		if(!keepExtraBuildingModesOpen && this.shownManagementOptions) {
			this.closeManagementOptions();
		}
		this.buildingInCategoryButtonsCol = null;
		this.buildingInCategoryButtonsColAmount = 0;
		this.buildingInCategoryButtonsNumberOfCols = 0;
		this.buttonsInCategory = new haxe_ds_StringMap();
		if(destroyBuilder && this.city.builder != null) {
			this.city.builder.cancel();
		}
		if(this.shownCategory == category && !neverHide) {
			this.shownCategory = "";
		} else {
			this.shownCategory = category;
			if(atWidth != null && !this.gui.game.isMobile) {
				this.buildingInCategoryButtons.padding.left = atWidth;
			}
			var _g = 0;
			var _g1 = this.city.progress.resources.buildingInfoArray;
			while(_g < _g1.length) {
				var building = _g1[_g];
				++_g;
				var classToBuild = Type.resolveClass("buildings." + building.className);
				var unlockState = this.city.progress.unlocks.getUnlockState(classToBuild);
				var notificationState = this.city.progress.unlocks.getShouldNotifyForUnlock(classToBuild);
				if(building.category == category && (unlockState == progress_UnlockState.Unlocked || unlockState == progress_UnlockState.Researched || unlockState == progress_UnlockState.Createable)) {
					this.addBuildingButton(classToBuild,unlockState,notificationState);
				}
			}
			var _g2 = 0;
			var _g11 = Resources.decorationsInfo;
			while(_g2 < _g11.length) {
				var decoration = _g11[_g2];
				++_g2;
				if(decoration.category == category) {
					this.addDecorationButton(decoration);
				}
			}
			var _g3 = 0;
			var _g12 = Resources.worldResourcesInfo;
			while(_g3 < _g12.length) {
				var worldInfo = _g12[_g3];
				++_g3;
				if(worldInfo.category == category) {
					this.addWorldResourceButton(worldInfo);
				}
			}
			var val2 = this.buildingInCategoryButtons.padding.left + (11. | 0) - (11. | 0) * this.buildingInCategoryButtonsNumberOfCols;
			this.buildingInCategoryButtons.padding.left = val2 > 0 ? val2 : 0;
			this.buildingInCategoryButtons.updateSize();
		}
	}
	,refreshCategoryBuildingsShown: function() {
		this.buildingButtons.destroy();
		this.allBuildingModeButtons.destroy();
		this.allManagementOptionsButtons.destroy();
		this.buttonsByCategory = new haxe_ds_StringMap();
		this.createBuildingButtons();
		if(this.shownCategory != "") {
			var key = this.shownCategory;
			var _this = this.categoryButtonPosition;
			this.showOrHideBuildingsOfCategory(this.shownCategory,__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key],true,false,true);
		}
		this.updateGoalAttentions();
	}
	,makeSpaceForBuildingButton: function() {
		var tooManyBuildingsInCol;
		if(this.gui.game.isMobile) {
			var val2 = (this.gui.game.rect.width - 40) / 20 | 0;
			tooManyBuildingsInCol = this.buildingInCategoryButtonsColAmount >= (val2 > 2 ? val2 : 2);
		} else {
			var val21 = (this.gui.game.rect.height - 60) / 20 | 0;
			tooManyBuildingsInCol = this.buildingInCategoryButtonsColAmount >= (val21 > 2 ? val21 : 2);
		}
		if(this.buildingInCategoryButtonsCol == null || tooManyBuildingsInCol) {
			this.buildingInCategoryButtonsColAmount = 0;
			this.buildingInCategoryButtonsCol = new gui_GUIContainer(this.gui,this.gui.stage,this.buildingInCategoryButtons);
			if(this.gui.game.isMobile) {
				this.buildingInCategoryButtonsCol.direction = gui_GUIContainerDirection.Horizontal;
				this.buildingInCategoryButtonsCol.alignment = gui_GUIContainerAlignment.LeftOrTop;
				this.buildingInCategoryButtons.insertChild(this.buildingInCategoryButtonsCol,0);
			} else {
				this.buildingInCategoryButtonsCol.direction = gui_GUIContainerDirection.Vertical;
				this.buildingInCategoryButtonsCol.alignment = gui_GUIContainerAlignment.LeftOrTop;
				this.buildingInCategoryButtons.addChild(this.buildingInCategoryButtonsCol);
			}
			this.buildingInCategoryButtonsNumberOfCols += 1;
		}
		this.buildingInCategoryButtonsColAmount += 1;
	}
	,addBuildingButton: function(buildingType,unlockState,notificationState) {
		var _gthis = this;
		this.makeSpaceForBuildingButton();
		var sprName = Reflect.field(buildingType,"spriteName");
		var typeClassName = Type.getClassName(buildingType);
		var _this = this.city.progress.resources.buildingInfo;
		var buildingInfo = __map_reserved[typeClassName] != null ? _this.getReserved(typeClassName) : _this.h[typeClassName];
		var buildingButton;
		var buildingNeedsUnlock = buildingInfo.showUnlockHint != null && unlockState == progress_UnlockState.Unlocked;
		buildingButton = new gui_ImageButton(this.gui,this.gui.stage,this.buildingInCategoryButtonsCol,function() {
			if(buildingNeedsUnlock) {
				if(_gthis.city.builder != null) {
					_gthis.city.builder.cancel();
				}
				_gthis.gui.showSimpleWindow(buildingInfo.showUnlockHint,"",true,true);
				return;
			}
			if(_gthis.gui.get_keyboard().down[17]) {
				var foundBuilding = null;
				var leastUpgrades = 10000;
				var _g = 0;
				var _g1 = _gthis.city.permanents;
				while(_g < _g1.length) {
					var pm = _g1[_g];
					++_g;
					if(pm.isBuilding) {
						var thisBuilding = pm;
						if(thisBuilding["is"](buildingType)) {
							if(thisBuilding.upgrades.length < leastUpgrades) {
								leastUpgrades = thisBuilding.upgrades.length;
								foundBuilding = thisBuilding;
							}
						}
					}
				}
				if(foundBuilding == null) {
					_gthis.city.createOrRemoveBuilder(buildingType);
				} else {
					foundBuilding.showWindow();
				}
			} else {
				_gthis.city.createOrRemoveBuilder(buildingType);
			}
		},Resources.getTexture(buildingNeedsUnlock ? "spr_lockedbuilding@0,0,20,20" : "" + sprName + "@0,0,20,20"),function() {
			if(_gthis.city.builder != null) {
				return _gthis.city.builder.get_buildingToBuild() == buildingType;
			} else {
				return false;
			}
		},function() {
			if(buildingNeedsUnlock) {
				_gthis.gui.tooltip.setText(buildingButton,buildingInfo.showUnlockHint);
				return;
			}
			if(!_gthis.gui.get_keyboard().down[17]) {
				_gthis.showBuildingTooltip(buildingInfo,buildingType,buildingButton);
			} else {
				var highlightTextures = Resources.getTexturesByWidth("spr_hoverhint",22);
				_gthis.city.setHoverHightlight(function(pm1) {
					if(pm1["is"](buildingType)) {
						var thisBuilding1 = pm1;
						var anyUpgrade = false;
						var _g2 = 0;
						var _g11 = thisBuilding1.get_possibleUpgrades();
						while(_g2 < _g11.length) {
							var ug = [_g11[_g2]];
							++_g2;
							if(_gthis.city.progress.unlocks.getUnlockState(ug[0]) == progress_UnlockState.Locked) {
								continue;
							}
							var this1 = Resources.buildingUpgradesInfo;
							var key = Type.getClassName(ug[0]);
							var _this1 = this1;
							var info = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
							var materialsToPay = Materials.fromBuildingUpgradesInfo(info);
							if(!common_ArrayExtensions.any(thisBuilding1.upgrades,(function(ug1) {
								return function(bu) {
									return (bu == null ? null : js_Boot.getClass(bu)) == ug1[0];
								};
							})(ug))) {
								anyUpgrade = true;
								if(_gthis.city.materials.canAfford(materialsToPay)) {
									return highlightTextures[2];
								}
							}
						}
						var _g3 = 0;
						var _g12 = thisBuilding1.get_possibleCityUpgrades();
						while(_g3 < _g12.length) {
							var cu = [_g12[_g3]];
							++_g3;
							if(_gthis.city.progress.unlocks.getUnlockState(cu[0]) == progress_UnlockState.Locked) {
								continue;
							}
							var this2 = Resources.cityUpgradesInfo;
							var key1 = Type.getClassName(cu[0]);
							var _this2 = this2;
							var info1 = __map_reserved[key1] != null ? _this2.getReserved(key1) : _this2.h[key1];
							var materialsToPay1 = Materials.fromCityUpgradesInfo(info1);
							if(!common_ArrayExtensions.any(_gthis.city.upgrades.upgrades,(function(cu1) {
								return function(thisCU) {
									return (thisCU == null ? null : js_Boot.getClass(thisCU)) == cu1[0];
								};
							})(cu))) {
								anyUpgrade = true;
								if(_gthis.city.materials.canAfford(materialsToPay1)) {
									return highlightTextures[2];
								}
							}
						}
						if(anyUpgrade) {
							return highlightTextures[1];
						} else {
							return highlightTextures[0];
						}
					}
					_gthis.city.progress.resetCtrlToHightlightHint();
					return null;
				},6735360);
			}
		},Resources.getTexture(buildingNeedsUnlock ? "spr_lockedbuilding@22,0,20,20" : buildingInfo.buttonBack == null ? "" + sprName + "@44,0,20,20" : buildingInfo.buttonBack));
		if(notificationState) {
			var f = ($_=this.city.progress.unlocks,$bind($_,$_.stopNotifyForUnlock));
			var a1 = buildingType;
			var tmp = function() {
				f(a1);
			};
			buildingButton.notify(true,tmp);
		}
		var _this3 = this.buttonsInCategory;
		if(__map_reserved[typeClassName] != null) {
			_this3.setReserved(typeClassName,buildingButton);
		} else {
			_this3.h[typeClassName] = buildingButton;
		}
		if(this.gui.game.isMobile) {
			this.buildingInCategoryButtonsCol.addChild(buildingButton);
		} else {
			this.buildingInCategoryButtonsCol.insertChild(buildingButton,0);
		}
	}
	,showBuildingTooltip: function(buildingInfo,buildingType,tooltipContext,continousDisplay) {
		if(continousDisplay == null) {
			continousDisplay = false;
		}
		var cost = Materials.fromBuildingInfo(buildingInfo);
		if(this.city.progress.unlocks.getUnlockState(buildingType) == progress_UnlockState.Researched) {
			cost.knowledge = 0;
		}
		var extraInfo = [];
		var extraInfo2 = buildingInfo.tooltipBottomIconInfo != null ? buildingInfo.tooltipBottomIconInfo.map(function(ei) {
			return { text : ei.text, texture : Resources.getTexture(ei.texture)};
		}) : [];
		if(buildingInfo.jobs != null && buildingInfo.jobs != 0) {
			extraInfo.push({ texture : Resources.getTexture("spr_work"), text : buildingInfo.jobs == null ? "null" : "" + buildingInfo.jobs});
		}
		if(buildingInfo.residents != null && buildingInfo.residents != 0) {
			extraInfo.push({ texture : Resources.getTexture("spr_residents"), text : buildingInfo.residents == null ? "null" : "" + buildingInfo.residents});
		}
		if(buildingInfo.quality != null && buildingInfo.quality != 0) {
			extraInfo.push({ texture : Resources.getTexture("spr_happiness"), text : buildingInfo.quality == null ? "null" : "" + buildingInfo.quality});
		}
		if(common_ArrayExtensions.contains(buildingInfo.specialInfo,"unique")) {
			extraInfo.push({ texture : Resources.getTexture("spr_uniquebuilding"), text : common_ArrayExtensions.any(this.city.permanents,function(pm) {
				return pm["is"](buildingType);
			}) ? "[red]Already Built" : "Unique"});
		}
		var buildingDescription = buildingInfo.description;
		if(common_ArrayExtensions.any(this.city.permanents,function(pm1) {
			return pm1["is"](buildingType);
		})) {
			buildingDescription = StringTools.replace(buildingDescription,"!unlocks","");
		} else {
			buildingDescription = StringTools.replace(buildingDescription,"!unlocks"," Also unlocks new buildings.");
		}
		if(this.city.progress.shouldShowHoldCtrlToHighlightHint()) {
			buildingDescription += "\n\nTip: Hold Ctrl to highlight all buildings of this type!";
		}
		if(continousDisplay) {
			this.gui.tooltip.setTextForContinuous(buildingDescription,"Building " + buildingInfo.name + "",cost,extraInfo,extraInfo2);
		} else {
			this.gui.tooltip.setText(tooltipContext,buildingDescription,buildingInfo.name,cost,extraInfo,extraInfo2);
		}
	}
	,addDecorationButton: function(decorationsInfo) {
		var _gthis = this;
		this.makeSpaceForBuildingButton();
		var decorationButton;
		var f = ($_=this.city,$bind($_,$_.createOrRemoveDecorationBuilder));
		var a1 = decorationsInfo;
		var value = function() {
			f(a1);
		};
		decorationButton = new gui_ImageButton(this.gui,this.gui.stage,this.buildingInCategoryButtonsCol,value,Resources.getTexture("" + decorationsInfo.textureName + "@0,0,20,20"),function() {
			if(_gthis.city.builder != null) {
				var _g = _gthis.city.builder.builderType;
				var value1;
				if(_g[1] == 1) {
					var d = _g[2];
					value1 = d.name;
				} else {
					value1 = "";
				}
				return value1 == decorationsInfo.name;
			} else {
				return false;
			}
		},function() {
			_gthis.showDecorationTooltip(decorationsInfo,decorationButton);
		});
		if(this.gui.game.isMobile) {
			this.buildingInCategoryButtonsCol.addChild(decorationButton);
		} else {
			this.buildingInCategoryButtonsCol.insertChild(decorationButton,0);
		}
	}
	,showDecorationTooltip: function(decorationsInfo,target,continousDisplay) {
		if(continousDisplay == null) {
			continousDisplay = false;
		}
		var cost = Materials.fromDecorationInfo(decorationsInfo);
		if(continousDisplay) {
			if(decorationsInfo.name == "Remove Decoration") {
				this.gui.tooltip.setTextForContinuous(decorationsInfo.description,decorationsInfo.name + "",cost);
			} else {
				this.gui.tooltip.setTextForContinuous(decorationsInfo.description,"Placing " + decorationsInfo.name + "",cost);
			}
		} else {
			this.gui.tooltip.setText(target,decorationsInfo.description,decorationsInfo.name,cost);
		}
	}
	,addWorldResourceButton: function(worldResourceInfo) {
		var _gthis = this;
		this.makeSpaceForBuildingButton();
		var worldResourceButton;
		var f = ($_=this.city,$bind($_,$_.createOrRemoveWorldResourceBuilder));
		var a1 = worldResourceInfo;
		var value = function() {
			f(a1);
		};
		worldResourceButton = new gui_ImageButton(this.gui,this.gui.stage,this.buildingInCategoryButtonsCol,value,Resources.getTexture("" + worldResourceInfo.textureName),function() {
			if(_gthis.city.builder != null) {
				var _g = _gthis.city.builder.builderType;
				var value1;
				if(_g[1] == 2) {
					var d = _g[2];
					value1 = d;
				} else {
					value1 = null;
				}
				return value1 == worldResourceInfo;
			} else {
				return false;
			}
		},function() {
			_gthis.showWorldResourceTooltip(worldResourceInfo,worldResourceButton);
		});
		if(this.gui.game.isMobile) {
			this.buildingInCategoryButtonsCol.addChild(worldResourceButton);
		} else {
			this.buildingInCategoryButtonsCol.insertChild(worldResourceButton,0);
		}
	}
	,showWorldResourceTooltip: function(worldResourceInfo,target,continousDisplay) {
		if(continousDisplay == null) {
			continousDisplay = false;
		}
		var cost = Materials.fromWorldResourceInfo(worldResourceInfo);
		if(continousDisplay) {
			this.gui.tooltip.setTextForContinuous(worldResourceInfo.description,"Planting " + worldResourceInfo.name + "",cost);
		} else {
			this.gui.tooltip.setText(target,worldResourceInfo.description,worldResourceInfo.name,cost);
		}
	}
	,addBuildingModeButtons: function() {
		var _gthis = this;
		var buildingModeButton;
		var getBuildingModeTexture = function(buildingMode) {
			switch(buildingMode[1]) {
			case 0:
				return "spr_icon_buildingmode_ontop";
			case 1:
				return "spr_icon_buildingmode_insert";
			case 2:
				return "spr_icon_buildingmode_replace";
			case 3:
				return "spr_icon_buildingmode_destroy";
			}
		};
		var showTooltipForBuildingMode = function(target,buildingMode1,asContinuous) {
			var doTooltipSet = function(target1,text,title) {
				if(asContinuous) {
					_gthis.gui.tooltip.setTextForContinuous(text,title);
				} else {
					_gthis.gui.tooltip.setText(target1,text,title);
				}
			};
			if(_gthis.gui.game.isMobile) {
				switch(buildingMode1[1]) {
				case 0:
					doTooltipSet(target,"Build only on the ground and on top of buildings, or just below rooftop buildings. Tap on a building for information and options.","Building mode: Normal");
					break;
				case 1:
					doTooltipSet(target,"Build anywhere in a tower.","Building mode: Insert");
					break;
				case 2:
					doTooltipSet(target,"Easily replace existing buildings.","Building mode: Replace");
					break;
				case 3:
					doTooltipSet(target,"Quickly destroy buildings.","Destroy Mode");
					break;
				}
				return;
			}
			switch(buildingMode1[1]) {
			case 0:
				doTooltipSet(target,"With this building mode active, you can only build on the ground and on top of buildings. Click on a building for information and options. Exception:" + (_gthis.city.builder == null ? " if you have a building type selected," : "") + " clicking on a rooftop building will build a building there.","Building mode: Normal");
				break;
			case 1:
				doTooltipSet(target,"With this building mode active, you can build anywhere in a tower. " + (_gthis.city.builder == null ? "After having selected a building to build, click" : "Click") + " on a building to insert a new building there.","Building mode: Insert");
				break;
			case 2:
				doTooltipSet(target,"With this building mode active, you can easily replace existing buildings.","Building mode: Replace");
				break;
			case 3:
				doTooltipSet(target,"Quickly destroy buildings.","Destroy Mode");
				break;
			}
		};
		var showExtraBuildingModes = function() {
			var allBuildingModes = [BuildingMode.Normal,BuildingMode.Insert,BuildingMode.Replace,BuildingMode.Destroy];
			var _g = 0;
			while(_g < allBuildingModes.length) {
				var bm = [allBuildingModes[_g]];
				++_g;
				var imgButton = [];
				var showExtraBuildingModes1 = new gui_ImageButton(_gthis.gui,_gthis.gui.stage,_gthis.allBuildingModeButtons,(function(bm1) {
					return function() {
						_gthis.city.buildingMode = bm1[0];
						if(bm1[0] != BuildingMode.Destroy) {
							if(!_gthis.gui.game.isMobile) {
								_gthis.closeExtraBuildingModes();
							}
						} else {
							var _gthis1 = _gthis.shownCategory;
							var key = _gthis.shownCategory;
							var _this = _gthis.categoryButtonPosition;
							var value = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
							_gthis.showOrHideBuildingsOfCategory(_gthis1,value,false,true,true);
						}
					};
				})(bm),Resources.getTexture(getBuildingModeTexture(bm[0])),(function(bm2) {
					return function() {
						return _gthis.city.buildingMode == bm2[0];
					};
				})(bm),(function(imgButton1,bm3) {
					return function() {
						showTooltipForBuildingMode(imgButton1[0],bm3[0],false);
					};
				})(imgButton,bm));
				imgButton[0] = showExtraBuildingModes1;
				if(_gthis.gui.game.isMobile) {
					_gthis.allBuildingModeButtons.addChild(imgButton[0]);
				} else {
					_gthis.allBuildingModeButtons.insertChild(imgButton[0],0);
				}
			}
			if(_gthis.gui.game.isMobile && _gthis.shownCategory != "") {
				var _gthis2 = _gthis.shownCategory;
				var key1 = _gthis.shownCategory;
				var _this1 = _gthis.categoryButtonPosition;
				var showExtraBuildingModes2 = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
				_gthis.showOrHideBuildingsOfCategory(_gthis2,showExtraBuildingModes2,false,true,true);
			}
			if(_gthis.gui.game.isMobile && _gthis.shownManagementOptions) {
				_gthis.closeManagementOptions();
			}
		};
		var toggleMoreBuildingModesMenu = function() {
			var maxPos = 0;
			var _this2 = _gthis.categoryButtonPosition;
			var pos = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(pos.hasNext()) {
				var pos1 = pos.next();
				maxPos = pos1 + 20 + 2;
			}
			if(_gthis.shownBuildingModes) {
				_gthis.closeExtraBuildingModes();
			} else {
				showExtraBuildingModes();
				_gthis.shownBuildingModes = true;
			}
		};
		if(!this.gui.game.isMobile) {
			this.allBuildingModeButtons.padding.left = this.categoryButtons.rect.width;
		}
		buildingModeButton = new gui_ImageButton(this.gui,this.gui.stage,this.categoryButtons,function() {
			if(_gthis.gui.game.isMobile) {
				toggleMoreBuildingModesMenu();
			} else {
				_gthis.city.buildingMode = _gthis.city.buildingMode == BuildingMode.Normal ? BuildingMode.Insert : BuildingMode.Normal;
				_gthis.closeExtraBuildingModes();
			}
		},Resources.getTexture(getBuildingModeTexture(this.city.buildingMode)),function() {
			if(!_gthis.gui.game.isMobile) {
				return false;
			}
			return _gthis.shownBuildingModes;
		},function() {
			if(!_gthis.gui.game.isMobile || !_gthis.shownBuildingModes) {
				showTooltipForBuildingMode(buildingModeButton,_gthis.city.buildingMode,false);
			}
		},null,"spr_transparentbutton");
		var currentlyShownBuildingMode = BuildingMode.Normal;
		buildingModeButton.onUpdate = function() {
			if(currentlyShownBuildingMode != _gthis.city.buildingMode) {
				var tmp = Resources.getTexture(getBuildingModeTexture(_gthis.city.buildingMode));
				buildingModeButton.updateTexture(tmp);
				currentlyShownBuildingMode = _gthis.city.buildingMode;
			}
			if(_gthis.gui.game.isMobile && _gthis.shownBuildingModes) {
				showTooltipForBuildingMode(buildingModeButton,_gthis.city.buildingMode,true);
			}
		};
		this.categoryButtons.addChild(buildingModeButton);
		if(!this.gui.game.isMobile) {
			var moreBuildingModesButton;
			var moreBuildingModesButton1 = this.gui;
			var moreBuildingModesButton2 = this.gui.stage;
			var moreBuildingModesButton3 = this.categoryButtons;
			var moreBuildingModesButton4 = Resources.getTexture("spr_morebuildingmodes_arrowup");
			moreBuildingModesButton = new gui_ImageButton(moreBuildingModesButton1,moreBuildingModesButton2,moreBuildingModesButton3,toggleMoreBuildingModesMenu,moreBuildingModesButton4,function() {
				return _gthis.shownBuildingModes;
			},function() {
				_gthis.gui.tooltip.setText(moreBuildingModesButton,"All Building Modes");
			},null,"spr_morebuildingmodebuttons");
			this.categoryButtons.addChild(moreBuildingModesButton);
		}
		if(this.shownBuildingModes) {
			showExtraBuildingModes();
		}
	}
	,closeExtraBuildingModes: function() {
		this.allBuildingModeButtons.clear();
		this.shownBuildingModes = false;
		if(this.city.buildingMode == BuildingMode.Destroy) {
			this.city.buildingMode = BuildingMode.Normal;
		}
	}
	,showManagementOptions: function(parentElement) {
		var _gthis = this;
		if(parentElement == null) {
			parentElement = this.allManagementOptionsButtons;
		}
		if(this.gui.game.isMobile && this.shownBuildingModes) {
			this.closeExtraBuildingModes();
		}
		var imgButton = new gui_ImageButton(this.gui,this.gui.stage,parentElement,function() {
			if(_gthis.city.viewActions.isFollowOpen()) {
				_gthis.city.specialAction.deactivate();
			} else {
				_gthis.city.viewActions.showFollow();
			}
		},Resources.getTexture("spr_icon_followcitizen"),function() {
			return _gthis.city.viewActions.isFollowOpen();
		},function() {
			_gthis.gui.tooltip.setText(imgButton,"Follow Citizen");
		});
		if(this.gui.game.isMobile) {
			parentElement.addChild(imgButton);
		} else {
			parentElement.insertChild(imgButton,0);
		}
		var imgButton1 = new gui_ImageButton(this.gui,this.gui.stage,parentElement,function() {
			if(_gthis.gui.windowRelatedTo == "global_upgrades") {
				_gthis.gui.closeWindow();
			} else {
				_gthis.gui.createWindow("global_upgrades");
				gui_GlobalUpgradeWindow.create(_gthis.city,_gthis.gui,_gthis.gui.innerWindowStage,_gthis.gui.windowInner);
			}
		},Resources.getTexture("spr_icon_upgrade"),function() {
			return _gthis.gui.windowRelatedTo == "global_upgrades";
		},function() {
			_gthis.gui.tooltip.setText(imgButton1,"Upgrades");
		});
		if(this.gui.game.isMobile) {
			parentElement.addChild(imgButton1);
		} else {
			parentElement.insertChild(imgButton1,0);
		}
		if(this.gui.game.isMobile && this.gui.game.isLargeMobile && this.shownCategory != "") {
			var key = this.shownCategory;
			var _this = this.categoryButtonPosition;
			this.showOrHideBuildingsOfCategory(this.shownCategory,__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key],false,true,true);
		}
	}
	,closeManagementOptions: function() {
		this.allManagementOptionsButtons.clear();
		this.shownManagementOptions = false;
	}
	,addManagementButtons: function() {
		var _gthis = this;
		var managementButton = new gui_ImageButton(this.gui,this.gui.stage,this.categoryButtons,function() {
			_gthis.shownManagementOptions = !_gthis.shownManagementOptions;
			if(!_gthis.shownManagementOptions) {
				_gthis.closeManagementOptions();
			} else {
				_gthis.showManagementOptions();
			}
		},Resources.getTexture("spr_icon_management"),function() {
			return _gthis.shownManagementOptions;
		},function() {
			_gthis.gui.tooltip.setText(managementButton,"Management");
		},null,"spr_transparentbutton");
		if(!this.gui.game.isMobile) {
			this.allManagementOptionsButtons.padding.left = this.categoryButtons.rect.width;
		}
		this.categoryButtons.addChild(managementButton);
		if(this.shownManagementOptions) {
			this.showManagementOptions();
		}
	}
	,updateGoalAttentions: function() {
		var _gthis = this;
		var updateHighlight = function(thingThatNeedsAttention,needsHighlight) {
			var thingClassName = Type.getClassName(thingThatNeedsAttention);
			var _this = Resources.buildingInfo;
			var thingBuildingInfo = __map_reserved[thingClassName] != null ? _this.getReserved(thingClassName) : _this.h[thingClassName];
			if(thingBuildingInfo != null && (!needsHighlight || _gthis.city.materials.canAfford(Materials.fromBuildingInfo(thingBuildingInfo)))) {
				var cat = thingBuildingInfo.category;
				var catButton;
				if(_gthis.activateBuildModeButton != null) {
					_gthis.activateBuildModeButton.setNeedsAttention(needsHighlight);
				}
				var updateHighlight1;
				if(cat != null && cat != "") {
					var _this1 = _gthis.buttonsByCategory;
					if(__map_reserved[cat] != null) {
						catButton = _this1.getReserved(cat);
					} else {
						catButton = _this1.h[cat];
					}
					updateHighlight1 = catButton != null;
				} else {
					updateHighlight1 = false;
				}
				if(updateHighlight1) {
					catButton.setNeedsAttention(needsHighlight);
					var _this2 = _gthis.buttonsInCategory;
					var bldButton = __map_reserved[thingClassName] != null ? _this2.getReserved(thingClassName) : _this2.h[thingClassName];
					if(bldButton != null) {
						bldButton.setNeedsAttention(needsHighlight);
					}
				}
			}
			var _this3 = Resources.buildingUpgradesInfo;
			var thingBuildingUpgradeInfo = __map_reserved[thingClassName] != null ? _this3.getReserved(thingClassName) : _this3.h[thingClassName];
			if(thingBuildingUpgradeInfo != null && (!needsHighlight || _gthis.city.materials.canAfford(Materials.fromBuildingUpgradesInfo(thingBuildingUpgradeInfo)))) {
				var stillNeedsToOpenRightWindow = true;
				if(_gthis.gui.window != null && js_Boot.__instanceof(_gthis.gui.windowRelatedTo,Building)) {
					var bld = _gthis.gui.windowRelatedTo;
					if(common_ArrayExtensions.contains(bld.get_possibleUpgrades(),thingThatNeedsAttention) && !common_ArrayExtensions.any(bld.upgrades,function(bu) {
						return (bu == null ? null : js_Boot.getClass(bu)) == thingThatNeedsAttention;
					})) {
						var _this4 = _gthis.gui.currentUpgradeButtons;
						var upgradeButton = __map_reserved[thingClassName] != null ? _this4.getReserved(thingClassName) : _this4.h[thingClassName];
						if(upgradeButton != null) {
							upgradeButton.setNeedsAttention(needsHighlight);
						}
						stillNeedsToOpenRightWindow = false;
					}
				}
				if(stillNeedsToOpenRightWindow || !needsHighlight) {
					var _g = 0;
					var _g1 = _gthis.city.permanents;
					while(_g < _g1.length) {
						var pm = _g1[_g];
						++_g;
						if(pm["is"](Building)) {
							var bld1 = pm;
							if(common_ArrayExtensions.contains(bld1.get_possibleUpgrades(),thingThatNeedsAttention) && !common_ArrayExtensions.any(bld1.upgrades,function(bu1) {
								return (bu1 == null ? null : js_Boot.getClass(bu1)) == thingThatNeedsAttention;
							})) {
								if(needsHighlight) {
									if(bld1.highlightSprite == null) {
										bld1.highlightSprite = new PIXI.Sprite(Resources.getTexture("spr_whiteoutline"));
										bld1.highlightSprite.position.set(bld1.position.x - 1,bld1.position.y - 1);
										_gthis.city.farForegroundStage.addChild(bld1.highlightSprite);
										var this1 = [89,1,0.77];
										var updateHighlight2 = thx_color__$Hsv_Hsv_$Impl_$.toRgb(this1);
										bld1.highlightSprite.tint = common_ColorExtensions.toHexInt(updateHighlight2);
									}
									bld1.highlightSprite.alpha = (Math.sin(_gthis.gui.guiTimer / 10) + 1) / 2;
								} else if(bld1.highlightSprite != null) {
									bld1.highlightSprite.destroy();
									bld1.highlightSprite = null;
								}
							}
						}
					}
				}
			}
		};
		var thingsThatNeedAttention = this.city.progress.story.getDesiredGoalHighlights();
		if(this.creatableCityElementsThatNeededAttention != null && this.creatableCityElementsThatNeededAttention.length > 0) {
			var _g2 = 0;
			var _g11 = this.creatableCityElementsThatNeededAttention;
			while(_g2 < _g11.length) {
				var thingThatNeededAttention = _g11[_g2];
				++_g2;
				updateHighlight(thingThatNeededAttention,false);
			}
		}
		var _g3 = 0;
		while(_g3 < thingsThatNeedAttention.length) {
			var thingThatNeedsAttention1 = thingsThatNeedAttention[_g3];
			++_g3;
			updateHighlight(thingThatNeedsAttention1,true);
		}
		this.creatableCityElementsThatNeededAttention = thingsThatNeedAttention;
	}
	,__class__: gui_BuildingButtons
};
var gui_BuildingTypeImage = function() { };
$hxClasses["gui.BuildingTypeImage"] = gui_BuildingTypeImage;
gui_BuildingTypeImage.__name__ = ["gui","BuildingTypeImage"];
gui_BuildingTypeImage.create = function(stage,city,buildingType,parentContainer,gui1) {
	var cont = new PIXI.Container();
	var sprName = Reflect.field(buildingType,"spriteName");
	var this1 = city.progress.resources.buildingInfo;
	var key = Type.getClassName(buildingType);
	var _this = this1;
	var buildingInfo = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	cont.addChild(Resources.makeSprite(buildingInfo.buttonBack == null ? "" + sprName + "@44,0,20,20" : buildingInfo.buttonBack));
	cont.addChild(Resources.makeSprite("" + sprName + "@0,0,20,20"));
	var ch = new gui_ContainerHolder(parentContainer,stage,cont,null,null,function(mouse) {
		if(ch.rect.contains(mouse.position)) {
			gui1.tooltip.setText(ch,buildingInfo.name);
			return true;
		}
		return false;
	});
	return ch;
};
var gui_Button = function(gui1,stage,parent,action,isActive,onHover) {
	this.keyboardButton = null;
	this.canBeHeld = false;
	this.mouseOut = false;
	this.onUpdate = null;
	this.stage = stage;
	this.gui = gui1;
	this.parent = parent;
	this.action = action;
	this.onHover = onHover;
	if(isActive == null) {
		isActive = function() {
			return false;
		};
	}
	this.isActive = isActive;
	this.buttonSound = Audio.get().buttonSound;
};
$hxClasses["gui.Button"] = gui_Button;
gui_Button.__name__ = ["gui","Button"];
gui_Button.__interfaces__ = [gui_IGUIElement];
gui_Button.prototype = {
	updateSize: function() {
		if(this.parent != null) {
			this.parent.updateSize();
		}
	}
	,updatePosition: function(newPosition) {
		this.rect.x = newPosition.x;
		this.rect.y = newPosition.y;
	}
	,handleMouse: function(mouse) {
		return this.doHandleMouse(mouse,function() {
		},function() {
		});
	}
	,doHandleMouse: function(mouse,onMouseIn,onMouseActive) {
		if(this.rect.contains(mouse.position)) {
			this.mouseOut = false;
			var claim = mouse.claimMouse(this,null,true,this.canBeHeld);
			if(claim == MouseState.Confirmed) {
				this.action();
				Audio.get().playSound(this.buttonSound);
			} else if(claim == MouseState.Active) {
				onMouseActive();
			} else {
				onMouseIn();
			}
			if(this.onHover != null) {
				this.onHover();
			}
			return true;
		}
		return false;
	}
	,update: function() {
		if(this.onUpdate != null) {
			this.onUpdate();
		}
		if(this.keyboardButton != null) {
			if(this.gui.get_keyboard().pressed[this.keyboardButton]) {
				this.action();
			}
		}
		this.mouseOut = true;
	}
	,destroy: function() {
	}
	,__class__: gui_Button
};
var gui_CityGUI = function(game,outerStage,city) {
	this.gameSpeedOnUse = null;
	this.storyHelpButtonOnUse = null;
	this.hideShowUIButton = null;
	this.cityExtraInfoHidden = false;
	this.simulationSpeedChosen = 0;
	this.workerAssignButton = null;
	this.notificationPanel = null;
	GUI.call(this,game,outerStage);
	this.tooltip = new gui_Tooltip(game,city,this.tooltipStage);
	this.city = city;
	this.cityInfo = new gui_GUIContainer(this,this.stage,null,new common_Point(0,0),new common_FPoint(1,1));
	this.currentUpgradeButtons = new haxe_ds_StringMap();
	this.buildingButtons = new gui_BuildingButtons(this,city);
	this.createCityInfo();
	this.resize();
};
$hxClasses["gui.CityGUI"] = gui_CityGUI;
gui_CityGUI.__name__ = ["gui","CityGUI"];
gui_CityGUI.__super__ = GUI;
gui_CityGUI.prototype = $extend(GUI.prototype,{
	createWindowInCurrentContext: function(relatedTo,windowBackground) {
		GUI.prototype.createWindow.call(this,relatedTo,windowBackground);
	}
	,createWindow: function(relatedTo,windowBackground) {
		GUI.prototype.createWindow.call(this,relatedTo,windowBackground);
	}
	,createCityInfo: function() {
		this.addHelpAndGameSpeedButtons();
		if(!this.cityExtraInfoHidden) {
			var _gthis = this;
			var generalStatistics = new gui_GUIContainer(this,this.stage,this.cityInfo,null);
			generalStatistics.alignment = gui_GUIContainerAlignment.RightOrBottom;
			generalStatistics.direction = gui_GUIContainerDirection.Vertical;
			this.cityInfo.addChild(generalStatistics);
			var happiness = this.city.simulation.happiness;
			var populationAndHappiness = new gui_GUIContainer(this,this.stage,generalStatistics);
			populationAndHappiness.fillSecondarySize = true;
			generalStatistics.addChild(populationAndHappiness);
			var popInfoButton = this.createInfoButton(function() {
				if(_gthis.windowRelatedTo == "popInfo") {
					_gthis.closeWindow();
				} else {
					_gthis.createWindow("popInfo");
					gui_PopulationInfoWindow.create(_gthis.city,_gthis,_gthis.innerWindowStage,_gthis.windowInner);
				}
			},function() {
				var numberOfChildren = Lambda.count(_gthis.city.simulation.citizens,function(c) {
					return c.get_age() <= 16;
				});
				_gthis.tooltip.setText("Population","The total amount of citizens in your city.\n" + ("There " + (numberOfChildren == 1 ? "is one child" : "are " + numberOfChildren + " children") + ".\n") + _gthis.game.textHelper.clickOrTap() + " for the age distribution" + (_gthis.city.simulation.citizens.length >= 1950 ? " or to change the population limit" : "") + "." + _gthis.game.textHelper.ifNotMobile("\n\nTip: to follow a citizen, Ctrl+Click on them."));
			},function() {
				return Std.string(_gthis.city.simulation.citizens.length | 0);
			},"spr_population",populationAndHappiness,23,function() {
				return _gthis.windowRelatedTo == "popInfo";
			});
			popInfoButton.keyboardButton = Keyboard.getLetterCode("C");
			populationAndHappiness.addChild(popInfoButton);
			var happinessBox = this.createInfoButton(function() {
				if(_gthis.windowRelatedTo == "happinessWindow") {
					_gthis.closeWindow();
				} else {
					_gthis.createWindow("happinessWindow");
					gui_HappinessWindow.create(_gthis.city,_gthis,_gthis.innerWindowStage,_gthis.windowInner);
				}
			},function() {
				var enthusiasmPart = "";
				var shortagePart = "";
				var boostPart = "";
				if(happiness.foodShortageUnhappiness > 0) {
					shortagePart = "Food shortage unhappiness: -" + (happiness.foodShortageUnhappiness | 0) + "\n";
				}
				if(happiness.enthusiasmHappiness != 0) {
					enthusiasmPart += "New city enthusiasm bonus: +" + (happiness.enthusiasmHappiness | 0) + "\n";
				}
				var _g = 0;
				var _g1 = happiness.happinessBoosts;
				while(_g < _g1.length) {
					var boost = _g1[_g];
					++_g;
					boostPart += boost.text + ": " + (boost.boost | 0) + "\n";
				}
				var _gthis1 = _gthis.tooltip;
				var happinessBox1 = "Happy citizens work faster. They also get more children.\n" + ("Home happiness: " + (happiness.homeHappiness | 0) + "\n") + ("Sense of purpose (job/school): " + (happiness.purposeHappiness | 0) + "\n") + ("Entertainment happiness: " + (happiness.entertainmentHappiness | 0) + "\n") + ("Education happiness: " + (happiness.schoolHappiness | 0) + "\n") + ("Medical happiness: " + (happiness.medicalHappiness | 0) + "\n") + shortagePart + "" + boostPart + "" + enthusiasmPart + "\n" + ("With the current happiness, citizens work at " + common_MathExtensions.floatFormat(Math,happiness.actionSpeedModifier,2) + "x their normal speed.");
				_gthis1.setText(happinessBox,happinessBox1,"Happiness");
			},function() {
				if(_gthis.city.simulation.happiness.happiness >= 99.99) {
					if(_gthis.city.simulation.happiness.happiness >= 124.99) {
						return "xD";
					} else {
						return ":D";
					}
				} else {
					return Std.string(_gthis.city.simulation.happiness.happiness | 0);
				}
			},"spr_happiness",populationAndHappiness,26,function() {
				return _gthis.windowRelatedTo == "happinessWindow";
			});
			happinessBox.keyboardButton = Keyboard.getLetterCode("H");
			populationAndHappiness.addChild(happinessBox);
			var simulation = this.city.simulation;
			var stats = simulation.stats;
			var homelessStats = this.createInfoButton(function() {
				if(_gthis.windowRelatedTo == "houseInfo") {
					_gthis.closeWindow();
				} else {
					_gthis.createWindow("houseInfo");
					gui_HouseInformationWindow.create(_gthis.city,_gthis,_gthis.innerWindowStage,_gthis.windowInner);
				}
			},function() {
				var _gthis2 = _gthis.tooltip;
				var value = gui_HouseInformationWindow.getHousingHelpText(stats);
				_gthis2.setText(homelessStats,value,"Housing");
			},function() {
				if(stats.peopleWithHome >= stats.people) {
					return "" + (stats.houseCapacity - stats.peopleWithHome);
				}
				return "[red]-" + (stats.people - stats.peopleWithHome);
			},"spr_housing",generalStatistics,20,function() {
				return _gthis.windowRelatedTo == "houseInfo";
			});
			generalStatistics.addChild(homelessStats);
			var stats1 = this.city.simulation.stats;
			this.workerAssignButton = this.createInfoButton(function() {
				if(_gthis.windowRelatedTo == "workersAssign") {
					_gthis.closeWindow();
				} else {
					_gthis.createWindow("workersAssign");
					gui_WorkerDistributionWindow.create(_gthis.city,_gthis,_gthis.innerWindowStage,_gthis.windowInner);
				}
			},function() {
				_gthis.tooltip.setText("Work","People with a job / total labor force.\nThere are " + stats1.jobs + " jobs.\n" + _gthis.game.textHelper.clickOrTap() + " to assign workers.");
			},function() {
				return "" + stats1.peopleWithAJob + "/" + stats1.laborForce;
			},"spr_work",generalStatistics,20,function() {
				return _gthis.windowRelatedTo == "workersAssign";
			});
			this.workerAssignButton.keyboardButton = Keyboard.getLetterCode("W");
			generalStatistics.addChild(this.workerAssignButton);
			this.addAllMaterialsInfo();
		}
	}
	,hideCityInfo: function() {
		this.cityInfo.clear();
		this.materialsInfo = null;
		this.workerAssignButton = null;
		this.hideShowUIButton = null;
		this.woodAmountDisplay = null;
		this.stoneAmountDisplay = null;
		this.storyHelpButton = null;
	}
	,miniButtonToUse: function() {
		if(this.game.isMobile) {
			return "spr_transparentbutton_info_miniplus";
		} else {
			return "spr_transparentbutton_info_mini";
		}
	}
	,addHelpAndGameSpeedButtons: function() {
		var _gthis = this;
		var quickControlButtons = new gui_GUIContainer(this,this.stage,this.cityInfo,null);
		quickControlButtons.alignment = gui_GUIContainerAlignment.RightOrBottom;
		this.cityInfo.addChild(quickControlButtons);
		var hasQuickText = function() {
			return _gthis.city.progress.goalHelp.hasCurrentGoalHelp();
		};
		var tmp = this.stage;
		var createQuickMissionWindow = null;
		createQuickMissionWindow = function() {
			if(_gthis.windowRelatedTo == "quickMissionWindow") {
				_gthis.closeWindow();
			} else if(hasQuickText()) {
				_gthis.city.gui.clearWindowStack();
				_gthis.city.gui.createWindow("quickMissionWindow");
				_gthis.city.gui.addWindowToStack(createQuickMissionWindow);
				if(_gthis.storyHelpButtonOnUse != null) {
					_gthis.storyHelpButtonOnUse();
				}
				gui_CurrentMissionsWindow.create(_gthis.city,_gthis.city.gui,_gthis.city.gui.innerWindowStage,_gthis.city.gui.windowInner);
			}
		};
		var createQuickMissionWindow1 = createQuickMissionWindow;
		var tmp1 = createQuickMissionWindow;
		var tmp2 = Resources.getTexture("spr_icon_help");
		var tmp3 = this.miniButtonToUse();
		this.storyHelpButton = new gui_ImageButton(this,tmp,quickControlButtons,tmp1,tmp2,function() {
			return _gthis.windowRelatedTo == "quickMissionWindow";
		},function() {
			if(hasQuickText()) {
				var goalTexts = _gthis.city.progress.goalHelp.getCurrentGoalHelp();
				if(goalTexts.length == 1) {
					_gthis.tooltip.setText(_gthis.storyHelpButton,goalTexts[0].text,goalTexts[0].category == "Main Goal" ? "Current Task" : goalTexts[0].category);
				} else {
					var fullGoalTexts = "";
					var _g = 0;
					while(_g < goalTexts.length) {
						var goalText = goalTexts[_g];
						++_g;
						if(fullGoalTexts != "") {
							fullGoalTexts += "\n\n";
						}
						fullGoalTexts += "- " + goalText.category + "\n" + goalText.text;
					}
					_gthis.tooltip.setText(_gthis.storyHelpButton,fullGoalTexts,"Current Tasks");
				}
			}
			if(_gthis.storyHelpButtonOnUse != null) {
				_gthis.storyHelpButtonOnUse();
			}
		},null,tmp3,this.game.isMobile ? 4 : 1);
		this.storyHelpButton.onUpdate = function() {
			if(hasQuickText()) {
				_gthis.storyHelpButton.show();
			} else {
				_gthis.storyHelpButton.hide();
			}
		};
		quickControlButtons.addChild(this.storyHelpButton);
		var pausePlayButton;
		var value = this.stage;
		var value1 = Resources.getTexture("spr_icon_pause");
		var value2 = this.miniButtonToUse();
		pausePlayButton = new gui_ImageButton(this,value,quickControlButtons,function() {
			_gthis.city.set_pauseGame(!_gthis.city.pauseGame);
			if(_gthis.city.pauseGame) {
				common_PokiHelpers.reportStopGameplay();
			} else {
				common_PokiHelpers.reportStartGameplay();
			}
		},value1,function() {
			return _gthis.city.pauseGame;
		},function() {
			var theAction = _gthis.game.isMobile ? "Tap" : "Click (or press Space)";
			if(_gthis.city.pauseGame) {
				_gthis.tooltip.setText(pausePlayButton,theAction + " to unpause.","Game Paused");
			} else {
				_gthis.tooltip.setText(pausePlayButton,theAction + " to pause.","Game Running");
			}
		},null,value2,this.game.isMobile ? 4 : 1);
		quickControlButtons.addChild(pausePlayButton);
		var simulationSpeeds = [{ speed : 1, icon : Resources.getTexture("spr_icon_play"), tooltipTitle : "Normal Speed"},{ speed : 1.5, icon : Resources.getTexture("spr_oneandhalfspeed"), tooltipTitle : "1.5x Speed"},{ speed : 2, icon : Resources.getTexture("spr_icon_speedup"), tooltipTitle : "Double Speed"},{ speed : 0.5, icon : Resources.getTexture("spr_icon_halfspeed"), tooltipTitle : "Half Speed"},{ speed : 0.75, icon : Resources.getTexture("spr_icon_slightlyslowerspeed"), tooltipTitle : "0.75x Speed"}];
		if(Config.cheatSpeedEnabled) {
			var tmp4 = Resources.getTexture("spr_icon_speedup");
			simulationSpeeds.push({ speed : 10, icon : tmp4, tooltipTitle : "Cheat Speed"});
		}
		var tmp5 = this.stage;
		var tmp6 = common_ArrayExtensions.min(simulationSpeeds,function(spd) {
			return Math.abs(spd.speed - _gthis.city.simulationSpeed);
		}).icon;
		var tmp7 = this.miniButtonToUse();
		this.gameSpeedButton = new gui_ImageButton(this,tmp5,quickControlButtons,function() {
			if(_gthis.game.keyboard.down[17]) {
				if(++_gthis.simulationSpeedChosen >= simulationSpeeds.length) {
					_gthis.simulationSpeedChosen = 0;
				}
			} else if(_gthis.simulationSpeedChosen > 1) {
				_gthis.simulationSpeedChosen = 0;
			} else {
				_gthis.simulationSpeedChosen = 2;
			}
			_gthis.city.simulationSpeed = simulationSpeeds[_gthis.simulationSpeedChosen].speed;
			_gthis.gameSpeedButton.imageSprite.texture = simulationSpeeds[_gthis.simulationSpeedChosen].icon;
			if(!_gthis.game.keyboard.down[16]) {
				_gthis.city.set_pauseGame(false);
				common_PokiHelpers.reportStartGameplay();
			}
			if(_gthis.gameSpeedOnUse != null) {
				_gthis.gameSpeedOnUse();
			}
		},tmp6,function() {
			return false;
		},function() {
			_gthis.tooltip.setText(_gthis.gameSpeedButton,_gthis.game.isMobile ? "Tap to change the game speed." : "Click (or press S) to change the game speed.\nCtrl+Click to select an advanced speed." + (_gthis.city.pauseGame ? "\nShift to keep the game paused." : ""),simulationSpeeds[_gthis.simulationSpeedChosen].tooltipTitle);
			if(_gthis.gameSpeedOnUse != null) {
				_gthis.gameSpeedOnUse();
			}
		},null,tmp7,this.game.isMobile ? 4 : 1);
		this.gameSpeedButton.keyboardButton = Keyboard.getLetterCode("S");
		quickControlButtons.addChild(this.gameSpeedButton);
		var menuButton;
		var menuButton1 = this.stage;
		var menuButton2 = Resources.getTexture("spr_icon_menu");
		var menuButton3 = this.miniButtonToUse();
		menuButton = new gui_ImageButton(this,menuButton1,quickControlButtons,function() {
			if(_gthis.windowRelatedTo == "gameMenu") {
				_gthis.closeWindow();
			} else {
				gui_GameMenu.create(_gthis,_gthis.city);
			}
		},menuButton2,function() {
			return _gthis.windowRelatedTo == "gameMenu";
		},function() {
			_gthis.tooltip.setText(menuButton,"","Game Menu");
		},null,menuButton3,this.game.isMobile ? 4 : 1);
		menuButton.keyboardButton = Keyboard.getLetterCode("M");
		quickControlButtons.addChild(menuButton);
		if(this.game.isMobile) {
			var hideShowTextures = Resources.getTexturesByWidth("spr_hideui",12);
			var tmp8 = this.stage;
			var hideShowTextures1 = hideShowTextures[this.cityExtraInfoHidden ? 0 : 1];
			var tmp9 = this.miniButtonToUse();
			this.hideShowUIButton = new gui_ImageButton(this,tmp8,quickControlButtons,function() {
				if(_gthis.cityExtraInfoHidden) {
					var _gthis1 = _gthis;
					var generalStatistics = new gui_GUIContainer(_gthis,_gthis.stage,_gthis.cityInfo,null);
					generalStatistics.alignment = gui_GUIContainerAlignment.RightOrBottom;
					generalStatistics.direction = gui_GUIContainerDirection.Vertical;
					_gthis.cityInfo.addChild(generalStatistics);
					var happiness = _gthis.city.simulation.happiness;
					var populationAndHappiness = new gui_GUIContainer(_gthis,_gthis.stage,generalStatistics);
					populationAndHappiness.fillSecondarySize = true;
					generalStatistics.addChild(populationAndHappiness);
					var popInfoButton = _gthis.createInfoButton(function() {
						if(_gthis1.windowRelatedTo == "popInfo") {
							_gthis1.closeWindow();
						} else {
							_gthis1.createWindow("popInfo");
							gui_PopulationInfoWindow.create(_gthis1.city,_gthis1,_gthis1.innerWindowStage,_gthis1.windowInner);
						}
					},function() {
						var numberOfChildren = Lambda.count(_gthis1.city.simulation.citizens,function(c) {
							return c.get_age() <= 16;
						});
						_gthis1.tooltip.setText("Population","The total amount of citizens in your city.\n" + ("There " + (numberOfChildren == 1 ? "is one child" : "are " + numberOfChildren + " children") + ".\n") + _gthis1.game.textHelper.clickOrTap() + " for the age distribution" + (_gthis1.city.simulation.citizens.length >= 1950 ? " or to change the population limit" : "") + "." + _gthis1.game.textHelper.ifNotMobile("\n\nTip: to follow a citizen, Ctrl+Click on them."));
					},function() {
						return Std.string(_gthis1.city.simulation.citizens.length | 0);
					},"spr_population",populationAndHappiness,23,function() {
						return _gthis1.windowRelatedTo == "popInfo";
					});
					popInfoButton.keyboardButton = Keyboard.getLetterCode("C");
					populationAndHappiness.addChild(popInfoButton);
					var happinessBox = _gthis.createInfoButton(function() {
						if(_gthis1.windowRelatedTo == "happinessWindow") {
							_gthis1.closeWindow();
						} else {
							_gthis1.createWindow("happinessWindow");
							gui_HappinessWindow.create(_gthis1.city,_gthis1,_gthis1.innerWindowStage,_gthis1.windowInner);
						}
					},function() {
						var enthusiasmPart = "";
						var shortagePart = "";
						var boostPart = "";
						if(happiness.foodShortageUnhappiness > 0) {
							shortagePart = "Food shortage unhappiness: -" + (happiness.foodShortageUnhappiness | 0) + "\n";
						}
						if(happiness.enthusiasmHappiness != 0) {
							enthusiasmPart += "New city enthusiasm bonus: +" + (happiness.enthusiasmHappiness | 0) + "\n";
						}
						var _g1 = 0;
						var _g11 = happiness.happinessBoosts;
						while(_g1 < _g11.length) {
							var boost = _g11[_g1];
							++_g1;
							boostPart += boost.text + ": " + (boost.boost | 0) + "\n";
						}
						var _gthis2 = _gthis1.tooltip;
						var happinessBox1 = "Happy citizens work faster. They also get more children.\n" + ("Home happiness: " + (happiness.homeHappiness | 0) + "\n") + ("Sense of purpose (job/school): " + (happiness.purposeHappiness | 0) + "\n") + ("Entertainment happiness: " + (happiness.entertainmentHappiness | 0) + "\n") + ("Education happiness: " + (happiness.schoolHappiness | 0) + "\n") + ("Medical happiness: " + (happiness.medicalHappiness | 0) + "\n") + shortagePart + "" + boostPart + "" + enthusiasmPart + "\n" + ("With the current happiness, citizens work at " + common_MathExtensions.floatFormat(Math,happiness.actionSpeedModifier,2) + "x their normal speed.");
						_gthis2.setText(happinessBox,happinessBox1,"Happiness");
					},function() {
						if(_gthis1.city.simulation.happiness.happiness >= 99.99) {
							if(_gthis1.city.simulation.happiness.happiness >= 124.99) {
								return "xD";
							} else {
								return ":D";
							}
						} else {
							return Std.string(_gthis1.city.simulation.happiness.happiness | 0);
						}
					},"spr_happiness",populationAndHappiness,26,function() {
						return _gthis1.windowRelatedTo == "happinessWindow";
					});
					happinessBox.keyboardButton = Keyboard.getLetterCode("H");
					populationAndHappiness.addChild(happinessBox);
					var simulation = _gthis.city.simulation;
					var stats = simulation.stats;
					var homelessStats = _gthis.createInfoButton(function() {
						if(_gthis1.windowRelatedTo == "houseInfo") {
							_gthis1.closeWindow();
						} else {
							_gthis1.createWindow("houseInfo");
							gui_HouseInformationWindow.create(_gthis1.city,_gthis1,_gthis1.innerWindowStage,_gthis1.windowInner);
						}
					},function() {
						var _gthis3 = _gthis1.tooltip;
						var value3 = gui_HouseInformationWindow.getHousingHelpText(stats);
						_gthis3.setText(homelessStats,value3,"Housing");
					},function() {
						if(stats.peopleWithHome >= stats.people) {
							return "" + (stats.houseCapacity - stats.peopleWithHome);
						}
						return "[red]-" + (stats.people - stats.peopleWithHome);
					},"spr_housing",generalStatistics,20,function() {
						return _gthis1.windowRelatedTo == "houseInfo";
					});
					generalStatistics.addChild(homelessStats);
					var stats1 = _gthis.city.simulation.stats;
					_gthis.workerAssignButton = _gthis.createInfoButton(function() {
						if(_gthis1.windowRelatedTo == "workersAssign") {
							_gthis1.closeWindow();
						} else {
							_gthis1.createWindow("workersAssign");
							gui_WorkerDistributionWindow.create(_gthis1.city,_gthis1,_gthis1.innerWindowStage,_gthis1.windowInner);
						}
					},function() {
						_gthis1.tooltip.setText("Work","People with a job / total labor force.\nThere are " + stats1.jobs + " jobs.\n" + _gthis1.game.textHelper.clickOrTap() + " to assign workers.");
					},function() {
						return "" + stats1.peopleWithAJob + "/" + stats1.laborForce;
					},"spr_work",generalStatistics,20,function() {
						return _gthis1.windowRelatedTo == "workersAssign";
					});
					_gthis.workerAssignButton.keyboardButton = Keyboard.getLetterCode("W");
					generalStatistics.addChild(_gthis.workerAssignButton);
					_gthis.addAllMaterialsInfo();
					_gthis.cityExtraInfoHidden = false;
				} else {
					var i = _gthis.cityInfo.children.length - 1;
					while(i >= 0) {
						var child = _gthis.cityInfo.children[i];
						if(child != quickControlButtons) {
							_gthis.cityInfo.removeChild(child);
						}
						--i;
					}
					_gthis.materialsInfo = null;
					_gthis.workerAssignButton = null;
					_gthis.woodAmountDisplay = null;
					_gthis.stoneAmountDisplay = null;
					_gthis.cityExtraInfoHidden = true;
				}
				_gthis.hideShowUIButton.updateTexture(hideShowTextures[_gthis.cityExtraInfoHidden ? 0 : 1]);
			},hideShowTextures1,null,function() {
				if(_gthis.cityExtraInfoHidden) {
					_gthis.tooltip.setText(_gthis.hideShowUIButton,"Show extra city info & options.");
				} else {
					_gthis.tooltip.setText(_gthis.hideShowUIButton,"Hide extra city info & options.");
				}
			},null,tmp9,this.game.isMobile ? 4 : 1);
			quickControlButtons.addChild(this.hideShowUIButton);
		}
	}
	,addAllMaterialsInfo: function() {
		var _gthis = this;
		var getProductionInfo = function(materialName,displayName) {
			if(displayName == null) {
				displayName = materialName;
			}
			var consumeText = "";
			var consumptionYesterday = Math.floor(_gthis.city.simulation.stats.materialUsed[MaterialsHelper.findMaterialIndex(materialName)][1]);
			var consumptionToday = Math.floor(_gthis.city.simulation.stats.materialUsed[MaterialsHelper.findMaterialIndex(materialName)][0]);
			if((consumptionYesterday != 0 || consumptionToday != 0) && materialName != "food") {
				consumeText = "\nYour factories used " + consumptionYesterday + " " + displayName + " yesterday and " + consumptionToday + " today so far.";
			}
			return "\nYour citizens produced " + Math.floor(_gthis.city.simulation.stats.materialProduction[MaterialsHelper.findMaterialIndex(materialName)][1]) + " " + displayName + " yesterday " + ("and " + Math.floor(_gthis.city.simulation.stats.materialProduction[MaterialsHelper.findMaterialIndex(materialName)][0]) + " today so far.") + consumeText;
		};
		this.materialsInfo = new gui_GUIContainer(this,this.stage,this.cityInfo,new common_Point(0,0),new common_FPoint(0,0));
		this.materialsInfo.direction = gui_GUIContainerDirection.Vertical;
		this.cityInfo.addChild(this.materialsInfo);
		var foodInfo = this.addMaterialInfo("food","Food",function() {
			var shortageText = "";
			var ofWhichText = "";
			if(_gthis.city.materials.cacao >= 1 || _gthis.city.materials.chocolate >= 1) {
				ofWhichText = "You have " + Math.floor(_gthis.city.materials.food) + " food, including " + Math.floor(_gthis.city.materials.cacao) + " cacao bean" + (Math.floor(_gthis.city.materials.cacao) == 1 ? "" : "s") + " " + ("and " + Math.floor(_gthis.city.materials.chocolate) + " chocolate bar" + (Math.floor(_gthis.city.materials.chocolate) == 1 ? "" : "s") + ".\n");
			}
			var eating = _gthis.city.simulation.eating;
			if(eating.foodShortage > 0.1) {
				shortageText = "\nYou don't have enough food! The next " + Math.ceil(eating.foodShortage) + " food you produce will be eaten instantly by hungry citizens.";
			}
			return ofWhichText + "Your citizens need to eat!\n" + "Adults eat about one food per day, children eat 1/2 food. " + (eating.totalConsumedFoodPerDay == -1 ? "" : "Currently, " + (eating.totalConsumedFoodPerDay | 0) + " food is being consumed each day.") + getProductionInfo("food") + shortageText;
		},function() {
			return Math.floor(_gthis.city.materials.food);
		},"spr_resource_food",function() {
			return _gthis.city.simulation.eating.foodShortage > 0;
		});
		this.woodAmountDisplay = this.addMaterialInfo("wood","Wood",function() {
			return "Used to build." + getProductionInfo("wood");
		},function() {
			return Math.floor(_gthis.city.materials.wood);
		},"spr_resource_wood");
		this.stoneAmountDisplay = this.addMaterialInfo("stone","Stone",function() {
			return "Used to build and to create machine parts. Can also be purified to refined metals." + getProductionInfo("stone");
		},function() {
			return Math.floor(_gthis.city.materials.stone);
		},"spr_resource_stone");
		this.addMaterialInfo("knowledge","Knowledge",function() {
			return "Used for research." + getProductionInfo("knowledge");
		},function() {
			return Math.floor(_gthis.city.materials.knowledge);
		},"spr_resource_knowledge");
		this.addMaterialInfo("machineParts","Machine Parts",function() {
			return "Used to build machines and advanced buildings." + getProductionInfo("machineParts","machine parts");
		},function() {
			return Math.floor(_gthis.city.materials.machineParts);
		},"spr_resource_machineparts");
		this.addMaterialInfo("refinedMetal","Refined Metals",function() {
			return "Used to create advanced buildings and computer chips." + getProductionInfo("refinedMetal","refined metals");
		},function() {
			return Math.floor(_gthis.city.materials.refinedMetal);
		},"spr_resource_refinedmetal");
		this.addMaterialInfo("computerChips","Computer Chips",function() {
			return "Used to create smart machines." + getProductionInfo("computerChips","computer chips");
		},function() {
			return Math.floor(_gthis.city.materials.computerChips);
		},"spr_resource_computerchips");
        this.addMaterialInfo("magic","Mana",function() {
			return "Used for magical purposes." + getProductionInfo("magic","mana");
		},function() {
			return Math.floor(_gthis.city.materials.magic);
		},"spr_resource_machineparts");
	}
	,resize: function() {
		GUI.prototype.resize.call(this);
		this.buildingButtons.resize();
		this.cityInfo.updatePosition(new common_Point(this.game.rect.width,this.game.rect.height));
		if(this.notificationPanel != null) {
			this.notificationPanel.updatePosition(new common_Point(this.game.rect.width / 2 | 0,0));
		}
	}
	,update: function(timeMod) {
		this.buildingButtons.update(timeMod);
		this.cityInfo.update();
		if(this.notificationPanel != null) {
			this.notificationPanel.update();
		}
		GUI.prototype.update.call(this,timeMod);
	}
	,onEscapePressWithoutWindow: function() {
		gui_GameMenu.create(this,this.city);
	}
	,handleMouse: function(mouse) {
		if(GUI.prototype.handleMouse.call(this,mouse)) {
			return true;
		}
		if(this.buildingButtons.handleMouse(mouse)) {
			return true;
		}
		if(this.cityInfo.handleMouse(mouse)) {
			return true;
		}
		if(this.notificationPanel != null) {
			if(this.notificationPanel.handleMouse(mouse)) {
				return true;
			}
		}
		return false;
	}
	,addMaterialInfo: function(material,name,info,getAmount,textureName,makeRed) {
		if(makeRed == null) {
			makeRed = function() {
				return false;
			};
		}
		var ib = this.createInfoBoxForMaterialsDynamicTooltip(material,name,info,function() {
			var basicString = Std.string(getAmount());
			if(makeRed != null && makeRed()) {
				return "[red]" + basicString;
			}
			return basicString;
		},textureName,this.materialsInfo,42);
		ib.onUpdate = function() {
		};
		return ib;
	}
	,createInfoBoxForMaterialsDynamicTooltip: function(material,title,info,getAmount,textureName,parent,minWidth) {
		if(minWidth == null) {
			minWidth = 42;
		}
		var _gthis = this;
		var button = new gui_ContainerButton(this,this.stage,parent,function() {
			if(_gthis.windowRelatedTo == material) {
				_gthis.closeWindow();
			} else {
				var button1 = Resources.getTexture("spr_9p_window_moreopaque");
				_gthis.createWindow(material,button1);
				gui_infoWindows_MaterialInfoWindow.create(_gthis.city,_gthis,_gthis.innerWindowStage,_gthis.windowInner,material,title);
			}
		},function() {
			return _gthis.windowRelatedTo == material;
		},function() {
			var _gthis1 = _gthis.tooltip;
			var button2 = info();
			_gthis1.setText(button,button2,title);
		},"spr_transparentbutton_info");
		button.container.fillSecondarySize = true;
		var newInfoBox = new gui_InfoBox(this,this.stage,button.container,function() {
			return getAmount();
		},Resources.getTexture(textureName),minWidth,function() {
		},"none",function() {
			return _gthis.city.progress.sandbox.unlimitedResources;
		});
		newInfoBox.fillSecondarySize = true;
		newInfoBox.fillPrimarySize = true;
		button.container.addChild(newInfoBox);
		parent.addChild(button);
		return newInfoBox;
	}
	,createInfoButton: function(onClick,onHover,getAmount,textureName,parent,minWidth,isActive) {
		if(minWidth == null) {
			minWidth = 42;
		}
		var infoButton = new gui_ContainerButton(this,this.stage,parent,onClick,isActive,onHover,"spr_transparentbutton_info");
		infoButton.container.fillSecondarySize = true;
		var extraSpacing = this.game.isMobile ? 3 : 0;
		var extraSpacingText = this.game.isMobile ? 2 : 0;
		infoButton.container.padding = { left : 2 + extraSpacing, right : extraSpacing + 3, top : extraSpacing + 2, bottom : extraSpacing + -1};
		infoButton.container.updateSize();
		infoButton.container.addChild(new gui_ContainerHolder(infoButton.container,this.stage,new PIXI.Sprite(Resources.getTexture(textureName))));
		infoButton.container.addChild(new gui_TextElement(infoButton.container,this.stage,null,getAmount,null,{ left : 1 + extraSpacingText, right : 0, top : 1, bottom : 0}));
		infoButton.container.minWidth = minWidth;
		return infoButton;
	}
	,closeWindow: function(inProcessOfOpeningAnother) {
		if(inProcessOfOpeningAnother == null) {
			inProcessOfOpeningAnother = false;
		}
		if(this.city.pauseGame && this.pausedForWindow) {
			this.city.set_pauseGame(false);
			this.pausedForWindow = false;
		}
		if(!this.city.pauseGame && (!common_ArrayExtensions.contains(this.city.gui.windowStackMeta,"GameMenu") || this.city.gui.windowStackMeta.length == 1) && !inProcessOfOpeningAnother) {
			common_PokiHelpers.reportStartGameplay();
		}
		GUI.prototype.closeWindow.call(this,inProcessOfOpeningAnother);
	}
	,pauseForWindow: function() {
		var wasPaused = this.city.pauseGame;
		this.city.set_pauseGame(true);
		if(!wasPaused) {
			this.pausedForWindow = true;
		}
	}
	,activateLoserState: function() {
		this.cityInfo.clear();
		this.buildingButtons.activateLoserState();
	}
	,showTutorialArrows1: function() {
		var _gthis = this;
		var oldWindowOnDestroy = this.windowOnDestroy;
		var windowClosed = false;
		this.windowOnDestroy = function() {
			windowClosed = true;
			if(oldWindowOnDestroy != null) {
				oldWindowOnDestroy();
			}
		};
		this.overlayElements.push(new gui_HelpArrow(this,this.gameHelpStage,function() {
			return _gthis.windowInner.children[_gthis.windowInner.children.length - 1].children[1];
		},function() {
			return !windowClosed;
		},gui_HelpArrowDirection.Left,180));
		this.buildingButtons.showTutorialArrows1(this.overlayElements,function() {
			return windowClosed;
		},this.gameHelpStage);
	}
	,showTutorialArrowsBuildStoneMine: function(windowClosed) {
		var _gthis = this;
		var woodAmountArrow = new gui_HelpArrow(this,this.gameHelpStage,function() {
			return _gthis.woodAmountDisplay;
		},function() {
			if(windowClosed()) {
				return _gthis.city.materials.wood < 4;
			} else {
				return false;
			}
		},gui_HelpArrowDirection.DownHint,0);
		woodAmountArrow.addText("See your wood here.");
		this.overlayElements.push(woodAmountArrow);
		this.buildingButtons.showTutorialArrows101(this.overlayElements,function() {
			return _gthis.city.materials.wood >= 4;
		},this.gameHelpStage);
	}
	,showTutorialArrows2: function(windowClosed) {
		var _gthis = this;
		var everHadAnyPrio = false;
		var origWindow = null;
		var everHadPrio = function() {
			if(everHadAnyPrio && origWindow == null) {
				origWindow = _gthis.window;
			}
			if(!everHadAnyPrio) {
				var _this = _gthis.city.simulation.jobAssigner.priorityJobs;
				if(__map_reserved["buildings.StoneMine"] != null ? _this.existsReserved("buildings.StoneMine") : _this.h.hasOwnProperty("buildings.StoneMine")) {
					var _this1 = _gthis.city.simulation.jobAssigner.priorityJobs;
					everHadAnyPrio = (__map_reserved["buildings.StoneMine"] != null ? _this1.getReserved("buildings.StoneMine") : _this1.h["buildings.StoneMine"]) != 0;
				} else {
					everHadAnyPrio = false;
				}
			} else {
				everHadAnyPrio = true;
			}
			return everHadAnyPrio;
		};
		this.overlayElements.push(new gui_HelpArrow(this,this.gameHelpStage,function() {
			return _gthis.hideShowUIButton;
		},function() {
			if(windowClosed() && gui_WorkerDistributionWindow.tutorialStoneMineUpButton == null && !everHadPrio()) {
				return _gthis.cityExtraInfoHidden;
			} else {
				return false;
			}
		},gui_HelpArrowDirection.Down));
		var ha2 = new gui_HelpArrow(this,this.gameHelpStage,function() {
			return _gthis.workerAssignButton;
		},function() {
			if(windowClosed() && gui_WorkerDistributionWindow.tutorialStoneMineUpButton == null) {
				return !everHadPrio();
			} else {
				return false;
			}
		},gui_HelpArrowDirection.Down);
		if(!this.game.isMobile) {
			ha2.useBigMovement();
		}
		this.overlayElements.push(ha2);
		this.overlayElements.push(new gui_HelpArrow(this,this.gameHelpStage,function() {
			return gui_WorkerDistributionWindow.tutorialStoneMineUpButton;
		},function() {
			if(gui_WorkerDistributionWindow.tutorialStoneMineUpButton != null) {
				return !everHadPrio();
			} else {
				return false;
			}
		},gui_HelpArrowDirection.Left));
		var stoneAmountArrow = new gui_HelpArrow(this,this.gameHelpStage,function() {
			return _gthis.woodAmountDisplay;
		},function() {
			if(everHadPrio()) {
				if(_gthis.window != null) {
					return _gthis.window == origWindow;
				} else {
					return true;
				}
			} else {
				return false;
			}
		},gui_HelpArrowDirection.DownHint,0);
		if(this.game.rect.width < 900) {
			stoneAmountArrow.pleaseAlignExtraTextRight = true;
		}
		stoneAmountArrow.addText("Great! Now, let's gather 6 wood and 4 stone.");
		this.overlayElements.push(stoneAmountArrow);
		this.buildingButtons.showTutorialArrows2(this.overlayElements,everHadPrio,this.gameHelpStage,windowClosed);
		var needsSecondHelp = function() {
			if(_gthis.city.materials.stone > 6 && _gthis.city.materials.wood < 6) {
				return !Lambda.exists(_gthis.city.permanents,function(pm) {
					if(pm["is"](buildings_WoodcuttingCentre)) {
						return pm.workers.length > 0;
					} else {
						return false;
					}
				});
			} else {
				return false;
			}
		};
		var hasWorkersOnStone = function() {
			var _this2 = _gthis.city.simulation.jobAssigner.priorityJobs;
			if(__map_reserved["buildings.StoneMine"] != null ? _this2.existsReserved("buildings.StoneMine") : _this2.h.hasOwnProperty("buildings.StoneMine")) {
				var _this3 = _gthis.city.simulation.jobAssigner.priorityJobs;
				return (__map_reserved["buildings.StoneMine"] != null ? _this3.getReserved("buildings.StoneMine") : _this3.h["buildings.StoneMine"]) >= 3;
			} else {
				return false;
			}
		};
		var reduceStoneText = "You have enough stone for now! Let's get some workers back on cutting wood.";
		var ciButton = new gui_HelpArrow(this,this.gameHelpStage,function() {
			return _gthis.hideShowUIButton;
		},function() {
			if(gui_WorkerDistributionWindow.tutorialStoneMineUpButton == null && needsSecondHelp()) {
				return _gthis.cityExtraInfoHidden;
			} else {
				return false;
			}
		},gui_HelpArrowDirection.Down);
		ciButton.addText(reduceStoneText);
		this.overlayElements.push(ciButton);
		var waButton = new gui_HelpArrow(this,this.gameHelpStage,function() {
			return _gthis.workerAssignButton;
		},function() {
			if(gui_WorkerDistributionWindow.tutorialStoneMineUpButton == null) {
				return needsSecondHelp();
			} else {
				return false;
			}
		},gui_HelpArrowDirection.Down);
		waButton.addText(reduceStoneText);
		this.overlayElements.push(waButton);
		var stoneMineDownButton = new gui_HelpArrow(this,this.gameHelpStage,function() {
			return gui_WorkerDistributionWindow.tutorialStoneMineDownButton;
		},function() {
			if(gui_WorkerDistributionWindow.tutorialStoneMineDownButton != null && needsSecondHelp()) {
				return hasWorkersOnStone();
			} else {
				return false;
			}
		},gui_HelpArrowDirection.Left);
		stoneMineDownButton.addText("Reduce the priority of stone mining...");
		this.overlayElements.push(stoneMineDownButton);
		var woodUpButton = new gui_HelpArrow(this,this.gameHelpStage,function() {
			return gui_WorkerDistributionWindow.tutorialWoodCuttersUpButton;
		},function() {
			if(gui_WorkerDistributionWindow.tutorialWoodCuttersUpButton != null && needsSecondHelp()) {
				return !hasWorkersOnStone();
			} else {
				return false;
			}
		},gui_HelpArrowDirection.Left);
		woodUpButton.addText("Increase the priority of woodcutting!");
		this.overlayElements.push(woodUpButton);
	}
	,showTutorialArrows3: function() {
		var _gthis = this;
		var storyHelpButtonUsed = false;
		var stoneAmountArrow = new gui_HelpArrow(this,this.gameHelpStage,function() {
			return _gthis.storyHelpButton;
		},function() {
			if(!storyHelpButtonUsed) {
				return _gthis.window == null;
			} else {
				return false;
			}
		},gui_HelpArrowDirection.DownHint,0);
		stoneAmountArrow.addText("Tip! If you ever forget what to do, just " + (this.game.isMobile ? "tap on" : "hover over") + " the ? here.");
		this.overlayElements.push(stoneAmountArrow);
		this.storyHelpButtonOnUse = function() {
			storyHelpButtonUsed = true;
			_gthis.storyHelpButtonOnUse = null;
		};
	}
	,showTutorialArrows4: function() {
		var _gthis = this;
		if(!this.game.isMobile && this.simulationSpeedChosen == 0) {
			var gameSpeedUsed = false;
			var speedHelpArrow = new gui_HelpArrow(this,this.gameHelpStage,function() {
				return _gthis.gameSpeedButton;
			},function() {
				if(!gameSpeedUsed) {
					return _gthis.window == null;
				} else {
					return false;
				}
			},gui_HelpArrowDirection.DownHint,0);
			speedHelpArrow.addText("Tip! If you ever think the game is going a bit too slowly, you can speed it up with the button here.");
			this.overlayElements.push(speedHelpArrow);
			this.gameSpeedOnUse = function() {
				gameSpeedUsed = true;
				_gthis.gameSpeedOnUse = null;
			};
		}
	}
	,showWindowCloseWarning: function(time) {
		if(time == null) {
			time = 300;
		}
		var _gthis = this;
		var oldWindowOnDestroy = this.windowOnDestroy;
		var windowClosed = false;
		this.windowOnDestroy = function() {
			windowClosed = true;
			if(oldWindowOnDestroy != null) {
				oldWindowOnDestroy();
			}
		};
		this.overlayElements.push(new gui_HelpArrow(this,this.gameHelpStage,function() {
			return _gthis.windowInner.children[_gthis.windowInner.children.length - 1].children[1];
		},function() {
			return !windowClosed;
		},gui_HelpArrowDirection.Left,time));
		return function() {
			return windowClosed;
		};
	}
	,clearTutorial: function() {
		var _g = 0;
		var _g1 = this.overlayElements;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			elem.destroy();
		}
		this.overlayElements = [];
	}
	,refreshCategoryBuildingsShown: function() {
		this.buildingButtons.refreshCategoryBuildingsShown();
	}
	,__class__: gui_CityGUI
});
var gui_ClimateCrisisExplainerWindow = function() { };
$hxClasses["gui.ClimateCrisisExplainerWindow"] = gui_ClimateCrisisExplainerWindow;
gui_ClimateCrisisExplainerWindow.__name__ = ["gui","ClimateCrisisExplainerWindow"];
gui_ClimateCrisisExplainerWindow.create = function(city,gui1,stage,thisWindow) {
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Let's Stop the Crimate Crisis!",null,"Arial16"));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"As you probably know, our climate is changing because of greenhouse gas emissions caused by humans. " + "We only have about a decade left to drastically reduce emissions if we want to prevent the worst effects, which could include flooding, draughts and major health risks. " + "Here are just a few actions you can take:",null,"Arial"));
	thisWindow.addChild(new gui_GUISpacing(thisWindow,new common_Point(2,6)));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Vote!",null,"Arial15"));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"It is very important that governments create laws that help companies and people reduce greenhouse gas emissions. " + "Therefore, please vote for a sensible party whenever you can.",null,"Arial"));
	thisWindow.addChild(new gui_GUISpacing(thisWindow,new common_Point(2,6)));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Eat Less Meat",null,"Arial15"));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"There are amazing meat alternatives, that taste great and cause far less harmful emissions. Also, beans or nuts can be a good alternative source of protein.",null,"Arial"));
	thisWindow.addChild(new gui_GUISpacing(thisWindow,new common_Point(2,6)));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Don't Fly",null,"Arial15"));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Flying causes a huge amount of CO2 emission. Stay on the ground whenever you can. If you like to travel, taking the train is a great, fun option!",null,"Arial"));
	thisWindow.addChild(new gui_GUISpacing(thisWindow,new common_Point(2,6)));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Be Informed",null,"Arial15"));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Knowledge is power! Read climate news and facts on sites like The Guardian Environment and the Climate Reality Project.",null,"Arial"));
	thisWindow.addChild(new gui_GUISpacing(thisWindow,new common_Point(2,6)));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Thanks,",null,"Arial"));
	thisWindow.addChild(new gui_GUISpacing(thisWindow,new common_Point(2,6)));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Florian van Strien",null,"Arial"));
	thisWindow.addChild(new gui_GUISpacing(thisWindow,new common_Point(2,10)));
	gui1.windowAddBottomButtons([{ text : "Read More (External Link)", onHover : function() {
		city.game.setOnClickTo = function() {
			window.open("https://www.climaterealityproject.org/climate-101","_blank");
		};
	}, action : function() {
	}}]);
};
var gui_ContainerButton = function(gui1,stage,parent,action,isActive,onHover,buttonSpriteName) {
	if(buttonSpriteName == null) {
		buttonSpriteName = "spr_button";
	}
	this.needsAttention = false;
	this.highlightPatch = null;
	gui_Button.call(this,gui1,stage,parent,action,isActive,onHover);
	this.buttonTextures = Resources.getTextures(buttonSpriteName,3);
	this.buttonPatch = new gui_NinePatch(this.buttonTextures[0],2,2,2);
	this.buttonPatch.texture = this.buttonTextures[1];
	this.buttonPatch.updateTextures(false);
	this.buttonPatch.texture = this.buttonTextures[2];
	this.buttonPatch.updateTextures(false);
	this.buttonPatch.setTextureSet(0);
	stage.addChild(this.buttonPatch);
	this.container = new gui_GUIContainer(gui1,stage,this);
	this.rect = new common_Rectangle(0,0,2,2);
};
$hxClasses["gui.ContainerButton"] = gui_ContainerButton;
gui_ContainerButton.__name__ = ["gui","ContainerButton"];
gui_ContainerButton.__super__ = gui_Button;
gui_ContainerButton.prototype = $extend(gui_Button.prototype,{
	setNeedsAttention: function(needsAttention) {
		if(needsAttention == null) {
			needsAttention = false;
		}
		this.needsAttention = needsAttention;
		this.updateNeedsAttention();
	}
	,updateNeedsAttention: function() {
		if(this.buttonPatch == null) {
			return;
		}
		if(this.needsAttention && this.highlightPatch == null) {
			this.highlightPatch = new gui_NinePatch(Resources.getTexture("spr_greenoutline"),2,this.buttonPatch.npWidth,this.buttonPatch.npHeight);
			this.stage.addChild(this.highlightPatch);
			this.highlightPatch.position.set(this.rect.x,this.rect.y);
			this.highlightPatch.updateSprites();
		}
		if(this.highlightPatch != null) {
			if(this.needsAttention && this.buttonPatch.currentTextureSet == 0) {
				this.highlightPatch.alpha = (Math.sin(this.gui.guiTimer / 10) + 1) / 2;
			} else {
				this.highlightPatch.alpha = 0;
			}
		}
	}
	,updatePosition: function(newPosition) {
		gui_Button.prototype.updatePosition.call(this,newPosition);
		this.buttonPatch.position.set(newPosition.x,newPosition.y);
		this.buttonPatch.updateSprites();
		if(this.highlightPatch != null) {
			this.highlightPatch.position.set(newPosition.x,newPosition.y);
			this.highlightPatch.updateSprites();
		}
		this.container.updatePosition(newPosition);
	}
	,updateSize: function() {
		if(this.container != null) {
			this.rect.width = this.container.rect.width;
			this.rect.height = this.container.rect.height;
			this.updateSizeDisplay();
			if(this.parent != null) {
				this.parent.updateSize();
			}
			this.container.minWidth = this.container.baseWidth;
		}
	}
	,updateSizeDisplay: function() {
		if(this.container != null) {
			this.buttonPatch.npWidth = this.rect.width;
			this.buttonPatch.npHeight = this.rect.height;
			this.buttonPatch.updateSprites();
			if(this.highlightPatch != null) {
				this.highlightPatch.npWidth = this.rect.width;
				this.highlightPatch.npHeight = this.rect.height;
				this.highlightPatch.updateSprites();
			}
		}
	}
	,handleMouse: function(mouse) {
		var _gthis = this;
		return gui_Button.prototype.doHandleMouse.call(this,mouse,function() {
			_gthis.buttonPatch.setTextureSet(1);
		},function() {
			_gthis.buttonPatch.setTextureSet(2);
		});
	}
	,update: function() {
		this.container.update();
		if(this.mouseOut) {
			this.buttonPatch.setTextureSet(0);
		}
		if(this.isActive()) {
			this.buttonPatch.setTextureSet(2);
		}
		this.updateNeedsAttention();
		gui_Button.prototype.update.call(this);
	}
	,destroy: function() {
		gui_Button.prototype.destroy.call(this);
		this.container.destroy();
		this.stage.removeChild(this.buttonPatch);
		if(this.highlightPatch != null) {
			this.highlightPatch.destroy();
		}
	}
	,__class__: gui_ContainerButton
});
var gui_ContainerButtonWithProgress = function(gui1,stage,parent,action,isActive,onHover,buttonSpriteName,backColor,frontColor,autoSetProgress) {
	if(frontColor == null) {
		frontColor = 16777215;
	}
	if(backColor == null) {
		backColor = 10526880;
	}
	if(buttonSpriteName == null) {
		buttonSpriteName = "spr_button";
	}
	this.progressAmount = 0;
	gui_ContainerButton.call(this,gui1,stage,parent,action,isActive,onHover,buttonSpriteName);
	this.graphics = new PIXI.Graphics(false);
	stage.addChild(this.graphics);
	this.backColor = backColor;
	this.frontColor = frontColor;
	this.autoSetProgress = autoSetProgress;
};
$hxClasses["gui.ContainerButtonWithProgress"] = gui_ContainerButtonWithProgress;
gui_ContainerButtonWithProgress.__name__ = ["gui","ContainerButtonWithProgress"];
gui_ContainerButtonWithProgress.__super__ = gui_ContainerButton;
gui_ContainerButtonWithProgress.prototype = $extend(gui_ContainerButton.prototype,{
	update: function() {
		gui_ContainerButton.prototype.update.call(this);
		if(this.autoSetProgress != null) {
			this.setProgress(this.autoSetProgress());
		}
	}
	,updateProgressDisplay: function() {
		if(this.progressAmount < 0) {
			this.graphics.clear();
			return;
		}
		var _this = this.rect;
		var tmp = new common_Point(_this.x,_this.y);
		this.graphics.position.x = tmp.x;
		var _this1 = this.rect;
		var tmp1 = new common_Point(_this1.x,_this1.y);
		this.graphics.position.y = tmp1.y;
		this.graphics.clear().beginFill(this.backColor,1).drawRect(1,1,this.rect.width - 2,this.rect.height - 2).endFill().beginFill(this.frontColor,1).drawRect(1,1,Math.round((this.rect.width - 2) * this.progressAmount),this.rect.height - 2).endFill();
	}
	,updatePosition: function(newPosition) {
		gui_ContainerButton.prototype.updatePosition.call(this,newPosition);
		this.updateProgressDisplay();
	}
	,updateSizeDisplay: function() {
		gui_ContainerButton.prototype.updateSizeDisplay.call(this);
		this.updateProgressDisplay();
	}
	,setProgress: function(progressAmount) {
		this.progressAmount = progressAmount;
		this.updateProgressDisplay();
	}
	,destroy: function() {
		gui_ContainerButton.prototype.destroy.call(this);
		this.graphics.destroy();
	}
	,__class__: gui_ContainerButtonWithProgress
});
var gui_ContainerHolder = function(parent,stage,container,padding,update,handleMouse) {
	this.container = container;
	this.stage = stage;
	this.updateFunction = update;
	this.handleMouseFunction = handleMouse;
	stage.addChild(container);
	this.rect = new common_Rectangle(0,0,0,0);
	if(padding == null) {
		padding = { left : 0, top : 0, right : 0, bottom : 0};
	}
	this.padding = padding;
	this.updateSize();
	this.parent = parent;
};
$hxClasses["gui.ContainerHolder"] = gui_ContainerHolder;
gui_ContainerHolder.__name__ = ["gui","ContainerHolder"];
gui_ContainerHolder.__interfaces__ = [gui_IGUIElement];
gui_ContainerHolder.prototype = {
	updateSize: function() {
		var _g = this.container;
		var m = _g;
		if(js_Boot.__instanceof(this.container,gui_MaterialsCostDisplay) || js_Boot.__instanceof(this.container,gui_MaterialsDisplay)) {
			this.rect.width = Math.round(m.displayWidth);
		} else {
			this.rect.width = Math.round(this.container.width);
		}
		this.rect.height = Math.round(this.container.height);
		this.afterSizeUpdate();
	}
	,afterSizeUpdate: function() {
		this.rect.width += this.padding.left + this.padding.right;
		this.rect.height += this.padding.top + this.padding.bottom;
		if(this.parent != null) {
			this.parent.updateSize();
		}
	}
	,updatePosition: function(newPosition) {
		this.rect.x = newPosition.x;
		this.rect.y = newPosition.y;
		this.container.position.x = newPosition.x + this.padding.left;
		this.container.position.y = newPosition.y + this.padding.top;
	}
	,handleMouse: function(mouse) {
		if(this.handleMouseFunction != null) {
			return this.handleMouseFunction(mouse);
		}
		return false;
	}
	,update: function() {
		if(this.updateFunction != null) {
			this.updateFunction();
		}
	}
	,destroy: function() {
		this.stage.removeChild(this.container);
	}
	,__class__: gui_ContainerHolder
};
var gui_GUIContainer = function(gui1,stage,parent,position,origin,children,background,padding) {
	this.neverDownsize = false;
	this.minHeight = 0;
	this.minWidth = 0;
	this.fillPrimarySize = false;
	this.fillSecondarySize = false;
	this.direction = gui_GUIContainerDirection.Horizontal;
	this.alignment = gui_GUIContainerAlignment.LeftOrTop;
	this.parent = parent;
	this.stage = stage;
	this.gui = gui1;
	this.children = children == null ? [] : children;
	this.background = background;
	if(padding == null) {
		padding = { top : 0, right : 0, bottom : 0, left : 0};
	}
	this.padding = padding;
	if(background != null) {
		stage.addChild(background);
	}
	this.rect = new common_Rectangle(0,0,0,0);
	this.origin = origin == null ? new common_FPoint(0,0) : origin;
	if(position == null) {
		position = new common_Point(0,0);
	}
	this.updatePosition(position);
	this.updateSize();
};
$hxClasses["gui.GUIContainer"] = gui_GUIContainer;
gui_GUIContainer.__name__ = ["gui","GUIContainer"];
gui_GUIContainer.__interfaces__ = [gui_IGUIElement];
gui_GUIContainer.prototype = {
	handleMouse: function(mouse) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.handleMouse(mouse)) {
				return true;
			}
		}
		if(this.background != null && this.rect.contains(mouse.position)) {
			mouse.claimMouse(this);
			return true;
		}
		return false;
	}
	,update: function() {
		if(this.onUpdate != null) {
			this.onUpdate();
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.update();
		}
	}
	,updateSize: function() {
		this.updateSizeNonRecursive();
		if(this.parent != null) {
			this.parent.updateSize();
		} else {
			this.updateChildrenPosition();
		}
	}
	,updateSizeNonRecursive: function() {
		this.rect.width = 0;
		this.rect.height = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(child,gui_GUIFiller)) {
				continue;
			}
			if(js_Boot.__instanceof(child,gui_GUIContainer)) {
				var childContainer = child;
				if(this.direction == gui_GUIContainerDirection.Horizontal) {
					this.rect.width += childContainer.originalRectWidth;
					var val1 = this.rect.height;
					var val2 = childContainer.originalRectHeight;
					this.rect.height = val2 > val1 ? val2 : val1;
				} else {
					var val11 = this.rect.width;
					var val21 = childContainer.originalRectWidth;
					this.rect.width = val21 > val11 ? val21 : val11;
					this.rect.height += childContainer.originalRectHeight;
				}
			} else if(this.direction == gui_GUIContainerDirection.Horizontal) {
				this.rect.width += child.rect.width;
				var val12 = this.rect.height;
				var val22 = child.rect.height;
				this.rect.height = val22 > val12 ? val22 : val12;
			} else {
				var val13 = this.rect.width;
				var val23 = child.rect.width;
				this.rect.width = val23 > val13 ? val23 : val13;
				this.rect.height += child.rect.height;
			}
		}
		if(this.neverDownsize) {
			if(this.rect.width > this.minWidth) {
				this.minWidth = this.rect.width;
			}
			if(this.rect.height > this.minHeight) {
				this.minHeight = this.rect.height;
			}
		}
		if(this.rect.width < this.minWidth) {
			this.rect.width = this.minWidth;
		}
		if(this.rect.height < this.minHeight) {
			this.rect.height = this.minHeight;
		}
		this.baseWidth = this.rect.width;
		this.baseHeight = this.rect.height;
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var child1 = _g11[_g2];
			++_g2;
			if(js_Boot.__instanceof(child1,gui_GUIFiller)) {
				var childFiller = child1;
				var _g21 = this.direction;
				switch(_g21[1]) {
				case 0:
					this.rect.width += childFiller.minFill;
					break;
				case 1:
					this.rect.height += childFiller.minFill;
					break;
				}
			}
		}
		this.rect.width += this.padding.left + this.padding.right;
		this.rect.height += this.padding.top + this.padding.bottom;
		this.originalRectWidth = this.rect.width;
		this.originalRectHeight = this.rect.height;
		this.nonBaseWidth = this.rect.width - this.baseWidth;
		this.nonBaseHeight = this.rect.height - this.baseHeight;
	}
	,updateBackgroundSize: function() {
		if(this.background != null) {
			var oldBackgroundWidth = this.background.npWidth;
			var oldBackgroundHeight = this.background.npHeight;
			this.background.npWidth = this.rect.width;
			this.background.npHeight = this.rect.height;
			if(this.background != null) {
				this.background.position.x = this.rect.x;
				this.background.position.y = this.rect.y;
				this.background.updateSprites();
			}
			if(oldBackgroundWidth != this.background.npWidth || oldBackgroundHeight != this.background.npHeight) {
				this.background.updateSprites();
			}
		}
	}
	,updatePosition: function(newPosition) {
		this.position = newPosition;
		this.updateChildrenPosition();
		if(this.background != null) {
			this.background.position.x = this.rect.x;
			this.background.position.y = this.rect.y;
			this.background.updateSprites();
		}
	}
	,updateChildrenPosition: function() {
		var _this = this.rect;
		var newPos_y;
		var newPos_x;
		var _this1 = this.position;
		var otherPoint_y;
		var otherPoint_x = this.origin.x * this.rect.width | 0;
		otherPoint_y = this.origin.y * this.rect.height | 0;
		newPos_x = _this1.x - otherPoint_x;
		newPos_y = _this1.y - otherPoint_y;
		new common_Point(_this.x = newPos_x,_this.y = newPos_y);
		var extraFillAmount = 0;
		var extraFillNumberLeft = 0;
		if(this.rect.width > this.originalRectWidth || this.rect.height > this.originalRectHeight) {
			var originalChildrenSize = 0;
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(js_Boot.__instanceof(child,gui_GUIContainer) && child.fillPrimarySize) {
					var childContainer = child;
					++extraFillNumberLeft;
					var _g2 = this.direction;
					switch(_g2[1]) {
					case 0:
						originalChildrenSize += childContainer.originalRectWidth;
						break;
					case 1:
						originalChildrenSize += childContainer.originalRectHeight;
						break;
					}
				} else {
					var _g21 = this.direction;
					switch(_g21[1]) {
					case 0:
						originalChildrenSize += child.rect.width;
						break;
					case 1:
						originalChildrenSize += child.rect.height;
						break;
					}
				}
			}
			if(extraFillNumberLeft >= 0) {
				var _g3 = this.direction;
				switch(_g3[1]) {
				case 0:
					originalChildrenSize -= this.nonBaseWidth;
					extraFillAmount = this.rect.width - originalChildrenSize;
					break;
				case 1:
					originalChildrenSize -= this.nonBaseHeight;
					extraFillAmount = this.rect.height - originalChildrenSize;
					break;
				}
			}
		}
		var secundarySizeFillWidth = this.rect.width - this.padding.left - this.padding.right;
		var secundarySizeFillHeight = this.rect.height - this.padding.top - this.padding.bottom;
		var _g4 = 0;
		var _g11 = this.children;
		while(_g4 < _g11.length) {
			var child1 = _g11[_g4];
			++_g4;
			if(js_Boot.__instanceof(child1,gui_GUIFiller)) {
				var _g22 = this.direction;
				switch(_g22[1]) {
				case 0:
					child1.rect.width = this.rect.width - this.padding.left - this.padding.right - this.baseWidth;
					break;
				case 1:
					child1.rect.height = this.rect.height - this.padding.top - this.padding.bottom - this.baseHeight;
					break;
				}
			} else if(js_Boot.__instanceof(child1,gui_ContainerButton)) {
				var childContainerButton = child1;
				if(childContainerButton.container.fillSecondarySize) {
					if(this.direction == gui_GUIContainerDirection.Horizontal) {
						child1.rect.height = secundarySizeFillHeight;
						childContainerButton.container.rect.height = secundarySizeFillHeight;
					} else {
						child1.rect.width = secundarySizeFillWidth;
						childContainerButton.container.rect.width = secundarySizeFillWidth;
					}
				}
				childContainerButton.updateSizeDisplay();
			} else if(js_Boot.__instanceof(child1,gui_GUIContainer)) {
				var childContainer1 = child1;
				if(childContainer1.fillSecondarySize) {
					if(this.direction == gui_GUIContainerDirection.Horizontal) {
						child1.rect.height = secundarySizeFillHeight;
					} else {
						child1.rect.width = secundarySizeFillWidth;
					}
				}
				if(childContainer1.fillPrimarySize) {
					var thisFillAmount = extraFillAmount / extraFillNumberLeft | 0;
					var _g23 = this.direction;
					switch(_g23[1]) {
					case 0:
						child1.rect.width = childContainer1.originalRectWidth + thisFillAmount;
						break;
					case 1:
						child1.rect.height = childContainer1.originalRectHeight + thisFillAmount;
						break;
					}
					extraFillAmount -= thisFillAmount;
					--extraFillNumberLeft;
				}
			}
		}
		var x = this.rect.x + this.padding.left;
		var y = this.rect.y + this.padding.top;
		var _g5 = this.direction;
		switch(_g5[1]) {
		case 0:
			var _g6 = 0;
			var _g12 = this.children;
			while(_g6 < _g12.length) {
				var child2 = _g12[_g6];
				++_g6;
				if(js_Boot.__instanceof(child2,gui_GUIContainer)) {
					var childContainer2 = child2;
					var _g24 = childContainer2.alignment;
					switch(_g24[1]) {
					case 0:
						child2.updatePosition(new common_Point(x,y));
						break;
					case 1:
						child2.updatePosition(new common_Point(x,y + ((this.rect.height - this.padding.top - this.padding.bottom - child2.rect.height) / 2 | 0)));
						break;
					case 2:
						child2.updatePosition(new common_Point(x,this.rect.get_y2() - this.padding.bottom - child2.rect.height));
						break;
					}
				} else {
					child2.updatePosition(new common_Point(x,y));
				}
				x += child2.rect.width;
			}
			break;
		case 1:
			var _g7 = 0;
			var _g13 = this.children;
			while(_g7 < _g13.length) {
				var child3 = _g13[_g7];
				++_g7;
				if(js_Boot.__instanceof(child3,gui_GUIContainer)) {
					var childContainer3 = child3;
					var _g25 = childContainer3.alignment;
					switch(_g25[1]) {
					case 0:
						child3.updatePosition(new common_Point(x,y));
						break;
					case 1:
						child3.updatePosition(new common_Point(x + ((this.rect.width - this.padding.left - this.padding.right - child3.rect.width) / 2 | 0),y));
						break;
					case 2:
						child3.updatePosition(new common_Point(this.rect.get_x2() - child3.rect.width - this.padding.right,y));
						break;
					}
				} else {
					child3.updatePosition(new common_Point(x,y));
				}
				y += child3.rect.height;
			}
			break;
		}
		this.updateBackgroundSize();
	}
	,addChild: function(child) {
		this.children.push(child);
		this.updateSize();
		return child;
	}
	,addChildWithoutSizeUpdate: function(child) {
		this.children.push(child);
		return child;
	}
	,insertChild: function(child,atPosition) {
		this.children.splice(atPosition,0,child);
		this.updateSize();
		return child;
	}
	,removeChild: function(child,thenUpdateSize) {
		if(thenUpdateSize == null) {
			thenUpdateSize = true;
		}
		child.destroy();
		HxOverrides.remove(this.children,child);
		if(thenUpdateSize) {
			this.updateSize();
		}
	}
	,clear: function() {
		Lambda.iter(this.children,function(c) {
			c.destroy();
		});
		this.children = [];
		this.updateSize();
	}
	,destroy: function() {
		if(this.onDestroy != null) {
			this.onDestroy();
		}
		Lambda.iter(this.children,function(c) {
			c.destroy();
		});
		if(this.background != null) {
			this.stage.removeChild(this.background);
		}
	}
	,__class__: gui_GUIContainer
};
var gui_ContainerWithScrollbar = function(maxWidthWithoutScrollbar,maxHeight,gui1,stage,parent,position,origin,children,background,padding,extraPadding) {
	if(extraPadding == null) {
		extraPadding = 1;
	}
	this.setScrollPositionNextUpdate = null;
	this.extraPadding = 1;
	this.scrollable = null;
	gui_GUIContainer.call(this,gui1,stage,parent,position,origin,children,background,padding);
	this.maxWidthWithoutScrollbar = maxWidthWithoutScrollbar;
	this.maxHeight = maxHeight;
	this.scrollbar = null;
	this.extraPadding = extraPadding;
};
$hxClasses["gui.ContainerWithScrollbar"] = gui_ContainerWithScrollbar;
gui_ContainerWithScrollbar.__name__ = ["gui","ContainerWithScrollbar"];
gui_ContainerWithScrollbar.__super__ = gui_GUIContainer;
gui_ContainerWithScrollbar.prototype = $extend(gui_GUIContainer.prototype,{
	setInnerContainer: function(container) {
		this.clear();
		var paddingContainer = new gui_GUIContainer(this.gui,this.stage,this,null,null,null,null,{ top : this.extraPadding, right : this.extraPadding, bottom : this.extraPadding, left : this.extraPadding});
		this.addChild(paddingContainer);
		this.scrollable = new gui_AutoScrollable(this.gui.game,this.stage,paddingContainer,new common_Point(0,0),this.maxWidthWithoutScrollbar,this.maxHeight,new common_FPoint(0,0));
		this.innerContainer = container;
		this.innerContainer.parent = this.scrollable;
		this.scrollable.setChild(this.innerContainer);
		paddingContainer.addChild(this.scrollable);
	}
	,addScrollBar: function() {
		this.scrollbar = new gui_ScrollBar(this,this.stage,this.scrollable);
		this.addChild(this.scrollbar);
	}
	,setScrollPosition: function(scrollPosition) {
		if(this.scrollable != null) {
			this.scrollable.updateScrollPosition(scrollPosition);
		}
		if(this.scrollbar != null) {
			this.scrollbar.redraw();
		}
	}
	,forceSetScrollPosition: function(scrollPosition) {
		this.setScrollPosition(new common_Point(scrollPosition.x,scrollPosition.y));
		this.setScrollPositionNextUpdate = scrollPosition;
	}
	,update: function() {
		gui_GUIContainer.prototype.update.call(this);
		if(this.setScrollPositionNextUpdate != null) {
			this.setScrollPosition(this.setScrollPositionNextUpdate);
			this.setScrollPositionNextUpdate = null;
		}
	}
	,updateSize: function() {
		if(this.scrollable != null) {
			if(this.scrollbar != null) {
				if(this.scrollable.rect.height >= this.scrollable.get_innerHeight()) {
					this.removeChild(this.scrollbar,false);
					this.scrollbar = null;
				}
			} else if(this.scrollbar == null) {
				if(this.scrollable.rect.height < this.scrollable.get_innerHeight()) {
					this.addScrollBar();
				}
			}
		}
		if(this.scrollbar != null && this.scrollable != null) {
			this.scrollbar.rect.height = this.scrollable.rect.height + this.extraPadding * 2;
		}
		gui_GUIContainer.prototype.updateSize.call(this);
	}
	,__class__: gui_ContainerWithScrollbar
});
var gui_CreateBuildingUpgrades = function() { };
$hxClasses["gui.CreateBuildingUpgrades"] = gui_CreateBuildingUpgrades;
gui_CreateBuildingUpgrades.__name__ = ["gui","CreateBuildingUpgrades"];
gui_CreateBuildingUpgrades.upgradeAll = function(city,building,upgrade,materialsToPay,onUpgrade) {
	var _g = 0;
	var _g1 = city.permanents;
	while(_g < _g1.length) {
		var permanent = _g1[_g];
		++_g;
		if(!permanent.isBuilding) {
			continue;
		}
		var buildingToUpgrade = permanent;
		if((buildingToUpgrade == null ? null : js_Boot.getClass(buildingToUpgrade)) == (building == null ? null : js_Boot.getClass(building))) {
			if(!common_ArrayExtensions.any(buildingToUpgrade.upgrades,function(bu) {
				return (bu == null ? null : js_Boot.getClass(bu)) == upgrade;
			}) && city.materials.canAfford(materialsToPay)) {
				city.materials.remove(materialsToPay);
				onUpgrade(buildingToUpgrade);
			}
		}
	}
};
gui_CreateBuildingUpgrades.getUpgradeAllNumberAndCanAfford = function(city,building,upgrade,materialsToPay) {
	var mats = city.materials.copy();
	var num = 0;
	var canAffordAll = true;
	var matsToPay = materialsToPay.copy();
	matsToPay.knowledge = 0;
	var _g = 0;
	var _g1 = city.permanents;
	while(_g < _g1.length) {
		var permanent = _g1[_g];
		++_g;
		if(!permanent.isBuilding) {
			continue;
		}
		var buildingToUpgrade = permanent;
		if((buildingToUpgrade == null ? null : js_Boot.getClass(buildingToUpgrade)) == (building == null ? null : js_Boot.getClass(building))) {
			if(!common_ArrayExtensions.any(buildingToUpgrade.upgrades,function(bu) {
				return (bu == null ? null : js_Boot.getClass(bu)) == upgrade;
			})) {
				if(mats.canAfford(matsToPay)) {
					mats.remove(matsToPay);
					++num;
				} else {
					canAffordAll = false;
				}
			}
		}
	}
	if(!canAffordAll && num == 0) {
		num = 1;
	}
	return { number : num, canAffordAll : canAffordAll};
};
gui_CreateBuildingUpgrades.setUpgradeAllDisplay = function(city,building,mcd,upgrade,materialsToPay,ch,notForParticularBuilding) {
	if(notForParticularBuilding == null) {
		notForParticularBuilding = false;
	}
	var numAndAfford = gui_CreateBuildingUpgrades.getUpgradeAllNumberAndCanAfford(city,building,upgrade,materialsToPay);
	var wdt = mcd.displayWidth;
	if(numAndAfford.number <= 1) {
		mcd.setBeforeKnowledgeText(numAndAfford.number == 0 ? "per building" : notForParticularBuilding ? "for one building" : "for this building");
		mcd.setCost(materialsToPay);
		if(wdt != mcd.displayWidth) {
			ch.updateSize();
		}
	} else {
		mcd.setBeforeKnowledgeText("for " + (numAndAfford.canAffordAll ? "all" : "" + numAndAfford.number) + " buildings");
		var mats = materialsToPay.copy();
		mats.multiply(numAndAfford.number);
		mats.knowledge = materialsToPay.knowledge;
		mcd.setCost(mats);
		if(wdt != mcd.displayWidth) {
			ch.updateSize();
		}
	}
};
gui_CreateBuildingUpgrades.addUpgradeButton = function(city,building,upgrade,onUpgrade,canRemoveUpgrade,onButtonClickSound,notForParticularBuilding) {
	if(notForParticularBuilding == null) {
		notForParticularBuilding = false;
	}
	var gui1 = city.gui;
	var this1 = Resources.buildingUpgradesInfo;
	var key = Type.getClassName(upgrade);
	var _this = this1;
	var info = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	var materialsToPay = Materials.fromBuildingUpgradesInfo(info);
	if(city.progress.unlocks.getUnlockState(upgrade) == progress_UnlockState.Researched) {
		materialsToPay.knowledge = 0;
	}
	var hasUpgrade;
	if(!common_ArrayExtensions.any(building.upgrades,function(bu) {
		return (bu == null ? null : js_Boot.getClass(bu)) == upgrade;
	})) {
		if(building.buildingMode != null) {
			var o = building.buildingMode;
			hasUpgrade = (o == null ? null : js_Boot.getClass(o)) == upgrade;
		} else {
			hasUpgrade = false;
		}
	} else {
		hasUpgrade = true;
	}
	var thisHasUpgrade = hasUpgrade;
	if(notForParticularBuilding) {
		var numAndAfford = gui_CreateBuildingUpgrades.getUpgradeAllNumberAndCanAfford(city,building,upgrade,materialsToPay);
		hasUpgrade = numAndAfford.number == 0;
	}
	var infoContainerInfo = gui_UpgradeWindowParts.createActivatableButton(gui1,hasUpgrade,function() {
		if(city.materials.canAfford(materialsToPay)) {
			if(!thisHasUpgrade) {
				city.materials.remove(materialsToPay);
				onUpgrade(building);
			}
			city.simulation.houseAssigner.shouldUpdateHouses = true;
			city.progress.unlocks.research(upgrade);
			materialsToPay.knowledge = 0;
			if(gui_UpgradeWindowParts.hasMultiUpgradeModeOn) {
				gui_CreateBuildingUpgrades.upgradeAll(city,building,upgrade,materialsToPay,onUpgrade);
			}
			city.gui.reloadWindow();
		}
	},info.name,info.description,null,null,onButtonClickSound);
	var infoContainer = infoContainerInfo.container;
	if(infoContainerInfo.button != null) {
		var this2 = gui1.currentUpgradeButtons;
		var k = Type.getClassName(upgrade);
		var v = infoContainerInfo.button;
		var _this1 = this2;
		if(__map_reserved[k] != null) {
			_this1.setReserved(k,v);
		} else {
			_this1.h[k] = v;
		}
	}
	if(!hasUpgrade) {
		if(materialsToPay.any()) {
			var mcdContainer = new gui_GUIContainer(gui1,gui1.innerWindowStage,infoContainer);
			var mcd = new gui_MaterialsCostDisplay(city,materialsToPay,gui_UpgradeWindowParts.hasMultiUpgradeModeOn ? "per building" : "");
			var ch = mcdContainer.addChild(new gui_ContainerHolder(mcdContainer,gui1.innerWindowStage,mcd,{ left : 0, right : 0, top : 0, bottom : gui_UpgradeWindowParts.hasMultiUpgradeModeOn ? materialsToPay.knowledge == 0 ? 0 : 1 : 2},$bind(mcd,mcd.updateCostDisplay)));
			if(gui_UpgradeWindowParts.hasMultiUpgradeModeOn) {
				gui_CreateBuildingUpgrades.setUpgradeAllDisplay(city,building,mcd,upgrade,materialsToPay,ch,notForParticularBuilding);
				var a1 = city;
				var a2 = building;
				var a3 = mcd;
				var a4 = upgrade;
				var a5 = materialsToPay;
				var ch1 = ch;
				var a6 = notForParticularBuilding;
				mcdContainer.onUpdate = function() {
					gui_CreateBuildingUpgrades.setUpgradeAllDisplay(a1,a2,a3,a4,a5,ch1,a6);
				};
			}
			infoContainer.addChild(mcdContainer);
		}
	} else if(!notForParticularBuilding) {
		var thisBuildingUpgrade = Lambda.find(building.upgrades,function(bu1) {
			return (bu1 == null ? null : js_Boot.getClass(bu1)) == upgrade;
		});
		if(thisBuildingUpgrade == null) {
			thisBuildingUpgrade = building.buildingMode;
		}
		if(canRemoveUpgrade || thisBuildingUpgrade.textures.length > 1) {
			var extraButtons = new gui_GUIContainer(gui1,gui1.innerWindowStage,infoContainer);
			if(canRemoveUpgrade) {
				infoContainer.padding.bottom += 1;
				extraButtons.addChild(new gui_TextButton(gui1,gui1.innerWindowStage,infoContainer,function() {
					thisBuildingUpgrade.destroy();
					HxOverrides.remove(building.upgrades,thisBuildingUpgrade);
					city.simulation.houseAssigner.shouldUpdateHouses = true;
					city.gui.reloadWindow();
				},"Remove"));
				extraButtons.addChild(new gui_GUISpacing(infoContainer,new common_Point(2,1)));
			}
			if(thisBuildingUpgrade.textures.length > 1) {
				var changeAppearanceButton = new gui_TextButton(gui1,gui1.innerWindowStage,infoContainer,function() {
					thisBuildingUpgrade.changeAppearance();
				},"Change Variant",null,function() {
					gui1.tooltip.setText(changeAppearanceButton,"Change the appearance of this upgrade.");
				});
				extraButtons.addChild(changeAppearanceButton);
			}
			infoContainer.addChild(extraButtons);
			infoContainer.addChild(new gui_GUISpacing(infoContainer,new common_Point(1,2)));
		}
	}
};
gui_CreateBuildingUpgrades.addUpgradesOrBuildingModes = function(city,building,thesePossibleUpgrades,categoryName,onUpgrade,canRemoveUpgrades,upgradeOneText,upgradeAllText,upgradeAllTextNoCost,onAllButtonSelect,onButtonClickSound,notForParticularBuilding) {
	if(notForParticularBuilding == null) {
		notForParticularBuilding = false;
	}
	var gui1 = city.gui;
	if(!common_ArrayExtensions.any(thesePossibleUpgrades,function(pu) {
		return city.progress.unlocks.getUnlockState(pu) != progress_UnlockState.Locked;
	})) {
		return;
	}
	var upgradesTitleContainer = null;
	if(categoryName != null) {
		upgradesTitleContainer = gui_UpgradeWindowParts.createHeader(gui1,categoryName);
	}
	var anyNewUpgrade = false;
	var anyUpgradeWithCost = false;
	var _g = 0;
	while(_g < thesePossibleUpgrades.length) {
		var upgrade = [thesePossibleUpgrades[_g]];
		++_g;
		if(city.progress.unlocks.getUnlockState(upgrade[0]) == progress_UnlockState.Locked) {
			continue;
		}
		var hasUpgrade;
		if(!common_ArrayExtensions.any(building.upgrades,(function(upgrade1) {
			return function(bu) {
				return (bu == null ? null : js_Boot.getClass(bu)) == upgrade1[0];
			};
		})(upgrade))) {
			if(building.buildingMode != null) {
				var o = building.buildingMode;
				hasUpgrade = (o == null ? null : js_Boot.getClass(o)) == upgrade[0];
			} else {
				hasUpgrade = false;
			}
		} else {
			hasUpgrade = true;
		}
		if(!hasUpgrade) {
			var this1 = Resources.buildingUpgradesInfo;
			var key = Type.getClassName(upgrade[0]);
			var _this = this1;
			var info = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			var costWithoutKnowledge = Materials.fromBuildingUpgradesInfo(info);
			costWithoutKnowledge.knowledge = 0;
			if(costWithoutKnowledge.any()) {
				anyUpgradeWithCost = true;
			}
		}
		if(!hasUpgrade) {
			anyNewUpgrade = true;
		}
		var upgrade2 = upgrade[0];
		var tmp = (function(a1,f) {
			return function(a2) {
				f[0](a1[0],a2);
			};
		})([upgrade[0]],[onUpgrade]);
		gui_CreateBuildingUpgrades.addUpgradeButton(city,building,upgrade2,tmp,canRemoveUpgrades,onButtonClickSound,notForParticularBuilding);
	}
	if(anyNewUpgrade && upgradesTitleContainer != null) {
		gui_UpgradeWindowParts.addOneAndMaxButtons(gui1,upgradesTitleContainer,function() {
			gui_UpgradeWindowParts.hasMultiUpgradeModeOn = false;
			city.gui.reloadWindow();
		},function() {
			gui_UpgradeWindowParts.hasMultiUpgradeModeOn = true;
			if(onAllButtonSelect != null) {
				onAllButtonSelect();
			}
			city.gui.reloadWindow();
		},upgradeOneText,upgradeAllText,upgradeAllTextNoCost,anyUpgradeWithCost);
	}
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,4)));
};
gui_CreateBuildingUpgrades.addUpgradeParts = function(building,city,showTitle,notForParticularBuilding) {
	if(notForParticularBuilding == null) {
		notForParticularBuilding = false;
	}
	var type = building == null ? null : js_Boot.getClass(building);
	var tmp = building.get_possibleUpgrades();
	gui_CreateBuildingUpgrades.addUpgradesOrBuildingModes(city,building,tmp,showTitle ? "Upgrades" : null,function(upgrade,buildingToUpgrade) {
		buildingToUpgrade.upgrades.push(Type.createInstance(upgrade,[building.stage,city.cityMidStage,building.bgStage,buildingToUpgrade]));
	},false,"Upgrade only this building.",function() {
		return "Upgrade as many buildings of this type as you can afford. There are " + city.simulation.stats.amountOfBuildingsOfType(type) + ".";
	},function() {
		return "Upgrade all buildings of this type. There are " + city.simulation.stats.amountOfBuildingsOfType(type);
	},null,Audio.get().buildingUpgradeSound,notForParticularBuilding);
};
gui_CreateBuildingUpgrades.createMainWindowPart = function(building,city) {
	var gui1 = city.gui;
	gui1.currentUpgradeButtons = new haxe_ds_StringMap();
	gui_CreateBuildingUpgrades.addUpgradeParts(building,city,true);
	var onBuildingMode = function(upgrade,buildingToUpgrade) {
		if(buildingToUpgrade.buildingMode != null) {
			buildingToUpgrade.buildingMode.destroy();
		}
		buildingToUpgrade.buildingMode = Type.createInstance(upgrade,[building.stage,city.cityMidStage,building.bgStage,buildingToUpgrade]);
	};
	var type = building == null ? null : js_Boot.getClass(building);
	var tmp = building.get_possibleBuildingModes();
	gui_CreateBuildingUpgrades.addUpgradesOrBuildingModes(city,building,tmp,"Building Modes",onBuildingMode,false,"Set the building mode of only this building.",function() {
		return "Set the building mode of as many buildings of this type as you can afford. There are " + city.simulation.stats.amountOfBuildingsOfType(type) + ".";
	},function() {
		return "Set the building mode of all buildings of this type. There are " + city.simulation.stats.amountOfBuildingsOfType(type) + ".";
	},function() {
		var o = building.buildingMode;
		var thisClass = o == null ? null : js_Boot.getClass(o);
		var this1 = Resources.buildingUpgradesInfo;
		var key = Type.getClassName(thisClass);
		var _this = this1;
		var info = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var materialsToPay = Materials.fromBuildingUpgradesInfo(info);
		materialsToPay.knowledge = 0;
		var f = onBuildingMode;
		var a1 = thisClass;
		var tmp1 = function(a2) {
			f(a1,a2);
		};
		gui_CreateBuildingUpgrades.upgradeAll(city,building,thisClass,materialsToPay,tmp1);
	});
	gui_CreateCityUpgrades.create(building.get_possibleCityUpgrades(),city);
};
gui_CreateBuildingUpgrades.createBuildingUpgradesForType = function(building,city) {
	city.gui.windowInner.addChild(new gui_GUISpacing(city.gui.windowInner,new common_Point(2,4)));
	gui_UpgradeWindowParts.hasMultiUpgradeModeOn = true;
	gui_CreateBuildingUpgrades.addUpgradeParts(building,city,false,true);
	gui_CreateCityUpgrades.create(building.get_possibleCityUpgrades(),city,false);
};
var gui_CreateCityUpgrades = function() { };
$hxClasses["gui.CreateCityUpgrades"] = gui_CreateCityUpgrades;
gui_CreateCityUpgrades.__name__ = ["gui","CreateCityUpgrades"];
gui_CreateCityUpgrades.create = function(upgrades,city,addHeader) {
	if(addHeader == null) {
		addHeader = true;
	}
	var gui1 = city.gui;
	var unlockedUpgrades = upgrades.filter(function(up) {
		return city.progress.unlocks.getUnlockState(up) == progress_UnlockState.Unlocked;
	});
	var cityUpgrades = city.upgrades;
	var cityUpgradesList = cityUpgrades.upgrades;
	if(unlockedUpgrades.length == 0) {
		return;
	}
	if(addHeader) {
		gui_UpgradeWindowParts.createHeader(gui1,"City Upgrades");
	}
	var recreateButtons;
	var buttonsContainer = new gui_GUIContainer(gui1,gui1.innerWindowStage,gui1.windowInner);
	gui1.windowInner.addChild(buttonsContainer);
	buttonsContainer.direction = gui_GUIContainerDirection.Vertical;
	buttonsContainer.fillSecondarySize = true;
	recreateButtons = function() {
		buttonsContainer.clear();
		var _g = 0;
		while(_g < unlockedUpgrades.length) {
			var upgrade = [unlockedUpgrades[_g]];
			++_g;
			var hasUpgrade = (function(upgrade1) {
				return function(bu) {
					return (bu == null ? null : js_Boot.getClass(bu)) == upgrade1[0];
				};
			})(upgrade);
			var hasUpgrade1 = common_ArrayExtensions.any(cityUpgradesList,hasUpgrade);
			var upgradeName = [Type.getClassName(upgrade[0])];
			var _this = Resources.cityUpgradesInfo;
			var info = __map_reserved[upgradeName[0]] != null ? _this.getReserved(upgradeName[0]) : _this.h[upgradeName[0]];
			var currentName = info.name;
			var currentDescription = info.description;
			if(info.nextUpgrade != null && info.nextUpgrade != "") {
				var nextUpgrade = "cityUpgrades." + info.nextUpgrade;
				if(city.progress.unlocks.getUnlockState(Type.resolveClass(nextUpgrade)) != progress_UnlockState.Locked) {
					continue;
				}
			} else if(hasUpgrade1) {
				if(info.nameIfNotDone != null) {
					currentName = info.nameIfNotDone;
				}
				if(info.descriptionIfNotDone != null) {
					currentDescription = info.descriptionIfNotDone;
				}
			}
			var materialsToPay = [Materials.fromCityUpgradesInfo(info)];
			var infoContainer;
			var infoContainer1 = (function(materialsToPay1,upgradeName1,upgrade2) {
				return function() {
					if(city.materials.canAfford(materialsToPay1[0])) {
						city.materials.remove(materialsToPay1[0]);
						city.upgrades.addUpgrade(Type.createInstance(upgrade2[0],[]));
						Analytics.sendEvent("research",upgradeName1[0]);
						city.simulation.houseAssigner.shouldUpdateHouses = true;
						city.gui.reloadWindow();
					}
				};
			})(materialsToPay,upgradeName,upgrade);
			infoContainer = gui_UpgradeWindowParts.createActivatableButton(gui1,hasUpgrade1,infoContainer1,currentName,currentDescription,buttonsContainer,null,Audio.get().buildingUpgradeSound).container;
			if(!hasUpgrade1) {
				if(materialsToPay[0].any()) {
					var mcdContainer = new gui_GUIContainer(gui1,gui1.innerWindowStage,infoContainer);
					var mcd = new gui_MaterialsCostDisplay(city,materialsToPay[0],"");
					mcdContainer.addChild(new gui_ContainerHolder(mcdContainer,gui1.innerWindowStage,mcd,{ left : 0, right : 0, top : 0, bottom : 2},$bind(mcd,mcd.updateCostDisplay)));
					infoContainer.addChild(mcdContainer);
				}
			}
		}
	};
	recreateButtons();
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,4)));
};
var gui_CreditsWindow = function() { };
$hxClasses["gui.CreditsWindow"] = gui_CreditsWindow;
gui_CreditsWindow.__name__ = ["gui","CreditsWindow"];
gui_CreditsWindow.create = function(city,gui1,stage,window) {
	window.addChild(new gui_TextElement(window,stage,"Credits",null,"Arial16"));
	window.addChild(new gui_TextElement(window,stage,"A game by Florian van Strien.",null,"Arial15"));
	window.addChild(new gui_TextElement(window,stage,"Music & SFX by Stijn Cappetijn.",null,"Arial15"));
	window.addChild(new gui_GUISpacing(window,new common_Point(2,6)));
	if(5 == 4) {
		window.addChild(new gui_TextElement(window,stage,"Big thanks to CoolMath Games for their sponsorship!",null,"Arial"));
		window.addChild(new gui_GUISpacing(window,new common_Point(2,6)));
	} else {
		var tmp = Main.isMobile;
	}
	window.addChild(new gui_TextElement(window,stage,"Software",null,"Arial15"));
	window.addChild(new gui_TextElement(window,stage,"Built with Haxe.",null,"Arial"));
	window.addChild(new gui_TextElement(window,stage,"Rendered with pixi.js.",null,"Arial"));
	window.addChild(new gui_TextElement(window,stage,"FileSaver.js; localForage; canvas-toBlob.js;",null,"Arial"));
	window.addChild(new gui_TextElement(window,stage,"polygonal-ds; thx.color; pixi-sound",null,"Arial"));
	window.addChild(new gui_GUISpacing(window,new common_Point(2,6)));
	window.addChild(new gui_TextElement(window,stage,"Early Feedback: Douwe",null,"Arial"));
	window.addChild(new gui_GUISpacing(window,new common_Point(2,6)));
	window.addChild(new gui_TextElement(window,stage,"Thanks a lot for playing!",null,"Arial"));
	if(5 == 4) {
		window.addChild(new gui_TextElement(window,stage,"While you're here on CoolMath Games, also check out my other games circloO 1 & 2 and Stop the Darkness!",null,"Arial"));
	}
	if(Config.get_enableCrossPromo() && jsFunctions.crossPromoInited()) {
		gui1.windowAddBottomButtons([{ text : "Play More Games!", action : function() {
			jsFunctions.showCrossPromoDisplay(false);
		}}]);
	} else {
		gui1.windowAddBottomButtons();
	}
};
var gui_CurrentMissionsWindow = function() { };
$hxClasses["gui.CurrentMissionsWindow"] = gui_CurrentMissionsWindow;
gui_CurrentMissionsWindow.__name__ = ["gui","CurrentMissionsWindow"];
gui_CurrentMissionsWindow.create = function(city,gui1,stage,thisWindow) {
	var theHeader = new gui_TextElement(thisWindow,stage,"Current Tasks",null,"Arial16");
	thisWindow.addChild(theHeader);
	var thereWereMoreMissions = true;
	var theText = new gui_TextElement(thisWindow,stage,null,function() {
		var goalTexts = city.progress.goalHelp.getCurrentGoalHelp();
		var fullGoalTexts = "";
		var _g = 0;
		while(_g < goalTexts.length) {
			var goalText = goalTexts[_g];
			++_g;
			if(fullGoalTexts != "") {
				fullGoalTexts += "\n\n";
			}
			fullGoalTexts += "- " + goalText.category + "\n" + goalText.text;
		}
		if(goalTexts.length != 1 != thereWereMoreMissions) {
			if(goalTexts.length == 1) {
				theHeader.setText("Current Task");
			} else {
				theHeader.setText("Current Tasks");
			}
			thereWereMoreMissions = goalTexts.length != 1;
		}
		if(fullGoalTexts == "") {
			fullGoalTexts = "---";
		}
		return fullGoalTexts;
	});
	thisWindow.addChild(theText);
	gui1.windowAddBottomButtons();
};
var gui_FollowingCitizen = function() { };
$hxClasses["gui.FollowingCitizen"] = gui_FollowingCitizen;
gui_FollowingCitizen.__name__ = ["gui","FollowingCitizen"];
gui_FollowingCitizen.createWindow = function(city,citizen,clearWindowStack) {
	if(clearWindowStack == null) {
		clearWindowStack = true;
	}
	if(clearWindowStack) {
		city.gui.clearWindowStack();
	}
	window.globalFollowingCitizen = citizen;
	city.gui.createWindow(citizen);
	city.gui.setWindowPositioning(city.game.isMobile ? gui_WindowPosition.TopLeft : gui_WindowPosition.Top);
	var a1 = city;
	var a2 = citizen;
	var a3 = clearWindowStack;
	var tmp = function() {
		gui_FollowingCitizen.createWindow(a1,a2,a3);
		return;
	};
	city.gui.setWindowReload(tmp);
	var a11 = city;
	var a21 = citizen;
	var a31 = clearWindowStack;
	var tmp1 = function() {
		gui_FollowingCitizen.createWindow(a11,a21,a31);
	};
	city.gui.addWindowToStack(tmp1);
	var windowTitle = "Following " + (citizen.nameIndex < Resources.citizenNames.length ? Resources.citizenNames[citizen.nameIndex] : "Citizen");
	var nameIdentifier = citizen.nameIndex < Resources.citizenNames.length ? Resources.citizenNames[citizen.nameIndex] : "this citizen";
	city.gui.windowInner.addChild(new gui_TextElement(city.gui.windowInner,city.gui.innerWindowStage,windowTitle,null,"Arial16"));
	city.gui.windowInner.addChild(new gui_TextElement(city.gui.windowInner,city.gui.innerWindowStage,null,function() {
		var educationLevelDescription = citizen.educationLevel < 0.01 ? "None" : citizen.educationLevel < 0.1 ? "Poor" : citizen.educationLevel < 0.2 ? "Weak" : citizen.educationLevel < 0.4 ? "Limited" : citizen.educationLevel < 0.6 ? "Moderate" : citizen.educationLevel < 0.7 ? "Fair" : citizen.educationLevel < 0.8 ? "Good" : citizen.educationLevel < 1 ? "Very Good" : citizen.educationLevel <= 1.005 ? "Great" : citizen.educationLevel <= 1.2 ? "Superior" : citizen.educationLevel < 1.4 ? "Excellent" : citizen.educationLevel < 1.6 ? "Exceptional" : citizen.educationLevel < 1.8 ? "Amazing" : citizen.educationLevel < 2 ? "Incredible" : citizen.educationLevel < 2.2 ? "World-Class" : "Phenomenal";
		return "Age: " + Math.floor(citizen.get_age()) + "\nEducation: " + educationLevelDescription;
	}));
	var citizenCanWork = citizen.get_age() >= 16 && citizen.school == null;
	var addedButtons = city.gui.windowAddBottomButtons([{ text : citizenCanWork ? "Change Home/Job" : "Change Home/School", action : function() {
		gui_FollowingCitizen.createChangeHomeAndWorkOfCitizenWindow(city,citizen);
	}}]);
	city.viewIsControlled = true;
	var selectedSprite = Resources.makeSprite("spr_selectedhuman");
	city.furtherForegroundStage.addChild(selectedSprite);
	city.gui.windowOnLateUpdate = function() {
		window.__temp1 = citizen;
		if(citizen.hasDied) {
			gui_FollowingCitizen.onCitizenDie(city,citizen,nameIdentifier,windowTitle);
			return;
		}
		if(!citizenCanWork && (citizen.get_age() >= 16 && citizen.school == null)) {
			addedButtons[0].setText("Change Home/Job");
			citizenCanWork = true;
		}
		var citizenPos = citizen.getCityPosition();
		city.viewPos = new common_FPoint(citizenPos.x,citizenPos.y);
		selectedSprite.position.set(citizenPos.x - 1,citizenPos.y - 6);
		city.cityView.updateMovingView();
	};
	city.gui.windowOnDestroy = function() {
		city.viewIsControlled = false;
		city.cityView.isDraggingView = false;
		city.furtherForegroundStage.removeChild(selectedSprite);
	};
	var point = citizen.getCityPosition();
	var tmp2 = new common_FPoint(point.x,point.y);
	city.viewPos = tmp2;
	city.cityView.updateMovingView();
};
gui_FollowingCitizen.onCitizenDie = function(city,citizen,nameIdentifier,windowTitle) {
	city.gui.clearWindowStack();
	city.gui.closeWindow();
	city.gui.createWindow();
	city.gui.windowInner.addChild(new gui_TextElement(city.gui.windowInner,city.gui.innerWindowStage,windowTitle,null,"Arial16"));
	city.gui.windowInner.addChild(new gui_TextElement(city.gui.windowInner,city.gui.innerWindowStage,"Unfortunately, " + nameIdentifier + " passed away. :("));
	city.gui.windowAddBottomButtons();
};
gui_FollowingCitizen.createChangeHomeAndWorkOfCitizenWindow = function(city,citizen) {
	var nameIdentifier = citizen.nameIndex < Resources.citizenNames.length ? Resources.citizenNames[citizen.nameIndex] : "this citizen";
	var selectedSprite = Resources.makeSprite("spr_selectedhuman");
	city.furtherForegroundStage.addChild(selectedSprite);
	city.activateSpecialCityAction(new cityActions_ChangeCitizenVitalBuildings(city,citizen));
	city.gui.createWindow(citizen);
	city.gui.setWindowPositioning(city.game.isMobile ? gui_WindowPosition.TopLeft : gui_WindowPosition.Top);
	var a1 = city;
	var a2 = citizen;
	var tmp = function() {
		gui_FollowingCitizen.createChangeHomeAndWorkOfCitizenWindow(a1,a2);
		return;
	};
	city.gui.setWindowReload(tmp);
	var a11 = city;
	var a21 = citizen;
	var tmp1 = function() {
		gui_FollowingCitizen.createChangeHomeAndWorkOfCitizenWindow(a11,a21);
	};
	city.gui.addWindowToStack(tmp1);
	var windowTitle = function() {
		var citizenCanWork = citizen.get_age() >= 16 && citizen.school == null;
		var text = citizenCanWork ? "Change Home/Job" : "Change Home/School";
		return text + " for " + (citizen.nameIndex < Resources.citizenNames.length ? Resources.citizenNames[citizen.nameIndex] : "Citizen");
	};
	city.gui.windowInner.addChild(new gui_TextElement(city.gui.windowInner,city.gui.innerWindowStage,null,windowTitle,"Arial16"));
	city.gui.windowAddBottomButtons();
	city.gui.windowOnLateUpdate = function() {
		if(citizen.hasDied) {
			var tmp2 = windowTitle();
			gui_FollowingCitizen.onCitizenDie(city,citizen,nameIdentifier,tmp2);
			return;
		}
		var citizenPos = citizen.getCityPosition();
		selectedSprite.position.set(citizenPos.x - 1,citizenPos.y - 6);
		var hhTextures = Resources.getTextures("spr_hoverhints_citizen",4);
		city.setHoverHightlight(function(pm) {
			if(citizen.job == pm && citizen.home == pm) {
				return hhTextures[3];
			} else if(citizen.job == pm) {
				return hhTextures[0];
			} else if(citizen.home == pm) {
				return hhTextures[1];
			} else if(citizen.school == pm) {
				return hhTextures[2];
			} else {
				return null;
			}
		},6735360);
	};
	city.gui.windowOnDestroy = function() {
		city.furtherForegroundStage.removeChild(selectedSprite);
		if(city.specialAction != null) {
			city.specialAction.deactivate();
		}
	};
};
var gui_FreePlayConfigureWindow = function() { };
$hxClasses["gui.FreePlayConfigureWindow"] = gui_FreePlayConfigureWindow;
gui_FreePlayConfigureWindow.__name__ = ["gui","FreePlayConfigureWindow"];
gui_FreePlayConfigureWindow.createWindow = function(city,gui1,onContinue,onCancel) {
	gui1.createWindow();
	var a1 = city;
	var a2 = gui1;
	var a3 = onContinue;
	var a4 = onCancel;
	gui1.addWindowToStack(function() {
		gui_FreePlayConfigureWindow.createWindow(a1,a2,a3,a4);
		return;
	});
	gui1.windowAddTitleText("Customize Free Play");
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,2)));
	gui1.windowAddInfoText("Starting Resources",null,"Arial15");
	var normalResources = city.materials.copy();
	var standardNumber = common_ArrayExtensions.isum(city.progress.story.storyInfo.worlds,function(w) {
		return common_ArrayExtensions.isum(w.citizens,function(wc) {
			return wc.amount;
		});
	});
	var ab = gui_ActivableButton.create(gui1,gui1.innerWindowStage,gui1.windowInner,function() {
		city.progress.sandbox.disableUnlimitedResources();
		city.materials.remove(city.materials);
		city.materials.add(normalResources);
		var _g = city.materials;
		_g.set_food(_g.food + (city.simulation.citizens.length - standardNumber) * 3);
	},function() {
		if(!city.progress.sandbox.unlimitedResources) {
			return city.materials.wood < 1000;
		} else {
			return false;
		}
	},"Normal Resources");
	gui1.windowInner.addChild(ab);
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,2)));
	var ab1 = gui_ActivableButton.create(gui1,gui1.innerWindowStage,gui1.windowInner,function() {
		city.progress.sandbox.disableUnlimitedResources();
		city.materials.remove(city.materials);
		city.materials.add(new Materials(1000,1000,1000,100,500));
		var _g1 = city.materials;
		_g1.set_food(_g1.food + (city.simulation.citizens.length - standardNumber) * 3);
	},function() {
		if(!city.progress.sandbox.unlimitedResources) {
			return city.materials.wood >= 1000;
		} else {
			return false;
		}
	},"Extra Resources");
	gui1.windowInner.addChild(ab1);
	if(Config.allowUnlimitedResources) {
		gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,2)));
		var ab2 = gui_ActivableButton.create(gui1,gui1.innerWindowStage,gui1.windowInner,function() {
			city.progress.sandbox.enableUnlimitedResources();
		},function() {
			return city.progress.sandbox.unlimitedResources;
		},"Unlimited Resources");
		gui1.windowInner.addChild(ab2);
	}
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,6)));
	gui1.windowAddInfoText("Starting Citizens",null,"Arial15");
	var startingCitizensChooser = new gui_GUIContainer(gui1,gui1.innerWindowStage,gui1.windowInner);
	startingCitizensChooser.direction = gui_GUIContainerDirection.Horizontal;
	var ab3 = gui_ActivableButton.create(gui1,gui1.innerWindowStage,gui1.windowInner,function() {
		gui_FreePlayConfigureWindow.setCityCitizens(city,standardNumber);
	},function() {
		return city.simulation.citizens.length == standardNumber;
	},standardNumber + "");
	startingCitizensChooser.addChild(ab3);
	startingCitizensChooser.addChild(new gui_GUISpacing(startingCitizensChooser,new common_Point(2,2)));
	var ab4 = gui_ActivableButton.create(gui1,gui1.innerWindowStage,gui1.windowInner,function() {
		gui_FreePlayConfigureWindow.setCityCitizens(city,10);
	},function() {
		return city.simulation.citizens.length == 10;
	},"10");
	startingCitizensChooser.addChild(ab4);
	startingCitizensChooser.addChild(new gui_GUISpacing(startingCitizensChooser,new common_Point(2,2)));
	var ab5 = gui_ActivableButton.create(gui1,gui1.innerWindowStage,gui1.windowInner,function() {
		gui_FreePlayConfigureWindow.setCityCitizens(city,25);
	},function() {
		return city.simulation.citizens.length == 25;
	},"25");
	startingCitizensChooser.addChild(ab5);
	startingCitizensChooser.addChild(new gui_GUISpacing(startingCitizensChooser,new common_Point(2,2)));
	var ab6 = gui_ActivableButton.create(gui1,gui1.innerWindowStage,gui1.windowInner,function() {
		gui_FreePlayConfigureWindow.setCityCitizens(city,100);
	},function() {
		return city.simulation.citizens.length == 100;
	},"100");
	startingCitizensChooser.addChild(ab6);
	if(Config.allowUnlimitedResources) {
		startingCitizensChooser.addChild(new gui_GUISpacing(startingCitizensChooser,new common_Point(2,2)));
		var ab7 = gui_ActivableButton.create(gui1,gui1.innerWindowStage,gui1.windowInner,function() {
			gui_FreePlayConfigureWindow.setCityCitizens(city,200);
		},function() {
			return city.simulation.citizens.length == 200;
		},"200");
		startingCitizensChooser.addChild(ab7);
		startingCitizensChooser.addChild(new gui_GUISpacing(startingCitizensChooser,new common_Point(2,2)));
		var ab8 = gui_ActivableButton.create(gui1,gui1.innerWindowStage,gui1.windowInner,function() {
			gui_FreePlayConfigureWindow.setCityCitizens(city,500);
		},function() {
			return city.simulation.citizens.length == 500;
		},"500");
		startingCitizensChooser.addChild(ab8);
	}
	gui1.windowInner.addChild(startingCitizensChooser);
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,6)));
	gui1.windowAddBottomButtons([{ text : "Back", action : function() {
		onCancel();
	}}],"Continue",function() {
		onContinue();
	});
	gui1.windowOnDestroy = onCancel;
};
gui_FreePlayConfigureWindow.setCityCitizens = function(city,number) {
	if(city.simulation.citizens.length > number) {
		while(city.simulation.citizens.length > number) {
			city.simulation.citizens[city.simulation.citizens.length - 1].tryRemove();
			var _g = city.materials;
			_g.set_food(_g.food - 3);
		}
	} else {
		while(city.simulation.citizens.length < number) {
			city.simulation.createCitizen(city.worlds.filter(function(w) {
				return common_ArrayExtensions.any(city.simulation.citizens,function(ct) {
					return ct.onWorld == w;
				});
			})[0],random_Random.getFloat(18,40));
			var _g1 = city.materials;
			_g1.set_food(_g1.food + 3);
		}
	}
};
var gui_GUIContainerDirection = $hxClasses["gui.GUIContainerDirection"] = { __ename__ : ["gui","GUIContainerDirection"], __constructs__ : ["Horizontal","Vertical"] };
gui_GUIContainerDirection.Horizontal = ["Horizontal",0];
gui_GUIContainerDirection.Horizontal.toString = $estr;
gui_GUIContainerDirection.Horizontal.__enum__ = gui_GUIContainerDirection;
gui_GUIContainerDirection.Vertical = ["Vertical",1];
gui_GUIContainerDirection.Vertical.toString = $estr;
gui_GUIContainerDirection.Vertical.__enum__ = gui_GUIContainerDirection;
var gui_GUIContainerAlignment = $hxClasses["gui.GUIContainerAlignment"] = { __ename__ : ["gui","GUIContainerAlignment"], __constructs__ : ["LeftOrTop","Center","RightOrBottom"] };
gui_GUIContainerAlignment.LeftOrTop = ["LeftOrTop",0];
gui_GUIContainerAlignment.LeftOrTop.toString = $estr;
gui_GUIContainerAlignment.LeftOrTop.__enum__ = gui_GUIContainerAlignment;
gui_GUIContainerAlignment.Center = ["Center",1];
gui_GUIContainerAlignment.Center.toString = $estr;
gui_GUIContainerAlignment.Center.__enum__ = gui_GUIContainerAlignment;
gui_GUIContainerAlignment.RightOrBottom = ["RightOrBottom",2];
gui_GUIContainerAlignment.RightOrBottom.toString = $estr;
gui_GUIContainerAlignment.RightOrBottom.__enum__ = gui_GUIContainerAlignment;
var gui_GUIFiller = function(parent,minFill) {
	if(minFill == null) {
		minFill = 0;
	}
	this.parent = parent;
	this.minFill = minFill;
	this.rect = new common_Rectangle(0,0,1,1);
};
$hxClasses["gui.GUIFiller"] = gui_GUIFiller;
gui_GUIFiller.__name__ = ["gui","GUIFiller"];
gui_GUIFiller.__interfaces__ = [gui_IGUIElement];
gui_GUIFiller.prototype = {
	updateSize: function() {
		this.parent.updateSize();
	}
	,updatePosition: function(newPosition) {
		var _this = this.rect;
		new common_Point(_this.x = newPosition.x,_this.y = newPosition.y);
	}
	,destroy: function() {
	}
	,handleMouse: function(mouse) {
		return false;
	}
	,update: function() {
	}
	,__class__: gui_GUIFiller
};
var gui_GUISpacing = function(parent,extraSpace) {
	this.parent = parent;
	this.rect = new common_Rectangle(0,0,1,1);
	this.rect.width = extraSpace.x;
	this.rect.height = extraSpace.y;
};
$hxClasses["gui.GUISpacing"] = gui_GUISpacing;
gui_GUISpacing.__name__ = ["gui","GUISpacing"];
gui_GUISpacing.__interfaces__ = [gui_IGUIElement];
gui_GUISpacing.prototype = {
	updateSize: function() {
		this.parent.updateSize();
	}
	,updatePosition: function(newPosition) {
		var _this = this.rect;
		new common_Point(_this.x = newPosition.x,_this.y = newPosition.y);
	}
	,destroy: function() {
	}
	,handleMouse: function(mouse) {
		return false;
	}
	,update: function() {
	}
	,__class__: gui_GUISpacing
};
var gui_GameMenu = function() { };
$hxClasses["gui.GameMenu"] = gui_GameMenu;
gui_GameMenu.__name__ = ["gui","GameMenu"];
gui_GameMenu.create = function(gui1,city) {
	var imageButtonToUse = "spr_button_small";
	var imageOffsetToUse = 2;
	if(city.game.isMobile) {
		imageButtonToUse = "spr_button_medium";
		imageOffsetToUse = 4;
	}
	gui1.createWindow("gameMenu");
	gui1.clearWindowStack();
	var a1 = gui1;
	var a2 = city;
	var tmp = function() {
		gui_GameMenu.create(a1,a2);
	};
	gui1.addWindowToStack(tmp,true,"GameMenu");
	gui1.windowAddTitleText("Game Menu");
	common_PokiHelpers.reportStopGameplay();
	var stage = gui1.innerWindowStage;
	gui1.windowAddInfoText(null,function() {
		if(common_Storage.storageSupported()) {
			return "Last saved " + common_MathExtensions.floatFormat(Math,city.secondsSinceAutoSave,1) + " seconds ago.";
		} else {
			return "Warning: temporary save!";
		}
	});
	var saveLoadButtons = new common_Point(0,0);
	var saveLoadButtons1 = new gui_GUIContainer(gui1,stage,null,saveLoadButtons,new common_FPoint(0,0));
	saveLoadButtons1.addChild(new gui_TextButton(gui1,stage,saveLoadButtons1,function() {
		gui_SaveLoadWindows.createSaveWindow(city.game,gui1,"Which save slot would you like to save to?",function(fileName) {
			city.cityFile = fileName;
			city.saveToBrowserStorage();
		});
	},"Save..."));
	saveLoadButtons1.addChild(new gui_GUISpacing(saveLoadButtons1,new common_Point(2,2)));
	saveLoadButtons1.addChild(new gui_TextButton(gui1,stage,saveLoadButtons1,function() {
		gui_SaveLoadWindows.createLoadWindow(city.game,gui1,"Which city would you like to load?",function(fileName1) {
			city.game.loadFromStorage(fileName1);
		});
		if(5 == 6 && Config.hadFullStepWithInput) {
			common_AdHelper.showNonRewardedInterstitialIfAllowed();
		}
	},"Load..."));
	saveLoadButtons1.addChild(new gui_GUISpacing(saveLoadButtons1,new common_Point(2,2)));
	if(!city.game.isMobile || !jsFunctions.isAnyApple()) {
		saveLoadButtons1.addChild(new gui_TextButton(gui1,stage,saveLoadButtons1,function() {
			var saveFile = city.saveToString();
			jsFunctions.saveAs(new Blob([saveFile],{ type : "text/plain;charset=utf-8"}),"theFinalEarth2_save.sav");
		},"Export"));
		saveLoadButtons1.addChild(new gui_GUISpacing(saveLoadButtons1,new common_Point(2,2)));
	}
	saveLoadButtons1.addChild(new gui_TextButton(gui1,stage,saveLoadButtons1,function() {
	},"Import...",null,function() {
		city.game.setOnClickTo = function() {
			var importButton = window.document.getElementById("importFile");
			importButton.value = "";
			importButton.click();
			city.game.onClick = null;
		};
	}));
	gui1.windowInner.addChild(saveLoadButtons1);
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,6)));
	var fullReset = new common_Point(0,0);
	var fullReset1 = new gui_GUIContainer(gui1,stage,null,fullReset,new common_FPoint(0,0));
	var newGameButton = new gui_TextButton(gui1,stage,fullReset1,function() {
		gui_MainMenuGUI.createNewScenarioWindow(city.game,gui1);
		if(5 == 6 && Config.hadFullStepWithInput) {
			common_AdHelper.showNonRewardedInterstitialIfAllowed();
		}
	},"New Game");
	newGameButton.extraWidth = 6;
	newGameButton.setText("New Game");
	fullReset1.addChild(newGameButton);
	fullReset1.addChild(new gui_GUISpacing(fullReset1,new common_Point(2,2)));
	var winGoal = city.progress.story.findGoal("Win");
	if(city.progress.story.currentGoal == null && winGoal != null && winGoal.nextStory != null && winGoal.nextStory != "" && progress_StoryLoader.hasCompletedRequirements(city.game,Lambda.find(Resources.allStoriesInfo,function(sd) {
		return sd.link == winGoal.nextStory;
	}))) {
		var textButton = new gui_TextButton(gui1,stage,saveLoadButtons1,function() {
			var f = ($_=city.game,$bind($_,$_.newCity));
			var a11 = winGoal.nextStory;
			var textButton1 = function(a21) {
				f(a11,a21);
			};
			gui_SaveLoadWindows.createSaveWindow(city.game,city.gui,"Which save slot would you like to use?",textButton1);
			if(5 == 6 && Config.hadFullStepWithInput) {
				common_AdHelper.showNonRewardedInterstitialIfAllowed();
			}
		},"Next Scenario",null);
		fullReset1.addChild(textButton);
		textButton.extraWidth = 14;
		textButton.setText("Next Scenario");
	} else {
		var doFullReset = null;
		doFullReset = function() {
			gui1.createWindow();
			gui1.addWindowToStack(doFullReset);
			gui1.windowAddTitleText("Restart Scenario?");
			gui1.windowAddInfoText("Are you sure you'd like to restart the scenario from the beginning?");
			gui1.windowAddBottomButtons([{ text : "Restart", action : function() {
				city.saveToBrowserStorage("preReset");
				city.game.newCity(city.progress.story.storyName,city.cityFile);
				city.saveToBrowserStorage();
				gui_GameMenu.canUndoReset = true;
			}}]);
			if(5 == 6 && Config.hadFullStepWithInput) {
				common_AdHelper.showNonRewardedInterstitialIfAllowed();
			}
		};
		var doFullReset1 = doFullReset;
		fullReset1.addChild(new gui_TextButton(gui1,stage,saveLoadButtons1,doFullReset,"Restart Scenario",null));
	}
	gui1.windowInner.addChild(fullReset1);
	if(gui_GameMenu.canUndoReset) {
		gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,2)));
		var fullResetUndo = new common_Point(0,0);
		var fullResetUndo1 = new gui_GUIContainer(gui1,stage,null,fullResetUndo,new common_FPoint(0,0));
		fullResetUndo1.addChild(new gui_TextButton(gui1,stage,fullReset1,function() {
			common_Storage.getItem("preReset",function(err,savedCity) {
				gui_GameMenu.canUndoReset = false;
				if(err == null || savedCity != null) {
					city.game.loadFromTypedArray(savedCity,city.cityFile);
				}
			},true);
		},"Undo Restart",null));
		gui1.windowInner.addChild(fullResetUndo1);
	}
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,6)));
	if(5 == 3) {
		var armorPromo = new common_Point(0,0);
		var armorPromo1 = new gui_GUIContainer(gui1,stage,null,armorPromo,new common_FPoint(0,0));
		var playMoreButton = new gui_TextButton(gui1,stage,fullReset1,function() {
		},"Play More Games",function() {
			return false;
		},function() {
			city.game.setOnClickTo = function() {
				window.open("http://armor.ag/MoreGames","_blank");
			};
		});
		playMoreButton.extraWidth = 6;
		playMoreButton.setText("Play More Games");
		armorPromo1.addChild(playMoreButton);
		armorPromo1.addChild(new gui_GUISpacing(armorPromo1,new common_Point(2,2)));
		var likeUsButton = new gui_TextButton(gui1,stage,fullReset1,function() {
		},"Like Us!",function() {
			return false;
		},function() {
			city.game.setOnClickTo = function() {
				window.open("http://www.facebook.com/ArmorGames","_blank");
			};
		});
		likeUsButton.extraWidth = 16;
		likeUsButton.setText("Like Us!");
		armorPromo1.addChild(likeUsButton);
		gui1.windowInner.addChild(armorPromo1);
		gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,6)));
	}
	var soundButtons = new gui_GUIContainer(gui1,stage,null);
	gui1.windowInner.addChild(soundButtons);
	var musicTextures = Resources.getTextures("spr_music",2);
	var imgButton = new gui_ImageButton(gui1,stage,soundButtons,function() {
		city.game.audio.changeMusicEnabledness(!Settings.musicOn);
		imgButton.imageSprite.texture = musicTextures[Settings.musicOn ? 0 : 1];
	},musicTextures[Settings.musicOn ? 0 : 1],function() {
		return false;
	},function() {
		gui1.tooltip.setText(imgButton,Settings.musicOn ? "Mute Music" : "Unmute Music");
	},null,imageButtonToUse,imageOffsetToUse);
	imgButton.imageSprite.tint = 0;
	soundButtons.addChild(imgButton);
	soundButtons.addChild(new gui_GUISpacing(soundButtons,new common_Point(2,2)));
	var soundTextures = Resources.getTextures("spr_sound",2);
	var imgButton1 = new gui_ImageButton(gui1,stage,soundButtons,function() {
		city.game.audio.changeSoundEnabledness(!Settings.soundOn);
		imgButton1.imageSprite.texture = soundTextures[Settings.soundOn ? 0 : 1];
	},soundTextures[Settings.soundOn ? 0 : 1],function() {
		return false;
	},function() {
		gui1.tooltip.setText(imgButton1,Settings.soundOn ? "Mute Sound Effects" : "Unmute Sound Effects");
	},null,imageButtonToUse,imageOffsetToUse);
	imgButton1.imageSprite.tint = 0;
	soundButtons.addChild(imgButton1);
	soundButtons.addChild(new gui_GUISpacing(soundButtons,new common_Point(2,2)));
	var moreSettingsTexture = Resources.getTexture("spr_moresettings");
	var imgButton2;
	var doCreateMoreSettingsWindow = null;
	doCreateMoreSettingsWindow = function() {
		gui1.createWindow("moreSettingsWindow");
		gui1.addWindowToStack(doCreateMoreSettingsWindow);
		gui_MoreSettingsWindow.create(city,gui1,gui1.innerWindowStage,gui1.windowInner,imageButtonToUse,imageOffsetToUse);
	};
	var doCreateMoreSettingsWindow1 = doCreateMoreSettingsWindow;
	imgButton2 = new gui_ImageButton(gui1,stage,soundButtons,doCreateMoreSettingsWindow,moreSettingsTexture,function() {
		return false;
	},function() {
		gui1.tooltip.setText(imgButton2,"Advanced Settings");
	},null,imageButtonToUse,imageOffsetToUse);
	imgButton2.imageSprite.tint = 0;
	soundButtons.addChild(imgButton2);
	soundButtons.addChild(new gui_GUISpacing(soundButtons,new common_Point(6,2)));
	if(Config.hasFullscreen && !city.game.isMobile) {
		var fullScreenTexture = Resources.getTexture("spr_fullscreen");
		var imgButton3 = new gui_ImageButton(gui1,stage,soundButtons,function() {
		},fullScreenTexture,function() {
			return false;
		},function() {
			gui1.tooltip.setText(imgButton3,"Full Screen");
			city.game.setOnClickTo = function() {
				jsFunctions.goFullscreen(true);
			};
		},null,imageButtonToUse,imageOffsetToUse);
		imgButton3.imageSprite.tint = 0;
		soundButtons.addChild(imgButton3);
		soundButtons.addChild(new gui_GUISpacing(soundButtons,new common_Point(2,2)));
	}
	if(!city.game.isMobile || !jsFunctions.isAnyApple()) {
		var screenshotTexture = Resources.getTexture("spr_camera");
		var imgButton4;
		var a12 = city;
		var imgButton5 = function() {
			gui_GameMenu.saveScreenShot(a12);
		};
		imgButton4 = new gui_ImageButton(gui1,stage,soundButtons,imgButton5,screenshotTexture,function() {
			return false;
		},function() {
			gui1.tooltip.setText(imgButton4,"Save Screenshot");
		},null,imageButtonToUse,imageOffsetToUse);
		imgButton4.imageSprite.tint = 0;
		soundButtons.addChild(imgButton4);
		soundButtons.addChild(new gui_GUISpacing(soundButtons,new common_Point(6,2)));
	}
	var creditsTexture = Resources.getTexture("spr_credits");
	var imgButton6;
	var doCreateCreditsWindow = null;
	doCreateCreditsWindow = function() {
		gui1.createWindow("creditsWindow");
		gui1.addWindowToStack(doCreateCreditsWindow);
		gui_CreditsWindow.create(city,gui1,gui1.innerWindowStage,gui1.windowInner);
	};
	var doCreateCreditsWindow1 = doCreateCreditsWindow;
	imgButton6 = new gui_ImageButton(gui1,stage,soundButtons,doCreateCreditsWindow,creditsTexture,function() {
		return false;
	},function() {
		gui1.tooltip.setText(imgButton6,"View Credits");
	},null,imageButtonToUse,imageOffsetToUse);
	imgButton6.imageSprite.tint = 0;
	soundButtons.addChild(imgButton6);
	soundButtons.addChild(new gui_GUISpacing(soundButtons,new common_Point(2,2)));
	var twitterButtonImage = Resources.getTexture("spr_twitter");
	var imgButton7 = new gui_ImageButton(gui1,stage,soundButtons,function() {
	},twitterButtonImage,function() {
		return false;
	},function() {
		gui1.tooltip.setText(imgButton7,"Follow me @FlorianStrien on Twitter and get the latest news on updates and new games!");
		city.game.setOnClickTo = function() {
			window.open("https://twitter.com/FlorianStrien","_blank");
		};
	},null,imageButtonToUse,imageOffsetToUse);
	imgButton7.imageSprite.tint = 0;
	soundButtons.addChild(imgButton7);
	soundButtons.addChild(new gui_GUISpacing(soundButtons,new common_Point(2,2)));
	if(!Config.hasFullscreen) {
		var mailingButtonImage = Resources.getTexture("spr_mailinglist");
		var imgButton8 = new gui_ImageButton(gui1,stage,soundButtons,function() {
		},mailingButtonImage,function() {
			return false;
		},function() {
			gui1.tooltip.setText(imgButton8,"I'll send you cool The Final Earth 2 news and facts, plus info on my future releases!","Subscribe to my mailing list!");
			city.game.setOnClickTo = function() {
				window.open(Config.mailingListURL,"_blank");
			};
		},null,imageButtonToUse,imageOffsetToUse);
		imgButton8.imageSprite.tint = 0;
		soundButtons.addChild(imgButton8);
		soundButtons.addChild(new gui_GUISpacing(soundButtons,new common_Point(2,2)));
	}
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,6)));
	if(Config.isLimitedDemo) {
		var textButton2 = new gui_TextButton(gui1,stage,gui1.windowInner,function() {
			greenworks.activateGameOverlayToWebPage("https://store.steampowered.com/app/1180130/The_Final_Earth_2/");
		},"Wishlist Full Version!");
		textButton2.extraWidth = 48;
		textButton2.setText("Wishlist Full Version!");
		gui1.windowInner.addChild(textButton2);
		gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,6)));
	}
	var f1 = ($_=city.game,$bind($_,$_.createMainMenu));
	var tmp1 = function() {
		f1();
	};
	gui1.windowAddBottomButtons([{ text : "Back to Title", action : tmp1}]);
};
gui_GameMenu.saveScreenShot = function(city) {
	var edges = city.getCityEdges();
	var minX = edges.minX;
	var maxX = edges.maxX;
	var minY = edges.minY;
	var maxY = edges.maxY;
	var renderTexture = PIXI.RenderTexture.create(maxX - minX,maxY - minY,1);
	var renderer = city.game.application.renderer;
	var oldX = city.movingViewStage.position.x;
	var oldY = city.movingViewStage.position.y;
	var oldScale = city.movingViewStage.scale.x;
	city.movingViewStage.position.x = -minX;
	city.movingViewStage.position.y = -minY;
	city.movingViewStage.scale.x = 1;
	city.movingViewStage.scale.y = 1;
	var sky = new PIXI.Graphics();
	sky.beginFill(city.skyColor);
	sky.drawRect(minX,minY,maxX - minX,maxY - minY);
	sky.endFill();
	city.movingViewStage.addChildAt(sky,0);
	city.uncull();
	renderer.render(city.movingViewStage,renderTexture,true,null,false);
	var canvas = renderer.plugins.extract.canvas(renderTexture);
	canvas.toBlob(function(blob) {
		jsFunctions.saveAs(blob,"TheFinalEarth2_screenshot.png");
	});
	city.movingViewStage.position.x = oldX;
	city.movingViewStage.position.y = oldY;
	city.movingViewStage.scale.x = city.movingViewStage.scale.y = oldScale;
	city.movingViewStage.removeChild(sky);
};
var gui_GlobalUpgradeWindow = function() { };
$hxClasses["gui.GlobalUpgradeWindow"] = gui_GlobalUpgradeWindow;
gui_GlobalUpgradeWindow.__name__ = ["gui","GlobalUpgradeWindow"];
gui_GlobalUpgradeWindow.create = function(city,gui1,stage,window) {
	gui_GlobalUpgradeWindow.createWindow(city,gui1,stage,window);
};
gui_GlobalUpgradeWindow.createWindow = function(city,gui1,stage,window) {
	window.clear();
	window.addChild(new gui_TextElement(window,stage,"Upgrades",null,"Arial16"));
	var buildingTypesWithUpgradeUnsorted = [];
	var buildingTypesWithUpgradeClassNames = [];
	var _g = 0;
	var _g1 = city.permanents;
	while(_g < _g1.length) {
		var pm = _g1[_g];
		++_g;
		if(pm.isBuilding && (common_ArrayExtensions.any(pm.get_possibleUpgrades(),function(u) {
			return city.progress.unlocks.getUnlockState(u) != progress_UnlockState.Locked;
		}) || common_ArrayExtensions.any(pm.get_possibleCityUpgrades(),function(u1) {
			return city.progress.unlocks.getUnlockState(u1) != progress_UnlockState.Locked;
		}))) {
			var cls = pm == null ? null : js_Boot.getClass(pm);
			var i = buildingTypesWithUpgradeUnsorted.indexOf(cls);
			if(i == -1) {
				i = buildingTypesWithUpgradeUnsorted.length;
				buildingTypesWithUpgradeUnsorted.push(cls);
				var splitClassName = Type.getClassName(cls).split(".");
				buildingTypesWithUpgradeClassNames.push(splitClassName[splitClassName.length - 1]);
			}
		}
	}
	var buildingTypesWithUpgrade = [];
	var _g2 = 0;
	var _g11 = city.progress.resources.buildingInfoArray;
	while(_g2 < _g11.length) {
		var bi = _g11[_g2];
		++_g2;
		var i1 = buildingTypesWithUpgradeClassNames.indexOf(bi.className);
		if(i1 != -1) {
			buildingTypesWithUpgrade.push(buildingTypesWithUpgradeUnsorted[i1]);
		}
	}
	var _g12 = 0;
	var _g3 = buildingTypesWithUpgrade.length;
	while(_g12 < _g3) {
		var i2 = _g12++;
		var buildingType = [buildingTypesWithUpgrade[i2]];
		var buildingTypeContainer = new gui_GUIContainer(gui1,gui1.innerWindowStage,gui1.windowInner);
		var this1 = city.progress.resources.buildingInfo;
		var key = Type.getClassName(buildingType[0]);
		var _this = this1;
		var buildingInfo = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		buildingTypeContainer.addChild(gui_BuildingTypeImage.create(stage,city,buildingType[0],buildingTypeContainer,gui1));
		buildingTypeContainer.addChild(new gui_TextElement(buildingTypeContainer,gui1.innerWindowStage,buildingInfo.name,null,"Arial16",{ top : 3, left : 3, right : 0, bottom : 0}));
		gui1.windowInner.addChildWithoutSizeUpdate(buildingTypeContainer);
		gui_CreateBuildingUpgrades.createBuildingUpgradesForType(Lambda.find(city.permanents,(function(buildingType1) {
			return function(pm1) {
				return pm1["is"](buildingType1[0]);
			};
		})(buildingType)),city);
	}
	gui1.windowInner.updateSize();
	if(buildingTypesWithUpgrade.length == 0) {
		city.gui.windowInner.addChild(new gui_TextElement(city.gui.windowInner,city.gui.innerWindowStage,"No upgrades available."));
	}
	gui1.windowAddBottomButtons();
	var a1 = city;
	var a2 = gui1;
	var a3 = stage;
	var a4 = window;
	var tmp = function() {
		gui_GlobalUpgradeWindow.createWindow(a1,a2,a3,a4);
		return;
	};
	city.gui.setWindowReload(tmp);
	var f = ($_=city.gui,$bind($_,$_.reloadWindow));
	var a11 = city;
	var a21 = gui1;
	var a31 = stage;
	var a41 = window;
	var a12 = function() {
		gui_GlobalUpgradeWindow.createWindow(a11,a21,a31,a41);
	};
	var tmp1 = function() {
		f(a12);
	};
	city.windowRelatedOnBuildOrDestroy = tmp1;
	window.onDestroy = function() {
		city.windowRelatedOnBuildOrDestroy = null;
	};
};
var gui_HappinessWindow = function() { };
$hxClasses["gui.HappinessWindow"] = gui_HappinessWindow;
gui_HappinessWindow.__name__ = ["gui","HappinessWindow"];
gui_HappinessWindow.create = function(city,gui1,stage,window) {
	window.addChild(new gui_TextElement(window,stage,"Happiness",null,"Arial16"));
	var lineHeight = 12;
	var mainContainer = new gui_GUIContainer(gui1,stage,window);
	window.addChild(mainContainer);
	var mainTexts = new gui_GUIContainer(gui1,stage,mainContainer);
	mainTexts.direction = gui_GUIContainerDirection.Vertical;
	mainContainer.addChild(mainTexts);
	var mainNumbers = new gui_GUIContainer(gui1,stage,mainContainer);
	mainNumbers.direction = gui_GUIContainerDirection.Vertical;
	mainContainer.addChild(mainNumbers);
	var addTexts = function(getText,getText2,isVisible,paddingLeft,paddingTop) {
		if(paddingTop == null) {
			paddingTop = 0;
		}
		if(paddingLeft == null) {
			paddingLeft = 0;
		}
		var mainTextsHider = new gui_HideableContainer(mainTexts,isVisible);
		var mainTextsChild = new gui_GUIContainer(gui1,stage,mainTextsHider,null,null,null,null,{ left : paddingLeft, right : 0, bottom : 0, top : paddingTop});
		mainTextsChild.addChild(new gui_TextElement(mainTextsChild,stage,null,getText,null,null,null,true));
		mainTextsChild.addChild(new gui_GUISpacing(mainTextsChild,new common_Point(5,lineHeight)));
		mainTextsHider.setChild(mainTextsChild);
		mainTexts.addChild(mainTextsHider);
		var mainNumbersHider = new gui_HideableContainer(mainNumbers,isVisible);
		var mainNumbersChilds = new gui_GUIContainer(gui1,stage,mainNumbersHider,null,null,null,null,{ left : 0, right : 0, bottom : 0, top : paddingTop});
		mainNumbersChilds.addChild(new gui_TextElement(mainNumbersChilds,stage,null,getText2,null,null,null,true));
		mainNumbersChilds.addChild(new gui_GUISpacing(mainNumbersChilds,new common_Point(0,lineHeight)));
		mainNumbersHider.setChild(mainNumbersChilds);
		mainNumbers.addChild(mainNumbersHider);
	};
	var happiness = city.simulation.happiness;
	addTexts(function() {
		return "Home happiness:";
	},function() {
		return "" + (happiness.homeHappiness | 0);
	});
	addTexts(function() {
		return "Sense of purpose (job/school):";
	},function() {
		return "" + (happiness.purposeHappiness | 0);
	});
	addTexts(function() {
		return "Entertainment happiness:";
	},function() {
		return "" + (happiness.entertainmentHappiness | 0);
	});
	var happiness1 = city.simulation.happiness;
	var _g1 = 0;
	var _g = happiness1.entertainmentTypes.length;
	while(_g1 < _g) {
		var i = [_g1++];
		var entertainmentType = [happiness1.entertainmentTypes[i[0]]];
		addTexts((function(entertainmentType1) {
			return function() {
				return simulation_EntertainmentTypeHelpers.getName(entertainmentType1[0]) + ":";
			};
		})(entertainmentType),(function(i1) {
			return function() {
				return "" + (happiness1.happinessPerEntertainmentType[i1[0]] | 0);
			};
		})(i),null,10);
	}
	addTexts(function() {
		return "Education happiness:";
	},function() {
		return "" + (happiness1.schoolHappiness | 0);
	});
	addTexts(function() {
		return "Medical happiness:";
	},function() {
		return "" + (happiness1.medicalHappiness | 0);
	});
	addTexts(function() {
		return "Food shortage unhappiness:";
	},function() {
		return "-" + (happiness1.foodShortageUnhappiness | 0);
	},function() {
		return happiness1.foodShortageUnhappiness > 0;
	});
	addTexts(function() {
		return "New city enthusiasm bonus:";
	},function() {
		return "+" + (happiness1.enthusiasmHappiness | 0);
	},function() {
		return happiness1.enthusiasmHappiness != 0;
	});
	addTexts(function() {
		var res = "";
		var _g2 = 0;
		var _g11 = happiness1.happinessBoosts;
		while(_g2 < _g11.length) {
			var bst = _g11[_g2];
			++_g2;
			if(res != "") {
				res += "\n";
			}
			res += "" + bst.text + ":";
		}
		return res;
	},function() {
		var res1 = "";
		var _g3 = 0;
		var _g12 = happiness1.happinessBoosts;
		while(_g3 < _g12.length) {
			var bst1 = _g12[_g3];
			++_g3;
			if(res1 != "") {
				res1 += "\n";
			}
			res1 += "+" + (bst1.boost | 0);
		}
		return res1;
	},function() {
		return happiness1.happinessBoosts.length > 0;
	},0,4);
	addTexts(function() {
		return "Total Happiness:";
	},function() {
		return "" + (happiness1.happiness | 0);
	},null,0,4);
	addTexts(function() {
		return "Work Speed Modifier:";
	},function() {
		return "" + common_MathExtensions.floatFormat(Math,happiness1.actionSpeedModifier,2);
	});
	gui1.windowAddBottomButtons();
};
var gui_HelpArrowDirection = $hxClasses["gui.HelpArrowDirection"] = { __ename__ : ["gui","HelpArrowDirection"], __constructs__ : ["Down","Left","DownHint"] };
gui_HelpArrowDirection.Down = ["Down",0];
gui_HelpArrowDirection.Down.toString = $estr;
gui_HelpArrowDirection.Down.__enum__ = gui_HelpArrowDirection;
gui_HelpArrowDirection.Left = ["Left",1];
gui_HelpArrowDirection.Left.toString = $estr;
gui_HelpArrowDirection.Left.__enum__ = gui_HelpArrowDirection;
gui_HelpArrowDirection.DownHint = ["DownHint",2];
gui_HelpArrowDirection.DownHint.toString = $estr;
gui_HelpArrowDirection.DownHint.__enum__ = gui_HelpArrowDirection;
var gui_HelpArrow = function(gui1,stage,getPointsTo,isActive,direction,onlyVisibleAfter) {
	if(onlyVisibleAfter == null) {
		onlyVisibleAfter = 0;
	}
	this.pleaseAlignExtraTextRight = false;
	this.circleTme = Math.PI / 2;
	this.arrowTime = 0;
	this.gui = gui1;
	this.getPointsTo = getPointsTo;
	this.stage = stage;
	this.isActive = isActive;
	this.direction = direction == null ? gui_HelpArrowDirection.Down : direction;
	this.onlyVisibleAfter = onlyVisibleAfter;
	var _g = this.direction;
	switch(_g[1]) {
	case 0:
		this.sprite = new PIXI.Sprite(Resources.getTexture("spr_tutorialarrowdown"));
		this.sprite.anchor.set(0.5,1);
		break;
	case 1:
		this.sprite = new PIXI.Sprite(Resources.getTexture("spr_tutorialarrowleft"));
		this.sprite.anchor.set(0,0.5);
		break;
	case 2:
		this.sprite = new PIXI.Sprite(Resources.getTexture("spr_hintinfo_arrow"));
		this.sprite.anchor.set(0.5,1);
		break;
	}
	stage.addChild(this.sprite);
	this.extraText9P = null;
	this.extraText = "";
	this.extraTextElement = null;
	this.setPosition();
};
$hxClasses["gui.HelpArrow"] = gui_HelpArrow;
gui_HelpArrow.__name__ = ["gui","HelpArrow"];
gui_HelpArrow.prototype = {
	useBigMovement: function() {
		this.useCircle = true;
		this.setPosition();
	}
	,addText: function(text) {
		this.extraText = text;
		this.extraTextElement = new PIXI.extras.BitmapText(text,{ font : "Arial", tint : 0});
		if(text.length < 45) {
			this.extraTextElement.maxWidth = 133;
		} else {
			this.extraTextElement.maxWidth = 200;
		}
		this.extraText9P = new gui_NinePatch(Resources.getTexture("spr_9p_hintinfo"),5,(this.extraTextElement.width | 0) + 6,(this.extraTextElement.height | 0) + 6);
		this.stage.addChild(this.extraText9P);
		this.stage.addChild(this.extraTextElement);
		this.setExtraTextPosition();
	}
	,update: function(timeMod) {
		var pointsTo;
		var tmp;
		var tmp1;
		var tmp2;
		if(this.isActive() && this.arrowTime >= this.onlyVisibleAfter) {
			pointsTo = this.getPointsTo();
			tmp2 = pointsTo != null;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = this.useCircle;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = this.circleTme > 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.circleTme -= 0.015 * timeMod + 0.04 * timeMod * (this.circleTme / (Math.PI / 2));
		}
		this.arrowTime += timeMod;
		this.setPosition();
		this.setExtraTextPosition();
	}
	,destroy: function() {
		this.stage.removeChild(this.sprite);
		if(this.extraText9P != null) {
			this.extraText9P.destroy();
		}
		if(this.extraTextElement != null) {
			this.extraTextElement.destroy();
		}
	}
	,setPosition: function() {
		var pointsTo;
		var tmp;
		if(this.isActive() && this.arrowTime >= this.onlyVisibleAfter) {
			pointsTo = this.getPointsTo();
			tmp = pointsTo != null;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g = this.direction;
			switch(_g[1]) {
			case 0:
				this.sprite.position.set(pointsTo.rect.get_center().x,pointsTo.rect.y - 2 - Math.sin(this.arrowTime / 10) * 2);
				break;
			case 1:
				this.sprite.position.set(pointsTo.rect.get_x2() + 2 + Math.sin(this.arrowTime / 10) * 2,pointsTo.rect.get_center().y);
				break;
			case 2:
				if(this.pleaseAlignExtraTextRight) {
					this.sprite.position.set(this.gui.game.rect.width - 5 - this.sprite.width,pointsTo.rect.y - 2);
				} else {
					this.sprite.position.set(pointsTo.rect.get_center().x,pointsTo.rect.y - 2);
				}
				break;
			}
			if(this.useCircle && this.circleTme > 0) {
				if(this.sprite.position.x < this.gui.game.rect.width / 2) {
					this.sprite.rotation = this.circleTme;
				} else {
					this.sprite.rotation = -this.circleTme;
				}
				this.sprite.position.set(Math.cos(this.circleTme) * (this.sprite.position.x - this.gui.game.rect.width / 2) + this.gui.game.rect.width / 2,Math.sin(this.circleTme) * (this.gui.game.rect.height / 2 - this.sprite.position.y) + this.sprite.position.y);
				this.sprite.alpha = Math.cos(this.circleTme);
			} else {
				this.sprite.rotation = 0;
				this.sprite.alpha = 1;
			}
			this.sprite.visible = true;
		} else {
			this.sprite.visible = false;
		}
	}
	,setExtraTextPosition: function() {
		if(this.extraText9P == null) {
			return;
		}
		var pointsTo;
		var tmp;
		if(this.isActive() && this.arrowTime >= this.onlyVisibleAfter) {
			pointsTo = this.getPointsTo();
			tmp = pointsTo != null;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g = this.direction;
			switch(_g[1]) {
			case 0:
				if(pointsTo.rect.get_center().x > this.extraText9P.width + 5 + Math.floor(this.sprite.width / 2)) {
					this.extraText9P.position.set(pointsTo.rect.get_center().x - Math.floor(this.sprite.width / 2) - 2 - this.extraText9P.width,pointsTo.rect.y - 2 - this.extraText9P.height);
				} else {
					this.extraText9P.position.set(pointsTo.rect.get_center().x + Math.floor(this.sprite.width / 2) + 2,pointsTo.rect.y - 2 - this.extraText9P.height);
				}
				break;
			case 1:
				if(pointsTo.rect.get_x2() + this.extraText9P.width > this.gui.game.rect.width) {
					this.extraText9P.position.set(this.gui.game.rect.width - this.extraText9P.width - 5,pointsTo.rect.get_center().y - 2 - Math.floor(this.sprite.height / 2) - this.extraText9P.height);
				} else {
					this.extraText9P.position.set(pointsTo.rect.get_x2(),pointsTo.rect.get_center().y - 2 - Math.floor(this.sprite.height / 2) - this.extraText9P.height);
				}
				break;
			case 2:
				if(this.pleaseAlignExtraTextRight) {
					this.extraText9P.position.set(this.gui.game.rect.width - 5 - this.extraText9P.width,pointsTo.rect.y - 2 - this.sprite.height - this.extraText9P.height);
				} else if(pointsTo.rect.get_center().x > this.extraText9P.width + 5 + Math.floor(this.sprite.width / 2)) {
					this.extraText9P.position.set(pointsTo.rect.get_center().x - this.extraText9P.width + Math.floor(this.sprite.width / 2),pointsTo.rect.y - 2 - this.sprite.height - this.extraText9P.height);
				} else if(pointsTo.rect.get_center().x - this.sprite.width + this.extraText9P.width < this.gui.game.rect.width) {
					this.extraText9P.position.set(pointsTo.rect.get_center().x - Math.floor(this.sprite.width / 2),pointsTo.rect.y - 2 - this.sprite.height - this.extraText9P.height);
				} else {
					this.extraText9P.position.set(5,pointsTo.rect.y - 2 - this.sprite.height - this.extraText9P.height);
				}
				break;
			}
			this.extraTextElement.position.set(this.extraText9P.position.x + 3,this.extraText9P.position.y + 2);
			this.extraTextElement.visible = true;
			this.extraText9P.visible = true;
		} else {
			this.extraText9P.visible = false;
			this.extraTextElement.visible = false;
		}
	}
	,__class__: gui_HelpArrow
};
var gui_HideableContainer = function(parent,isShown) {
	this.alwaysUpdateChild = false;
	this.visible = true;
	this.parent = parent;
	this.isShown = isShown;
	this.rect = new common_Rectangle(0,0,0,0);
};
$hxClasses["gui.HideableContainer"] = gui_HideableContainer;
gui_HideableContainer.__name__ = ["gui","HideableContainer"];
gui_HideableContainer.__interfaces__ = [gui_IGUIElement];
gui_HideableContainer.prototype = {
	show: function() {
		this.visible = true;
		this.updateSize();
	}
	,hide: function() {
		this.visible = false;
		this.child.updatePosition(new common_Point(-10000,-10000));
		this.updateSize();
	}
	,setChild: function(child) {
		this.child = child;
		this.updateSize();
		if(this.isShown != null) {
			this.visible = this.isShown();
			if(!this.visible) {
				this.hide();
			}
		}
	}
	,updateSize: function() {
		if(this.visible && this.child != null) {
			this.rect = this.child.rect;
		} else {
			this.rect.width = 0;
			this.rect.height = 0;
		}
		if(this.parent != null) {
			this.parent.updateSize();
		}
	}
	,updatePosition: function(newPosition) {
		if(this.visible && this.child != null) {
			this.child.updatePosition(newPosition);
		}
	}
	,destroy: function() {
		if(this.child != null) {
			this.child.destroy();
		}
	}
	,handleMouse: function(mouse) {
		if(this.visible && this.child != null) {
			return this.child.handleMouse(mouse);
		}
		return false;
	}
	,update: function() {
		if(this.isShown != null) {
			var newVisible = this.isShown();
			if(newVisible != this.visible) {
				this.visible = newVisible;
				if(this.visible) {
					this.show();
				} else {
					this.hide();
				}
			}
		}
		if((this.visible || this.alwaysUpdateChild) && this.child != null) {
			this.child.update();
		}
	}
	,__class__: gui_HideableContainer
};
var gui_HouseInformationWindow = function() { };
$hxClasses["gui.HouseInformationWindow"] = gui_HouseInformationWindow;
gui_HouseInformationWindow.__name__ = ["gui","HouseInformationWindow"];
gui_HouseInformationWindow.create = function(city,gui1,stage,window) {
	gui_HouseInformationWindow.createWindow(city,gui1,stage,window);
};
gui_HouseInformationWindow.createWindow = function(city,gui1,stage,window) {
	window.clear();
	window.addChild(new gui_TextElement(window,stage,"Housing Information",null,"Arial16"));
	window.addChild(new gui_TextElement(window,stage,null,function() {
		return gui_HouseInformationWindow.getHousingHelpText(city.simulation.stats);
	}));
	var homeTypesUnsorted = [];
	var homeTypeClassNames = [];
	var _g = 0;
	var _g1 = city.permanents;
	while(_g < _g1.length) {
		var pm = _g1[_g];
		++_g;
		if(pm["is"](buildings_House)) {
			var cls = pm == null ? null : js_Boot.getClass(pm);
			var i = homeTypesUnsorted.indexOf(cls);
			if(i == -1) {
				i = homeTypesUnsorted.length;
				homeTypesUnsorted.push(cls);
				var splitClassName = Type.getClassName(cls).split(".");
				homeTypeClassNames.push(splitClassName[splitClassName.length - 1]);
			}
		}
	}
	var buildingTypesWithJob = [];
	var _g2 = 0;
	var _g11 = city.progress.resources.buildingInfoArray;
	while(_g2 < _g11.length) {
		var bi = _g11[_g2];
		++_g2;
		var i1 = homeTypeClassNames.indexOf(bi.className);
		if(i1 != -1) {
			buildingTypesWithJob.push(homeTypesUnsorted[i1]);
		}
	}
	var allBuildingTypeData = [];
	var updateBuildingTypeData = function() {
		allBuildingTypeData = [];
		var _g3 = 0;
		while(_g3 < buildingTypesWithJob.length) {
			var bt = buildingTypesWithJob[_g3];
			++_g3;
			allBuildingTypeData.push({ number : 0, filledHousing : 0, housing : 0});
		}
		var _g4 = 0;
		var _g12 = city.permanents;
		while(_g4 < _g12.length) {
			var pm1 = _g12[_g4];
			++_g4;
			if(pm1["is"](buildings_House)) {
				var thisHouse = pm1;
				var cls1 = pm1 == null ? null : js_Boot.getClass(pm1);
				var i2 = buildingTypesWithJob.indexOf(cls1);
				if(i2 != -1) {
					var data = allBuildingTypeData[i2];
					data.housing += thisHouse.get_residentCapacity();
					data.filledHousing += thisHouse.residents.length;
					data.number += 1;
				}
			}
		}
	};
	updateBuildingTypeData();
	window.onUpdate = updateBuildingTypeData;
	var infoPadding = { left : 2, top : 5, bottom : 0, right : 0};
	var singleRowHeight = 20;
	var singleRowHeightWithoutPadding = singleRowHeight - 5;
	var buildingOptionsContainer = new gui_GUIContainer(gui1,stage,window);
	var buildingPictures = new gui_GUIContainer(gui1,stage,buildingOptionsContainer);
	var buildingWorkerNumbersContainer = new gui_GUIContainer(gui1,stage,buildingOptionsContainer);
	buildingPictures.direction = gui_GUIContainerDirection.Vertical;
	buildingWorkerNumbersContainer.direction = gui_GUIContainerDirection.Vertical;
	var _g13 = 0;
	var _g5 = buildingTypesWithJob.length;
	while(_g13 < _g5) {
		var i3 = [_g13++];
		var buildingType = buildingTypesWithJob[i3[0]];
		var className = Type.getClassName(buildingType);
		var buildingTypeData = allBuildingTypeData[i3[0]];
		var thisBuildingPictureContainer = new gui_GUIContainer(gui1,stage,buildingPictures);
		var cont = new PIXI.Container();
		var sprName = Reflect.field(buildingType,"spriteName");
		var this1 = city.progress.resources.buildingInfo;
		var key = Type.getClassName(buildingType);
		var _this = this1;
		var buildingInfo = [__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]];
		cont.addChild(Resources.makeSprite(buildingInfo[0].buttonBack == null ? "" + sprName + "@44,0,20,20" : buildingInfo[0].buttonBack));
		cont.addChild(Resources.makeSprite("" + sprName + "@0,0,20,20"));
		var ch = [];
		var tmp = (function(ch1,buildingInfo1) {
			return function(mouse) {
				if(ch1[0].rect.contains(mouse.position)) {
					gui1.tooltip.setText(ch1[0],buildingInfo1[0].name);
					return true;
				}
				return false;
			};
		})(ch,buildingInfo);
		ch[0] = new gui_ContainerHolder(thisBuildingPictureContainer,stage,cont,null,null,tmp);
		thisBuildingPictureContainer.addChild(ch[0]);
		var thisBuildingNumberContainer = new gui_GUIContainer(gui1,stage,thisBuildingPictureContainer,null,null,null,null,infoPadding);
		thisBuildingNumberContainer.addChild(new gui_TextElement(thisBuildingNumberContainer,stage,"x" + buildingTypeData.number + ": "));
		thisBuildingPictureContainer.addChild(thisBuildingNumberContainer);
		buildingPictures.addChild(thisBuildingPictureContainer);
		var workerNumberContainer = new gui_GUIContainer(gui1,stage,buildingWorkerNumbersContainer,null,null,null,null,infoPadding);
		workerNumberContainer.minHeight = singleRowHeightWithoutPadding;
		workerNumberContainer.addChild(new gui_TextElement(workerNumberContainer,stage,null,(function(i4) {
			return function() {
				return "" + allBuildingTypeData[i4[0]].filledHousing + "/" + allBuildingTypeData[i4[0]].housing + " residents";
			};
		})(i3)));
		buildingWorkerNumbersContainer.addChild(workerNumberContainer);
	}
	if(buildingTypesWithJob.length == 0) {
		gui1.windowAddInfoText("There are no houses!");
	}
	buildingOptionsContainer.addChild(buildingPictures);
	buildingOptionsContainer.addChild(buildingWorkerNumbersContainer);
	window.addChild(buildingOptionsContainer);
	var f = ($_=city.gui,$bind($_,$_.reloadWindow));
	var a1 = city;
	var a2 = gui1;
	var a3 = stage;
	var a4 = window;
	var a11 = function() {
		gui_HouseInformationWindow.createWindow(a1,a2,a3,a4);
		return;
	};
	var tmp1 = function() {
		f(a11);
	};
	city.windowRelatedOnBuildOrDestroy = tmp1;
	window.onDestroy = function() {
		city.windowRelatedOnBuildOrDestroy = null;
	};
	gui1.windowAddBottomButtons();
};
gui_HouseInformationWindow.getHousingHelpText = function(stats) {
	if(stats.peopleWithHome >= stats.people) {
		if(stats.houseCapacity == stats.peopleWithHome) {
			return "There are exactly enough homes for your citizens.";
		} else {
			return "There's " + (stats.houseCapacity - stats.peopleWithHome) + " house capacity remaining.";
		}
	} else {
		var homeless = stats.people - stats.peopleWithHome;
		if(homeless == 1) {
			return "There's one homeless person.";
		} else {
			return "There are " + homeless + " homeless people.";
		}
	}
};
var gui_IconListDisplay = function(displayedIcons) {
	PIXI.Container.call(this);
	this.setDisplay(displayedIcons);
};
$hxClasses["gui.IconListDisplay"] = gui_IconListDisplay;
gui_IconListDisplay.__name__ = ["gui","IconListDisplay"];
gui_IconListDisplay.__super__ = PIXI.Container;
gui_IconListDisplay.prototype = $extend(PIXI.Container.prototype,{
	wouldChangeDisplay: function(newIcons) {
		if(this.displayedIcons.length != newIcons.length) {
			return true;
		}
		var _g1 = 0;
		var _g = this.displayedIcons.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(newIcons[i].texture != this.displayedIcons[i].texture || newIcons[i].text != this.displayedIcons[i].text) {
				return true;
			}
		}
		return false;
	}
	,setDisplay: function(displayedIcons) {
		this.displayedIcons = displayedIcons;
		var i = this.children.length;
		while(--i >= 0) this.children.splice(i,1);
		var xx = 0;
		var _g = 0;
		while(_g < displayedIcons.length) {
			var displayedIcon = displayedIcons[_g];
			++_g;
			var spr = new PIXI.Sprite(displayedIcon.texture);
			spr.position.x = xx;
			this.addChild(spr);
			xx += (spr.width | 0) + 2;
			var displayText = displayedIcon.text;
			var col = 0;
			if(HxOverrides.substr(displayedIcon.text,0,"[red]".length) == "[red]") {
				displayText = HxOverrides.substr(displayText,"[red]".length,null);
				col = 16711680;
			}
			var bitmapText = new PIXI.extras.BitmapText(displayText,{ font : "Arial", tint : col});
			if(displayText == "1") {
				--xx;
			}
			bitmapText.position.set(xx,-1);
			if(displayText == "1") {
				--xx;
			}
			this.addChild(bitmapText);
			xx += (bitmapText.textWidth | 0) + 3;
		}
		this.displayWidth = xx;
	}
	,__class__: gui_IconListDisplay
});
var gui_ImageButton = function(gui1,stage,parent,action,spriteTexture,isActive,onHover,backSpriteTexture,buttonSpriteName,imageSpriteOffset) {
	if(imageSpriteOffset == null) {
		imageSpriteOffset = 1;
	}
	if(buttonSpriteName == null) {
		buttonSpriteName = "spr_buildingbutton";
	}
	this.needsAttention = false;
	this.attentionGetterSprite = null;
	this.imageSpriteOffset = 1;
	this.removeNotificationOnHover = true;
	this.shown = true;
	gui_Button.call(this,gui1,stage,parent,action,isActive,onHover);
	this.buttonTextures = Resources.getTextures(buttonSpriteName,3);
	this.buttonSprite = new PIXI.Sprite(this.buttonTextures[0]);
	stage.addChild(this.buttonSprite);
	if(backSpriteTexture != null) {
		this.imageSpriteBack = new PIXI.Sprite(backSpriteTexture);
		this.imageSpriteBack.position.set(1,1);
		stage.addChild(this.imageSpriteBack);
	}
	this.imageSpriteOffset = imageSpriteOffset;
	this.imageSprite = new PIXI.Sprite(spriteTexture);
	this.imageSprite.position.set(imageSpriteOffset,imageSpriteOffset);
	stage.addChild(this.imageSprite);
	this.rect = new common_Rectangle(0,0,(spriteTexture.width | 0) + imageSpriteOffset * 2,(spriteTexture.height | 0) + imageSpriteOffset * 2);
};
$hxClasses["gui.ImageButton"] = gui_ImageButton;
gui_ImageButton.__name__ = ["gui","ImageButton"];
gui_ImageButton.__super__ = gui_Button;
gui_ImageButton.prototype = $extend(gui_Button.prototype,{
	updateTexture: function(newTexture) {
		this.imageSprite.texture = newTexture;
	}
	,updatePosition: function(newPosition) {
		gui_Button.prototype.updatePosition.call(this,newPosition);
		this.buttonSprite.position.set(newPosition.x,newPosition.y);
		this.imageSprite.position.set(newPosition.x + this.imageSpriteOffset,newPosition.y + this.imageSpriteOffset);
		if(this.imageSpriteBack != null) {
			this.imageSpriteBack.position.set(newPosition.x + 1,newPosition.y + 1);
		}
		if(this.imageSpriteForeground != null) {
			this.imageSpriteForeground.position.set(newPosition.x,newPosition.y);
		}
		if(this.attentionGetterSprite != null) {
			this.attentionGetterSprite.position.set(newPosition.x,newPosition.y);
		}
	}
	,handleMouse: function(mouse) {
		var _gthis = this;
		if(!this.shown) {
			return false;
		}
		return gui_Button.prototype.doHandleMouse.call(this,mouse,function() {
			_gthis.buttonSprite.texture = _gthis.buttonTextures[1];
			if(_gthis.removeNotificationOnHover) {
				_gthis.stopNotify();
			}
		},function() {
			_gthis.buttonSprite.texture = _gthis.buttonTextures[2];
			_gthis.stopNotify();
		});
	}
	,update: function() {
		if(this.mouseOut) {
			this.buttonSprite.texture = this.buttonTextures[0];
		}
		if(this.isActive()) {
			this.buttonSprite.texture = this.buttonTextures[2];
		}
		this.updateNeedsAttention();
		gui_Button.prototype.update.call(this);
	}
	,setNeedsAttention: function(needsAttention) {
		if(needsAttention == null) {
			needsAttention = false;
		}
		this.needsAttention = needsAttention;
		this.updateNeedsAttention();
	}
	,updateNeedsAttention: function() {
		if(this.buttonSprite == null) {
			return;
		}
		if(this.needsAttention && this.buttonSprite.texture == this.buttonTextures[0]) {
			if(this.attentionGetterSprite == null) {
				this.attentionGetterSprite = new PIXI.Sprite(Resources.getTexture("spr_whiteoutline"));
				this.attentionGetterSprite.position.set(this.buttonSprite.position.x,this.buttonSprite.position.y);
				if(this.buttonSprite.parent != null) {
					this.buttonSprite.parent.addChild(this.attentionGetterSprite);
				}
			}
			var this1 = [89,1,0.77];
			var tmp = thx_color__$Hsv_Hsv_$Impl_$.toRgb(this1);
			this.attentionGetterSprite.tint = common_ColorExtensions.toHexInt(tmp);
			this.attentionGetterSprite.alpha = (Math.sin(this.gui.guiTimer / 10) + 1) / 2;
		} else if(this.attentionGetterSprite != null) {
			if(!this.needsAttention) {
				this.attentionGetterSprite.destroy();
				this.attentionGetterSprite = null;
			} else {
				this.attentionGetterSprite.alpha = 0;
			}
		}
	}
	,destroy: function() {
		gui_Button.prototype.destroy.call(this);
		this.stage.removeChild(this.buttonSprite);
		this.stage.removeChild(this.imageSprite);
		if(this.imageSpriteBack != null) {
			this.stage.removeChild(this.imageSpriteBack);
		}
		if(this.imageSpriteForeground != null) {
			this.stage.removeChild(this.imageSpriteForeground);
		}
		if(this.attentionGetterSprite != null) {
			this.attentionGetterSprite.destroy();
		}
	}
	,hide: function() {
		if(this.imageSpriteBack != null) {
			this.imageSpriteBack.visible = false;
		}
		this.imageSprite.visible = false;
		this.buttonSprite.visible = false;
		if(this.imageSpriteForeground != null) {
			this.imageSpriteForeground.visible = false;
		}
		if(this.attentionGetterSprite != null) {
			this.attentionGetterSprite.visible = false;
		}
		this.shown = false;
	}
	,show: function() {
		if(this.imageSpriteBack != null) {
			this.imageSpriteBack.visible = true;
		}
		this.imageSprite.visible = true;
		this.buttonSprite.visible = true;
		if(this.imageSpriteForeground != null) {
			this.imageSpriteForeground.visible = true;
		}
		if(this.attentionGetterSprite != null) {
			this.attentionGetterSprite.visible = true;
		}
		this.shown = true;
	}
	,notify: function(removeNotificationOnHover,onRemove) {
		this.removeNotificationOnHover = removeNotificationOnHover;
		if(this.imageSpriteForeground != null) {
			return;
		}
		this.imageSpriteForeground = new PIXI.Sprite(Resources.getTexture("spr_buttonnotification"));
		var _this_y;
		var _this_x;
		var _this = this.rect;
		_this_x = _this.x;
		_this_y = _this.y;
		var tmp = new PIXI.Point(_this_x,_this_y);
		this.imageSpriteForeground.position = tmp;
		this.stage.addChild(this.imageSpriteForeground);
		this.doOnStopNotify = onRemove;
	}
	,stopNotify: function() {
		if(this.imageSpriteForeground == null) {
			return;
		}
		this.stage.removeChild(this.imageSpriteForeground);
		this.imageSpriteForeground = null;
		this.doOnStopNotify();
	}
	,__class__: gui_ImageButton
});
var gui_InfoBox = function(gui1,stage,parent,onUpdate,iconTexture,minWidth,onHover,backgroundSpriteName,shouldShowInfinitySign) {
	if(backgroundSpriteName == null) {
		backgroundSpriteName = "spr_9p_info";
	}
	if(minWidth == null) {
		minWidth = 0;
	}
	this.showingInfinitySign = false;
	if(shouldShowInfinitySign == null) {
		this.shouldShowInfinitySign = function() {
			return false;
		};
	} else {
		this.shouldShowInfinitySign = shouldShowInfinitySign;
	}
	var backgroundPatch = backgroundSpriteName == "none" ? null : new gui_NinePatch(Resources.getTexture(backgroundSpriteName),2,10,14);
	var extraSpacing = gui1.game.isMobile ? 3 : 0;
	gui_GUIContainer.call(this,gui1,stage,parent,null,null,null,backgroundPatch,{ left : 2 + extraSpacing, right : 2 + extraSpacing, top : 2 + extraSpacing, bottom : extraSpacing + -1});
	this.fillSecondarySize = true;
	this.fillPrimarySize = true;
	this.onHover = onHover;
	this.minWidth = minWidth;
	this.onTextUpdate = onUpdate;
	this.shouldShowInfinitySign = shouldShowInfinitySign;
	this.spriteContainer = new PIXI.Sprite(iconTexture);
	if(iconTexture != null) {
		this.addChild(new gui_ContainerHolder(this,stage,this.spriteContainer));
	}
	this.createSecondElement();
};
$hxClasses["gui.InfoBox"] = gui_InfoBox;
gui_InfoBox.__name__ = ["gui","InfoBox"];
gui_InfoBox.__super__ = gui_GUIContainer;
gui_InfoBox.prototype = $extend(gui_GUIContainer.prototype,{
	update: function() {
		if(this.shouldShowInfinitySign() != this.showingInfinitySign) {
			this.secondElement.destroy();
			this.removeChild(this.secondElement,false);
			this.createSecondElement();
		}
		gui_GUIContainer.prototype.update.call(this);
	}
	,createSecondElement: function() {
		this.showingInfinitySign = this.shouldShowInfinitySign();
		if(this.showingInfinitySign) {
			this.secondElement = this.addChild(new gui_ContainerHolder(this,this.stage,new PIXI.Sprite(Resources.getTexture("spr_icon_unlimited"))));
		} else {
			var extraSpacingText = this.gui.game.isMobile ? 2 : 0;
			this.secondElement = new gui_TextElement(this,this.stage,null,this.onTextUpdate,null,{ left : 1 + extraSpacingText, right : 1, top : 1, bottom : 0});
			this.addChild(this.secondElement);
		}
	}
	,handleMouse: function(mouse) {
		if(this.rect.contains(mouse.position)) {
			if(this.onHover != null) {
				this.onHover();
			}
			mouse.claimMouse(this);
			return true;
		}
		return false;
	}
	,updateSize: function() {
		gui_GUIContainer.prototype.updateSize.call(this);
		this.minWidth = this.baseWidth;
	}
	,__class__: gui_InfoBox
});
var gui_MainMenuGUI = function(game,outerStage) {
	GUI.call(this,game,outerStage);
};
$hxClasses["gui.MainMenuGUI"] = gui_MainMenuGUI;
gui_MainMenuGUI.__name__ = ["gui","MainMenuGUI"];
gui_MainMenuGUI.createNewScenarioWindow = function(game,gui1,windowOnDestroy) {
	gui1.createWindow();
	var a1 = game;
	var a2 = gui1;
	var a3 = windowOnDestroy;
	var tmp = function() {
		gui_MainMenuGUI.createNewScenarioWindow(a1,a2,a3);
		return;
	};
	gui1.addWindowToStack(tmp);
	gui1.windowAddTitleText("Start Scenario");
	var stories = Resources.allStoriesInfo;
	var _g = 0;
	while(_g < stories.length) {
		var story = stories[_g];
		++_g;
		if(!StringTools.startsWith(story.name,"Free Play") && progress_StoryLoader.hasCompletedRequirements(game,story)) {
			gui_MainMenuGUI.addStoryToWindow(game,gui1,story);
		}
	}
	if(progress_StoryLoader.shouldShowUnlockAllStoriesButton(game)) {
		var button = new gui_ContainerButton(gui1,gui1.innerWindowStage,gui1.windowInner,function() {
			game.metaGame.unlockAll();
			var a11 = game;
			var a21 = gui1;
			var a31 = windowOnDestroy;
			var button1 = function() {
				gui_MainMenuGUI.createNewScenarioWindow(a11,a21,a31);
			};
			gui1.reloadWindow(button1);
		});
		button.container.padding.top = 3;
		button.container.padding.left = 3;
		button.container.padding.right = 3;
		button.container.padding.bottom = 1;
		button.container.fillSecondarySize = true;
		button.container.addChild(new gui_TextElement(button.container,gui1.innerWindowStage,"Unlock All"));
		gui1.windowInner.addChild(button);
	}
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(4,6)));
	gui1.windowAddInfoText("Free Play:",null,"Arial");
	var _g1 = 0;
	while(_g1 < stories.length) {
		var story1 = stories[_g1];
		++_g1;
		if(StringTools.startsWith(story1.name,"Free Play") && progress_StoryLoader.hasCompletedRequirements(game,story1)) {
			gui_MainMenuGUI.addStoryToWindow(game,gui1,story1);
		}
	}
	gui1.windowAddBottomButtons();
	gui1.windowOnDestroy = windowOnDestroy;
};
gui_MainMenuGUI.createPlayedBeforeWindow = function(game,gui1,windowOnDestroy) {
	gui1.createWindow();
	var a1 = game;
	var a2 = gui1;
	var a3 = windowOnDestroy;
	var tmp = function() {
		gui_MainMenuGUI.createPlayedBeforeWindow(a1,a2,a3);
		return;
	};
	gui1.addWindowToStack(tmp);
	gui1.windowAddTitleText("Welcome Back!");
	var activableButton = gui_UpgradeWindowParts.createActivatableButton(gui1,false,function() {
	},"Import City","Got an exported save file?",gui1.windowInner);
	activableButton.button.onHover = function() {
		game.setOnClickTo = function() {
			var importButton = window.document.getElementById("importFile");
			importButton.value = "";
			importButton.click();
			game.onClick = null;
		};
	};
	gui_UpgradeWindowParts.createActivatableButton(gui1,false,function() {
		gui_MainMenuGUI.createNewScenarioWindow(game,gui1,windowOnDestroy);
	},"New Game","Start with any scenario or Free Play.",gui1.windowInner);
	gui1.windowAddBottomButtons();
	gui1.windowOnDestroy = windowOnDestroy;
};
gui_MainMenuGUI.addStoryToWindow = function(game,gui1,story) {
	var description = "";
	if(game.metaGame.hasWonScenario(story.link)) {
		var time = game.metaGame.getScenarioTime(story.link);
		description = "Best time: " + (time / 1440 | 0) + "d " + (time / 60 | 0) % 24 + "h " + time % 60 + "m " + "\n";
	}
	description += story.description;
	var tmp = StringTools.replace(story.name,"Free Play - ","");
	gui_UpgradeWindowParts.createActivatableButton(gui1,false,function() {
		var oldOnDestroy = gui1.windowOnDestroy;
		gui1.windowOnDestroy = null;
		game.createNewGameState(story.link);
	},tmp,description,gui1.windowInner);
};
gui_MainMenuGUI.__super__ = GUI;
gui_MainMenuGUI.prototype = $extend(GUI.prototype,{
	createPlayWindow: function(windowOnDestroy) {
		gui_MainMenuGUI.createNewScenarioWindow(this.game,this,windowOnDestroy);
	}
	,doCreatePlayedBeforeWindow: function(windowOnDestroy) {
		gui_MainMenuGUI.createPlayedBeforeWindow(this.game,this,windowOnDestroy);
	}
	,__class__: gui_MainMenuGUI
});
var gui_MaterialsCostDisplay = function(city,cost,beforeKnowledgeText) {
	if(beforeKnowledgeText == null) {
		beforeKnowledgeText = "";
	}
	this.maxDisplayWidth = -1;
	this.displayCityAmounts = false;
	PIXI.Container.call(this);
	this.city = city;
	this.materialDisplayedRed = new haxe_ds_StringMap();
	var _this = this.materialDisplayedRed;
	if(__map_reserved["food"] != null) {
		_this.setReserved("food",false);
	} else {
		_this.h["food"] = false;
	}
	var _this1 = this.materialDisplayedRed;
	if(__map_reserved["wood"] != null) {
		_this1.setReserved("wood",false);
	} else {
		_this1.h["wood"] = false;
	}
	var _this2 = this.materialDisplayedRed;
	if(__map_reserved["stone"] != null) {
		_this2.setReserved("stone",false);
	} else {
		_this2.h["stone"] = false;
	}
	var _this3 = this.materialDisplayedRed;
	if(__map_reserved["machineParts"] != null) {
		_this3.setReserved("machineParts",false);
	} else {
		_this3.h["machineParts"] = false;
	}
	var _this4 = this.materialDisplayedRed;
	if(__map_reserved["refinedMetal"] != null) {
		_this4.setReserved("refinedMetal",false);
	} else {
		_this4.h["refinedMetal"] = false;
	}
	var _this5 = this.materialDisplayedRed;
	if(__map_reserved["computerChips"] != null) {
		_this5.setReserved("computerChips",false);
	} else {
		_this5.h["computerChips"] = false;
	}
	var _this6 = this.materialDisplayedRed;
	if(__map_reserved["cacao"] != null) {
		_this6.setReserved("cacao",false);
	} else {
		_this6.h["cacao"] = false;
	}
	var _this7 = this.materialDisplayedRed;
	if(__map_reserved["chocolate"] != null) {
		_this7.setReserved("chocolate",false);
	} else {
		_this7.h["chocolate"] = false;
	}
	var _this8 = this.materialDisplayedRed;
	if(__map_reserved["knowledge"] != null) {
		_this8.setReserved("knowledge",false);
	} else {
		_this8.h["knowledge"] = false;
	}
	var _this9 = this.materialDisplayedRed;
	if(__map_reserved["magic"] != null) {
		_this9.setReserved("magic",false);
	} else {
		_this9.h["magic"] = false;
	}
	this.beforeKnowledgeText = beforeKnowledgeText;
	this.cost = cost;
	this.cityAmountDisplayed = null;
	this.updateCostDisplay();
};
$hxClasses["gui.MaterialsCostDisplay"] = gui_MaterialsCostDisplay;
gui_MaterialsCostDisplay.__name__ = ["gui","MaterialsCostDisplay"];
gui_MaterialsCostDisplay.__super__ = PIXI.Container;
gui_MaterialsCostDisplay.prototype = $extend(PIXI.Container.prototype,{
	setBeforeKnowledgeText: function(value) {
		this.beforeKnowledgeText = value;
	}
	,setCost: function(cost) {
		this.cost = cost;
		this.updateCostDisplay();
	}
	,updateCostDisplay: function() {
		var _gthis = this;
		var hasMaximumDisplayWidthFailed = false;
		var shouldUpdateCostDisplayAgain = true;
		while(shouldUpdateCostDisplayAgain) {
			shouldUpdateCostDisplayAgain = false;
			var i = this.children.length;
			while(--i >= 0) this.children.splice(i,1);
			var xx = [0];
			var shownBeforeKnowledgeText = false;
			var anyMaterialShownBefore = false;
			if(this.cost.food > 0) {
				xx[0] -= 2;
				anyMaterialShownBefore = true;
				var spr = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "food".toLowerCase()));
				spr.position.x = xx[0];
				this.addChild(spr);
				xx[0] += (spr.width | 0) + 1;
				xx[0] -= 2;
				var extraText = "";
				if(this.displayCityAmounts && !hasMaximumDisplayWidthFailed && !this.city.progress.sandbox.unlimitedResources) {
					extraText = "/" + common_MathExtensions.largeNumberFormat(Math,this.city.materials.food | 0);
				}
				var tooLittleOfMaterial = this.city != null && this.city.materials.food < this.cost.food;
				var bitmapText = new PIXI.extras.BitmapText(this.cost.food + extraText,{ font : "Arial", tint : this.city != null && tooLittleOfMaterial ? 16711680 : 0});
				var _this = this.materialDisplayedRed;
				if(__map_reserved["food"] != null) {
					_this.setReserved("food",tooLittleOfMaterial);
				} else {
					_this.h["food"] = tooLittleOfMaterial;
				}
				bitmapText.position.set(xx[0],-1);
				this.addChild(bitmapText);
				xx[0] += (bitmapText.textWidth | 0) + 3;
			} else {
				var _this1 = this.materialDisplayedRed;
				if(__map_reserved["food"] != null) {
					_this1.setReserved("food",false);
				} else {
					_this1.h["food"] = false;
				}
			}
			if(this.cost.wood > 0) {
				anyMaterialShownBefore = true;
				var spr1 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "wood".toLowerCase()));
				spr1.position.x = xx[0];
				this.addChild(spr1);
				xx[0] += (spr1.width | 0) + 1;
				var extraText1 = "";
				if(this.displayCityAmounts && !hasMaximumDisplayWidthFailed && !this.city.progress.sandbox.unlimitedResources) {
					extraText1 = "/" + common_MathExtensions.largeNumberFormat(Math,this.city.materials.wood | 0);
				}
				var tooLittleOfMaterial1 = this.city != null && this.city.materials.wood < this.cost.wood;
				var bitmapText1 = new PIXI.extras.BitmapText(this.cost.wood + extraText1,{ font : "Arial", tint : this.city != null && tooLittleOfMaterial1 ? 16711680 : 0});
				var _this2 = this.materialDisplayedRed;
				if(__map_reserved["wood"] != null) {
					_this2.setReserved("wood",tooLittleOfMaterial1);
				} else {
					_this2.h["wood"] = tooLittleOfMaterial1;
				}
				bitmapText1.position.set(xx[0],-1);
				this.addChild(bitmapText1);
				xx[0] += (bitmapText1.textWidth | 0) + 3;
			} else {
				var _this3 = this.materialDisplayedRed;
				if(__map_reserved["wood"] != null) {
					_this3.setReserved("wood",false);
				} else {
					_this3.h["wood"] = false;
				}
			}
			if(this.cost.stone > 0) {
				anyMaterialShownBefore = true;
				var spr2 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "stone".toLowerCase()));
				spr2.position.x = xx[0];
				this.addChild(spr2);
				xx[0] += (spr2.width | 0) + 1;
				var extraText2 = "";
				if(this.displayCityAmounts && !hasMaximumDisplayWidthFailed && !this.city.progress.sandbox.unlimitedResources) {
					extraText2 = "/" + common_MathExtensions.largeNumberFormat(Math,this.city.materials.stone | 0);
				}
				var tooLittleOfMaterial2 = this.city != null && this.city.materials.stone < this.cost.stone;
				var bitmapText2 = new PIXI.extras.BitmapText(this.cost.stone + extraText2,{ font : "Arial", tint : this.city != null && tooLittleOfMaterial2 ? 16711680 : 0});
				var _this4 = this.materialDisplayedRed;
				if(__map_reserved["stone"] != null) {
					_this4.setReserved("stone",tooLittleOfMaterial2);
				} else {
					_this4.h["stone"] = tooLittleOfMaterial2;
				}
				bitmapText2.position.set(xx[0],-1);
				this.addChild(bitmapText2);
				xx[0] += (bitmapText2.textWidth | 0) + 3;
			} else {
				var _this5 = this.materialDisplayedRed;
				if(__map_reserved["stone"] != null) {
					_this5.setReserved("stone",false);
				} else {
					_this5.h["stone"] = false;
				}
			}
			if(this.cost.machineParts > 0) {
				anyMaterialShownBefore = true;
				var spr3 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "machineParts".toLowerCase()));
				spr3.position.x = xx[0];
				this.addChild(spr3);
				xx[0] += (spr3.width | 0) + 1;
				var extraText3 = "";
				if(this.displayCityAmounts && !hasMaximumDisplayWidthFailed && !this.city.progress.sandbox.unlimitedResources) {
					extraText3 = "/" + common_MathExtensions.largeNumberFormat(Math,this.city.materials.machineParts | 0);
				}
				var tooLittleOfMaterial3 = this.city != null && this.city.materials.machineParts < this.cost.machineParts;
				var bitmapText3 = new PIXI.extras.BitmapText(this.cost.machineParts + extraText3,{ font : "Arial", tint : this.city != null && tooLittleOfMaterial3 ? 16711680 : 0});
				var _this6 = this.materialDisplayedRed;
				if(__map_reserved["machineParts"] != null) {
					_this6.setReserved("machineParts",tooLittleOfMaterial3);
				} else {
					_this6.h["machineParts"] = tooLittleOfMaterial3;
				}
				bitmapText3.position.set(xx[0],-1);
				this.addChild(bitmapText3);
				xx[0] += (bitmapText3.textWidth | 0) + 3;
			} else {
				var _this7 = this.materialDisplayedRed;
				if(__map_reserved["machineParts"] != null) {
					_this7.setReserved("machineParts",false);
				} else {
					_this7.h["machineParts"] = false;
				}
			}
			if(this.cost.refinedMetal > 0) {
				anyMaterialShownBefore = true;
				var spr4 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "refinedMetal".toLowerCase()));
				spr4.position.x = xx[0];
				this.addChild(spr4);
				xx[0] += (spr4.width | 0) + 1;
				var extraText4 = "";
				if(this.displayCityAmounts && !hasMaximumDisplayWidthFailed && !this.city.progress.sandbox.unlimitedResources) {
					extraText4 = "/" + common_MathExtensions.largeNumberFormat(Math,this.city.materials.refinedMetal | 0);
				}
				var tooLittleOfMaterial4 = this.city != null && this.city.materials.refinedMetal < this.cost.refinedMetal;
				var bitmapText4 = new PIXI.extras.BitmapText(this.cost.refinedMetal + extraText4,{ font : "Arial", tint : this.city != null && tooLittleOfMaterial4 ? 16711680 : 0});
				var _this8 = this.materialDisplayedRed;
				if(__map_reserved["refinedMetal"] != null) {
					_this8.setReserved("refinedMetal",tooLittleOfMaterial4);
				} else {
					_this8.h["refinedMetal"] = tooLittleOfMaterial4;
				}
				bitmapText4.position.set(xx[0],-1);
				this.addChild(bitmapText4);
				xx[0] += (bitmapText4.textWidth | 0) + 3;
			} else {
				var _this9 = this.materialDisplayedRed;
				if(__map_reserved["refinedMetal"] != null) {
					_this9.setReserved("refinedMetal",false);
				} else {
					_this9.h["refinedMetal"] = false;
				}
			}
			if(this.cost.computerChips > 0) {
				anyMaterialShownBefore = true;
				var spr5 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "computerChips".toLowerCase()));
				spr5.position.x = xx[0];
				this.addChild(spr5);
				xx[0] += (spr5.width | 0) + 1;
				var extraText5 = "";
				if(this.displayCityAmounts && !hasMaximumDisplayWidthFailed && !this.city.progress.sandbox.unlimitedResources) {
					extraText5 = "/" + common_MathExtensions.largeNumberFormat(Math,this.city.materials.computerChips | 0);
				}
				var tooLittleOfMaterial5 = this.city != null && this.city.materials.computerChips < this.cost.computerChips;
				var bitmapText5 = new PIXI.extras.BitmapText(this.cost.computerChips + extraText5,{ font : "Arial", tint : this.city != null && tooLittleOfMaterial5 ? 16711680 : 0});
				var _this10 = this.materialDisplayedRed;
				if(__map_reserved["computerChips"] != null) {
					_this10.setReserved("computerChips",tooLittleOfMaterial5);
				} else {
					_this10.h["computerChips"] = tooLittleOfMaterial5;
				}
				bitmapText5.position.set(xx[0],-1);
				this.addChild(bitmapText5);
				xx[0] += (bitmapText5.textWidth | 0) + 3;
			} else {
				var _this11 = this.materialDisplayedRed;
				if(__map_reserved["computerChips"] != null) {
					_this11.setReserved("computerChips",false);
				} else {
					_this11.h["computerChips"] = false;
				}
			}
			if(this.cost.cacao > 0) {
				anyMaterialShownBefore = true;
				var spr6 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "cacao".toLowerCase()));
				spr6.position.x = xx[0];
				this.addChild(spr6);
				xx[0] += (spr6.width | 0) + 1;
				var extraText6 = "";
				if(this.displayCityAmounts && !hasMaximumDisplayWidthFailed && !this.city.progress.sandbox.unlimitedResources) {
					extraText6 = "/" + common_MathExtensions.largeNumberFormat(Math,this.city.materials.cacao | 0);
				}
				var tooLittleOfMaterial6 = this.city != null && this.city.materials.cacao < this.cost.cacao;
				var bitmapText6 = new PIXI.extras.BitmapText(this.cost.cacao + extraText6,{ font : "Arial", tint : this.city != null && tooLittleOfMaterial6 ? 16711680 : 0});
				var _this12 = this.materialDisplayedRed;
				if(__map_reserved["cacao"] != null) {
					_this12.setReserved("cacao",tooLittleOfMaterial6);
				} else {
					_this12.h["cacao"] = tooLittleOfMaterial6;
				}
				bitmapText6.position.set(xx[0],-1);
				this.addChild(bitmapText6);
				xx[0] += (bitmapText6.textWidth | 0) + 3;
			} else {
				var _this13 = this.materialDisplayedRed;
				if(__map_reserved["cacao"] != null) {
					_this13.setReserved("cacao",false);
				} else {
					_this13.h["cacao"] = false;
				}
			}
			if(this.cost.chocolate > 0) {
				anyMaterialShownBefore = true;
				var spr7 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "chocolate".toLowerCase()));
				spr7.position.x = xx[0];
				this.addChild(spr7);
				xx[0] += (spr7.width | 0) + 1;
				var extraText7 = "";
				if(this.displayCityAmounts && !hasMaximumDisplayWidthFailed && !this.city.progress.sandbox.unlimitedResources) {
					extraText7 = "/" + common_MathExtensions.largeNumberFormat(Math,this.city.materials.chocolate | 0);
				}
				var tooLittleOfMaterial7 = this.city != null && this.city.materials.chocolate < this.cost.chocolate;
				var bitmapText7 = new PIXI.extras.BitmapText(this.cost.chocolate + extraText7,{ font : "Arial", tint : this.city != null && tooLittleOfMaterial7 ? 16711680 : 0});
				var _this14 = this.materialDisplayedRed;
				if(__map_reserved["chocolate"] != null) {
					_this14.setReserved("chocolate",tooLittleOfMaterial7);
				} else {
					_this14.h["chocolate"] = tooLittleOfMaterial7;
				}
				bitmapText7.position.set(xx[0],-1);
				this.addChild(bitmapText7);
				xx[0] += (bitmapText7.textWidth | 0) + 3;
			} else {
				var _this15 = this.materialDisplayedRed;
				if(__map_reserved["chocolate"] != null) {
					_this15.setReserved("chocolate",false);
				} else {
					_this15.h["chocolate"] = false;
				}
			}
			if(this.cost.knowledge > 0) {
				if(this.beforeKnowledgeText != "" && anyMaterialShownBefore) {
					var bitmapText8 = new PIXI.extras.BitmapText(this.beforeKnowledgeText,{ font : "Arial", tint : 0});
					bitmapText8.position.set(xx[0],-1);
					this.addChild(bitmapText8);
					shownBeforeKnowledgeText = true;
					xx[0] += (bitmapText8.textWidth | 0) + 3;
				}
				anyMaterialShownBefore = true;
				var spr8 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "knowledge".toLowerCase()));
				spr8.position.x = xx[0];
				this.addChild(spr8);
				xx[0] += (spr8.width | 0) + 1;
				var extraText8 = "";
				if(this.displayCityAmounts && !hasMaximumDisplayWidthFailed && !this.city.progress.sandbox.unlimitedResources) {
					extraText8 = "/" + common_MathExtensions.largeNumberFormat(Math,this.city.materials.knowledge | 0);
				}
				extraText8 = " to research";
				var tooLittleOfMaterial8 = this.city != null && this.city.materials.knowledge < this.cost.knowledge;
				var bitmapText9 = new PIXI.extras.BitmapText(this.cost.knowledge + extraText8,{ font : "Arial", tint : this.city != null && tooLittleOfMaterial8 ? 16711680 : 0});
				var _this16 = this.materialDisplayedRed;
				if(__map_reserved["knowledge"] != null) {
					_this16.setReserved("knowledge",tooLittleOfMaterial8);
				} else {
					_this16.h["knowledge"] = tooLittleOfMaterial8;
				}
				bitmapText9.position.set(xx[0],-1);
				this.addChild(bitmapText9);
				xx[0] += (bitmapText9.textWidth | 0) + 3;
			} else {
				var _this17 = this.materialDisplayedRed;
				if(__map_reserved["knowledge"] != null) {
					_this17.setReserved("knowledge",false);
				} else {
					_this17.h["knowledge"] = false;
				}
			}
			if(this.cost.magic > 0) {
				anyMaterialShownBefore = true;
				var spr20 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "machineParts".toLowerCase()));
				spr20.position.x = xx[0];
				this.addChild(spr20);
				xx[0] += (spr20.width | 0) + 1;
				var extraText20 = "";
				if(this.displayCityAmounts && !hasMaximumDisplayWidthFailed && !this.city.progress.sandbox.unlimitedResources) {
					extraText20 = "/" + common_MathExtensions.largeNumberFormat(Math,this.city.materials.magic | 0);
				}
				var tooLittleOfMaterial20 = this.city != null && this.city.materials.magic < this.cost.magic;
				var bitmapText20 = new PIXI.extras.BitmapText(this.cost.magic + extraText20,{ font : "Arial", tint : this.city != null && tooLittleOfMaterial20 ? 16711680 : 0});
				var _this20 = this.materialDisplayedRed;
				if(__map_reserved["magic"] != null) {
					_this20.setReserved("magic",tooLittleOfMaterial20);
				} else {
					_this20.h["magic"] = tooLittleOfMaterial20;
				}
				bitmapText20.position.set(xx[0],-1);
				this.addChild(bitmapText20);
				xx[0] += (bitmapText20.textWidth | 0) + 3;
			} else {
				var _this21 = this.materialDisplayedRed;
				if(__map_reserved["magic"] != null) {
					_this21.setReserved("magic",false);
				} else {
					_this21.h["magics"] = false;
				}
			}
			if(!shownBeforeKnowledgeText && this.beforeKnowledgeText != "") {
				var bitmapText10 = new PIXI.extras.BitmapText(this.beforeKnowledgeText,{ font : "Arial", tint : 0});
				bitmapText10.position.set(xx[0],-1);
				this.addChild(bitmapText10);
				xx[0] += (bitmapText10.textWidth | 0) + 3;
			}
			var addExtraIcon = (function(xx1) {
				return function(textureName,amount) {
					var spr9 = new PIXI.Sprite(Resources.getTexture(textureName));
					spr9.position.x = xx1[0];
					_gthis.addChild(spr9);
					xx1[0] += (spr9.width | 0) + 1;
					var bitmapText11 = new PIXI.extras.BitmapText("" + amount,{ font : "Arial", tint : 0});
					bitmapText11.position.set(xx1[0],-1);
					_gthis.addChild(bitmapText11);
					xx1[0] += (bitmapText11.textWidth | 0) + 3;
				};
			})(xx);
			this.displayWidth = xx[0];
			if(!hasMaximumDisplayWidthFailed && this.maxDisplayWidth > 0 && xx[0] > this.maxDisplayWidth) {
				hasMaximumDisplayWidthFailed = true;
				shouldUpdateCostDisplayAgain = true;
			}
		}
		if(this.city != null) {
			this.cityAmountDisplayed = this.city.materials.copy();
		}
	}
	,wouldChangeDisplay: function(newCost) {
		if(this.displayCityAmounts) {
			if(this.cityAmountDisplayed == null) {
				return true;
			}
			if(this.cityAmountDisplayed.anyMaterialDifferent(this.city.materials)) {
				return true;
			}
		}
		if(newCost.food != this.cost.food) {
			return true;
		}
		var tooLittleOfMaterial = this.city != null && this.city.materials.food < newCost.food;
		var _this = this.materialDisplayedRed;
		if((__map_reserved["food"] != null ? _this.getReserved("food") : _this.h["food"]) != tooLittleOfMaterial) {
			return true;
		}
		if(newCost.wood != this.cost.wood) {
			return true;
		}
		var tooLittleOfMaterial1 = this.city != null && this.city.materials.wood < newCost.wood;
		var _this1 = this.materialDisplayedRed;
		if((__map_reserved["wood"] != null ? _this1.getReserved("wood") : _this1.h["wood"]) != tooLittleOfMaterial1) {
			return true;
		}
		if(newCost.stone != this.cost.stone) {
			return true;
		}
		var tooLittleOfMaterial2 = this.city != null && this.city.materials.stone < newCost.stone;
		var _this2 = this.materialDisplayedRed;
		if((__map_reserved["stone"] != null ? _this2.getReserved("stone") : _this2.h["stone"]) != tooLittleOfMaterial2) {
			return true;
		}
		if(newCost.machineParts != this.cost.machineParts) {
			return true;
		}
		var tooLittleOfMaterial3 = this.city != null && this.city.materials.machineParts < newCost.machineParts;
		var _this3 = this.materialDisplayedRed;
		if((__map_reserved["machineParts"] != null ? _this3.getReserved("machineParts") : _this3.h["machineParts"]) != tooLittleOfMaterial3) {
			return true;
		}
		if(newCost.refinedMetal != this.cost.refinedMetal) {
			return true;
		}
		var tooLittleOfMaterial4 = this.city != null && this.city.materials.refinedMetal < newCost.refinedMetal;
		var _this4 = this.materialDisplayedRed;
		if((__map_reserved["refinedMetal"] != null ? _this4.getReserved("refinedMetal") : _this4.h["refinedMetal"]) != tooLittleOfMaterial4) {
			return true;
		}
		if(newCost.computerChips != this.cost.computerChips) {
			return true;
		}
		var tooLittleOfMaterial5 = this.city != null && this.city.materials.computerChips < newCost.computerChips;
		var _this5 = this.materialDisplayedRed;
		if((__map_reserved["computerChips"] != null ? _this5.getReserved("computerChips") : _this5.h["computerChips"]) != tooLittleOfMaterial5) {
			return true;
		}
		if(newCost.cacao != this.cost.cacao) {
			return true;
		}
		var tooLittleOfMaterial6 = this.city != null && this.city.materials.cacao < newCost.cacao;
		var _this6 = this.materialDisplayedRed;
		if((__map_reserved["cacao"] != null ? _this6.getReserved("cacao") : _this6.h["cacao"]) != tooLittleOfMaterial6) {
			return true;
		}
		if(newCost.chocolate != this.cost.chocolate) {
			return true;
		}
		var tooLittleOfMaterial7 = this.city != null && this.city.materials.chocolate < newCost.chocolate;
		var _this7 = this.materialDisplayedRed;
		if((__map_reserved["chocolate"] != null ? _this7.getReserved("chocolate") : _this7.h["chocolate"]) != tooLittleOfMaterial7) {
			return true;
		}
		if(newCost.knowledge != this.cost.knowledge) {
			return true;
		}
		var tooLittleOfMaterial8 = this.city != null && this.city.materials.knowledge < newCost.knowledge;
		var _this8 = this.materialDisplayedRed;
		if((__map_reserved["knowledge"] != null ? _this8.getReserved("knowledge") : _this8.h["knowledge"]) != tooLittleOfMaterial8) {
			return true;
		}
		if(newCost.magic != this.cost.magic) {
			return true;
		}
		var tooLittleOfMaterial9 = this.city != null && this.city.materials.magic < newCost.magic;
		var _this3 = this.materialDisplayedRed;
		if((__map_reserved["magic"] != null ? _this3.getReserved("magic") : _this3.h["magic"]) != tooLittleOfMaterial3) {
			return true;
		}
		return false;
	}
	,__class__: gui_MaterialsCostDisplay
});
var gui_MaterialsDisplay = function(materials) {
	PIXI.Container.call(this);
	this.materials = materials;
	this.updateMaterialsDisplay();
};
$hxClasses["gui.MaterialsDisplay"] = gui_MaterialsDisplay;
gui_MaterialsDisplay.__name__ = ["gui","MaterialsDisplay"];
gui_MaterialsDisplay.__super__ = PIXI.Container;
gui_MaterialsDisplay.prototype = $extend(PIXI.Container.prototype,{
	setMaterials: function(materials) {
		this.materials = materials;
		this.updateMaterialsDisplay();
	}
	,updateMaterialsDisplay: function() {
		var _gthis = this;
		var i = this.children.length;
		while(--i >= 0) this.children.splice(i,1);
		var xx = 0;
		if(this.materials.food > 0) {
			xx -= 2;
			var spr = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "food".toLowerCase()));
			spr.position.x = xx;
			this.addChild(spr);
			xx += (spr.width | 0) + 1;
			xx -= 2;
			var bitmapText = new PIXI.extras.BitmapText("" + this.materials.food,{ font : "Arial", tint : 0});
			bitmapText.position.set(xx,-1);
			this.addChild(bitmapText);
			xx += (bitmapText.textWidth | 0) + 3;
		}
		if(this.materials.wood > 0) {
			var spr1 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "wood".toLowerCase()));
			spr1.position.x = xx;
			this.addChild(spr1);
			xx += (spr1.width | 0) + 1;
			var bitmapText1 = new PIXI.extras.BitmapText("" + this.materials.wood,{ font : "Arial", tint : 0});
			bitmapText1.position.set(xx,-1);
			this.addChild(bitmapText1);
			xx += (bitmapText1.textWidth | 0) + 3;
		}
		if(this.materials.stone > 0) {
			var spr2 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "stone".toLowerCase()));
			spr2.position.x = xx;
			this.addChild(spr2);
			xx += (spr2.width | 0) + 1;
			var bitmapText2 = new PIXI.extras.BitmapText("" + this.materials.stone,{ font : "Arial", tint : 0});
			bitmapText2.position.set(xx,-1);
			this.addChild(bitmapText2);
			xx += (bitmapText2.textWidth | 0) + 3;
		}
		if(this.materials.machineParts > 0) {
			var spr3 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "machineParts".toLowerCase()));
			spr3.position.x = xx;
			this.addChild(spr3);
			xx += (spr3.width | 0) + 1;
			var bitmapText3 = new PIXI.extras.BitmapText("" + this.materials.machineParts,{ font : "Arial", tint : 0});
			bitmapText3.position.set(xx,-1);
			this.addChild(bitmapText3);
			xx += (bitmapText3.textWidth | 0) + 3;
		}
		if(this.materials.refinedMetal > 0) {
			var spr4 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "refinedMetal".toLowerCase()));
			spr4.position.x = xx;
			this.addChild(spr4);
			xx += (spr4.width | 0) + 1;
			var bitmapText4 = new PIXI.extras.BitmapText("" + this.materials.refinedMetal,{ font : "Arial", tint : 0});
			bitmapText4.position.set(xx,-1);
			this.addChild(bitmapText4);
			xx += (bitmapText4.textWidth | 0) + 3;
		}
		if(this.materials.computerChips > 0) {
			var spr5 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "computerChips".toLowerCase()));
			spr5.position.x = xx;
			this.addChild(spr5);
			xx += (spr5.width | 0) + 1;
			var bitmapText5 = new PIXI.extras.BitmapText("" + this.materials.computerChips,{ font : "Arial", tint : 0});
			bitmapText5.position.set(xx,-1);
			this.addChild(bitmapText5);
			xx += (bitmapText5.textWidth | 0) + 3;
		}
		if(this.materials.cacao > 0) {
			var spr6 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "cacao".toLowerCase()));
			spr6.position.x = xx;
			this.addChild(spr6);
			xx += (spr6.width | 0) + 1;
			var bitmapText6 = new PIXI.extras.BitmapText("" + this.materials.cacao,{ font : "Arial", tint : 0});
			bitmapText6.position.set(xx,-1);
			this.addChild(bitmapText6);
			xx += (bitmapText6.textWidth | 0) + 3;
		}
		if(this.materials.chocolate > 0) {
			var spr7 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "chocolate".toLowerCase()));
			spr7.position.x = xx;
			this.addChild(spr7);
			xx += (spr7.width | 0) + 1;
			var bitmapText7 = new PIXI.extras.BitmapText("" + this.materials.chocolate,{ font : "Arial", tint : 0});
			bitmapText7.position.set(xx,-1);
			this.addChild(bitmapText7);
			xx += (bitmapText7.textWidth | 0) + 3;
		}
		if(this.materials.knowledge > 0) {
			var spr8 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "knowledge".toLowerCase()));
			spr8.position.x = xx;
			this.addChild(spr8);
			xx += (spr8.width | 0) + 1;
			var bitmapText8 = new PIXI.extras.BitmapText("" + this.materials.knowledge,{ font : "Arial", tint : 0});
			bitmapText8.position.set(xx,-1);
			this.addChild(bitmapText8);
			xx += (bitmapText8.textWidth | 0) + 3;
		}
		if(this.materials.magic > 0) {
			var spr20 = new PIXI.Sprite(Resources.getTexture("spr_resource_" + "machineParts".toLowerCase()));
			spr20.position.x = xx;
			this.addChild(spr20);
			xx += (spr20.width | 0) + 1;
			var bitmapText20 = new PIXI.extras.BitmapText("" + this.materials.magic,{ font : "Arial", tint : 0});
			bitmapText20.position.set(xx,-1);
			this.addChild(bitmapText20);
			xx += (bitmapText20.textWidth | 0) + 3;
		}
		var addExtraIcon = function(textureName,amount) {
			var spr9 = new PIXI.Sprite(Resources.getTexture(textureName));
			spr9.position.x = xx;
			_gthis.addChild(spr9);
			xx += (spr9.width | 0) + 1;
			var bitmapText9 = new PIXI.extras.BitmapText("" + amount,{ font : "Arial", tint : 0});
			bitmapText9.position.set(xx,-1);
			_gthis.addChild(bitmapText9);
			xx += (bitmapText9.textWidth | 0) + 3;
		};
		this.displayWidth = xx;
	}
	,__class__: gui_MaterialsDisplay
});
var gui_MoreSettingsWindow = function() { };
$hxClasses["gui.MoreSettingsWindow"] = gui_MoreSettingsWindow;
gui_MoreSettingsWindow.__name__ = ["gui","MoreSettingsWindow"];
gui_MoreSettingsWindow.create = function(city,gui1,stage,thisWindow,imageButtonToUse,imageOffsetToUse) {
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Advanced Settings",null,"Arial16"));
	if(city.progress.story.canHaveUnlimitedResources() && (Config.allowUnlimitedResources || city.progress.sandbox.unlimitedResources)) {
		var doConfirmUnlimited = null;
		doConfirmUnlimited = function() {
			gui1.createWindow("confirmUnlimited");
			gui1.addWindowToStack(doConfirmUnlimited);
			gui1.windowAddTitleText(!city.progress.sandbox.unlimitedResources ? "Enable Unlimited Resources" : "Disable Unlimited Resources");
			gui1.windowAddInfoText(!city.progress.sandbox.unlimitedResources ? "Do you want to play with unlimited resources for this save file?" : "Do you want to play with normal resource contraints? You can always re-enable unlimited resources later.");
			gui1.windowAddBottomButtons([{ text : "Yes", action : function() {
				if(city.progress.sandbox.unlimitedResources) {
					city.progress.sandbox.disableUnlimitedResources();
				} else {
					city.progress.sandbox.enableUnlimitedResources();
				}
				gui1.goPreviousWindow();
			}}]);
		};
		var doConfirmUnlimited1 = doConfirmUnlimited;
		var unlimitedButton = new gui_TextButton(gui1,stage,gui1.windowInner,doConfirmUnlimited,"Unlimited");
		thisWindow.addChild(unlimitedButton);
		if(!city.game.isMobile) {
			unlimitedButton.extraWidth = 18;
		}
		unlimitedButton.setText(!city.progress.sandbox.unlimitedResources ? "Enable Unlimited Resources" : "Disable Unlimited Resources");
		thisWindow.addChild(new gui_GUISpacing(thisWindow,new common_Point(2,4)));
	}
	if(!city.game.isMobile) {
		var threadLimitController = new gui_GUIContainer(gui1,stage,thisWindow);
		threadLimitController.direction = gui_GUIContainerDirection.Vertical;
		var threadLimitController2 = new gui_GUIContainer(gui1,stage,thisWindow);
		threadLimitController2.direction = gui_GUIContainerDirection.Horizontal;
		threadLimitController2.padding.bottom = 6;
		var threadLimitText = new gui_TextElement(threadLimitController,stage,"Pathfinding Thread Limit: ");
		threadLimitText.handleMouseFunction = function(mouse) {
			if(threadLimitText.rect.contains(mouse.position)) {
				gui1.tooltip.setText(null,"Pathfinding threads are used to compute movement paths for citizens. If all pathfinding threads are busy, citizens may stand still and wait until one is available. " + "Increasing this will improve the simulation in large cities. The recommended value is the number of physical cores of your processor minus one. " + "Higher values may have a negative impact on the frame rate. " + "\nIf you don't know what this all means, I completely understand! Just keep this at the default.");
				return true;
			}
			return false;
		};
		threadLimitText.padding.top = 1;
		threadLimitController2.addChild(threadLimitText);
		threadLimitController2.addChild(new gui_GUISpacing(threadLimitController2,new common_Point(4,2)));
		var numberSelectControl = new gui_NumberSelectControl(gui1,stage,threadLimitController2,{ left : 0, right : 0, top : 0, bottom : 0},function() {
			return 1;
		},function() {
			return 15;
		},Settings.pathfindingWorkers,function(v) {
			Settings.pathfindingWorkers = v;
			city.simulation.pathfinder.setWorkerNumber(v,true);
			Settings.save();
		},function() {
			return Settings.resetPathfindingWorkers();
		},"Click to reset the pathfinding thread limit to the default.");
		threadLimitController2.addChild(numberSelectControl);
		threadLimitController.addChild(threadLimitController2);
		thisWindow.addChild(threadLimitController);
	}
	thisWindow.addChild(new gui_TextElement(thisWindow,gui1.innerWindowStage,"Have or want a Secret Code?"));
	var secretButtonDiv = new gui_GUIContainer(gui1,gui1.innerWindowStage,gui1.windowInner);
	var doCreateSecretInputWindow = null;
	doCreateSecretInputWindow = function() {
		gui1.createWindow("secretWindow");
		gui1.addWindowToStack(doCreateSecretInputWindow);
		gui_SecretCodeWindow.create(city,gui1,gui1.innerWindowStage,gui1.windowInner);
	};
	var doCreateSecretInputWindow1 = doCreateSecretInputWindow;
	var secretButton = new gui_TextButton(gui1,stage,gui1.windowInner,doCreateSecretInputWindow,"Input Secret Code");
	secretButton.extraHeight += 3;
	secretButton.extraTextPosY += 1;
	secretButton.setText("Input Secret Code");
	secretButtonDiv.addChild(secretButton);
	secretButtonDiv.addChild(new gui_GUISpacing(secretButtonDiv,new common_Point(2,4)));
	var thisButtonImage = Resources.getTexture("spr_mailinglist");
	var imgButton = new gui_ImageButton(gui1,stage,secretButtonDiv,function() {
	},thisButtonImage,function() {
		return false;
	},function() {
		gui1.tooltip.setText(imgButton,"I'll send you cool The Final Earth 2 news and facts, plus info on my future releases!\n\nPlus, as a small gesture of thanks, you'll get a secret code to unlock some nice cosmetic options right away!","Subscribe to my mailing list!");
		city.game.setOnClickTo = function() {
			window.open(Config.mailingListURL,"_blank");
		};
	},null,imageButtonToUse,imageOffsetToUse);
	imgButton.imageSprite.tint = 0;
	secretButtonDiv.addChild(imgButton);
	thisWindow.addChild(secretButtonDiv);
	thisWindow.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,4)));
	gui1.windowAddBottomButtons();
};
var gui_MultiFollowWindow = function() { };
$hxClasses["gui.MultiFollowWindow"] = gui_MultiFollowWindow;
gui_MultiFollowWindow.__name__ = ["gui","MultiFollowWindow"];
gui_MultiFollowWindow.createWindow = function(city,citizens,topText,relatedBuilding,nothingFoundText) {
	city.gui.createWindow(citizens);
	city.gui.setWindowPositioning(city.game.isMobile ? gui_WindowPosition.TopLeft : gui_WindowPosition.Top);
	var a1 = city;
	var a2 = citizens;
	var a3 = topText;
	var a4 = relatedBuilding;
	var a5 = nothingFoundText;
	var tmp = function() {
		gui_MultiFollowWindow.createWindow(a1,a2,a3,a4,a5);
		return;
	};
	city.gui.setWindowReload(tmp);
	var a11 = city;
	var a21 = citizens;
	var a31 = topText;
	var a41 = relatedBuilding;
	var a51 = nothingFoundText;
	var tmp1 = function() {
		gui_MultiFollowWindow.createWindow(a11,a21,a31,a41,a51);
	};
	city.gui.addWindowToStack(tmp1);
	var windowTitle = topText;
	city.gui.windowInner.addChild(new gui_TextElement(city.gui.windowInner,city.gui.innerWindowStage,windowTitle,null,"Arial16"));
	var allCitizensElem = new gui_GUIContainer(city.gui,city.gui.innerWindowStage,city.gui.windowInner);
	allCitizensElem.direction = gui_GUIContainerDirection.Vertical;
	var allCitizensSubElems = [];
	city.gui.windowInner.addChild(allCitizensElem);
	city.gui.windowAddBottomButtons();
	var selectedTexture = Resources.getTexture("spr_selectedhuman");
	var selectedSpritePool = [];
	var selectedBuildingSprite = null;
	if(relatedBuilding != null) {
		selectedBuildingSprite = Resources.makeSprite("spr_selectedbuilding");
		selectedBuildingSprite.alpha = 0.5;
		selectedBuildingSprite.position.set(relatedBuilding.position.x - 1,relatedBuilding.position.y - 1);
		city.farForegroundStage.addChild(selectedBuildingSprite);
	}
	city.gui.windowOnLateUpdate = function() {
		if(relatedBuilding != null) {
			if(relatedBuilding.destroyed) {
				city.gui.clearWindowStack();
				city.gui.closeWindow();
				return;
			}
			selectedBuildingSprite.position.set(relatedBuilding.position.x - 1,relatedBuilding.position.y - 1);
		}
		if(citizens.length == 0) {
			if(allCitizensSubElems.length > 0) {
				var _g = 0;
				while(_g < allCitizensSubElems.length) {
					var elem = allCitizensSubElems[_g];
					++_g;
					elem.elem.destroy();
				}
				allCitizensSubElems = [];
				allCitizensElem.clear();
			}
			if(allCitizensElem.children.length == 0) {
				allCitizensElem.addChild(new gui_TextElement(allCitizensElem,city.gui.innerWindowStage,nothingFoundText));
			}
		} else {
			if(allCitizensSubElems.length == 0) {
				allCitizensElem.clear();
			}
			var _g1 = 0;
			while(_g1 < citizens.length) {
				var citizen = [citizens[_g1]];
				++_g1;
				var thisCitizenElement = (function(citizen1) {
					return function(elem1) {
						return elem1.citizen == citizen1[0];
					};
				})(citizen);
				var thisCitizenElement1 = Lambda.find(allCitizensSubElems,thisCitizenElement);
				if(thisCitizenElement1 == null) {
					var city1 = city.gui;
					var city2 = city.gui.innerWindowStage;
					var newButton = (function(citizen2) {
						return function() {
							gui_FollowingCitizen.createWindow(city,citizen2[0],false);
						};
					})(citizen);
					var newButton1 = new gui_ContainerButton(city1,city2,allCitizensElem,newButton);
					newButton1.container.padding.top = 3;
					newButton1.container.padding.left = 3;
					newButton1.container.padding.right = 3;
					newButton1.container.padding.bottom = 0;
					newButton1.container.fillSecondarySize = true;
					newButton1.container.addChildWithoutSizeUpdate(new gui_TextElement(newButton1.container,city.gui.innerWindowStage,citizen[0].nameIndex < Resources.citizenNames.length ? Resources.citizenNames[citizen[0].nameIndex] : "Citizen"));
					newButton1.container.updateSizeNonRecursive();
					var nbcp = newButton1.container.parent.parent;
					newButton1.container.parent.parent = null;
					newButton1.container.parent.updateSize();
					newButton1.container.parent.parent = nbcp;
					newButton1.container.updateChildrenPosition();
					allCitizensElem.addChildWithoutSizeUpdate(newButton1);
					var spacingElem = new gui_GUISpacing(allCitizensElem,new common_Point(2,4));
					allCitizensElem.addChildWithoutSizeUpdate(spacingElem);
					allCitizensSubElems.push({ elem : newButton1, elem2 : spacingElem, citizen : citizen[0]});
				}
			}
			allCitizensElem.updateSize();
			var i = allCitizensSubElems.length - 1;
			while(i >= 0) {
				var elem2 = allCitizensSubElems[i];
				if(!common_ArrayExtensions.contains(citizens,elem2.citizen)) {
					allCitizensElem.removeChild(elem2.elem);
					allCitizensElem.removeChild(elem2.elem2);
					allCitizensSubElems.splice(i,1);
				}
				--i;
			}
		}
		if(selectedSpritePool.length > citizens.length) {
			var _g11 = citizens.length;
			var _g2 = selectedSpritePool.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				selectedSpritePool[i1].destroy();
			}
			selectedSpritePool.splice(citizens.length,selectedSpritePool.length - citizens.length);
		}
		var _g12 = 0;
		var _g3 = citizens.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			if(i2 >= selectedSpritePool.length) {
				var spr = new PIXI.Sprite(selectedTexture);
				selectedSpritePool.push(spr);
				city.furtherForegroundStage.addChild(spr);
			}
			var citizen3 = citizens[i2];
			var citizenPos = citizen3.getCityPosition();
			selectedSpritePool[i2].position.set(citizenPos.x - 1,citizenPos.y - 6);
		}
	};
	city.gui.windowOnDestroy = function() {
		var _g4 = 0;
		while(_g4 < selectedSpritePool.length) {
			var spr1 = selectedSpritePool[_g4];
			++_g4;
			spr1.destroy();
		}
		if(selectedBuildingSprite != null) {
			selectedBuildingSprite.destroy();
		}
	};
};
var gui_NinePatch = function(texture,sidePixels,width,height) {
	this.currentTextureSet = 0;
	this.npWidth = width;
	this.npHeight = height;
	PIXI.Container.call(this);
	this.textureSets = [];
	this.texture = texture;
	this.sidePixels = sidePixels;
	this.updateTextures();
	this.updateSprites();
};
$hxClasses["gui.NinePatch"] = gui_NinePatch;
gui_NinePatch.__name__ = ["gui","NinePatch"];
gui_NinePatch.__super__ = PIXI.Container;
gui_NinePatch.prototype = $extend(PIXI.Container.prototype,{
	setTextureSet: function(setNumber) {
		var newTextureSet = this.textureSets[setNumber];
		this.currentTextureSet = setNumber;
		if(newTextureSet != this.textureParts) {
			this.textureParts = newTextureSet;
			this.updateSprites();
		}
	}
	,updateTextures: function(destroyOld) {
		if(destroyOld == null) {
			destroyOld = true;
		}
		if(this.textureParts == null) {
			this.textureParts = [];
		} else if(destroyOld) {
			this.textureSets.pop();
		} else {
			this.textureParts = [];
		}
		if(gui_NinePatch.ninePatchTextureCache.h.__keys__[this.texture.__id__] != null && gui_NinePatch.ninePatchTextureCache.h[this.texture.__id__].h.hasOwnProperty(this.sidePixels)) {
			this.textureParts = gui_NinePatch.ninePatchTextureCache.h[this.texture.__id__].h[this.sidePixels];
		} else {
			var _g = 0;
			while(_g < 9) {
				var i = _g++;
				this.textureParts[i] = this.texture.clone();
				var frame = new PIXI.Rectangle();
				if(i % 3 == 1) {
					frame.width = this.texture.width - 2 * this.sidePixels;
					frame.x = this.sidePixels;
				} else {
					frame.width = this.sidePixels;
					if(i % 3 == 2) {
						frame.x = this.texture.width - this.sidePixels;
					}
				}
				if(i >= 3 && i <= 5) {
					frame.height = this.texture.height - 2 * this.sidePixels;
					frame.y = this.sidePixels;
				} else {
					frame.height = this.sidePixels;
					if(i > 5) {
						frame.y = this.texture.height - this.sidePixels;
					}
				}
				this.textureParts[i].frame = new PIXI.Rectangle(this.textureParts[i].frame.x + frame.x,this.textureParts[i].frame.y + frame.y,frame.width,frame.height);
				this.textureParts[i].update();
			}
			if(gui_NinePatch.ninePatchTextureCache.h.__keys__[this.texture.__id__] == null) {
				var this1 = gui_NinePatch.ninePatchTextureCache;
				var k = this.texture;
				var v = new haxe_ds_IntMap();
				this1.set(k,v);
			}
			var v1 = this.textureParts;
			gui_NinePatch.ninePatchTextureCache.h[this.texture.__id__].h[this.sidePixels] = v1;
		}
		this.textureSets.push(this.textureParts);
	}
	,updateSprites: function(refresh) {
		if(refresh == null) {
			refresh = false;
		}
		if(this.npWidth == 0 || this.npHeight == 0) {
			this.visible = false;
			return;
		}
		this.visible = true;
		if(refresh) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.destroy();
			}
			this.children = [];
		}
		var _g2 = 0;
		while(_g2 < 9) {
			var i = _g2++;
			var thisSprite = null;
			if(this.children.length <= i) {
				thisSprite = new PIXI.Sprite(this.textureParts[i]);
				this.addChild(thisSprite);
			} else {
				thisSprite = this.children[i];
				thisSprite.texture = this.textureParts[i];
			}
			var _g11 = i % 3;
			var tmp;
			switch(_g11) {
			case 1:
				tmp = this.sidePixels;
				break;
			case 2:
				tmp = this.npWidth - this.sidePixels;
				break;
			default:
				tmp = 0;
			}
			thisSprite.position.x = tmp;
			if(i % 3 == 1) {
				thisSprite.width = this.npWidth - this.sidePixels * 2;
			}
			var _g21 = i / 3 | 0;
			var tmp1;
			switch(_g21) {
			case 1:
				tmp1 = this.sidePixels;
				break;
			case 2:
				tmp1 = this.npHeight - this.sidePixels;
				break;
			default:
				tmp1 = 0;
			}
			thisSprite.position.y = tmp1;
			if((i / 3 | 0) == 1) {
				if(this.npHeight - this.sidePixels * 2 < 0) {
					thisSprite.height = 0;
				} else {
					thisSprite.height = this.npHeight - this.sidePixels * 2;
				}
			}
		}
	}
	,__class__: gui_NinePatch
});
var gui_NumberSelectControl = function(gui1,stage,parent,padding,getMinValue,getMaxValue,initialValue,setValue,setToOnClick,onClickHelp,stepSize) {
	if(stepSize == null) {
		stepSize = 1;
	}
	if(onClickHelp == null) {
		onClickHelp = "";
	}
	if(initialValue == null) {
		initialValue = 0;
	}
	this.number = 0;
	var _gthis = this;
	gui_GUIContainer.call(this,gui1,stage,parent,null,null,null,null,padding);
	this.getMinValue = getMinValue;
	this.getMaxValue = getMaxValue;
	this.number = initialValue;
	this.setValue = setValue;
	this.setToOnClick = setToOnClick;
	this.numberButton = new gui_ContainerButton(gui1,stage,this,function() {
		var originalNumber = _gthis.number;
		_gthis.number = setToOnClick();
		if(_gthis.number != originalNumber) {
			setValue(_gthis.number);
		}
	},null,function() {
		gui1.tooltip.setText(_gthis,onClickHelp);
	});
	var extraSpacing = gui1.game.isMobile ? 2 : 0;
	var extraSpacingLR = gui1.game.isMobile ? 4 : 0;
	this.numberButton.container.padding = { left : 3 + extraSpacingLR, right : 3 + extraSpacingLR, top : 3 + extraSpacing, bottom : -1 + extraSpacing};
	this.numberButton.container.minHeight = 12;
	this.numberButton.container.minWidth = 20;
	this.numberButton.container.addChild(new gui_TextElement(this.numberButton.container,stage,null,function() {
		if(_gthis.number == _gthis.beyondHighestValue) {
			return _gthis.beyondHighestText;
		} else {
			return "" + _gthis.number;
		}
	}));
	this.addChild(this.numberButton);
	this.numberButton.buttonPatch.updateSprites(true);
	var upDownButtons = new gui_GUIContainer(gui1,stage,this);
	upDownButtons.direction = gui1.game.isMobile ? gui_GUIContainerDirection.Horizontal : gui_GUIContainerDirection.Vertical;
	var tmp = Resources.getTexture(gui1.game.isMobile ? "spr_arrowup_big" : "spr_arrowup");
	this.upButton = new gui_ImageButton(gui1,stage,this,function() {
		if(!(_gthis.beyondHighestValue != null && _gthis.number == _gthis.beyondHighestValue)) {
			if(getMaxValue == null || _gthis.number + stepSize <= getMaxValue()) {
				_gthis.number += stepSize;
				if(setValue != null) {
					setValue(_gthis.number);
				}
			} else if(_gthis.beyondHighestValue != null && _gthis.number != _gthis.beyondHighestValue) {
				_gthis.number = _gthis.beyondHighestValue;
				if(setValue != null) {
					setValue(_gthis.number);
				}
			}
		}
	},tmp,null,null,null,gui1.game.isMobile ? "spr_button_small" : "spr_minibutton");
	this.upButton.canBeHeld = true;
	upDownButtons.addChild(this.upButton);
	var tmp1 = Resources.getTexture(gui1.game.isMobile ? "spr_arrowdown_big" : "spr_arrowdown");
	this.downButton = new gui_ImageButton(gui1,stage,this,function() {
		if(_gthis.beyondHighestValue != null && _gthis.number == _gthis.beyondHighestValue) {
			if(getMaxValue != null) {
				_gthis.number = getMaxValue();
			}
			if(setValue != null) {
				setValue(_gthis.number);
			}
		} else if(getMinValue == null || _gthis.number - stepSize >= getMinValue()) {
			_gthis.number -= stepSize;
			if(setValue != null) {
				setValue(_gthis.number);
			}
		}
	},tmp1,null,null,null,gui1.game.isMobile ? "spr_button_small" : "spr_minibutton");
	this.downButton.canBeHeld = true;
	upDownButtons.addChild(this.downButton);
	this.addChild(upDownButtons);
};
$hxClasses["gui.NumberSelectControl"] = gui_NumberSelectControl;
gui_NumberSelectControl.__name__ = ["gui","NumberSelectControl"];
gui_NumberSelectControl.__super__ = gui_GUIContainer;
gui_NumberSelectControl.prototype = $extend(gui_GUIContainer.prototype,{
	enableBeyondHighestValuePossibility: function(valueUsed,textShown) {
		this.beyondHighestValue = valueUsed;
		this.beyondHighestText = textShown;
	}
	,update: function() {
		gui_GUIContainer.prototype.update.call(this);
		if(this.number != this.beyondHighestValue) {
			var originalNumber = this.number;
			if(this.getMinValue != null) {
				var val1 = this.getMinValue();
				var val2 = this.number;
				this.number = val2 > val1 ? val2 : val1;
			}
			if(this.getMaxValue != null) {
				var val11 = this.getMaxValue();
				var val21 = this.number;
				this.number = val21 < val11 ? val21 : val11;
			}
			if(this.number != originalNumber) {
				this.setValue(this.number);
			}
		}
	}
	,__class__: gui_NumberSelectControl
});
var gui_PopulationInfoWindow = function() { };
$hxClasses["gui.PopulationInfoWindow"] = gui_PopulationInfoWindow;
gui_PopulationInfoWindow.__name__ = ["gui","PopulationInfoWindow"];
gui_PopulationInfoWindow.create = function(city,gui1,stage,window) {
	gui_PopulationInfoWindow.createWindow(city,gui1,stage,window);
};
gui_PopulationInfoWindow.createWindow = function(city,gui1,stage,window) {
	window.clear();
	window.addChild(new gui_TextElement(window,stage,"Population by Age",null,"Arial16"));
	var childrenTotal = 0;
	gui1.windowAddInfoText(null,function() {
		return "There are " + city.simulation.citizens.length + " citizens, of whom " + childrenTotal + " children.";
	});
	gui1.windowAddInfoText(null,function() {
		return "The amount of citizens of each age is shown below.";
	});
	var ageExceedingCitizensExist = false;
	var oldestAge = 0;
	var graphicsContainer = new PIXI.Container();
	var graphics = new PIXI.Graphics();
	var citizensPerAge;
	var graphStartX = 40;
	var graphMaxWidth = 210;
	var maxAge = 120;
	var ageRangeSize = 10;
	var drawAgeGraphicsAndStats = function() {
		ageExceedingCitizensExist = false;
		oldestAge = 0;
		graphics.clear();
		graphics.beginFill(0);
		graphics.drawRect(0,0,1,maxAge);
		graphics.drawRect(graphStartX - 1,0,1,maxAge);
		graphics.drawRect(0,maxAge,graphStartX,1);
		var _g = [];
		var _g2 = 0;
		var _g1 = maxAge + 1;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(0);
		}
		citizensPerAge = _g;
		childrenTotal = 0;
		var _g11 = 0;
		var _g21 = city.simulation.citizens;
		while(_g11 < _g21.length) {
			var citizen = _g21[_g11];
			++_g11;
			var age = citizen.get_age() | 0;
			if(age > maxAge) {
				citizensPerAge[maxAge]++;
				ageExceedingCitizensExist = true;
			} else {
				citizensPerAge[age]++;
			}
			if(age < 16) {
				childrenTotal += 1;
			}
			if(age > oldestAge) {
				oldestAge = age;
			}
		}
		var maxCitizens = common_ArrayExtensions.max(citizensPerAge);
		if(maxCitizens != 0) {
			var _g22 = 0;
			var _g12 = maxAge + 1;
			while(_g22 < _g12) {
				var age1 = _g22++;
				var scale = citizensPerAge[age1] / maxCitizens;
				graphics.drawRect(graphStartX,age1,scale * graphMaxWidth,1);
				graphics.drawRect(graphStartX,age1,scale * graphMaxWidth,1);
				if(age1 % ageRangeSize == 0) {
					graphics.drawRect(0,age1,graphStartX,1);
				}
			}
		}
		graphics.endFill();
	};
	drawAgeGraphicsAndStats();
	graphicsContainer.addChild(graphics);
	var holder = new gui_ContainerHolder(window,stage,graphicsContainer,{ left : 0, right : 0, top : 0, bottom : 3},drawAgeGraphicsAndStats,function(mouse) {
		var holder1;
		var val = mouse.get_x();
		if(val >= holder.rect.x && val < holder.rect.x + holder.rect.width) {
			var val1 = mouse.get_y();
			if(val1 >= holder.rect.y) {
				holder1 = val1 < holder.rect.y + holder.rect.height;
			} else {
				holder1 = false;
			}
		} else {
			holder1 = false;
		}
		if(holder1) {
			if(mouse.get_x() >= holder.rect.x + graphStartX) {
				var selectedAge = mouse.get_y() - holder.rect.y;
				if(selectedAge < maxAge || selectedAge == maxAge && !ageExceedingCitizensExist) {
					gui1.tooltip.setText(holder,(citizensPerAge[selectedAge] == 1 ? "One citizen is" : "" + citizensPerAge[selectedAge] + " citizens are") + (" " + selectedAge + " years old."));
				} else if(selectedAge == maxAge) {
					gui1.tooltip.setText(holder,(citizensPerAge[selectedAge] == 1 ? "One citizen is" : "" + citizensPerAge[selectedAge] + " citizens are") + (" " + selectedAge + " or older. The oldest is " + oldestAge + "."));
				}
			} else {
				var selectedAgeRange = ((mouse.get_y() - holder.rect.y) / ageRangeSize | 0) * ageRangeSize;
				if(selectedAgeRange < maxAge) {
					var numberOfCitizensInRange = 0;
					var isLastAgeRange = selectedAgeRange == maxAge - ageRangeSize;
					var _g13 = selectedAgeRange;
					var _g3 = selectedAgeRange + ageRangeSize + (isLastAgeRange ? 1 : 0);
					while(_g13 < _g3) {
						var i1 = _g13++;
						numberOfCitizensInRange += citizensPerAge[i1];
					}
					if(isLastAgeRange && ageExceedingCitizensExist) {
						gui1.tooltip.setText(holder,(numberOfCitizensInRange == 1 ? "One citizen is" : "" + numberOfCitizensInRange + " citizens are") + (" " + selectedAgeRange + " or older."));
					} else {
						gui1.tooltip.setText(holder,(numberOfCitizensInRange == 1 ? "One citizen is" : "" + numberOfCitizensInRange + " citizens are") + (" between " + selectedAgeRange + " and " + (selectedAgeRange + ageRangeSize) + " years old."));
					}
				}
			}
			return true;
		}
		return false;
	});
	window.addChild(holder);
	var _g14 = 0;
	var _g4 = maxAge / ageRangeSize | 0;
	while(_g14 < _g4) {
		var i2 = _g14++;
		var bitmapText = new PIXI.extras.BitmapText("" + i2 * 10 + "-" + (i2 * 10 + 10),{ font : "Arial10", tint : 0});
		if(i2 == (maxAge / ageRangeSize | 0) - 1 && ageExceedingCitizensExist) {
			bitmapText.text = "" + i2 * 10 + "+";
		}
		bitmapText.position.set(2,i2 * 10);
		graphicsContainer.addChild(bitmapText);
	}
	window.onDestroy = function() {
		graphics.destroy();
	};
	var popLimitController = new gui_GUIContainer(gui1,stage,window);
	popLimitController.direction = gui_GUIContainerDirection.Vertical;
	var hasCreatedPopLimitController = false;
	popLimitController.onUpdate = function() {
		if(!hasCreatedPopLimitController && city.simulation.citizens.length >= 1950) {
			var popLimitController2 = new gui_GUIContainer(gui1,stage,window);
			popLimitController2.direction = gui_GUIContainerDirection.Horizontal;
			hasCreatedPopLimitController = true;
			popLimitController2.padding.bottom = 6;
			var popLimitText = new gui_TextElement(popLimitController,stage,"Population Limit: ");
			popLimitText.padding.top = 1;
			popLimitController2.addChild(popLimitText);
			popLimitController2.addChild(new gui_GUISpacing(popLimitController2,new common_Point(4,2)));
			var city1 = city.simulation.babyMaker.softPopLimit;
			var numberSelectControl = city.game.textHelper.clickOrTap() + " to reset the population limit to the default.";
			var numberSelectControl1 = new gui_NumberSelectControl(gui1,stage,popLimitController2,{ left : 0, right : 0, top : 0, bottom : 0},function() {
				return 2000;
			},function() {
				return 10000;
			},city1,function(v) {
				city.simulation.babyMaker.softPopLimit = v;
			},function() {
				return 2000;
			},numberSelectControl,25);
			popLimitController2.addChild(numberSelectControl1);
			popLimitController.addChild(popLimitController2);
			popLimitController.addChild(new gui_TextElement(popLimitController,stage,"Your population will no longer grow once you reach this limit. Please note that increasing this may result in a low frame rate and/or severe lag!"));
		}
	};
	window.addChild(popLimitController);
	gui1.windowAddBottomButtons([{ text : "Follow Citizen", action : function() {
		city.viewActions.showFollow();
	}}]);
};
var gui_SaveLoadWindows = function() { };
$hxClasses["gui.SaveLoadWindows"] = gui_SaveLoadWindows;
gui_SaveLoadWindows.__name__ = ["gui","SaveLoadWindows"];
gui_SaveLoadWindows.createSaveWindow = function(game,gui1,text,windowOnDone,windowOnDestroy) {
	gui1.createWindow();
	var a1 = game;
	var a2 = gui1;
	var a3 = text;
	var a4 = windowOnDone;
	var a5 = windowOnDestroy;
	var tmp = function() {
		gui_SaveLoadWindows.createSaveWindow(a1,a2,a3,a4,a5);
		return;
	};
	gui1.addWindowToStack(tmp);
	gui1.windowAddTitleText("Choose Save Slot");
	gui1.windowAddInfoText(text);
	gui_SaveLoadWindows.addSaveSlotButtons(game,gui1,function(res) {
		windowOnDone(res);
		gui1.windowOnDestroy = null;
		gui1.closeWindow();
	},false,true);
	gui1.windowAddBottomButtons();
	gui1.windowOnDestroy = windowOnDestroy;
};
gui_SaveLoadWindows.createLoadWindow = function(game,gui1,text,windowOnDone,windowOnDestroy) {
	gui1.createWindow();
	var a1 = game;
	var a2 = gui1;
	var a3 = text;
	var a4 = windowOnDone;
	var a5 = windowOnDestroy;
	var tmp = function() {
		gui_SaveLoadWindows.createLoadWindow(a1,a2,a3,a4,a5);
		return;
	};
	gui1.addWindowToStack(tmp);
	gui1.windowAddTitleText("Load a Game");
	gui1.windowAddInfoText(text);
	gui_SaveLoadWindows.addSaveSlotButtons(game,gui1,function(res) {
		windowOnDone(res);
		gui1.windowOnDestroy = null;
		gui1.closeWindow();
	},true,false);
	gui1.windowAddBottomButtons([{ text : "Import...", action : function() {
	}, onHover : function() {
		game.setOnClickTo = function() {
			var importButton = window.document.getElementById("importFile");
			importButton.value = "";
			importButton.click();
			game.onClick = null;
		};
	}}]);
	gui1.windowOnDestroy = windowOnDestroy;
};
gui_SaveLoadWindows.addSaveSlotButtons = function(game,gui1,onDone,makeInactiveIfEmpty,showOverwrite) {
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		gui_SaveLoadWindows.createSaveSlotButton(game,gui1,i,onDone,makeInactiveIfEmpty,showOverwrite);
	}
};
gui_SaveLoadWindows.createSaveSlotButton = function(game,gui1,slot,onChoose,makeInactiveIfEmpty,showOverwrite) {
	var parentContainer = new gui_GUIContainer(gui1,gui1.innerWindowStage,gui1.windowInner);
	parentContainer.fillSecondarySize = true;
	parentContainer.direction = gui_GUIContainerDirection.Vertical;
	common_Storage.getItem("" + slot + "__meta",function(err,slotBottomText) {
		var makeInactive = false;
		var extraText = "";
		var needsOverwrite = false;
		if(err != null || slotBottomText == null) {
			slotBottomText = "(empty)";
			makeInactive = makeInactiveIfEmpty;
		} else if(showOverwrite) {
			extraText = "(overwrite)";
			needsOverwrite = true;
		}
		var overwriteIsOn = false;
		var ab = gui_UpgradeWindowParts.createActivatableButton(gui1,makeInactive,function() {
			if(needsOverwrite && !overwriteIsOn) {
				overwriteIsOn = true;
				ab.titleText.setText("Really overwrite slot " + (slot + 1) + "?");
			} else {
				onChoose("" + slot);
			}
		},"Slot " + (slot + 1) + " " + extraText,slotBottomText,parentContainer,"spr_9p_button_disabled");
	});
	parentContainer.padding.bottom = 2;
	gui1.windowInner.addChild(parentContainer);
};
var gui_ScrollBar = function(parent,stage,scrollable) {
	this.resetTexturesNextUpdate = false;
	this.width = 10;
	if(Main.isMobile) {
		this.width = 14;
	}
	this.parent = parent;
	this.stage = stage;
	this.scrollable = scrollable;
	this.rect = new common_Rectangle(0,0,this.width,0);
	var windowParts = Resources.getTextures("spr_windowparts",4);
	this.background = new gui_NinePatch(windowParts[0],3,9,9);
	stage.addChild(this.background);
	this.scrollbar = new gui_NinePatch(windowParts[1],3,9,9);
	this.scrollbar.texture = windowParts[2];
	this.scrollbar.updateTextures(false);
	this.scrollbar.texture = windowParts[3];
	this.scrollbar.updateTextures(false);
	this.scrollbar.texture = windowParts[1];
	this.scrollbar.updateTextures(false);
	stage.addChild(this.scrollbar);
};
$hxClasses["gui.ScrollBar"] = gui_ScrollBar;
gui_ScrollBar.__name__ = ["gui","ScrollBar"];
gui_ScrollBar.__interfaces__ = [gui_IGUIElement];
gui_ScrollBar.prototype = {
	get_scrollPart: function() {
		return this.scrollable.scrollPosition.y;
	}
	,get_scrollHandlePosition: function() {
		return Math.round(this.get_scrollPart() / this.scrollable.get_innerHeight() * this.rect.height);
	}
	,get_scrollHandleHeight: function() {
		return Math.round(this.scrollable.rect.height / this.scrollable.get_innerHeight() * this.rect.height);
	}
	,updateSize: function() {
		this.parent.updateSize();
	}
	,updatePosition: function(newPosition) {
		var _this = this.rect;
		new common_Point(_this.x = newPosition.x,_this.y = newPosition.y);
		this.redraw();
	}
	,redraw: function() {
		if(this.scrollable != null) {
			this.background.npWidth = this.width;
			this.background.npHeight = this.rect.height;
			var _this = this.rect;
			var tmp = new common_Point(_this.x,_this.y);
			this.background.position.x = tmp.x;
			var _this1 = this.rect;
			var tmp1 = new common_Point(_this1.x,_this1.y);
			this.background.position.y = tmp1.y;
			this.background.updateSprites(true);
			this.scrollbar.npWidth = this.width;
			this.scrollbar.npHeight = this.get_scrollHandleHeight();
			var _this2 = this.rect;
			var tmp2 = new common_Point(_this2.x,_this2.y);
			this.scrollbar.position.x = tmp2.x;
			var _this3 = this.rect;
			var tmp3 = new common_Point(_this3.x,_this3.y).y;
			var tmp4 = this.get_scrollHandlePosition();
			this.scrollbar.position.y = tmp3 + tmp4;
			this.scrollbar.updateSprites(true);
		}
	}
	,destroy: function() {
		this.stage.removeChild(this.background);
		this.stage.removeChild(this.scrollbar);
	}
	,handleMouse: function(mouse) {
		var _gthis = this;
		if(this.rect.contains(mouse.position)) {
			this.scrollable.handleScrollWheel(mouse);
			var wasInScrollbarHandle = true;
			var mouseStartY = 0;
			var mouseRelativeStartY = 0;
			var relativeMouseY;
			var isInScrollBarHandle;
			relativeMouseY = mouse.get_y() - _gthis.rect.y;
			var lower = _gthis.get_scrollHandlePosition();
			var upper = _gthis.get_scrollHandlePosition() + _gthis.get_scrollHandleHeight();
			if(relativeMouseY >= lower) {
				isInScrollBarHandle = relativeMouseY < upper;
			} else {
				isInScrollBarHandle = false;
			}
			if(isInScrollBarHandle) {
				this.scrollbar.setTextureSet(1);
				this.resetTexturesNextUpdate = false;
			}
			mouse.strongClaimMouse(this,function() {
				if(_gthis.scrollable != null && _gthis.background.parent != null) {
					_gthis.resetTexturesNextUpdate = false;
					_gthis.scrollbar.setTextureSet(2);
					relativeMouseY = mouse.get_y() - _gthis.rect.y;
					var lower1 = _gthis.get_scrollHandlePosition();
					var upper1 = _gthis.get_scrollHandlePosition() + _gthis.get_scrollHandleHeight();
					if(relativeMouseY >= lower1) {
						isInScrollBarHandle = relativeMouseY < upper1;
					} else {
						isInScrollBarHandle = false;
					}
					if(mouse.pressed) {
						mouseStartY = relativeMouseY;
						var mouseRelativeStartY1 = _gthis.get_scrollHandlePosition();
						mouseRelativeStartY = mouseStartY - mouseRelativeStartY1;
						wasInScrollbarHandle = isInScrollBarHandle;
					}
					var maxScrollY = _gthis.scrollable.get_innerHeight() - _gthis.scrollable.rect.height;
					var newScrollPart = _gthis.scrollable.scrollPosition.y;
					if(wasInScrollbarHandle) {
						var newScrollBarTop = relativeMouseY - mouseRelativeStartY;
						if(_gthis.rect.height != 0) {
							newScrollPart = Math.round(newScrollBarTop * (_gthis.scrollable.get_innerHeight() / _gthis.rect.height));
						}
					} else {
						var scrollBarMid = _gthis.get_scrollHandlePosition() + _gthis.get_scrollHandleHeight() / 2;
						var currentScrollSpeed = Math.round(8 * mouse.timeMod);
						if(relativeMouseY < scrollBarMid - currentScrollSpeed) {
							newScrollPart -= currentScrollSpeed;
						} else if(relativeMouseY >= scrollBarMid + currentScrollSpeed) {
							newScrollPart += currentScrollSpeed;
						}
					}
					if(newScrollPart < 0) {
						newScrollPart = 0;
					} else if(newScrollPart > maxScrollY) {
						newScrollPart = maxScrollY;
					} else {
						newScrollPart = newScrollPart;
					}
					_gthis.scrollable.updateScrollPosition(new common_Point(_gthis.scrollable.scrollPosition.x,newScrollPart));
				}
			});
			return true;
		}
		return false;
	}
	,update: function() {
		if(this.resetTexturesNextUpdate) {
			this.scrollbar.setTextureSet(0);
		}
		this.resetTexturesNextUpdate = true;
	}
	,__class__: gui_ScrollBar
};
var gui_SecretCodeWindow = function() { };
$hxClasses["gui.SecretCodeWindow"] = gui_SecretCodeWindow;
gui_SecretCodeWindow.__name__ = ["gui","SecretCodeWindow"];
gui_SecretCodeWindow.create = function(city,gui1,stage,thisWindow) {
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Secret Code",null,"Arial16"));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"You can use secret codes to unlock cool cosmetic options.\n" + "Subscribe to my mailing list, and I'll send you a code right away as a small gesture of thanks! I'll also update you on this game and future releases."));
	thisWindow.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,2)));
	thisWindow.addChild(new gui_TextButton(gui1,stage,gui1.windowInner,function() {
	},"Subscribe to my mailing list!",function() {
		return false;
	},function() {
		city.game.setOnClickTo = function() {
			window.open(Config.mailingListURL,"_blank");
		};
	}));
	thisWindow.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,6)));
	thisWindow.addChild(new gui_TextElement(thisWindow,stage,"Plus, you can try the following code as a reward for your curiosity: Dance All Night"));
	thisWindow.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,4)));
	var handleInput = function(input) {
		if(input == null) {
			return false;
		}
		var _g = input.toLowerCase();
		switch(_g) {
		case "coolmath":
			var createThisWindow = null;
			createThisWindow = function() {
				var createThisWindow1 = gui_SecretCodeWindow.getCoolMathText(city,true);
				gui1.showSimpleWindow(createThisWindow1,"",true);
				gui1.addWindowToStack(createThisWindow,true);
				gui1.setWindowReload(createThisWindow);
			};
			var createThisWindow2 = createThisWindow;
			createThisWindow();
			return true;
		case "dance all night":
			Settings.unlockSecretCode("nightClubColors");
			var createThisWindow3 = null;
			createThisWindow3 = function() {
				gui1.showSimpleWindow("You can now change the light show of night clubs!","Secret Code Activated!",true);
				gui1.addWindowToStack(createThisWindow3,true);
				gui1.setWindowReload(createThisWindow3);
			};
			var createThisWindow4 = createThisWindow3;
			createThisWindow3();
			return true;
		case "debug_pathfinder":
			gui1.createWindow();
			gui1.windowAddInfoText(null,function() {
				return "" + city.simulation.pathfinder.getTotalNumberOfRequested();
			});
			return true;
		case "hangar":
			Settings.unlockSecretCode("hangar");
			var createThisWindow5 = null;
			createThisWindow5 = function() {
				gui1.showSimpleWindow("You can now choose between multiple space ships for Landing Pads.","Secret Code Activated!",true);
				gui1.addWindowToStack(createThisWindow5,true);
				gui1.setWindowReload(createThisWindow5);
			};
			var createThisWindow6 = createThisWindow5;
			createThisWindow5();
			return true;
		case "orchid":
			Settings.unlockSecretCode("orchid");
			var createThisWindow7 = null;
			createThisWindow7 = function() {
				gui1.showSimpleWindow("Thanks a lot for having subscribed to my mailing list! New plant and flower options have now been unlocked.","Secret Code Activated!",true);
				gui1.addWindowToStack(createThisWindow7,true);
				gui1.setWindowReload(createThisWindow7);
			};
			var createThisWindow8 = createThisWindow7;
			createThisWindow7();
			return true;
		case "stats":
			var createThisWindow9 = null;
			createThisWindow9 = function() {
				var createThisWindow10 = gui_SecretCodeWindow.getCoolMathText(city,false);
				gui1.showSimpleWindow(createThisWindow10,"",true);
				gui1.addWindowToStack(createThisWindow9,true);
				gui1.setWindowReload(createThisWindow9);
			};
			var createThisWindow11 = createThisWindow9;
			createThisWindow9();
			return true;
		}
		return false;
	};
	if(5 == 8) {
		thisWindow.addChild(new gui_TextButton(gui1,stage,gui1.windowInner,function() {
			var inp = window.prompt("Enter a Secret Code");
			if(inp != null && !handleInput(inp)) {
				window.alert("Unfortunately, that code isn't correct!");
			}
		},"Enter Secret Code",function() {
			return false;
		}));
	} else {
		var textInput = new gui_TextInput(gui1.windowInner,gui1,city.game,"Enter Secret Code");
		thisWindow.addChild(textInput);
		textInput.onInput = handleInput;
	}
	thisWindow.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,4)));
	gui1.windowAddBottomButtons();
};
gui_SecretCodeWindow.getCoolMathText = function(city,triggeredByCoolmath) {
	var numberOfBuildings = Lambda.count(city.permanents,function(pm) {
		return pm.isBuilding;
	});
	var nameDataText = "";
	if(Resources.citizenNames.length > 0) {
		var namesOccurences = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = city.simulation.citizens;
		while(_g < _g1.length) {
			var citizen = _g1[_g];
			++_g;
			var key = citizen.nameIndex < Resources.citizenNames.length ? Resources.citizenNames[citizen.nameIndex] : "Citizen";
			if(!(__map_reserved[key] != null ? namesOccurences.existsReserved(key) : namesOccurences.h.hasOwnProperty(key))) {
				var k = citizen.nameIndex < Resources.citizenNames.length ? Resources.citizenNames[citizen.nameIndex] : "Citizen";
				if(__map_reserved[k] != null) {
					namesOccurences.setReserved(k,1);
				} else {
					namesOccurences.h[k] = 1;
				}
			} else {
				var _g2 = citizen.nameIndex < Resources.citizenNames.length ? Resources.citizenNames[citizen.nameIndex] : "Citizen";
				var _g3 = namesOccurences;
				var v = (__map_reserved[_g2] != null ? _g3.getReserved(_g2) : _g3.h[_g2]) + 1;
				if(__map_reserved[_g2] != null) {
					_g3.setReserved(_g2,v);
				} else {
					_g3.h[_g2] = v;
				}
			}
		}
		var mostOccuringName = "";
		var mostOccuringNameOcc = 0;
		var totalUniqueNames = 0;
		var occ = namesOccurences.keys();
		while(occ.hasNext()) {
			var occ1 = occ.next();
			if(mostOccuringNameOcc < (__map_reserved[occ1] != null ? namesOccurences.getReserved(occ1) : namesOccurences.h[occ1])) {
				mostOccuringName = occ1;
				mostOccuringNameOcc = __map_reserved[occ1] != null ? namesOccurences.getReserved(occ1) : namesOccurences.h[occ1];
			}
			++totalUniqueNames;
		}
		var sce = "";
		if(mostOccuringNameOcc > 2 && triggeredByCoolmath) {
			sce = " If you want to know why there is a name that is so relatively common, take a look at the birthday paradox.";
		}
		nameDataText = "\n\nYour " + city.simulation.citizens.length + " citizens share " + totalUniqueNames + " unique names. The most common one is " + mostOccuringName + ", which occurs " + (__map_reserved[mostOccuringName] != null ? namesOccurences.getReserved(mostOccuringName) : namesOccurences.h[mostOccuringName]) + " times." + sce;
	}
	var highestStack = 0;
	var _g4 = 0;
	var _g11 = city.worlds;
	while(_g4 < _g11.length) {
		var w = _g11[_g4];
		++_g4;
		var _g21 = 0;
		var _g31 = w.permanents;
		while(_g21 < _g31.length) {
			var s = _g31[_g21];
			++_g21;
			var thisStackLen = 0;
			var maxStackLen = 0;
			var _g41 = 0;
			while(_g41 < s.length) {
				var b = s[_g41];
				++_g41;
				if(b != null && b.isBuilding) {
					++thisStackLen;
				} else {
					thisStackLen = 0;
				}
				if(maxStackLen > thisStackLen) {
					maxStackLen = maxStackLen;
				} else {
					maxStackLen = thisStackLen;
				}
			}
			if(highestStack > maxStackLen) {
				highestStack = highestStack;
			} else {
				highestStack = maxStackLen;
			}
		}
	}
	var transportStats = "";
	if(city.landingSites.length > 0) {
		if(transportStats == "") {
			transportStats = "\n\n";
		} else {
			transportStats += " ";
		}
		transportStats += "In total, your landing pads have been used " + common_ArrayExtensions.sum(city.landingSites,function(ls) {
			return ls.timesUsed;
		}) + " times, including " + common_ArrayExtensions.sum(city.landingSites,function(ls1) {
			return ls1.timesUsedStopOver;
		}) + " times as stopover.";
		if(city.simulation.flyingSaucers.length > 10) {
			var spaceShipPeople = common_ArrayExtensions.isum(city.simulation.flyingSaucers,function(fs) {
				return fs.passengers.length;
			});
			transportStats += " Right now, there are " + city.simulation.flyingSaucers.length + " space ships in the air, containing " + spaceShipPeople + " people.";
		}
	}
	var hyperElevators = city.permanents.filter(function(pm1) {
		return pm1["is"](buildings_HyperElevator);
	});
	if(hyperElevators.length > 0) {
		if(transportStats == "") {
			transportStats = "\n\n";
		} else {
			transportStats += "\n";
		}
		transportStats += "Your hyper elevators have been used " + common_ArrayExtensions.sum(hyperElevators,function(he) {
			return he.timesUsed;
		}) + " times.";
	}
	if(city.teleporters.length > 0) {
		if(transportStats == "") {
			transportStats = "\n\n";
		} else {
			transportStats += "\n";
		}
		transportStats += "Your teleporters have been used " + common_ArrayExtensions.sum(city.teleporters,function(tp) {
			return tp.timesUsed;
		}) + " times.";
	}
	var statsText = "Alright, here are some stats about your city!";
	if(triggeredByCoolmath) {
		statsText = "Alright, I did some cool math; here are some stats about your city!";
	}
	return "" + statsText + " :)\n\nThere are " + numberOfBuildings + " buildings. The highest tower is " + highestStack + " buildings high." + transportStats + nameDataText;
};
var gui_TextButton = function(gui1,stage,parent,action,text,isActive,onHover,buttonSpriteName) {
	if(buttonSpriteName == null) {
		buttonSpriteName = "spr_button";
	}
	this.extraTextPosY = 0;
	this.extraHeight = 0;
	this.extraWidth = 0;
	if(Main.isMobile) {
		this.extraHeight += 4;
		this.extraTextPosY += 2;
	}
	gui_Button.call(this,gui1,stage,parent,action,isActive,onHover);
	this.buttonTextures = Resources.getTextures(buttonSpriteName,3);
	this.buttonPatch = new gui_NinePatch(this.buttonTextures[0],2,2,this.buttonTextures[0].height | 0);
	this.buttonPatch.texture = this.buttonTextures[1];
	this.buttonPatch.updateTextures(false);
	this.buttonPatch.texture = this.buttonTextures[2];
	this.buttonPatch.updateTextures(false);
	this.buttonPatch.setTextureSet(0);
	stage.addChild(this.buttonPatch);
	this.rect = new common_Rectangle(0,0,1,(this.buttonTextures[0].height | 0) + 2);
	this.bitmapText = new PIXI.extras.BitmapText(text,{ font : "Arial", tint : 0});
	this.setText(text,false);
	stage.addChild(this.bitmapText);
};
$hxClasses["gui.TextButton"] = gui_TextButton;
gui_TextButton.__name__ = ["gui","TextButton"];
gui_TextButton.__super__ = gui_Button;
gui_TextButton.prototype = $extend(gui_Button.prototype,{
	setText: function(text,calculateSize) {
		if(calculateSize == null) {
			calculateSize = true;
		}
		this.text = text;
		this.bitmapText.text = text;
		this.rect.width = Math.ceil(this.bitmapText.textWidth) + 6 + this.extraWidth;
		this.rect.height = Math.ceil(this.bitmapText.textHeight) + 3 + this.extraHeight;
		this.buttonPatch.npWidth = this.rect.width;
		this.buttonPatch.npHeight = this.rect.height;
		if(calculateSize) {
			this.updateSize();
		}
	}
	,updatePosition: function(newPosition) {
		var _this = this.rect;
		new common_Point(_this.x = newPosition.x,_this.y = newPosition.y);
		this.buttonPatch.position.set(newPosition.x,newPosition.y);
		this.buttonPatch.updateSprites();
		this.bitmapText.position.set(newPosition.x + 3 + (this.extraWidth / 2 | 0),newPosition.y + 1 + this.extraTextPosY);
		gui_Button.prototype.updatePosition.call(this,newPosition);
	}
	,handleMouse: function(mouse) {
		var _gthis = this;
		return gui_Button.prototype.doHandleMouse.call(this,mouse,function() {
			_gthis.buttonPatch.setTextureSet(1);
		},function() {
			_gthis.buttonPatch.setTextureSet(2);
		});
	}
	,update: function() {
		if(this.mouseOut) {
			this.buttonPatch.setTextureSet(0);
		}
		if(this.isActive()) {
			this.buttonPatch.setTextureSet(2);
		}
		gui_Button.prototype.update.call(this);
	}
	,destroy: function() {
		gui_Button.prototype.destroy.call(this);
		this.stage.removeChild(this.buttonPatch);
		this.stage.removeChild(this.bitmapText);
	}
	,__class__: gui_TextButton
});
var gui_TextElement = function(parent,stage,text,textUpdateFunction,font,padding,maxWidth,neverDecreaseSize) {
	if(neverDecreaseSize == null) {
		neverDecreaseSize = false;
	}
	if(maxWidth == null) {
		maxWidth = 250;
	}
	if(font == null) {
		font = "Arial";
	}
	if(text == null) {
		text = "";
	}
	var textContainer = new PIXI.extras.BitmapText("",{ font : font, tint : 0});
	textContainer.maxWidth = maxWidth;
	textContainer.text = text;
	this.textUpdateFunction = textUpdateFunction;
	this.neverDecreaseSize = neverDecreaseSize;
	var addToPadding;
	switch(font) {
	case "Arial":
		addToPadding = { left : 0, right : 0, top : -2, bottom : 2};
		break;
	case "Arial10":
		addToPadding = { left : 0, right : 0, top : -3, bottom : 3};
		break;
	case "Arial15":
		addToPadding = { left : 0, right : 0, top : -3, bottom : 2};
		break;
	case "Arial16":
		addToPadding = { left : 0, right : 0, top : -2, bottom : 4};
		break;
	default:
		addToPadding = { left : 0, right : 0, top : -3, bottom : 2};
	}
	if(padding == null) {
		padding = addToPadding;
	} else {
		padding = { left : padding.left + addToPadding.left, right : padding.right + addToPadding.right, top : padding.top + addToPadding.top, bottom : padding.bottom + addToPadding.bottom};
	}
	gui_ContainerHolder.call(this,parent,stage,textContainer,padding);
};
$hxClasses["gui.TextElement"] = gui_TextElement;
gui_TextElement.__name__ = ["gui","TextElement"];
gui_TextElement.__super__ = gui_ContainerHolder;
gui_TextElement.prototype = $extend(gui_ContainerHolder.prototype,{
	get_textContainer: function() {
		return this.container;
	}
	,updateSize: function() {
		var newWidth;
		var newHeight;
		var oldWidthNoPadding = this.rect.width - this.padding.left - this.padding.right;
		var oldHeightNoPadding = this.rect.height - this.padding.top - this.padding.bottom;
		if(this.get_textContainer().text == "") {
			newWidth = 0;
			newHeight = 0;
		} else {
			var bitmapContainer = this.container;
			newWidth = Math.round(bitmapContainer.textWidth);
			newHeight = Math.round(bitmapContainer.textHeight);
		}
		if(this.neverDecreaseSize) {
			this.rect.width = newWidth > oldWidthNoPadding ? newWidth : oldWidthNoPadding;
			this.rect.height = newHeight > oldHeightNoPadding ? newHeight : oldHeightNoPadding;
		} else {
			this.rect.width = newWidth;
			this.rect.height = newHeight;
		}
		if(oldWidthNoPadding != this.rect.width || oldHeightNoPadding != this.rect.height) {
			gui_ContainerHolder.prototype.afterSizeUpdate.call(this);
		}
	}
	,setText: function(text) {
		var bitmapContainer = this.container;
		if(StringTools.startsWith(text,"[red]")) {
			text = HxOverrides.substr(text,"[red]".length,null);
			bitmapContainer.tint = 16711680;
		} else if(StringTools.startsWith(text,"[green]")) {
			text = HxOverrides.substr(text,"[green]".length,null);
			bitmapContainer.tint = 65280;
		} else {
			bitmapContainer.tint = 0;
		}
		this.get_textContainer().text = text;
		this.updateSize();
	}
	,update: function() {
		if(this.textUpdateFunction != null) {
			var newText = this.textUpdateFunction();
			if(this.get_textContainer().text != newText) {
				this.setText(newText);
			}
		}
	}
	,__class__: gui_TextElement
});
var gui_TextInput = function(parent,gui1,game,placeholder) {
	if(placeholder == null) {
		placeholder = "";
	}
	this.onInput = null;
	var _gthis = this;
	this.parent = parent;
	this.gui = gui1;
	this.game = game;
	this.rect = new common_Rectangle(0,0,250,20);
	this.inputElement = window.document.createElement("input");
	this.inputElement.type = "text";
	this.inputElement.style.position = "absolute";
	this.inputElement.style.left = "10px";
	this.inputElement.style.top = "10px";
	this.inputElement.style.fontFamily = "Arial,sans-serif";
	this.inputElement.style.fontSize = "20px";
	this.inputElement.placeholder = placeholder;
	window.document.body.appendChild(this.inputElement);
	this.inputElement.focus();
	game.keyboard.inputs.push(this.inputElement);
	this.inputElement.addEventListener("input",function() {
		if(_gthis.onInput != null) {
			_gthis.onInput(_gthis.inputElement.value);
		}
	});
};
$hxClasses["gui.TextInput"] = gui_TextInput;
gui_TextInput.__name__ = ["gui","TextInput"];
gui_TextInput.__interfaces__ = [gui_IGUIElement];
gui_TextInput.prototype = {
	updateSize: function() {
		var tmp = "" + Math.floor(this.rect.width * this.game.get_preDPIAdjustScaling() - 6);
		this.inputElement.style.width = tmp + "px";
		var tmp1 = "" + Math.floor(10 * this.game.get_preDPIAdjustScaling());
		this.inputElement.style.fontSize = tmp1 + "px";
		var tmp2 = "" + Math.floor(this.rect.height * this.game.get_preDPIAdjustScaling() - 6);
		this.inputElement.style.height = tmp2 + "px";
	}
	,updatePosition: function(newPosition) {
		var tmp = Math.floor(newPosition.x * this.game.get_preDPIAdjustScaling());
		this.inputElement.style.left = tmp + "px";
		var tmp1 = Math.floor(newPosition.y * this.game.get_preDPIAdjustScaling());
		this.inputElement.style.top = tmp1 + "px";
		this.updateSize();
	}
	,destroy: function() {
		this.inputElement.parentNode.removeChild(this.inputElement);
		HxOverrides.remove(this.game.keyboard.inputs,this.inputElement);
	}
	,handleMouse: function(mouse) {
		if(this.rect.contains(mouse.position)) {
			return true;
		}
		return false;
	}
	,update: function() {
	}
	,__class__: gui_TextInput
};
var gui_Tooltip = function(game,city,stage) {
	this.isContinousDisplay = false;
	this.contentsSetLastStep = false;
	this.timeBeforeShown = 0;
	this.owner = null;
	this.emptyCost = new Materials();
	this.game = game;
	this.stage = stage;
	this.bg = new gui_NinePatch(Resources.getTexture("spr_9p_tooltip"),2,4,4);
	this.bg.position.set(0,0);
	stage.addChild(this.bg);
	this.tooltipHeader = new PIXI.extras.BitmapText("",{ font : "Arial16", tint : 0});
	this.tooltipHeader.position.set(2,0);
	stage.addChild(this.tooltipHeader);
	this.tooltipText = new PIXI.extras.BitmapText("",{ font : "Arial", tint : 0});
	this.tooltipText.position.set(3,0);
	stage.addChild(this.tooltipText);
	this.tooltipCost = new gui_MaterialsCostDisplay(city,this.emptyCost);
	this.tooltipCost.position.set(3,0);
	stage.addChild(this.tooltipCost);
	this.tooltipExtraIcons = new gui_IconListDisplay([]);
	stage.addChild(this.tooltipExtraIcons);
	this.tooltipExtraIcons2 = new gui_IconListDisplay([]);
	this.tooltipExtraIcons2.position.set(2,0);
	stage.addChild(this.tooltipExtraIcons2);
	this.tooltipPosition = new common_Point(0,0);
	stage.position.set(-100,-100);
	this.owner = null;
	this.timeBeforeShown = 0;
	this.setTextDisplay("","");
};
$hxClasses["gui.Tooltip"] = gui_Tooltip;
gui_Tooltip.__name__ = ["gui","Tooltip"];
gui_Tooltip.prototype = {
	get_tooltipDelay: function() {
		if(this.game.mouse.isTouch) {
			return 30;
		} else {
			return 0;
		}
	}
	,update: function(timeMod) {
		if(!this.contentsSetLastStep) {
			this.setTextDisplay();
			this.isContinousDisplay = false;
			this.owner = null;
			this.timeBeforeShown = 0;
			return;
		}
		this.contentsSetLastStep = false;
		if(this.timeBeforeShown > 0) {
			if(!this.isContinousDisplay) {
				this.setTextDisplay();
			}
			this.timeBeforeShown -= timeMod;
			if(!this.isContinousDisplay) {
				return;
			}
		} else if(this.text == "" && this.header == "") {
			return;
		}
		if(this.isContinousDisplay) {
			this.tooltipPosition = new common_Point(0,0);
			var _this_y;
			var _this_x = 0;
			_this_y = 0;
			var tmp = new PIXI.Point(_this_x,_this_y);
			this.stage.position = tmp;
			var tmp1 = this.game.state == null || this.game.state.get_publicGUI().window == null;
			this.stage.visible = tmp1;
		} else {
			this.stage.visible = true;
			if(!this.game.mouse.isTouch) {
				this.tooltipPosition = this.game.mouse.position;
			}
			var _this = this.tooltipPosition;
			var tmp2 = new PIXI.Point(_this.x,_this.y);
			this.stage.position = tmp2;
			this.stage.position.y += this.tooltipPosition.y > this.height ? -this.height : 21 / this.game.scaling | 0;
			if(this.stage.position.x + this.width > this.game.rect.width) {
				this.stage.position.x -= this.width;
				if(this.stage.position.x < 0) {
					this.stage.position.x = 0;
				}
			}
		}
	}
	,setText: function(owner,text,header,costInfo,extraDisplay,extraDisplay2) {
		if(header == null) {
			header = "";
		}
		this.contentsSetLastStep = true;
		if(this.owner != owner || this.game.mouse.pressed) {
			this.owner = owner;
			this.timeBeforeShown = this.get_tooltipDelay();
			if(this.game.mouse.isTouch) {
				this.tooltipPosition = this.game.mouse.position;
			}
		}
		if(this.timeBeforeShown > 0) {
			if(this.game.mouse.isTouch && !this.game.mouse.down) {
				this.owner = null;
				this.contentsSetLastStep = false;
			}
			return;
		}
		if(this.game.mouse.isTouch) {
			this.game.mouse.claimMouse(this);
		}
		if(this.isContinousDisplay && this.game.mouse.isTouch) {
			this.tooltipPosition = this.game.mouse.position;
		}
		this.isContinousDisplay = false;
		this.setTextDisplay(text,header,costInfo,extraDisplay,extraDisplay2);
	}
	,setTextForContinuous: function(text,header,costInfo,extraDisplay,extraDisplay2) {
		if(header == null) {
			header = "";
		}
		if(this.owner != null) {
			return;
		}
		this.contentsSetLastStep = true;
		this.isContinousDisplay = true;
		this.setTextDisplay(text,header,costInfo,extraDisplay,extraDisplay2);
		this.isContinousDisplay = true;
	}
	,setTextDisplay: function(text,header,costInfo,extraDisplay,extraDisplay2) {
		if(header == null) {
			header = "";
		}
		if(text == null) {
			text = "";
		}
		var addW = 6;
		var y = 0;
		var extraDisplayY = y;
		var headerWidth = 0;
		if(this.header == header && this.text == text && (costInfo == null && !this.tooltipCost.wouldChangeDisplay(this.emptyCost) || !this.tooltipCost.wouldChangeDisplay(costInfo)) && (extraDisplay == null && !this.tooltipExtraIcons.wouldChangeDisplay([]) || !this.tooltipExtraIcons.wouldChangeDisplay(extraDisplay)) && (extraDisplay2 == null && !this.tooltipExtraIcons2.wouldChangeDisplay([]) || !this.tooltipExtraIcons2.wouldChangeDisplay(extraDisplay2))) {
			return;
		}
		var maxTooltipWidth = Math.max(this.game.rect.width / 2,Math.min(Math.max(this.tooltipPosition.x - 10,this.game.rect.width - this.tooltipPosition.x - 10),240));
		if(this.isContinousDisplay) {
			maxTooltipWidth = this.game.rect.width;
		}
		this.header = header;
		this.text = text;
		this.costInfo = costInfo;
		if(extraDisplay != null && extraDisplay.length > 0) {
			this.tooltipExtraIcons.setDisplay(extraDisplay);
		}
		this.width = 0;
		if(this.isContinousDisplay && (this.header != "" || this.text != "")) {
			this.width = Math.ceil(maxTooltipWidth);
		}
		if(header != "") {
			extraDisplayY = y;
			--y;
			var val = maxTooltipWidth - this.tooltipExtraIcons.displayWidth - 10;
			var maxVal = this.isContinousDisplay ? 1000 : 350;
			this.tooltipHeader.maxWidth = val < 100 ? 100 : val > maxVal ? maxVal : val;
			this.tooltipHeader.text = header;
			headerWidth = Math.ceil(this.tooltipHeader.textWidth) + addW;
			var val1 = this.width;
			this.width = headerWidth > val1 ? headerWidth : val1;
			y += Math.ceil(this.tooltipHeader.textHeight) + 2;
		} else {
			this.tooltipHeader.text = "";
		}
		if(text != "") {
			++y;
			var val2 = maxTooltipWidth - 10;
			var maxVal1 = this.isContinousDisplay ? 1000 : 350;
			this.tooltipText.maxWidth = val2 < 100 ? 100 : val2 > maxVal1 ? maxVal1 : val2;
			this.tooltipText.text = text;
			this.tooltipText.position.y = y;
			var val11 = this.width;
			var val21 = Math.ceil(this.tooltipText.textWidth) + addW;
			this.width = val21 > val11 ? val21 : val11;
			y += Math.ceil(this.tooltipText.textHeight);
		} else {
			this.tooltipText.text = "";
		}
		if(extraDisplay2 != null && extraDisplay2.length > 0) {
			this.tooltipExtraIcons2.setDisplay(extraDisplay2);
			this.tooltipExtraIcons2.position.y = y + 1;
			var val12 = this.width;
			var val22 = Math.ceil(this.tooltipExtraIcons2.displayWidth) + addW;
			this.width = val22 > val12 ? val22 : val12;
			y += 12;
		} else {
			this.tooltipExtraIcons2.setDisplay([]);
		}
		if(costInfo != null && costInfo.any()) {
			y += 2;
			this.tooltipCost.position.y = y;
			this.tooltipCost.displayCityAmounts = this.game.isMobile && !this.game.isLargeMobile && this.isContinousDisplay;
			this.tooltipCost.maxDisplayWidth = this.game.rect.width;
			this.tooltipCost.setCost(costInfo);
			var val13 = this.width;
			var val23 = this.tooltipCost.displayWidth + addW - 6;
			this.width = val23 > val13 ? val23 : val13;
			y += 11;
		} else {
			this.tooltipCost.setCost(this.emptyCost);
		}
		if(extraDisplay != null && extraDisplay.length > 0) {
			var val14 = this.width;
			var val24 = headerWidth + this.tooltipExtraIcons.displayWidth;
			this.width = val24 > val14 ? val24 : val14;
			this.tooltipExtraIcons.position.x = this.width - 1 - this.tooltipExtraIcons.displayWidth;
			this.tooltipExtraIcons.position.y = extraDisplayY + 3;
		} else {
			this.tooltipExtraIcons.setDisplay([]);
		}
		y += 2;
		this.height = y;
		this.bg.npWidth = this.width;
		this.bg.npHeight = this.height;
		this.bg.updateSprites();
	}
	,shown: function() {
		if(this.text == "") {
			return this.header != "";
		} else {
			return true;
		}
	}
	,__class__: gui_Tooltip
};
var gui_UpgradeWindowParts = function() { };
$hxClasses["gui.UpgradeWindowParts"] = gui_UpgradeWindowParts;
gui_UpgradeWindowParts.__name__ = ["gui","UpgradeWindowParts"];
gui_UpgradeWindowParts.createActivatableButton = function(gui1,isActive,onClick,name,description,addToContainer,activeTexture,buttonSound) {
	if(activeTexture == null) {
		activeTexture = "spr_9p_button_active";
	}
	var infoContainer;
	if(addToContainer == null) {
		addToContainer = gui1.windowInner;
	}
	var createdButton = null;
	if(!isActive) {
		var containerButton = new gui_ContainerButton(gui1,gui1.innerWindowStage,addToContainer,onClick);
		infoContainer = containerButton.container;
		addToContainer.addChild(containerButton);
		if(buttonSound != null) {
			containerButton.buttonSound = buttonSound;
		}
		createdButton = containerButton;
	} else {
		infoContainer = new gui_GUIContainer(gui1,gui1.innerWindowStage,addToContainer,null,null,null,new gui_NinePatch(Resources.getTexture(activeTexture),1,3,3));
		addToContainer.addChild(infoContainer);
	}
	infoContainer.padding.top = 3;
	infoContainer.padding.left = 3;
	infoContainer.padding.right = 3;
	infoContainer.padding.bottom = 1;
	infoContainer.fillSecondarySize = true;
	infoContainer.direction = gui_GUIContainerDirection.Vertical;
	var nameElement = infoContainer.addChild(new gui_TextElement(infoContainer,gui1.innerWindowStage,name));
	var descriptionElement = infoContainer.addChild(new gui_TextElement(infoContainer,gui1.innerWindowStage,description,null,"Arial10"));
	addToContainer.addChild(new gui_GUISpacing(addToContainer,new common_Point(2,2)));
	return { container : infoContainer, titleText : nameElement, description : descriptionElement, button : createdButton};
};
gui_UpgradeWindowParts.createHeader = function(gui1,name,parent) {
	if(parent == null) {
		parent = gui1.windowInner;
	}
	var upgradesTitleContainer = new gui_GUIContainer(gui1,gui1.innerWindowStage,parent);
	upgradesTitleContainer.fillSecondarySize = true;
	upgradesTitleContainer.addChild(new gui_TextElement(upgradesTitleContainer,gui1.innerWindowStage,name,null,"Arial15",{ left : 0, right : 0, top : 3, bottom : 0}));
	upgradesTitleContainer.addChild(new gui_GUIFiller(upgradesTitleContainer,2));
	parent.addChild(upgradesTitleContainer);
	parent.addChild(new gui_GUISpacing(parent,new common_Point(2,2)));
	return upgradesTitleContainer;
};
gui_UpgradeWindowParts.addOneAndMaxButtons = function(gui1,titleContainer,whenSwitchedOff,whenSwitchedOn,upgradeOneText,upgradeAllText,upgradeAllTextNoCost,anyUpgradeWithCost) {
	var upgradeOneButton = new gui_TextButton(gui1,gui1.innerWindowStage,titleContainer,whenSwitchedOff,"One",function() {
		return !gui_UpgradeWindowParts.hasMultiUpgradeModeOn;
	},function() {
		gui1.tooltip.setText(upgradeOneButton,upgradeOneText);
	});
	titleContainer.addChild(upgradeOneButton);
	titleContainer.addChild(new gui_GUISpacing(titleContainer,new common_Point(2,2)));
	var upgradeAllButton = new gui_TextButton(gui1,gui1.innerWindowStage,titleContainer,whenSwitchedOn,anyUpgradeWithCost ? "Max" : "All",function() {
		return gui_UpgradeWindowParts.hasMultiUpgradeModeOn;
	},function() {
		var gui2 = gui1.tooltip;
		var value = anyUpgradeWithCost ? upgradeAllText() : upgradeAllTextNoCost();
		gui2.setText(upgradeAllButton,value);
	});
	titleContainer.addChild(upgradeAllButton);
};
var gui_WindowPosition = $hxClasses["gui.WindowPosition"] = { __ename__ : ["gui","WindowPosition"], __constructs__ : ["Top","Center","CenterOffset","TopLeft"] };
gui_WindowPosition.Top = ["Top",0];
gui_WindowPosition.Top.toString = $estr;
gui_WindowPosition.Top.__enum__ = gui_WindowPosition;
gui_WindowPosition.Center = ["Center",1];
gui_WindowPosition.Center.toString = $estr;
gui_WindowPosition.Center.__enum__ = gui_WindowPosition;
gui_WindowPosition.CenterOffset = function(offsetToTop) { var $x = ["CenterOffset",2,offsetToTop]; $x.__enum__ = gui_WindowPosition; $x.toString = $estr; return $x; };
gui_WindowPosition.TopLeft = ["TopLeft",3];
gui_WindowPosition.TopLeft.toString = $estr;
gui_WindowPosition.TopLeft.__enum__ = gui_WindowPosition;
var gui_WorkerDistributionWindow = function() { };
$hxClasses["gui.WorkerDistributionWindow"] = gui_WorkerDistributionWindow;
gui_WorkerDistributionWindow.__name__ = ["gui","WorkerDistributionWindow"];
gui_WorkerDistributionWindow.create = function(city,gui1,stage,window) {
	gui_WorkerDistributionWindow.createWindow(city,gui1,stage,window);
};
gui_WorkerDistributionWindow.createWindow = function(city,gui1,stage,window) {
	window.clear();
	window.addChild(new gui_TextElement(window,stage,"Assign Workers",null,"Arial16"));
	var buildingTypesWithJobUnsorted = [];
	var buildingTypesWithJobClassNames = [];
	var _g = 0;
	var _g1 = city.permanents;
	while(_g < _g1.length) {
		var pm = _g1[_g];
		++_g;
		if(pm["is"](buildings_Work)) {
			var cls = pm == null ? null : js_Boot.getClass(pm);
			var i = buildingTypesWithJobUnsorted.indexOf(cls);
			if(i == -1) {
				i = buildingTypesWithJobUnsorted.length;
				buildingTypesWithJobUnsorted.push(cls);
				var splitClassName = Type.getClassName(cls).split(".");
				buildingTypesWithJobClassNames.push(splitClassName[splitClassName.length - 1]);
			}
		}
	}
	var buildingTypesWithJob = [];
	var _g2 = 0;
	var _g11 = city.progress.resources.buildingInfoArray;
	while(_g2 < _g11.length) {
		var bi = _g11[_g2];
		++_g2;
		var i1 = buildingTypesWithJobClassNames.indexOf(bi.className);
		if(i1 != -1) {
			buildingTypesWithJob.push(buildingTypesWithJobUnsorted[i1]);
		}
	}
	var allBuildingTypeData = [];
	var updateBuildingTypeData = function() {
		allBuildingTypeData = [];
		var _g3 = 0;
		while(_g3 < buildingTypesWithJob.length) {
			var bt = buildingTypesWithJob[_g3];
			++_g3;
			allBuildingTypeData.push({ number : 0, filledJobs : 0, jobs : 0});
		}
		var _g4 = 0;
		var _g12 = city.permanents;
		while(_g4 < _g12.length) {
			var pm1 = _g12[_g4];
			++_g4;
			if(pm1["is"](buildings_Work)) {
				var thisJob = pm1;
				var cls1 = pm1 == null ? null : js_Boot.getClass(pm1);
				var i2 = buildingTypesWithJob.indexOf(cls1);
				if(i2 != -1) {
					var data = allBuildingTypeData[i2];
					data.jobs += thisJob.get_jobs();
					data.filledJobs += thisJob.workers.length;
					data.number += 1;
				}
			}
		}
	};
	updateBuildingTypeData();
	window.onUpdate = updateBuildingTypeData;
	var infoPadding = { left : 2, top : 5, bottom : 0, right : 0};
	var singleRowHeight = 20;
	var singleRowHeightWithoutPadding = singleRowHeight - 5;
	var buildingOptionsContainer = new gui_GUIContainer(gui1,stage,window);
	var buildingPictures = new gui_GUIContainer(gui1,stage,buildingOptionsContainer);
	var buildingWorkerNumbersContainer = new gui_GUIContainer(gui1,stage,buildingOptionsContainer);
	var priorityChooseContainer = new gui_GUIContainer(gui1,stage,buildingOptionsContainer);
	buildingPictures.direction = gui_GUIContainerDirection.Vertical;
	buildingWorkerNumbersContainer.direction = gui_GUIContainerDirection.Vertical;
	priorityChooseContainer.direction = gui_GUIContainerDirection.Vertical;
	var _g13 = 0;
	var _g5 = buildingTypesWithJob.length;
	while(_g13 < _g5) {
		var i3 = [_g13++];
		var buildingType = buildingTypesWithJob[i3[0]];
		var className = [Type.getClassName(buildingType)];
		var buildingTypeData = allBuildingTypeData[i3[0]];
		var thisBuildingPictureContainer = new gui_GUIContainer(gui1,stage,buildingPictures);
		thisBuildingPictureContainer.addChild(gui_BuildingTypeImage.create(stage,city,buildingType,thisBuildingPictureContainer,gui1));
		var thisBuildingNumberContainer = new gui_GUIContainer(gui1,stage,thisBuildingPictureContainer,null,null,null,null,infoPadding);
		thisBuildingNumberContainer.addChild(new gui_TextElement(thisBuildingNumberContainer,stage,"x" + buildingTypeData.number + ": "));
		thisBuildingPictureContainer.addChild(thisBuildingNumberContainer);
		buildingPictures.addChild(thisBuildingPictureContainer);
		var workerNumberContainer = new gui_GUIContainer(gui1,stage,buildingWorkerNumbersContainer,null,null,null,null,infoPadding);
		workerNumberContainer.minHeight = singleRowHeightWithoutPadding;
		workerNumberContainer.addChild(new gui_TextElement(workerNumberContainer,stage,null,(function(i4) {
			return function() {
				return "" + allBuildingTypeData[i4[0]].filledJobs + "/" + allBuildingTypeData[i4[0]].jobs + " workers,";
			};
		})(i3)));
		buildingWorkerNumbersContainer.addChild(workerNumberContainer);
		var topPaddingPrio = 2;
		var priorityWorkersContainer = new gui_GUIContainer(gui1,stage,priorityChooseContainer,null,null,null,null,{ left : 4, top : topPaddingPrio, bottom : 0, right : 0});
		priorityWorkersContainer.minHeight = singleRowHeight - topPaddingPrio;
		var _this = city.simulation.jobAssigner.priorityJobs;
		var currentPrioNumber = __map_reserved[className[0]] != null ? _this.getReserved(className[0]) : _this.h[className[0]];
		if(currentPrioNumber == null) {
			currentPrioNumber = 0;
		} else {
			currentPrioNumber = currentPrioNumber;
		}
		var numberSelectControl = new gui_NumberSelectControl(gui1,stage,priorityWorkersContainer,null,(function() {
			return function() {
				return 0;
			};
		})(),(function(i5) {
			return function() {
				return allBuildingTypeData[i5[0]].jobs;
			};
		})(i3),currentPrioNumber,(function(className1) {
			return function(n) {
				var _this1 = city.simulation.jobAssigner.priorityJobs;
				if(__map_reserved[className1[0]] != null) {
					_this1.setReserved(className1[0],n);
				} else {
					_this1.h[className1[0]] = n;
				}
				city.simulation.jobAssigner.buildingsHaveWork = true;
			};
		})(className),(function(i6) {
			return function() {
				if(city.game.keyboard.down[16]) {
					return 0;
				} else if(city.game.keyboard.down[17]) {
					return 1000000;
				}
				return allBuildingTypeData[i6[0]].filledJobs;
			};
		})(i3),city.game.isMobile ? "Tap to set the number of priority jobs to the current number of workers." : "Click to set the number of priority jobs to the current number of workers. Shift+Click to set it to 0. Ctrl+Click to set it to max.");
		numberSelectControl.enableBeyondHighestValuePossibility(1000000,"Max");
		priorityWorkersContainer.addChild(numberSelectControl);
		if(className[0] == "buildings.StoneMine") {
			gui_WorkerDistributionWindow.tutorialStoneMineUpButton = numberSelectControl.upButton;
			gui_WorkerDistributionWindow.tutorialStoneMineDownButton = numberSelectControl.downButton;
		} else if(className[0] == "buildings.WoodcuttingCentre") {
			gui_WorkerDistributionWindow.tutorialWoodCuttersUpButton = numberSelectControl.upButton;
		}
		priorityWorkersContainer.addChild(new gui_TextElement(priorityWorkersContainer,stage," priority.",null,null,{ left : 0, top : 3, bottom : 0, right : 0}));
		priorityChooseContainer.addChild(priorityWorkersContainer);
	}
	if(buildingTypesWithJob.length == 0) {
		gui1.windowAddInfoText("There are no buildings with work yet!");
	}
	buildingOptionsContainer.addChild(buildingPictures);
	buildingOptionsContainer.addChild(buildingWorkerNumbersContainer);
	buildingOptionsContainer.addChild(priorityChooseContainer);
	window.addChild(buildingOptionsContainer);
	var f = ($_=city.gui,$bind($_,$_.reloadWindow));
	var a1 = city;
	var a2 = gui1;
	var a3 = stage;
	var a4 = window;
	var a11 = function() {
		gui_WorkerDistributionWindow.createWindow(a1,a2,a3,a4);
		return;
	};
	var tmp = function() {
		f(a11);
	};
	city.windowRelatedOnBuildOrDestroy = tmp;
	window.onDestroy = function() {
		city.windowRelatedOnBuildOrDestroy = null;
		gui_WorkerDistributionWindow.tutorialStoneMineUpButton = null;
		gui_WorkerDistributionWindow.tutorialStoneMineDownButton = null;
		gui_WorkerDistributionWindow.tutorialWoodCuttersUpButton = null;
	};
	gui1.windowAddBottomButtons();
};
var gui_infoWindows_MaterialInfoWindow = function() { };
$hxClasses["gui.infoWindows.MaterialInfoWindow"] = gui_infoWindows_MaterialInfoWindow;
gui_infoWindows_MaterialInfoWindow.__name__ = ["gui","infoWindows","MaterialInfoWindow"];
gui_infoWindows_MaterialInfoWindow.create = function(city,gui1,stage,window,material,materialName) {
	gui_infoWindows_MaterialInfoWindow.createWindow(city,gui1,stage,window,material,materialName);
};
gui_infoWindows_MaterialInfoWindow.createWindow = function(city,gui1,stage,window,material,materialName) {
	window.clear();
	gui1.windowAddTitleText(materialName + "");
	var graphicsContainer = new PIXI.Container();
	var graphics = new PIXI.Graphics();
	var textContainer = new PIXI.Container();
	var stats = city.simulation.stats;
	var graphTopSpacing = 5;
	var graphBarMaxHeight = 100;
	var holder = null;
	var barWidth = 9;
	var barSpacing = 4;
	var daysToDraw = 7;
	var graphMaxWidth = 34 + barWidth * 2 * daysToDraw + barSpacing * daysToDraw;
	var drawMaterialInfo = function() {
		graphics.clear();
		graphics.beginFill(16711680,0);
		graphics.drawRect(0,0,1,1);
		graphics.endFill();
		var maxMaterials = 9.0;
		var ind = MaterialsHelper.findMaterialIndex(material);
		var thisMaterialProdStats = stats.materialProduction[ind];
		var thisMaterialConsStats = stats.materialUsed[ind];
		var anyMaterialsUsed = false;
		var _g = 0;
		while(_g < 7) {
			var i = _g++;
			maxMaterials = Math.max(maxMaterials,thisMaterialProdStats[i]);
			maxMaterials = Math.max(maxMaterials,thisMaterialConsStats[i]);
			if(thisMaterialConsStats[i] > 0) {
				anyMaterialsUsed = true;
			}
		}
		var zeroes = Math.floor(Math.log(maxMaterials) / Math.log(10));
		var dividers = Math.floor(Math.pow(10,zeroes));
		if((Math.ceil(maxMaterials) / dividers | 0) < 2) {
			dividers = dividers / 5 | 0;
		} else if((Math.ceil(maxMaterials) / dividers | 0) < 4) {
			dividers = dividers / 2 | 0;
		}
		var graphTopAmount = Math.floor(maxMaterials / dividers) * dividers + dividers;
		var barScaling = graphBarMaxHeight / graphTopAmount;
		var numbersOnAxis = (graphTopAmount / dividers | 0) + 1;
		var xx = graphMaxWidth - barWidth;
		var _g1 = 0;
		var _g2 = daysToDraw;
		while(_g1 < _g2) {
			var i1 = _g1++;
			var barHeightprod = barScaling * thisMaterialProdStats[i1];
			var barHeightcons = barScaling * thisMaterialConsStats[i1];
			if(anyMaterialsUsed) {
				graphics.beginFill(16711680);
				graphics.drawRect(xx,graphTopSpacing + graphBarMaxHeight - barHeightcons,barWidth,barHeightcons);
				graphics.endFill();
				xx -= barWidth;
				graphics.beginFill(255);
				graphics.drawRect(xx,graphTopSpacing + graphBarMaxHeight - barHeightprod,barWidth,barHeightprod);
				graphics.endFill();
				xx -= barWidth + barSpacing;
			} else {
				xx -= barWidth;
				graphics.beginFill(255);
				graphics.drawRect(xx,graphTopSpacing + graphBarMaxHeight - barHeightprod,barWidth * 2,barHeightprod);
				graphics.endFill();
				xx -= barWidth + barSpacing;
			}
		}
		var guideXPos = xx + barWidth + barSpacing - 2;
		graphics.beginFill(0,1);
		graphics.drawRect(guideXPos - 1,0,1,graphBarMaxHeight + graphTopSpacing);
		graphics.drawRect(guideXPos - 1,graphBarMaxHeight + graphTopSpacing,graphMaxWidth - guideXPos + 3,1);
		textContainer.removeChildren();
		var textIntervals = Math.floor(graphTopAmount / (numbersOnAxis - 1));
		var _g11 = 0;
		var _g3 = numbersOnAxis;
		while(_g11 < _g3) {
			var i2 = _g11++;
			var axisText = new PIXI.extras.BitmapText("" + common_MathExtensions.largeNumberFormatAlt(Math,textIntervals * i2),{ font : "Arial10", tint : 0});
			axisText.anchor.set(1,0.5);
			var yPos = graphTopSpacing + graphBarMaxHeight - barScaling * textIntervals * i2;
			axisText.position.set(guideXPos - 5,yPos);
			graphics.drawRect(guideXPos - 3,yPos,2,1);
			textContainer.addChild(axisText);
		}
		var xx1 = graphMaxWidth;
		var maxY = 0;
		var _g12 = 0;
		var _g4 = daysToDraw;
		while(_g12 < _g4) {
			var i3 = _g12++;
			var text = "";
			switch(i3) {
			case 0:
				text = "Today";
				break;
			case 1:
				text = "Yesterday";
				break;
			default:
				text = i3 + " days ago";
			}
			var axisText1 = new PIXI.extras.BitmapText(text,{ font : "Arial10", tint : 0});
			axisText1.anchor.set(0,0.5);
			axisText1.rotation = Math.PI / 2;
			axisText1.position.set(xx1 - barWidth,graphTopSpacing + graphBarMaxHeight + 4);
			textContainer.addChild(axisText1);
			xx1 -= barWidth * 2 + barSpacing;
			var val2 = Math.ceil(axisText1.position.y + axisText1.textWidth);
			if(val2 > maxY) {
				maxY = val2;
			} else {
				maxY = maxY;
			}
		}
		graphics.endFill();
		var yy = maxY + 5;
		var xx2 = 0;
		var drawLegendPart = function(source,color) {
			var legendText = new PIXI.extras.BitmapText(source,{ font : "Arial10", tint : 0});
			if(xx2 + 13 + Math.ceil(legendText.width) > graphMaxWidth) {
				xx2 = 0;
				yy += 13;
			}
			graphics.beginFill(color,1);
			graphics.drawRect(xx2,yy,10,10);
			xx2 += 13;
			legendText.position.set(xx2,yy);
			xx2 += Math.ceil(legendText.width) + 3;
			textContainer.addChild(legendText);
			graphics.endFill();
		};
		drawLegendPart("Production",255);
		if(anyMaterialsUsed) {
			yy += 13;
			xx2 = 0;
			drawLegendPart("Usage",16711680);
		}
		if(holder != null) {
			holder.updateSize();
		}
	};
	drawMaterialInfo();
	graphicsContainer.addChild(graphics);
	graphicsContainer.addChild(textContainer);
	holder = new gui_ContainerHolder(window,stage,graphicsContainer,{ left : 0, right : 0, top : 0, bottom : 3},drawMaterialInfo,function(mouse) {
		return false;
	});
	window.addChild(holder);
	var _g5 = 0;
	while(_g5 < 7) {
		var i4 = _g5++;
		var bitmapText = new PIXI.extras.BitmapText("" + i4 * 10 + "-" + (i4 * 10 + 10),{ font : "Arial10", tint : 0});
	}
	window.onDestroy = function() {
		graphics.destroy();
	};
	gui1.windowAddBottomButtons();
};
var gui_windowParts_CycleValueButton = function() { };
$hxClasses["gui.windowParts.CycleValueButton"] = gui_windowParts_CycleValueButton;
gui_windowParts_CycleValueButton.__name__ = ["gui","windowParts","CycleValueButton"];
gui_windowParts_CycleValueButton.create = function(gui1,getValue,setValue,maxValue,text,textGetter) {
	if(text == null) {
		text = "";
	}
	if(textGetter == null) {
		textGetter = function() {
			return text;
		};
	}
	var button = gui_windowParts_FullSizeTextButton.create(gui1,function() {
		var curr = getValue();
		++curr;
		if(curr >= maxValue()) {
			setValue(0);
		} else {
			setValue(curr);
		}
	},gui1.windowInner,textGetter,gui1.innerWindowStage);
	gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,4)));
	return button;
};
var gui_windowParts_FullSizeTextButton = function() { };
$hxClasses["gui.windowParts.FullSizeTextButton"] = gui_windowParts_FullSizeTextButton;
gui_windowParts_FullSizeTextButton.__name__ = ["gui","windowParts","FullSizeTextButton"];
gui_windowParts_FullSizeTextButton.create = function(gui1,onClick,parent,getText,stage) {
	var containerButton = new gui_ContainerButton(gui1,stage,parent,onClick);
	var infoContainer = containerButton.container;
	parent.addChild(containerButton);
	infoContainer.padding.top = 3;
	infoContainer.padding.left = 3;
	infoContainer.padding.right = 3;
	infoContainer.padding.bottom = 0;
	infoContainer.fillSecondarySize = true;
	infoContainer.direction = gui_GUIContainerDirection.Vertical;
	var subContainer = new gui_GUIContainer(gui1,stage,infoContainer);
	subContainer.alignment = gui_GUIContainerAlignment.Center;
	infoContainer.addChild(subContainer);
	subContainer.addChild(new gui_TextElement(subContainer,stage,null,function() {
		return getText();
	}));
	containerButton.buttonPatch.updateSprites(true);
	return containerButton;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe__$Int32_Int32_$Impl_$ = {};
$hxClasses["haxe._Int32.Int32_Impl_"] = haxe__$Int32_Int32_$Impl_$;
haxe__$Int32_Int32_$Impl_$.__name__ = ["haxe","_Int32","Int32_Impl_"];
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64_Int64_$Impl_$ = {};
$hxClasses["haxe._Int64.Int64_Impl_"] = haxe__$Int64_Int64_$Impl_$;
haxe__$Int64_Int64_$Impl_$.__name__ = ["haxe","_Int64","Int64_Impl_"];
haxe__$Int64_Int64_$Impl_$.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		var _g = divisor.low;
		switch(_g) {
		case 0:
			throw new js__$Boot_HaxeError("divide by zero");
			break;
		case 1:
			var this1 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
			var this2 = new haxe__$Int64__$_$_$Int64(0,0);
			return { quotient : this1, modulus : this2};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = -dividend.low;
		if(low == 0) {
			var ret = high++;
			high = high | 0;
		}
		var this3 = new haxe__$Int64__$_$_$Int64(high,low);
		modulus = this3;
	} else {
		var this4 = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
		modulus = this4;
	}
	if(divisor.high < 0) {
		var high1 = ~divisor.high;
		var low1 = -divisor.low;
		if(low1 == 0) {
			var ret1 = high1++;
			high1 = high1 | 0;
		}
		var this5 = new haxe__$Int64__$_$_$Int64(high1,low1);
		divisor = this5;
	} else {
		divisor = divisor;
	}
	var this6 = new haxe__$Int64__$_$_$Int64(0,0);
	var quotient = this6;
	var this7 = new haxe__$Int64__$_$_$Int64(0,1);
	var mask = this7;
	while(!(divisor.high < 0)) {
		var v = haxe__$Int32_Int32_$Impl_$.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(divisor.low,modulus.low);
		var b = 1;
		b &= 63;
		if(b == 0) {
			var this8 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this8;
		} else if(b < 32) {
			var this9 = new haxe__$Int64__$_$_$Int64(divisor.high << b | divisor.low >>> 32 - b,divisor.low << b);
			divisor = this9;
		} else {
			var this10 = new haxe__$Int64__$_$_$Int64(divisor.low << b - 32,0);
			divisor = this10;
		}
		var b1 = 1;
		b1 &= 63;
		if(b1 == 0) {
			var this11 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this11;
		} else if(b1 < 32) {
			var this12 = new haxe__$Int64__$_$_$Int64(mask.high << b1 | mask.low >>> 32 - b1,mask.low << b1);
			mask = this12;
		} else {
			var this13 = new haxe__$Int64__$_$_$Int64(mask.low << b1 - 32,0);
			mask = this13;
		}
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var this14 = new haxe__$Int64__$_$_$Int64(0,0);
		var b2 = this14;
		if(!(mask.high != b2.high || mask.low != b2.low)) {
			break;
		}
		var v1 = haxe__$Int32_Int32_$Impl_$.ucompare(modulus.high,divisor.high);
		if((v1 != 0 ? v1 : haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low)) >= 0) {
			var this15 = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			quotient = this15;
			var high2 = modulus.high - divisor.high | 0;
			var low2 = modulus.low - divisor.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low) < 0) {
				var ret2 = high2--;
				high2 = high2 | 0;
			}
			var this16 = new haxe__$Int64__$_$_$Int64(high2,low2);
			modulus = this16;
		}
		var b3 = 1;
		b3 &= 63;
		if(b3 == 0) {
			var this17 = new haxe__$Int64__$_$_$Int64(mask.high,mask.low);
			mask = this17;
		} else if(b3 < 32) {
			var this18 = new haxe__$Int64__$_$_$Int64(mask.high >>> b3,mask.high << 32 - b3 | mask.low >>> b3);
			mask = this18;
		} else {
			var this19 = new haxe__$Int64__$_$_$Int64(0,mask.high >>> b3 - 32);
			mask = this19;
		}
		var b4 = 1;
		b4 &= 63;
		if(b4 == 0) {
			var this20 = new haxe__$Int64__$_$_$Int64(divisor.high,divisor.low);
			divisor = this20;
		} else if(b4 < 32) {
			var this21 = new haxe__$Int64__$_$_$Int64(divisor.high >>> b4,divisor.high << 32 - b4 | divisor.low >>> b4);
			divisor = this21;
		} else {
			var this22 = new haxe__$Int64__$_$_$Int64(0,divisor.high >>> b4 - 32);
			divisor = this22;
		}
	}
	if(divSign) {
		var high3 = ~quotient.high;
		var low3 = -quotient.low;
		if(low3 == 0) {
			var ret3 = high3++;
			high3 = high3 | 0;
		}
		var this23 = new haxe__$Int64__$_$_$Int64(high3,low3);
		quotient = this23;
	}
	if(dividend.high < 0) {
		var high4 = ~modulus.high;
		var low4 = -modulus.low;
		if(low4 == 0) {
			var ret4 = high4++;
			high4 = high4 | 0;
		}
		var this24 = new haxe__$Int64__$_$_$Int64(high4,low4);
		modulus = this24;
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case List:
				this.buf.b += "l";
				var v3 = v;
				var _g_head = v3.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v4 = v;
				var k = v4.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v4.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					var this1 = new Array(length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i3 = _g11++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v["length"];
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i4 = _g12++;
				this.serialize(v[i4]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe_ds_GenericCell.prototype = {
	__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe_ds_GenericStack.prototype = {
	__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_web_Request = function() { };
$hxClasses["haxe.web.Request"] = haxe_web_Request;
haxe_web_Request.__name__ = ["haxe","web","Request"];
haxe_web_Request.getParams = function() {
	var get = HxOverrides.substr(window.location.search,1,null);
	var params = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = new EReg("[&;]","g").split(get);
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		var pl = p.split("=");
		if(pl.length < 2) {
			continue;
		}
		var name = pl.shift();
		var key = decodeURIComponent(name.split("+").join(" "));
		var s = pl.join("=");
		var value = decodeURIComponent(s.split("+").join(" "));
		if(__map_reserved[key] != null) {
			params.setReserved(key,value);
		} else {
			params.h[key] = value;
		}
	}
	return params;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var pathfinder_DirectConnectionFinder = function() { };
$hxClasses["pathfinder.DirectConnectionFinder"] = pathfinder_DirectConnectionFinder;
pathfinder_DirectConnectionFinder.__name__ = ["pathfinder","DirectConnectionFinder"];
pathfinder_DirectConnectionFinder.find = function(city,fromBuilding,isGoal,ignoreBuilding) {
	var queue = new de_polygonal_ds_ArrayedQueue();
	if(queue.capacity == queue.mSize) {
		queue.grow();
	}
	queue.mData[(queue.mSize++ + queue.mFront) % queue.capacity] = fromBuilding;
	city.simulation.permanentFinder.pfSeenStart += 3;
	if(city.simulation.permanentFinder.pfSeenStart > 100000) {
		city.simulation.permanentFinder.pfSeenStart = 1;
	}
	fromBuilding.pfSeen = city.simulation.permanentFinder.pfSeenStart;
	while(queue.mSize > 0) {
		var x = queue.mData[queue.mFront++];
		if(queue.mFront == queue.capacity) {
			queue.mFront = 0;
		}
		queue.mSize--;
		var bld = x;
		if(isGoal(bld)) {
			return bld;
		}
		var bld2 = bld.leftBuilding;
		if(bld2 != null) {
			if(!ignoreBuilding(bld2)) {
				if(bld2.pfSeen != city.simulation.permanentFinder.pfSeenStart) {
					if(queue.capacity == queue.mSize) {
						queue.grow();
					}
					queue.mData[(queue.mSize++ + queue.mFront) % queue.capacity] = bld2;
					bld2.pfSeen = city.simulation.permanentFinder.pfSeenStart;
				}
			}
		}
		var bld21 = bld.rightBuilding;
		if(bld21 != null) {
			if(!ignoreBuilding(bld21)) {
				if(bld21.pfSeen != city.simulation.permanentFinder.pfSeenStart) {
					if(queue.capacity == queue.mSize) {
						queue.grow();
					}
					queue.mData[(queue.mSize++ + queue.mFront) % queue.capacity] = bld21;
					bld21.pfSeen = city.simulation.permanentFinder.pfSeenStart;
				}
			}
		}
		var bld22 = bld.topBuilding;
		if(bld22 != null) {
			if(!ignoreBuilding(bld22)) {
				if(bld22.pfSeen != city.simulation.permanentFinder.pfSeenStart) {
					if(queue.capacity == queue.mSize) {
						queue.grow();
					}
					queue.mData[(queue.mSize++ + queue.mFront) % queue.capacity] = bld22;
					bld22.pfSeen = city.simulation.permanentFinder.pfSeenStart;
				}
			}
		}
		var bld23 = bld.bottomBuilding;
		if(bld23 != null) {
			if(!ignoreBuilding(bld23)) {
				if(bld23.pfSeen != city.simulation.permanentFinder.pfSeenStart) {
					if(queue.capacity == queue.mSize) {
						queue.grow();
					}
					queue.mData[(queue.mSize++ + queue.mFront) % queue.capacity] = bld23;
					bld23.pfSeen = city.simulation.permanentFinder.pfSeenStart;
				}
			}
		}
	}
	return null;
};
var pathfinder_FlyingPathfinder = function(city) {
	this.city = city;
	this.allWaypoints = [];
};
$hxClasses["pathfinder.FlyingPathfinder"] = pathfinder_FlyingPathfinder;
pathfinder_FlyingPathfinder.__name__ = ["pathfinder","FlyingPathfinder"];
pathfinder_FlyingPathfinder.prototype = {
	updateWaypoints: function() {
		this.allWaypoints = [];
		var obstructions;
		var sortedWorlds;
		obstructions = [];
		var gridxstart = 0;
		var gridxmax = 20;
		if(this.city.worlds.length > 0) {
			gridxstart = common_ArrayExtensions.min(this.city.worlds,function(w) {
				return w.rect.x;
			}).rect.x - 40;
			gridxmax = common_ArrayExtensions.max(this.city.worlds,function(w1) {
				return w1.rect.get_x2();
			}).rect.get_x2() + 40;
		}
		sortedWorlds = [];
		sortedWorlds = this.city.worlds.slice();
		sortedWorlds.sort(function(w11,w2) {
			return w11.rect.y - w2.rect.y;
		});
		var istart = gridxstart / 20 | 0;
		var obstructionsLength = (gridxmax / 20 | 0) - istart + 1;
		var _g = [];
		var _g2 = 0;
		var _g1 = obstructionsLength;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push([]);
		}
		var landingSites = _g;
		var _g11 = 0;
		var _g21 = this.city.landingSites;
		while(_g11 < _g21.length) {
			var landingSite = _g21[_g11];
			++_g11;
			landingSites[(landingSite.position.x / 20 | 0) - istart].push(landingSite);
		}
		var _g22 = 0;
		var _g12 = obstructionsLength;
		while(_g22 < _g12) {
			var i1 = _g22++;
			var x = (i1 + istart) * 20;
			obstructions.push([]);
			var _g3 = 0;
			while(_g3 < sortedWorlds.length) {
				var world = sortedWorlds[_g3];
				++_g3;
				var lower = world.rect.x;
				var upper = world.rect.get_x2();
				if(x >= lower && x < upper) {
					var worldRelativeIndex = (x - world.rect.x) / 20 | 0;
					var maxY = null;
					if(world.mask != null) {
						var thisMask = world.mask[worldRelativeIndex];
						var _g5 = 0;
						var _g4 = thisMask.length;
						while(_g5 < _g4) {
							var j = _g5++;
							if(thisMask[j]) {
								maxY = j;
							}
						}
					}
					var startY = [world.rect.y - world.permanents[worldRelativeIndex].length * 20];
					var pm = world.permanents[worldRelativeIndex].length;
					var hole = false;
					var topBuilding = world.permanents[worldRelativeIndex][pm - 1];
					var topWasLandingSite = topBuilding != null && topBuilding["is"](buildings_LandingSite);
					while(--pm > 0) {
						var thisPermanent = world.permanents[worldRelativeIndex][pm];
						if(thisPermanent == null) {
							if(!hole) {
								if(pm != world.permanents[worldRelativeIndex].length - 1) {
									var endY = world.rect.y - (pm + 1) * 20;
									var nextRelevantObstruction = obstructions[i1][obstructions[i1].length - 1];
									if(topWasLandingSite) {
										startY[0] += 20;
									} else if(obstructions[i1].length == 0 || startY[0] > nextRelevantObstruction + 20) {
										startY[0] -= 20;
									}
									if(obstructions[i1].length == 0 || startY[0] > nextRelevantObstruction) {
										obstructions[i1].push(startY[0]);
										obstructions[i1].push(endY);
									} else {
										obstructions[i1][obstructions[i1].length - 1] = endY;
									}
								}
								hole = true;
							}
						} else if(hole) {
							startY[0] = world.rect.y - (pm + 1) * 20;
							hole = false;
							topWasLandingSite = thisPermanent["is"](buildings_LandingSite);
						}
					}
					if(maxY != null) {
						var endY1 = (maxY + 1) * 20 + world.rect.y;
						var nextRelevantObstruction1 = obstructions[i1][obstructions[i1].length - 1];
						if(common_ArrayExtensions.any(landingSites[i1],(function(startY1) {
							return function(ls) {
								return ls.position.y == startY1[0];
							};
						})(startY))) {
							startY[0] += 20;
						} else if(obstructions[i1].length == 0 || startY[0] > nextRelevantObstruction1 + 20) {
							startY[0] -= 20;
						}
						if(obstructions[i1].length == 0 || startY[0] > nextRelevantObstruction1) {
							obstructions[i1].push(startY[0]);
							obstructions[i1].push(endY1);
						} else {
							obstructions[i1][obstructions[i1].length - 1] = endY1;
						}
					}
				}
			}
		}
		var previousPathfindingWaypoints = new haxe_ds_IntMap();
		var prevWayPoints = [];
		var _g23 = 1;
		var _g13 = (gridxmax / 20 | 0) - istart;
		while(_g23 < _g13) {
			var i2 = _g23++;
			var x1 = (i2 + istart) * 20;
			var wayPoints = [];
			var obstructionsLength1 = obstructions[i2].length / 2 | 0;
			var nextObstructions = [obstructions[i2 + 1]];
			var prevWPNum = 0;
			var k = 0;
			var thesePathfindingWaypoints = new haxe_ds_IntMap();
			var _g41 = 0;
			var _g31 = obstructionsLength1 + 1;
			while(_g41 < _g31) {
				var j1 = _g41++;
				var theseWaypoints = [[]];
				var yfrom = [-1000000];
				var yto = [1000000];
				if(obstructionsLength1 != 0) {
					if(j1 == 0) {
						yto[0] = obstructions[i2][0];
					} else if(j1 == obstructionsLength1) {
						yfrom[0] = obstructions[i2][obstructionsLength1 * 2 - 1];
					} else {
						yfrom[0] = obstructions[i2][j1 * 2 - 1];
						yto[0] = obstructions[i2][j1 * 2];
					}
				}
				var addNextWaypointToAvoidBlockers = (function(yto1,yfrom1,theseWaypoints1,nextObstructions1) {
					return function(wp) {
						var b = 0;
						var blockerFrom = -1;
						var blockerTo = -1;
						while(b < nextObstructions1[0].length) {
							if(wp >= nextObstructions1[0][b] && wp < nextObstructions1[0][b + 1]) {
								blockerFrom = nextObstructions1[0][b];
								blockerTo = nextObstructions1[0][b + 1];
								break;
							}
							if(nextObstructions1[0][b] > wp) {
								break;
							}
							b += 2;
						}
						if(blockerFrom != -1) {
							if(blockerFrom > yfrom1[0]) {
								theseWaypoints1[0].push(blockerFrom - 20);
							} else if(blockerTo < yto1[0]) {
								theseWaypoints1[0].push(blockerTo);
							}
						}
					};
				})(yto,yfrom,theseWaypoints,nextObstructions);
				while(k < nextObstructions[0].length) {
					if(nextObstructions[0][k] > yfrom[0] && nextObstructions[0][k + 1] < yto[0]) {
						theseWaypoints[0].push(nextObstructions[0][k] - 20);
						theseWaypoints[0].push(nextObstructions[0][k + 1]);
					} else if(nextObstructions[0][k] > yfrom[0]) {
						break;
					}
					k += 2;
				}
				while(prevWPNum < prevWayPoints.length) {
					var wp1 = prevWayPoints[prevWPNum];
					if(wp1 >= yfrom[0] && wp1 < yto[0]) {
						theseWaypoints[0].push(wp1);
						addNextWaypointToAvoidBlockers(wp1);
					} else if(wp1 >= yfrom[0]) {
						break;
					}
					++prevWPNum;
				}
				var _g51 = 0;
				var _g6 = landingSites[i2];
				while(_g51 < _g6.length) {
					var landingSite1 = _g6[_g51];
					++_g51;
					if(landingSite1.position.y == yto[0] - 20) {
						theseWaypoints[0].push(landingSite1.position.y);
						addNextWaypointToAvoidBlockers(landingSite1.position.y);
					}
				}
				var tmp = (function() {
					return function(wp11,wp2) {
						return wp11 - wp2;
					};
				})();
				theseWaypoints[0].sort(tmp);
				var prevWaypoint = null;
				var j2 = theseWaypoints[0].length;
				while(--j2 >= 0) {
					if(theseWaypoints[0][j2] == prevWaypoint) {
						theseWaypoints[0].splice(j2,1);
					}
					prevWaypoint = theseWaypoints[0][j2];
				}
				var prevwp = null;
				var _g52 = 0;
				while(_g52 < theseWaypoints[0].length) {
					var wp3 = theseWaypoints[0][_g52];
					++_g52;
					wayPoints.push(wp3);
					var pathfindingWaypoint = new pathfinder_FlyingPathfinderWaypoint(x1,wp3);
					if(prevwp != null) {
						prevwp.connections.push(pathfindingWaypoint);
						pathfindingWaypoint.connections.push(prevwp);
					}
					if(previousPathfindingWaypoints.h.hasOwnProperty(wp3)) {
						var connectToPrevious = previousPathfindingWaypoints.h[wp3];
						connectToPrevious.connections.push(pathfindingWaypoint);
						pathfindingWaypoint.connections.push(connectToPrevious);
					}
					thesePathfindingWaypoints.h[wp3] = pathfindingWaypoint;
					this.allWaypoints.push(pathfindingWaypoint);
					prevwp = pathfindingWaypoint;
				}
			}
			var _g32 = 0;
			var _g42 = landingSites[i2];
			while(_g32 < _g42.length) {
				var landingSite2 = [_g42[_g32]];
				++_g32;
				var tmp1 = (function(landingSite3) {
					return function(wp4) {
						return wp4.y == landingSite3[0].position.y;
					};
				})(landingSite2);
				landingSite2[0].connectedWaypoint = Lambda.find(thesePathfindingWaypoints,tmp1);
				if(landingSite2[0].connectedWaypoint != null) {
					landingSite2[0].connectedWaypoint.connectedSite = landingSite2[0];
				}
			}
			prevWayPoints = wayPoints;
			previousPathfindingWaypoints = thesePathfindingWaypoints;
		}
	}
	,findRoute: function(from,to) {
		if(from.connectedWaypoint == null || to.connectedWaypoint == null) {
			console.log("problem while finding an air route from:");
			console.log(from);
			console.log("to:");
			console.log(to);
			console.log("If you're an end user, please report this problem. The game should continue normally now, but saving+loading the game may help if you do encounter further pathfinding problems.");
			return null;
		}
		var _g = 0;
		var _g1 = this.allWaypoints;
		while(_g < _g1.length) {
			var wp = _g1[_g];
			++_g;
			wp.seen = 0;
		}
		var pathQueue = new de_polygonal_ds_PriorityQueue(null,true);
		var start = from.connectedWaypoint;
		start.priority = 0;
		pathQueue.enqueue(start);
		var goal = to.connectedWaypoint;
		while(pathQueue.mSize != 0) {
			var currentWaypoint = pathQueue.dequeue();
			currentWaypoint.seen = 2;
			if(currentWaypoint == goal) {
				var path = [];
				while(currentWaypoint != start) {
					path.push(currentWaypoint);
					currentWaypoint = currentWaypoint.prevWaypoint;
				}
				path.push(start);
				return path;
			}
			var _g2 = 0;
			var _g11 = currentWaypoint.connections;
			while(_g2 < _g11.length) {
				var connection = _g11[_g2];
				++_g2;
				var _g21 = connection.seen;
				switch(_g21) {
				case 0:
					connection.seen = 1;
					connection.prevWaypoint = currentWaypoint;
					connection.priority = currentWaypoint.priority + (Math.abs(currentWaypoint.x - connection.x) + Math.abs(currentWaypoint.y - connection.y));
					pathQueue.enqueue(connection);
					break;
				case 1:
					var newPriority = currentWaypoint.priority + (Math.abs(currentWaypoint.x - connection.x) + Math.abs(currentWaypoint.y - connection.y));
					if(newPriority < connection.priority) {
						connection.prevWaypoint = currentWaypoint;
						pathQueue.reprioritize(connection,newPriority);
					}
					break;
				}
			}
		}
		return null;
	}
	,findAnyOtherLandingSite: function(from) {
		if(from.connectedWaypoint == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.allWaypoints;
		while(_g < _g1.length) {
			var wp = _g1[_g];
			++_g;
			wp.seen = 0;
		}
		var pathQueue = new haxe_ds_GenericStack();
		var start = from.connectedWaypoint;
		start.priority = 0;
		pathQueue.head = new haxe_ds_GenericCell(start,pathQueue.head);
		while(pathQueue.head != null) {
			var k = pathQueue.head;
			var currentWaypoint;
			if(k == null) {
				currentWaypoint = null;
			} else {
				pathQueue.head = k.next;
				currentWaypoint = k.elt;
			}
			var currentWaypoint1 = currentWaypoint;
			currentWaypoint1.seen = 2;
			if(currentWaypoint1.connectedSite != null && currentWaypoint1.connectedSite != from && currentWaypoint1.connectedSite.landingSiteGroup != null) {
				return currentWaypoint1.connectedSite;
			}
			var _g2 = 0;
			var _g11 = currentWaypoint1.connections;
			while(_g2 < _g11.length) {
				var connection = _g11[_g2];
				++_g2;
				var _g21 = connection.seen;
				if(_g21 == 0) {
					connection.seen = 1;
					connection.prevWaypoint = currentWaypoint1;
					pathQueue.head = new haxe_ds_GenericCell(connection,pathQueue.head);
				}
			}
		}
		return null;
	}
	,__class__: pathfinder_FlyingPathfinder
};
var pathfinder_FlyingPathfinderWaypoint = function(x,y) {
	this.connectedSite = null;
	this.prevWaypoint = null;
	this.seen = 0;
	this.connections = [];
	this.position = 0;
	this.priority = 0;
	this.x = x;
	this.y = y;
};
$hxClasses["pathfinder.FlyingPathfinderWaypoint"] = pathfinder_FlyingPathfinderWaypoint;
pathfinder_FlyingPathfinderWaypoint.__name__ = ["pathfinder","FlyingPathfinderWaypoint"];
pathfinder_FlyingPathfinderWaypoint.__interfaces__ = [de_polygonal_ds_Prioritizable];
pathfinder_FlyingPathfinderWaypoint.prototype = {
	__class__: pathfinder_FlyingPathfinderWaypoint
};
var pathfinder_PathfinderManager = function(city) {
	this.previousRequestSentToWorker = 0;
	this.currentMaxThreads = 15;
	this.usedWorkers = 0;
	this.activeWorkers = 0;
	this.restartPathfindingLimit = 1000;
	this.totalNumRequested = 0;
	this.city = city;
	this.workers = [];
	var _g = [];
	var _g1 = 0;
	while(_g1 < 15) {
		var i = _g1++;
		_g.push(new de_polygonal_ds_ArrayedQueue());
	}
	this.citizensForPaths = _g;
	var _g11 = [];
	var _g2 = 0;
	while(_g2 < 15) {
		var i1 = _g2++;
		_g11.push(null);
	}
	this.storedPathMessages = _g11;
	var _g21 = [];
	var _g3 = 0;
	while(_g3 < 15) {
		var i2 = _g3++;
		_g21.push(null);
	}
	this.pathRequests = _g21;
	var _g31 = [];
	var _g4 = 0;
	while(_g4 < 15) {
		var i3 = _g4++;
		_g31.push(0);
	}
	this.pathRequestPos = _g31;
	this.setWorkerNumber(Settings.pathfindingWorkers,false);
};
$hxClasses["pathfinder.PathfinderManager"] = pathfinder_PathfinderManager;
pathfinder_PathfinderManager.__name__ = ["pathfinder","PathfinderManager"];
pathfinder_PathfinderManager.prototype = {
	setWorkerNumber: function(newWorkerNumber,sendPathfindInfo) {
		if(newWorkerNumber <= 0) {
			return;
		}
		if(newWorkerNumber > this.activeWorkers) {
			var workersToAdd = newWorkerNumber - this.activeWorkers;
			var origWorkers = this.activeWorkers;
			var _g1 = 0;
			var _g = workersToAdd;
			while(_g1 < _g) {
				var i = _g1++;
				this.initNewWorkerIfPossible();
				if(sendPathfindInfo && this.activeWorkers > i + origWorkers) {
					var pf = this.getPathfindingInfo();
					this.postInt32Array(pf,i + origWorkers,false);
				}
			}
		} else {
			this.usedWorkers = newWorkerNumber;
		}
	}
	,terminate: function() {
		var _g = 0;
		var _g1 = this.workers;
		while(_g < _g1.length) {
			var worker = _g1[_g];
			++_g;
			worker.terminate();
		}
		this.activeWorkers = 0;
	}
	,initNewWorkerIfPossible: function() {
		if(this.activeWorkers < this.currentMaxThreads) {
			this.initWorker(this.activeWorkers);
			this.initPathRequests(this.activeWorkers);
			this.activeWorkers++;
			this.usedWorkers++;
		}
	}
	,initWorker: function(workerID) {
		var _gthis = this;
		try {
			this.workers[workerID] = new Worker(Resources.pathfinderCodeUrl);
		} catch( e ) {
			this.workers[workerID] = new Worker("js/pathfinder.js");
		}
		this.useModernPostMessage = true;
		try {
			var testArray = new Int32Array(1);
			testArray[0] = 2;
			this.workers[workerID].postMessage(testArray.buffer,[testArray.buffer]);
		} catch( e1 ) {
			this.useModernPostMessage = false;
			console.log("Using legacy mode for web workers.");
		}
		this.storedPathMessages[workerID] = new de_polygonal_ds_ArrayedQueue(200);
		this.workers[workerID].onmessage = function(e2) {
			var _this = _gthis.storedPathMessages[workerID];
			var val = new Int32Array(e2.data);
			if(_this.capacity == _this.mSize) {
				_this.grow();
			}
			_this.mData[(_this.mSize++ + _this.mFront) % _this.capacity] = val;
		};
	}
	,getPathfindingInfo: function() {
		var permanentsInfoLength = 0;
		var _g = 0;
		var _g1 = this.city.worlds;
		while(_g < _g1.length) {
			var world = _g1[_g];
			++_g;
			permanentsInfoLength += 3;
			var _g2 = 0;
			var _g3 = world.permanents;
			while(_g2 < _g3.length) {
				var permanentsArray = _g3[_g2];
				++_g2;
				permanentsInfoLength += 1 + 2 * permanentsArray.length;
			}
		}
		var data = new Int32Array(permanentsInfoLength + 3 * this.city.connections.directWorldConnectionNumber + 4 + this.city.connections.landingSiteGroups.length + this.city.landingSites.length);
		var i = 0;
		data[i++] = 0;
		data[i++] = this.city.worlds.length;
		var _g4 = 0;
		var _g11 = this.city.worlds;
		while(_g4 < _g11.length) {
			var world1 = _g11[_g4];
			++_g4;
			data[i++] = world1.permanents.length;
			data[i++] = world1.rect.x;
			data[i++] = world1.rect.y;
			var _g21 = 0;
			var _g31 = world1.permanents;
			while(_g21 < _g31.length) {
				var permanentsArray1 = _g31[_g21];
				++_g21;
				data[i++] = permanentsArray1.length;
				var _g41 = 0;
				while(_g41 < permanentsArray1.length) {
					var permanent = permanentsArray1[_g41];
					++_g41;
					if(permanent != null) {
						data[i++] = permanent.id;
						if(!permanent.isBuilding) {
							data[i++] = 6;
						} else {
							data[i++] = permanent.get_typeID() * 2 + (permanent.isBuilding && permanent.isRooftopBuilding ? 1 : 0);
						}
					} else {
						data[i++] = -1;
						data[i++] = -1;
					}
				}
			}
		}
		data[i++] = this.city.connections.directWorldConnectionNumber;
		var _g5 = 0;
		var _g12 = this.city.worlds;
		while(_g5 < _g12.length) {
			var world2 = _g12[_g5];
			++_g5;
			var _g22 = 0;
			var _g32 = world2.permanents[0];
			while(_g22 < _g32.length) {
				var permanent1 = _g32[_g22];
				++_g22;
				if(permanent1 != null && permanent1.isBuilding) {
					var building = permanent1;
					if(building.leftBuilding != null) {
						var otherBuilding = building.leftBuilding;
						var otherWorld = otherBuilding.world;
						if(otherWorld.rect.y > world2.rect.y || otherWorld.rect.y == world2.rect.y && otherWorld.rect.x > world2.rect.x) {
							data[i++] = 2;
							data[i++] = building.id;
							data[i++] = otherBuilding.id;
							data[i++] = 3;
							data[i++] = otherBuilding.id;
							data[i++] = building.id;
						}
					}
				}
			}
			var _g23 = 0;
			var _g33 = world2.permanents[world2.permanents.length - 1];
			while(_g23 < _g33.length) {
				var permanent2 = _g33[_g23];
				++_g23;
				if(permanent2 != null && permanent2.isBuilding) {
					var building1 = permanent2;
					if(building1.rightBuilding != null) {
						var otherBuilding1 = building1.rightBuilding;
						var otherWorld1 = otherBuilding1.world;
						if(otherWorld1.rect.y > world2.rect.y || otherWorld1.rect.y == world2.rect.y && otherWorld1.rect.x > world2.rect.x) {
							data[i++] = 3;
							data[i++] = building1.id;
							data[i++] = otherBuilding1.id;
							data[i++] = 2;
							data[i++] = otherBuilding1.id;
							data[i++] = building1.id;
						}
					}
				}
			}
		}
		data[i++] = this.city.connections.landingSiteGroups.length;
		var _g6 = 0;
		var _g13 = this.city.connections.landingSiteGroups;
		while(_g6 < _g13.length) {
			var lsg = _g13[_g6];
			++_g6;
			data[i++] = lsg.length;
			var _g24 = 0;
			while(_g24 < lsg.length) {
				var landingSite = lsg[_g24];
				++_g24;
				data[i++] = landingSite.id;
			}
		}
		return data;
	}
	,sendPathfindingInfo: function() {
		var data = this.getPathfindingInfo();
		var _g1 = 0;
		var _g = this.activeWorkers;
		while(_g1 < _g) {
			var worker = _g1++;
			this.postInt32Array(data,worker,true);
		}
	}
	,findPath: function(citizen,goal) {
		this.previousRequestSentToWorker++;
		if(this.previousRequestSentToWorker >= this.usedWorkers) {
			this.previousRequestSentToWorker = 0;
		}
		var workerID = this.previousRequestSentToWorker;
		var thesePathRequests = this.pathRequests[workerID];
		if(citizen.inPermanent != null) {
			thesePathRequests[this.pathRequestPos[workerID]++] = -1;
			thesePathRequests[this.pathRequestPos[workerID]++] = citizen.inPermanent.id;
		} else {
			thesePathRequests[this.pathRequestPos[workerID]++] = this.city.worlds.indexOf(citizen.onWorld);
			thesePathRequests[this.pathRequestPos[workerID]++] = citizen.relativeX | 0;
		}
		thesePathRequests[this.pathRequestPos[workerID]++] = goal.id;
		if(citizen.home != null && citizen.home.get_hasPrivateTeleporter()) {
			thesePathRequests[this.pathRequestPos[workerID]++] = citizen.home.id;
		} else {
			thesePathRequests[this.pathRequestPos[workerID]++] = -1;
		}
		var _this = this.citizensForPaths[workerID];
		if(_this.capacity == _this.mSize) {
			_this.grow();
		}
		_this.mData[(_this.mSize++ + _this.mFront) % _this.capacity] = citizen;
		citizen.isRequestingPath = true;
		citizen.requestingPathGoal = goal;
		if(this.pathRequestPos[workerID] >= 402) {
			this.requestPaths(workerID);
		}
	}
	,requestAllPaths: function() {
		var _g1 = 0;
		var _g = this.activeWorkers;
		while(_g1 < _g) {
			var i = _g1++;
			this.requestPaths(i);
		}
	}
	,requestPaths: function(workerID) {
		if(this.pathRequestPos[workerID] > 2) {
			this.pathRequests[workerID][0] = 1;
			this.pathRequests[workerID][1] = (this.pathRequestPos[workerID] - 2) / 4 | 0;
			this.postInt32Array(this.pathRequests[workerID],workerID,false);
			this.totalNumRequested += (this.pathRequestPos[workerID] - 2) / 4 | 0;
			this.initPathRequests(workerID);
		}
	}
	,initPathRequests: function(workerID) {
		this.pathRequests[workerID] = new Int32Array(402);
		this.pathRequestPos[workerID] = 2;
	}
	,distributePaths: function() {
		var _g1 = 0;
		var _g = this.activeWorkers;
		while(_g1 < _g) {
			var i = _g1++;
			while(this.storedPathMessages[i].mSize != 0) {
				var _this = this.storedPathMessages[i];
				var x = _this.mData[_this.mFront++];
				if(_this.mFront == _this.capacity) {
					_this.mFront = 0;
				}
				_this.mSize--;
				var theseStoredPaths = x;
				var pathPos = 1;
				var _g3 = 0;
				var _g2 = theseStoredPaths[0];
				while(_g3 < _g2) {
					var _ = _g3++;
					var pathLength = theseStoredPaths[pathPos];
					var _this1 = this.citizensForPaths[i];
					var x1 = _this1.mData[_this1.mFront++];
					if(_this1.mFront == _this1.capacity) {
						_this1.mFront = 0;
					}
					_this1.mSize--;
					var cfp = x1;
					if(cfp != null) {
						cfp.setPath(theseStoredPaths,pathPos + 1,pathLength);
					}
					pathPos += pathLength + 1;
				}
			}
			this.totalNumRequested = 0;
		}
	}
	,getTotalNumberOfRequested: function() {
		var total = 0;
		var _g1 = 0;
		var _g = this.activeWorkers;
		while(_g1 < _g) {
			var i = _g1++;
			total += this.citizensForPaths[i].mSize;
		}
		return total;
	}
	,postInt32Array: function(arrayToPost,workerID,neverTransferControl) {
		if(this.useModernPostMessage && !neverTransferControl) {
			this.workers[workerID].postMessage(arrayToPost.buffer,[arrayToPost.buffer]);
		} else {
			this.workers[workerID].postMessage(arrayToPost.buffer);
		}
	}
	,invalidateAllPaths: function() {
		var _g = 0;
		var _g1 = this.citizensForPaths;
		while(_g < _g1.length) {
			var pathQueue = _g1[_g];
			++_g;
			var citizen = pathQueue.iterator();
			while(citizen.hasNext()) {
				var citizen1 = citizen.next();
				if(citizen1 != null) {
					citizen1.isRequestingPath = false;
				}
			}
		}
		var _g11 = 0;
		var _g2 = this.activeWorkers;
		while(_g11 < _g2) {
			var i = _g11++;
			if(this.citizensForPaths[i].mSize > Math.min(this.city.simulation.citizens.length,this.restartPathfindingLimit)) {
				this.workers[i].terminate();
				this.citizensForPaths[i].clear();
				this.initWorker(i);
			} else {
				var len = this.citizensForPaths[i].mSize - ((this.pathRequestPos[i] - 2) / 4 | 0);
				this.citizensForPaths[i].clear();
				var _g3 = 0;
				var _g21 = len;
				while(_g3 < _g21) {
					var nullToAdd = _g3++;
					var _this = this.citizensForPaths[i];
					if(_this.capacity == _this.mSize) {
						_this.grow();
					}
					_this.mData[(_this.mSize++ + _this.mFront) % _this.capacity] = null;
				}
			}
			this.initPathRequests(i);
		}
	}
	,__class__: pathfinder_PathfinderManager
};
var pathfinder_PathfindingTools = function() { };
$hxClasses["pathfinder.PathfindingTools"] = pathfinder_PathfindingTools;
pathfinder_PathfindingTools.__name__ = ["pathfinder","PathfindingTools"];
pathfinder_PathfindingTools.findNearestBestBuildingStack = function(citizen,ratingFunc) {
	var citizenPosition = citizen.get_worldX();
	var bestRating = -Infinity;
	var bestStack = null;
	var bestDistance = Infinity;
	var _g1 = 0;
	var _g = citizen.onWorld.permanents.length;
	while(_g1 < _g) {
		var i = _g1++;
		var stack = citizen.onWorld.permanents[i];
		var rating = ratingFunc(stack);
		var distance = Math.abs(citizenPosition - i * 20);
		if(rating > bestRating || rating == bestRating && distance < bestDistance) {
			bestStack = i;
			bestDistance = distance;
			bestRating = rating;
		}
	}
	return bestStack;
};
var pathfinder_PermanentFinder = function(city) {
	this.pfSeenStart = 1;
	this.limitQueryAmountFor = 0;
	this.updateQueries = 0;
	this.pathQueue = new de_polygonal_ds_PriorityQueue(10,true);
	this.city = city;
	this.savedResults = new haxe_ds_StringMap();
};
$hxClasses["pathfinder.PermanentFinder"] = pathfinder_PermanentFinder;
pathfinder_PermanentFinder.__name__ = ["pathfinder","PermanentFinder"];
pathfinder_PermanentFinder.prototype = {
	preUpdate: function() {
		this.updateQueries = 0;
		if(this.limitQueryAmountFor > 0) {
			this.limitQueryAmountFor--;
		}
	}
	,requestQueryLimiting: function(strictInFirstUpdate) {
		if(strictInFirstUpdate == null) {
			strictInFirstUpdate = false;
		}
		this.limitQueryAmountFor = 120;
		if(strictInFirstUpdate) {
			this.updateQueries = 10;
		}
	}
	,canPerformQuery: function() {
		if(this.limitQueryAmountFor > 0) {
			return this.updateQueries < 10;
		} else {
			return true;
		}
	}
	,invalidatePathfindingRelatedInfo: function() {
		this.savedResults = new haxe_ds_StringMap();
	}
	,__class__: pathfinder_PermanentFinder
};
var pathfinder_PermanentPrioritizable = function() {
	this.dontCheckElevators = false;
};
$hxClasses["pathfinder.PermanentPrioritizable"] = pathfinder_PermanentPrioritizable;
pathfinder_PermanentPrioritizable.__name__ = ["pathfinder","PermanentPrioritizable"];
pathfinder_PermanentPrioritizable.__interfaces__ = [de_polygonal_ds_Prioritizable];
pathfinder_PermanentPrioritizable.create = function(priority,permanent) {
	var inst = pathfinder_PermanentPrioritizable.pool.length == 0 ? new pathfinder_PermanentPrioritizable() : pathfinder_PermanentPrioritizable.pool.pop();
	inst.___internal_pooling_initObject(priority,permanent);
	return inst;
};
pathfinder_PermanentPrioritizable.prototype = {
	___internal_pooling_initObject: function(priority,permanent) {
		this.priority = priority;
		this.permanent = permanent;
	}
	,destroy: function() {
		pathfinder_PermanentPrioritizable.pool.push(this);
	}
	,__class__: pathfinder_PermanentPrioritizable
};
var pooling_Int32ArrayPool = function() { };
$hxClasses["pooling.Int32ArrayPool"] = pooling_Int32ArrayPool;
pooling_Int32ArrayPool.__name__ = ["pooling","Int32ArrayPool"];
pooling_Int32ArrayPool.returnToPool = function(arr) {
	if(arr.length < 20 && pooling_Int32ArrayPool.pool[arr.length].length < 10000) {
		pooling_Int32ArrayPool.pool[arr.length].push(arr);
	}
};
var pooling__$PooledSprite_PooledSprite_$Impl_$ = {};
$hxClasses["pooling._PooledSprite.PooledSprite_Impl_"] = pooling__$PooledSprite_PooledSprite_$Impl_$;
pooling__$PooledSprite_PooledSprite_$Impl_$.__name__ = ["pooling","_PooledSprite","PooledSprite_Impl_"];
pooling__$PooledSprite_PooledSprite_$Impl_$.create = function(texture,stage) {
	if(pooling__$PooledSprite_PooledSprite_$Impl_$.pool.h[stage.__id__] == null) {
		var v = [];
		pooling__$PooledSprite_PooledSprite_$Impl_$.pool.set(stage,v);
	}
	var spr;
	if(pooling__$PooledSprite_PooledSprite_$Impl_$.pool.h[stage.__id__].length == 0) {
		var this1 = new PIXI.Sprite();
		spr = this1;
		stage.addChild(spr);
	} else {
		spr = pooling__$PooledSprite_PooledSprite_$Impl_$.pool.h[stage.__id__].pop();
	}
	spr.texture = texture;
	spr.visible = true;
	return spr;
};
var progress_CityResources = function() {
	Resources.initializeCityResources(this);
};
$hxClasses["progress.CityResources"] = progress_CityResources;
progress_CityResources.__name__ = ["progress","CityResources"];
progress_CityResources.prototype = {
	__class__: progress_CityResources
};
var progress_GameProgress = function(city,storyName) {
	this.shownCtrlToHighlightHint = false;
	this.city = city;
	this.storyName = storyName;
	this.goalHelp = new progress_GoalHelp(city);
	this.sandbox = new progress_SandboxHelper(city);
};
$hxClasses["progress.GameProgress"] = progress_GameProgress;
progress_GameProgress.__name__ = ["progress","GameProgress"];
progress_GameProgress.prototype = {
	init: function() {
		this.resources = new progress_CityResources();
		this.unlocks = new progress_Unlocks(this.city);
		this.story = new progress_Story(this.city,this.storyName);
	}
	,update: function(timeMod) {
		this.story.update(timeMod);
		this.unlocks.update(timeMod);
		this.sandbox.update(timeMod);
	}
	,save: function(queue) {
		this.story.save(queue);
		this.unlocks.save(queue);
		var value = this.shownCtrlToHighlightHint ? 1 : 0;
		if(queue.size + 1 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 1) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.b[queue.size] = value & 255;
		queue.size += 1;
		this.sandbox.save(queue);
	}
	,load: function(queue) {
		this.story.load(queue);
		this.unlocks.load(queue);
		if(queue.version >= 13) {
			var tmp;
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				tmp = true;
			} else {
				tmp = false;
			}
			this.shownCtrlToHighlightHint = tmp;
		}
		if(queue.version >= 25) {
			this.sandbox.load(queue);
		}
	}
	,shouldShowHoldCtrlToHighlightHint: function() {
		if(this.city.simulation.citizens.length < 100 || this.city.game.isMobile) {
			return false;
		}
		if(this.city.simulation.citizens.length > 200) {
			return false;
		}
		return !this.shownCtrlToHighlightHint;
	}
	,resetCtrlToHightlightHint: function() {
		if(this.city.simulation.citizens.length >= 100) {
			this.shownCtrlToHighlightHint = true;
		}
	}
	,__class__: progress_GameProgress
};
var progress_GenerateWorld = function() { };
$hxClasses["progress.GenerateWorld"] = progress_GenerateWorld;
progress_GenerateWorld.__name__ = ["progress","GenerateWorld"];
progress_GenerateWorld.doGenerate = function(generatorScript,generatorArgs,city,storyInfo,cityStage,cityMidStage,cityBgStage) {
	if(generatorScript == "RandomMiniWorlds") {
		progress_worldGenerators_RandomMiniWorlds.doGenerate(generatorArgs,city,storyInfo,cityStage,cityMidStage,cityBgStage);
	}
};
var progress_GoalHelp = function(city) {
	this.neverUpdatedBuildingGoal = true;
	this.knowsHasBuildingGoalHelp = false;
	this.city = city;
};
$hxClasses["progress.GoalHelp"] = progress_GoalHelp;
progress_GoalHelp.__name__ = ["progress","GoalHelp"];
progress_GoalHelp.prototype = {
	getCurrentGoalHelp: function() {
		var goalHelp = [];
		if(this.city.progress.story != null && this.city.progress.story.currentGoal != null && this.city.progress.story.currentGoal.quickText != "") {
			goalHelp.push({ category : "Main Goal", text : this.city.progress.story.currentGoal.quickText});
		}
		var currentBuildingGoalHelps = this.getCurrentBuildingGoalHelp();
		var _g = 0;
		while(_g < currentBuildingGoalHelps.length) {
			var bg = currentBuildingGoalHelps[_g];
			++_g;
			goalHelp.push(bg);
		}
		return goalHelp;
	}
	,getCurrentBuildingGoalHelp: function() {
		var goalHelp = [];
		var _g = 0;
		var _g1 = this.city.permanents;
		while(_g < _g1.length) {
			var pm = _g1[_g];
			++_g;
			if(pm["is"](Building)) {
				var bld = pm;
				var buildingGlobalGoal = bld.getGlobalGoal();
				if(buildingGlobalGoal != null) {
					goalHelp.push(buildingGlobalGoal);
				}
			}
		}
		return goalHelp;
	}
	,updateHasBuildingGoal: function() {
		this.knowsHasBuildingGoalHelp = this.getCurrentBuildingGoalHelp().length > 0;
	}
	,hasCurrentGoalHelp: function() {
		if(this.city.progress.story != null && this.city.progress.story.currentGoal != null && this.city.progress.story.currentGoal.quickText != "") {
			return true;
		}
		if(this.neverUpdatedBuildingGoal) {
			this.updateHasBuildingGoal();
			this.neverUpdatedBuildingGoal = false;
		}
		return this.knowsHasBuildingGoalHelp;
	}
	,__class__: progress_GoalHelp
};
var progress_MetaGame = function(onLoadComplete) {
	this.unlockedAll = false;
	var _gthis = this;
	common_Storage.getItem("progressFile",function(error,result) {
		if(error == null && result != null) {
			_gthis.scenarioTimes = result;
			if(5 == 1) {
				var _this = _gthis.scenarioTimes;
				if(__map_reserved["theLostShip"] != null ? _this.existsReserved("theLostShip") : _this.h.hasOwnProperty("theLostShip")) {
					common_KongTools.setStat("binaryWontheLostShip",1);
				}
				var _this1 = _gthis.scenarioTimes;
				if(__map_reserved["multipleWorlds"] != null ? _this1.existsReserved("multipleWorlds") : _this1.h.hasOwnProperty("multipleWorlds")) {
					common_KongTools.setStat("binaryWonmultipleWorlds",1);
				}
			}
		} else {
			_gthis.scenarioTimes = new haxe_ds_StringMap();
		}
		onLoadComplete();
	});
	common_Storage.getItem("unlockedAllScenarios",function(error1,result1) {
		if(error1 == null && result1 != null) {
			_gthis.unlockedAll = result1;
		}
	});
};
$hxClasses["progress.MetaGame"] = progress_MetaGame;
progress_MetaGame.__name__ = ["progress","MetaGame"];
progress_MetaGame.prototype = {
	unlockAll: function() {
		this.unlockedAll = true;
		common_Storage.setItem("unlockedAllScenarios",true,function() {
		});
	}
	,winScenario: function(scenario,time) {
		var tmp;
		var _this = this.scenarioTimes;
		if(!(!(__map_reserved[scenario] != null ? _this.existsReserved(scenario) : _this.h.hasOwnProperty(scenario)))) {
			var _this1 = this.scenarioTimes;
			tmp = (__map_reserved[scenario] != null ? _this1.getReserved(scenario) : _this1.h[scenario]) > time;
		} else {
			tmp = true;
		}
		if(tmp) {
			var _this2 = this.scenarioTimes;
			if(__map_reserved[scenario] != null) {
				_this2.setReserved(scenario,time);
			} else {
				_this2.h[scenario] = time;
			}
			if(5 == 1) {
				common_KongTools.setStat("win" + scenario,time);
				common_KongTools.setStat("binaryWon" + scenario,1);
			}
			this.saveProgress();
		}
	}
	,getScenarioTime: function(scenario) {
		var _this = this.scenarioTimes;
		if(!(__map_reserved[scenario] != null ? _this.existsReserved(scenario) : _this.h.hasOwnProperty(scenario))) {
			return null;
		}
		var _this1 = this.scenarioTimes;
		if(__map_reserved[scenario] != null) {
			return _this1.getReserved(scenario);
		} else {
			return _this1.h[scenario];
		}
	}
	,hasWonScenario: function(scenario) {
		var _this = this.scenarioTimes;
		if(__map_reserved[scenario] != null) {
			return _this.existsReserved(scenario);
		} else {
			return _this.h.hasOwnProperty(scenario);
		}
	}
	,saveProgress: function() {
		common_Storage.setItem("progressFile",this.scenarioTimes,function() {
		});
	}
	,__class__: progress_MetaGame
};
var progress_SandboxHelper = function(city) {
	this.everPlayedWithUnlimitedResources = false;
	this.unlimitedResources = false;
	this.city = city;
};
$hxClasses["progress.SandboxHelper"] = progress_SandboxHelper;
progress_SandboxHelper.__name__ = ["progress","SandboxHelper"];
progress_SandboxHelper.prototype = {
	update: function(timeMod) {
		if(this.unlimitedResources) {
			if(this.city.materials.food < 1000000000) {
				this.city.materials.set_food(1000000000);
			}
			if(this.city.materials.wood < 1000000000) {
				this.city.materials.wood = 1000000000;
			}
			if(this.city.materials.stone < 1000000000) {
				this.city.materials.stone = 1000000000;
			}
			if(this.city.materials.machineParts < 1000000000) {
				this.city.materials.machineParts = 1000000000;
			}
			if(this.city.materials.magic < 1000000000) {
				this.city.materials.magic = 1000000000;
			}
			if(this.city.materials.refinedMetal < 1000000000) {
				this.city.materials.refinedMetal = 1000000000;
			}
			if(this.city.materials.computerChips < 1000000000) {
				this.city.materials.computerChips = 1000000000;
			}
			if(this.city.materials.cacao < 1000000000 && false) {
				this.city.materials.cacao = 1000000000;
			}
			if(this.city.materials.chocolate < 1000000000 && false) {
				this.city.materials.chocolate = 1000000000;
			}
			if(this.city.materials.knowledge < 10000000) {
				this.city.materials.knowledge = 10000000;
			}
		}
	}
	,enableUnlimitedResources: function() {
		if(this.unlimitedResources) {
			return;
		}
		this.unlimitedResources = true;
		this.everPlayedWithUnlimitedResources = true;
		var _g = this.city.materials;
		_g.set_food(_g.food + 10000000);
		this.city.materials.wood += 10000000;
		this.city.materials.stone += 10000000;
		this.city.materials.machineParts += 10000000;
		this.city.materials.magic += 10000000;
		this.city.materials.refinedMetal += 10000000;
		this.city.materials.computerChips += 10000000;
		this.city.materials.knowledge += 10000000;
	}
	,disableUnlimitedResources: function() {
		if(!this.unlimitedResources) {
			return;
		}
		this.unlimitedResources = false;
		var _g = this.city.materials;
		_g.set_food(_g.food - 10000000);
		if(this.city.materials.food < 0) {
			this.city.materials.set_food(0);
		}
		this.city.materials.wood -= 10000000;
		if(this.city.materials.wood < 0) {
			this.city.materials.wood = 0;
		}
		this.city.materials.stone -= 10000000;
		if(this.city.materials.stone < 0) {
			this.city.materials.stone = 0;
		}
		this.city.materials.machineParts -= 10000000;
		if(this.city.materials.machineParts < 0) {
			this.city.materials.machineParts = 0;
		}
		this.city.materials.magic -= 10000000;
		if(this.city.materials.magic < 0) {
			this.city.materials.magic = 0;
		}
		this.city.materials.refinedMetal -= 10000000;
		if(this.city.materials.refinedMetal < 0) {
			this.city.materials.refinedMetal = 0;
		}
		this.city.materials.computerChips -= 10000000;
		if(this.city.materials.computerChips < 0) {
			this.city.materials.computerChips = 0;
		}
		this.city.materials.knowledge -= 10000000;
		if(this.city.materials.knowledge < 0) {
			this.city.materials.knowledge = 0;
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(progress_SandboxHelper.saveDefinition);
		}
		var value = this.unlimitedResources ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.everPlayedWithUnlimitedResources ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["unlimitedResources"] != null ? loadMap.existsReserved("unlimitedResources") : loadMap.h.hasOwnProperty("unlimitedResources")) {
			this.unlimitedResources = __map_reserved["unlimitedResources"] != null ? loadMap.getReserved("unlimitedResources") : loadMap.h["unlimitedResources"];
		}
		if(__map_reserved["everPlayedWithUnlimitedResources"] != null ? loadMap.existsReserved("everPlayedWithUnlimitedResources") : loadMap.h.hasOwnProperty("everPlayedWithUnlimitedResources")) {
			this.everPlayedWithUnlimitedResources = __map_reserved["everPlayedWithUnlimitedResources"] != null ? loadMap.getReserved("everPlayedWithUnlimitedResources") : loadMap.h["everPlayedWithUnlimitedResources"];
		}
	}
	,__class__: progress_SandboxHelper
};
var progress_ScriptedStoryPart = function(city,story) {
	this.city = city;
	this.simulation = city.simulation;
	this.story = story;
};
$hxClasses["progress.ScriptedStoryPart"] = progress_ScriptedStoryPart;
progress_ScriptedStoryPart.__name__ = ["progress","ScriptedStoryPart"];
progress_ScriptedStoryPart.prototype = {
	update: function(timeMod) {
	}
	,initialize: function($with) {
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(progress_ScriptedStoryPart.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: progress_ScriptedStoryPart
};
var progress_Story = function(city,storyName) {
	if(storyName == null) {
		storyName = "theLostShip";
	}
	this.hiddenBoost = false;
	this.disableDestroy = false;
	this.disableDying = false;
	this.city = city;
	var _this = Resources.storiesInfo;
	this.storyInfo = __map_reserved[storyName] != null ? _this.getReserved(storyName) : _this.h[storyName];
	this.storyName = storyName;
	this.plannings = [];
	this.scriptedParts = [];
};
$hxClasses["progress.Story"] = progress_Story;
progress_Story.__name__ = ["progress","Story"];
progress_Story.prototype = {
	start: function() {
		this.city.materials.add(Materials.fromStoryMaterials(this.storyInfo.initialMaterials));
		if(this.storyInfo.lockPermanents != null) {
			var _g = 0;
			var _g1 = this.storyInfo.lockPermanents;
			while(_g < _g1.length) {
				var pm = _g1[_g];
				++_g;
				this.city.progress.unlocks.lock(Type.resolveClass("buildings." + pm));
			}
		}
		if(this.storyInfo.lockAllPermanents == true) {
			this.city.progress.unlocks.unlockedDecorationTab = false;
			this.city.progress.unlocks.unlockedBuildingModeButton = false;
			this.city.progress.unlocks.unlockedManagementOptions = false;
			var _g2 = 0;
			var _g11 = this.city.progress.resources.buildingInfoArray;
			while(_g2 < _g11.length) {
				var pm1 = _g11[_g2];
				++_g2;
				this.city.progress.unlocks.lock(Type.resolveClass("buildings." + pm1.className));
			}
		}
		if(this.storyInfo.startGoal != "") {
			this.startGoal(this.findGoal(this.storyInfo.startGoal));
		}
		if(this.storyInfo.viewYFromBottom != null) {
			this.city.fixViewBottom(this.storyInfo.viewYFromBottom);
			this.city.resize();
			this.city.fixViewBottom(null);
		}
		if(this.city.game.isMobile && this.storyInfo.mobileViewStartX != null) {
			this.city.viewPos.x = this.storyInfo.mobileViewStartX;
			this.city.resize();
		}
	}
	,update: function(timeMod) {
		if(this.city.displayOnly && this.storyInfo.viewYFromBottom != null) {
			this.city.fixViewBottom(this.storyInfo.viewYFromBottom);
			this.city.resize();
			this.city.fixViewBottom(null);
		}
		if(this.currentGoal != null && this.city.gui.windowRelatedTo != this) {
			if(this.goalComplete(this.currentGoal)) {
				Analytics.sendEvent("story","goal_complete",null,this.storyName + "-" + this.currentGoal.name);
				if(this.currentGoal.name != this.storyInfo.startGoal) {
					if(5 == 6) {
						if(this.currentGoal.name == "Win") {
							PokiSDK.happyTime(1);
						} else {
							PokiSDK.happyTime(0.3);
						}
					}
				}
				if(this.currentGoal.nextGoal != "") {
					this.startGoal(this.findGoal(this.currentGoal.nextGoal));
				} else {
					this.currentGoal = null;
				}
			}
		}
		var i = this.plannings.length;
		while(--i >= 0) {
			var planning = this.plannings[i];
			if(planning.plan.length > planning.nextEventToHandle) {
				var nextPlanItem = planning.plan[planning.nextEventToHandle];
				if(planning.timeStart + nextPlanItem.time < this.city.simulation.time.timeSinceStart / 60) {
					this.executePlannedEvent(nextPlanItem);
					planning.nextEventToHandle += 1;
				}
			}
			if(planning.plan.length <= planning.nextEventToHandle) {
				this.plannings.splice(i,1);
			}
		}
		var i1 = this.scriptedParts.length;
		while(--i1 >= 0) this.scriptedParts[i1].update(timeMod);
	}
	,executePlannedEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "ScriptedStoryPart":
			var scriptedStoryPartEvent = event;
			var newSSP = Type.createInstance(Type.resolveClass("progress.scriptedStoryParts." + scriptedStoryPartEvent.className),[this.city,this]);
			newSSP.initialize(scriptedStoryPartEvent);
			this.scriptedParts.push(newSSP);
			break;
		case "SpawnCitizens":
			var spawnCitizensEvent = event;
			this.spawnCitizens(this.city.worlds[spawnCitizensEvent.world],spawnCitizensEvent);
			break;
		case "SpawnCitizensFlyingSaucer":
			var spawnCitizensEvent1 = event;
			this.city.simulation.citizenSpawners.push(new simulation_SpawnFlyingSaucer(this.city.simulation,this.city.farForegroundStage,this.city.worlds[spawnCitizensEvent1.world],spawnCitizensEvent1,spawnCitizensEvent1.toXIndex));
			break;
		}
	}
	,getDesiredGoalHighlights: function() {
		if(this.currentGoal == null) {
			return [];
		}
		var highlights = [];
		var _g = 0;
		var _g1 = this.currentGoal.subGoals;
		while(_g < _g1.length) {
			var subGoal = _g1[_g];
			++_g;
			if(!this.subGoalComplete(subGoal)) {
				var _g2 = subGoal.type;
				switch(_g2) {
				case "BuildPermanents":
					var buildPermanentsGoal = subGoal;
					var className = buildPermanentsGoal.permanentToBuildClass;
					if(!StringTools.startsWith(className,"buildings.") && !StringTools.startsWith(className,"worldResources.")) {
						className = "buildings." + className;
					}
					highlights.push(Type.resolveClass(className));
					break;
				case "PerformBuildingUpgrades":
					var performBuildingUpgradesGoal = subGoal;
					var className1 = performBuildingUpgradesGoal.upgradeClass;
					if(!StringTools.startsWith(className1,"buildingUpgrades.")) {
						className1 = "buildingUpgrades." + className1;
					}
					highlights.push(Type.resolveClass(className1));
					break;
				}
			}
		}
		return highlights;
	}
	,goalComplete: function(goal) {
		var allComplete = true;
		var _g = 0;
		var _g1 = goal.subGoals;
		while(_g < _g1.length) {
			var subGoal = _g1[_g];
			++_g;
			if(!this.subGoalComplete(subGoal)) {
				allComplete = false;
			}
		}
		return allComplete;
	}
	,subGoalComplete: function(goal) {
		var _g = goal.type;
		switch(_g) {
		case "BuildPermanents":
			var buildPermanentsGoal = goal;
			var className = buildPermanentsGoal.permanentToBuildClass;
			if(!StringTools.startsWith(className,"buildings.") && !StringTools.startsWith(className,"worldResources.")) {
				className = "buildings." + className;
			}
			var countFunc = buildPermanentsGoal.needsExactClass != null && buildPermanentsGoal.needsExactClass ? function(pm) {
				return Type.getClassName(pm == null ? null : js_Boot.getClass(pm)) == className;
			} : function(pm1) {
				return pm1["is"](Type.resolveClass(className));
			};
			if(buildPermanentsGoal.onWorld != null) {
				var world = this.city.worlds[buildPermanentsGoal.onWorld];
				var oldCountFunc = countFunc;
				countFunc = function(pm2) {
					if(oldCountFunc(pm2)) {
						return pm2.world == world;
					} else {
						return false;
					}
				};
			} else if(buildPermanentsGoal.notOnWorld != null) {
				var world1 = this.city.worlds[buildPermanentsGoal.notOnWorld];
				var oldCountFunc1 = countFunc;
				countFunc = function(pm3) {
					if(oldCountFunc1(pm3)) {
						return pm3.world != world1;
					} else {
						return false;
					}
				};
			}
			return Lambda.count(this.city.permanents,countFunc) >= buildPermanentsGoal.amount;
		case "CompleteHackerMissions":
			var hackerMissionsGoal = goal;
			var _g1 = 0;
			var _g11 = this.city.permanents;
			while(_g1 < _g11.length) {
				var pm4 = _g11[_g1];
				++_g1;
				if(pm4["is"](buildings_HackerHQ)) {
					var hackerHQ = pm4;
					return hackerHQ.currentMission >= hackerMissionsGoal.amount;
				}
			}
			return false;
		case "ExploreAlienRuins":
			var _g2 = 0;
			var _g12 = this.city.worlds;
			while(_g2 < _g12.length) {
				var world2 = _g12[_g2];
				++_g2;
				var _g21 = 0;
				var _g3 = world2.permanents;
				while(_g21 < _g3.length) {
					var pm5 = _g3[_g21];
					++_g21;
					if(pm5.length >= 1 && pm5[0] != null && pm5[0]["is"](worldResources_ComputerAlienRuins)) {
						var car = pm5[0];
						return car.explored >= 99.99;
					}
				}
			}
			return false;
		case "GatherMaterials":
			var gatherMaterialsGoal = goal;
			if(gatherMaterialsGoal.materials.food != null) {
				if(this.city.materials.food < gatherMaterialsGoal.materials.food) {
					return false;
				}
			}
			if(gatherMaterialsGoal.materials.wood != null) {
				if(this.city.materials.wood < gatherMaterialsGoal.materials.wood) {
					return false;
				}
			}
			if(gatherMaterialsGoal.materials.stone != null) {
				if(this.city.materials.stone < gatherMaterialsGoal.materials.stone) {
					return false;
				}
			}
			if(gatherMaterialsGoal.materials.machineParts != null) {
				if(this.city.materials.machineParts < gatherMaterialsGoal.materials.machineParts) {
					return false;
				}
			}
			if(gatherMaterialsGoal.materials.magic != null) {
				if(this.city.materials.magic < gatherMaterialsGoal.materials.magic) {
					return false;
				}
			}
			if(gatherMaterialsGoal.materials.refinedMetal != null) {
				if(this.city.materials.refinedMetal < gatherMaterialsGoal.materials.refinedMetal) {
					return false;
				}
			}
			if(gatherMaterialsGoal.materials.computerChips != null) {
				if(this.city.materials.computerChips < gatherMaterialsGoal.materials.computerChips) {
					return false;
				}
			}
			if(gatherMaterialsGoal.materials.cacao != null) {
				if(this.city.materials.cacao < gatherMaterialsGoal.materials.cacao) {
					return false;
				}
			}
			if(gatherMaterialsGoal.materials.chocolate != null) {
				if(this.city.materials.chocolate < gatherMaterialsGoal.materials.chocolate) {
					return false;
				}
			}
			if(gatherMaterialsGoal.materials.knowledge != null) {
				if(this.city.materials.knowledge < gatherMaterialsGoal.materials.knowledge) {
					return false;
				}
			}
			return true;
		case "HousingCapacity":
			var houseCapGoal = goal;
			return this.city.simulation.stats.houseCapacity >= houseCapGoal.amount;
		case "MinimumHappiness":
			var happinessGoal = goal;
			return this.city.simulation.happiness.happiness >= happinessGoal.happiness;
		case "PerformBuildingUpgrades":
			var performBuildingUpgradesGoal = goal;
			var className1 = performBuildingUpgradesGoal.upgradeClass;
			if(!StringTools.startsWith(className1,"buildingUpgrades.")) {
				className1 = "buildingUpgrades." + className1;
			}
			var classType = Type.resolveClass(className1);
			var total = Lambda.count(this.city.permanents,function(pm6) {
				if(pm6.isBuilding) {
					return common_ArrayExtensions.any(pm6.upgrades,function(up) {
						return js_Boot.__instanceof(up,classType);
					});
				} else {
					return false;
				}
			});
			return total >= performBuildingUpgradesGoal.amount;
		case "WaitForDecryption":
			var _g4 = 0;
			var _g13 = this.city.permanents;
			while(_g4 < _g13.length) {
				var pm7 = _g13[_g4];
				++_g4;
				if(pm7["is"](buildings_AlienDecryptor)) {
					var ad = pm7;
					return ad.timeWorking >= 1440;
				}
			}
			return false;
		}
		return false;
	}
	,findGoal: function(goalName) {
		return Lambda.find(this.storyInfo.goals,function(g) {
			return g.name == goalName;
		});
	}
	,startGoal: function(goal) {
		var _gthis = this;
		this.currentGoal = goal;
		if(goal.flags != null) {
			this.handleFlagsChanges(goal.flags);
		}
		this.showGoalText();
		if(goal.unlocks != null) {
			var _g = 0;
			var _g1 = goal.unlocks;
			while(_g < _g1.length) {
				var className = _g1[_g];
				++_g;
				if(className == "decorations") {
					this.city.progress.unlocks.unlockedDecorationTab = true;
				} else if(className == "buildingModes") {
					this.city.progress.unlocks.unlockedBuildingModeButton = true;
				} else if(className == "managementOptions") {
					this.city.progress.unlocks.unlockedManagementOptions = true;
				} else {
					this.city.progress.unlocks.unlock(Type.resolveClass("buildings." + className));
				}
			}
		}
		if(goal.planning != null) {
			this.plannings.push({ goalName : goal.name, plan : goal.planning, nextEventToHandle : 0, timeStart : this.city.simulation.time.timeSinceStart / 60});
		}
		if(goal.name == "Win") {
			this.city.game.metaGame.winScenario(this.storyName,this.city.simulation.time.timeSinceStart | 0);
		}
		this.city.gui.clearTutorial();
		this.city.postCreateBuilder = null;
		if(goal.showTutorial != null) {
			if(goal.showTutorial == 1) {
				this.city.gui.showTutorialArrows1();
				this.city.postCreateBuilder = function() {
					_gthis.city.builder.fixBuilder(_gthis.city.worlds[0],2);
				};
			} else if(goal.showTutorial == 2) {
				var closeWarning = this.city.gui.showWindowCloseWarning(120);
				this.city.gui.showTutorialArrows2(closeWarning);
			} else if(goal.showTutorial == 101) {
				var closeWarning1 = this.city.gui.showWindowCloseWarning(120);
				this.city.gui.showTutorialArrowsBuildStoneMine(closeWarning1);
			} else if(goal.showTutorial == 3) {
				this.city.gui.showTutorialArrows3();
			} else if(goal.showTutorial == 4) {
				this.city.gui.showTutorialArrows4();
			}
		}
	}
	,showGoalText: function(tldr) {
		if(tldr == null) {
			tldr = false;
		}
		var _gthis = this;
		var goal = this.currentGoal;
		this.city.gui.createWindow(this);
		if(goal.title != null && goal.title != "") {
			this.city.gui.windowAddTitleText(goal.title);
		}
		var text = "";
		var goalText = goal.text;
		if(Config.isLimitedDemo && goal.flags != null && goal.flags.demoText != null) {
			goalText += goal.flags.demoText;
		}
		var commandStart = goalText.indexOf("[");
		var isAddingText = true;
		var goalComplete = this.goalComplete(goal);
		while(commandStart != -1) {
			if(isAddingText) {
				text += HxOverrides.substr(goalText,0,commandStart);
			}
			goalText = HxOverrides.substr(goalText,commandStart + 1,null);
			var commandEnd = goalText.indexOf("]");
			var command = HxOverrides.substr(goalText,0,commandEnd);
			goalText = HxOverrides.substr(goalText,commandEnd + 1,null);
			if(command == "n") {
				isAddingText = !goalComplete;
			} else if(command == "c") {
				isAddingText = goalComplete;
			} else if(command == "mobi") {
				isAddingText = this.city.game.isMobile;
			} else if(command == "nonmobi") {
				isAddingText = !this.city.game.isMobile;
			} else if(command == "/") {
				isAddingText = true;
			} else if(command == "d") {
				var _this = this.city.simulation.time;
				text += "" + (1 + ((_this.timeSinceStart | 0) / 1440 | 0) == 1 ? "one day" : "" + (1 + ((_this.timeSinceStart | 0) / 1440 | 0)) + " days") + ", " + (((_this.timeSinceStart | 0) / 60 | 0) % 24 == 1 ? "one hour" : "" + ((_this.timeSinceStart | 0) / 60 | 0) % 24 + " hours") + ", " + ("and " + ((_this.timeSinceStart | 0) % 60 == 1 ? "one minute" : (_this.timeSinceStart | 0) % 60 + " minutes"));
			}
			commandStart = goalText.indexOf("[");
		}
		if(isAddingText) {
			text += goalText;
		}
		this.city.gui.windowAddInfoText(tldr ? goal.tldr : text);
		this.city.gui.pauseForWindow();
		var hasTldrButton = goal.tldr != null;
		var bottomButtonsList = [];
		if(hasTldrButton) {
			bottomButtonsList.push({ text : tldr ? "Too short?" : "tl;dr?", action : function() {
				_gthis.showGoalText(!tldr);
			}});
		}
		if(goal.name == "Win") {
			if(Config.isLimitedDemo) {
				bottomButtonsList.push({ text : "Wishlist the Full Version Now!", action : function() {
					greenworks.activateGameOverlayToWebPage("https://store.steampowered.com/app/1180130/The_Final_Earth_2/");
				}});
			}
			if(goal.nextStory != null && goal.nextStory != "") {
				bottomButtonsList.push({ text : "Next Scenario", action : function() {
					var f = ($_=_gthis.city.game,$bind($_,$_.newCity));
					var a1 = goal.nextStory;
					var tmp = function(a2) {
						f(a1,a2);
						return;
					};
					gui_SaveLoadWindows.createSaveWindow(_gthis.city.game,_gthis.city.gui,"Which save slot would you like to use?",tmp);
					if(5 == 6 && Config.hadFullStepWithInput) {
						common_AdHelper.showNonRewardedInterstitialIfAllowed();
					}
				}});
			} else {
				var a11 = this.city.game;
				var a21 = this.city.gui;
				bottomButtonsList.push({ text : "New Game", action : function() {
					gui_MainMenuGUI.createNewScenarioWindow(a11,a21);
				}});
			}
		}
		var bottomButtons = this.city.gui.windowAddBottomButtons(bottomButtonsList);
		if(hasTldrButton && !tldr && bottomButtons.length > 0) {
			bottomButtons[0].onHover = function() {
				_gthis.city.gui.tooltip.setText(_gthis,"Want a shorter version?");
			};
		}
	}
	,makeWorlds: function(game,cityStage,cityMidStage,cityBgStage) {
		var _g = 0;
		var _g1 = this.storyInfo.worlds;
		while(_g < _g1.length) {
			var worldToMake = _g1[_g];
			++_g;
			var newWorld = new World(game,this.city,cityStage,cityMidStage,cityBgStage,common_Rectangle.fromStoryRect(worldToMake.rect),worldToMake.seed);
			this.city.worlds.push(newWorld);
			var _g2 = 0;
			var _g3 = worldToMake.worldResources;
			while(_g2 < _g3.length) {
				var worldResourceToMake = _g3[_g2];
				++_g2;
				newWorld.createWorldResource(Type.resolveClass("worldResources." + worldResourceToMake.className),worldResourceToMake.position);
			}
			var _g21 = 0;
			var _g31 = worldToMake.buildingStacks;
			while(_g21 < _g31.length) {
				var buildingToMake = _g31[_g21];
				++_g21;
				var _g4 = 0;
				var _g5 = buildingToMake.classNames;
				while(_g4 < _g5.length) {
					var className = _g5[_g4];
					++_g4;
					newWorld.build(Type.resolveClass("buildings." + className),buildingToMake.position);
				}
			}
			var _g22 = 0;
			var _g32 = worldToMake.citizens;
			while(_g22 < _g32.length) {
				var spawn = _g32[_g22];
				++_g22;
				this.spawnCitizens(newWorld,spawn);
			}
			if(worldToMake.unbuildableAliens != null && worldToMake.unbuildableAliens) {
				newWorld.setUnbuildableAliens();
			}
		}
		if(this.storyInfo.generatorScripts != null) {
			var _g6 = 0;
			var _g11 = this.storyInfo.generatorScripts;
			while(_g6 < _g11.length) {
				var gs = _g11[_g6];
				++_g6;
				progress_GenerateWorld.doGenerate(gs.name,gs.args,this.city,this.storyInfo,cityStage,cityMidStage,cityBgStage);
			}
		}
	}
	,spawnCitizens: function(onWorld,spawn) {
		var _g1 = 0;
		var _g = spawn.amount;
		while(_g1 < _g) {
			var i = _g1++;
			var age = spawn.ageRangeMin;
			if(spawn.ageRangeMin != spawn.ageRangeMax) {
				age = random_Random.getFloat(spawn.ageRangeMin,spawn.ageRangeMax);
			}
			var startX = null;
			if(spawn.minX != null && spawn.maxX != null) {
				if(spawn.minX == spawn.maxX) {
					startX = spawn.minX;
				} else {
					startX = random_Random.getInt(spawn.minX,spawn.maxX);
				}
			}
			this.city.simulation.createCitizen(onWorld,age,null,startX);
		}
	}
	,handleFlagsChanges: function(flags) {
		if(flags.disableDying != null) {
			this.disableDying = flags.disableDying;
		}
		if(flags.disableDestroy != null) {
			this.disableDestroy = flags.disableDestroy;
		}
		if(flags.happinessEnthusiasmLevel != null) {
			this.city.simulation.happiness.happinessEnthusiasmLevel = flags.happinessEnthusiasmLevel;
		}
		if(flags.hiddenBoost != null) {
			this.hiddenBoost = flags.hiddenBoost;
		}
		if(flags.disableRewardedAd != null && this.city.simulation.boostManager != null) {
			this.city.simulation.boostManager.disableRewardedAd = flags.disableRewardedAd;
		}
		if(flags.setBuildableAliens != null) {
			var _g = 0;
			var _g1 = this.city.worlds;
			while(_g < _g1.length) {
				var world = _g1[_g];
				++_g;
				world.makeBuildableAliens();
			}
		}
	}
	,save: function(queue) {
		this.saveBasics(queue);
		queue.addString(this.currentGoal == null ? "" : this.currentGoal.name);
		var value = this.plannings.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var _g = 0;
		var _g1 = this.plannings;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			queue.addString(p.goalName);
			var value1 = p.nextEventToHandle;
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes1 = queue.bytes;
				queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes.blit(0,oldBytes1,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value1);
			queue.size += 4;
			var value2 = p.timeStart;
			if(queue.size + 8 > queue.bytes.length) {
				var oldBytes2 = queue.bytes;
				queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
				queue.bytes.blit(0,oldBytes2,0,queue.size);
			}
			queue.bytes.setDouble(queue.size,value2);
			queue.size += 8;
		}
		var value3 = this.scriptedParts.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value3);
		queue.size += 4;
		var _g2 = 0;
		var _g11 = this.scriptedParts;
		while(_g2 < _g11.length) {
			var p1 = _g11[_g2];
			++_g2;
			queue.addString(Type.getClassName(p1 == null ? null : js_Boot.getClass(p1)));
			p1.save(queue);
		}
	}
	,load: function(queue) {
		this.loadBasics(queue);
		var key = this.storyName;
		var _this = Resources.storiesInfo;
		this.storyInfo = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var currentGoalName;
		var byteToRead = queue.bytes.b[queue.readStart];
		queue.readStart += 1;
		if(byteToRead == 1) {
			var intToRead = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var readPos = intToRead;
			var stringLength = queue.bytes.getInt32(readPos);
			currentGoalName = queue.bytes.getString(readPos + 4,stringLength);
		} else {
			var intToRead1 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var len = intToRead1;
			var str = queue.bytes.getString(queue.readStart,len);
			queue.readStart += len;
			currentGoalName = str;
		}
		this.currentGoal = currentGoalName == "" ? null : this.findGoal(currentGoalName);
		var intToRead2 = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var planningAmount = intToRead2;
		var _g1 = 0;
		var _g = planningAmount;
		while(_g1 < _g) {
			var i = _g1++;
			var goalName;
			var byteToRead1 = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead1 == 1) {
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos1 = intToRead3;
				var stringLength1 = queue.bytes.getInt32(readPos1);
				goalName = queue.bytes.getString(readPos1 + 4,stringLength1);
			} else {
				var intToRead4 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len1 = intToRead4;
				var str1 = queue.bytes.getString(queue.readStart,len1);
				queue.readStart += len1;
				goalName = str1;
			}
			var intToRead5 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var nextEventToHandle = intToRead5;
			var floatToRead = queue.bytes.getDouble(queue.readStart);
			queue.readStart += 8;
			var timeSinceStart = floatToRead;
			this.plannings.push({ goalName : goalName, plan : this.findGoal(goalName).planning, nextEventToHandle : nextEventToHandle, timeStart : timeSinceStart});
		}
		var intToRead6 = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var scriptedPartsLen = intToRead6;
		var _g11 = 0;
		var _g2 = scriptedPartsLen;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var p;
			var byteToRead2 = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead2 == 1) {
				var intToRead7 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos2 = intToRead7;
				var stringLength2 = queue.bytes.getInt32(readPos2);
				p = queue.bytes.getString(readPos2 + 4,stringLength2);
			} else {
				var intToRead8 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len2 = intToRead8;
				var str2 = queue.bytes.getString(queue.readStart,len2);
				queue.readStart += len2;
				p = str2;
			}
			var p1 = Type.createInstance(Type.resolveClass(p),[this.city,this]);
			p1.load(queue);
			this.scriptedParts.push(p1);
		}
		if(currentGoalName == "" || currentGoalName == "Win") {
			if(this.storyName == "theLostShip") {
				common_KongTools.setStat("binaryWontheLostShip",1);
			} else if(this.storyName == "multipleWorlds") {
				common_KongTools.setStat("binaryWontheLostShip",1);
				common_KongTools.setStat("binaryWonmultipleWorlds",1);
			}
		}
	}
	,canHaveUnlimitedResources: function() {
		return this.currentGoal == null;
	}
	,saveBasics: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(progress_Story.saveDefinition);
		}
		queue.addString(this.storyName);
		var value = this.disableDying ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.disableDestroy ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var value2 = this.hiddenBoost ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
	}
	,loadBasics: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["storyName"] != null ? loadMap.existsReserved("storyName") : loadMap.h.hasOwnProperty("storyName")) {
			this.storyName = __map_reserved["storyName"] != null ? loadMap.getReserved("storyName") : loadMap.h["storyName"];
		}
		if(__map_reserved["disableDying"] != null ? loadMap.existsReserved("disableDying") : loadMap.h.hasOwnProperty("disableDying")) {
			this.disableDying = __map_reserved["disableDying"] != null ? loadMap.getReserved("disableDying") : loadMap.h["disableDying"];
		}
		if(__map_reserved["disableDestroy"] != null ? loadMap.existsReserved("disableDestroy") : loadMap.h.hasOwnProperty("disableDestroy")) {
			this.disableDestroy = __map_reserved["disableDestroy"] != null ? loadMap.getReserved("disableDestroy") : loadMap.h["disableDestroy"];
		}
		if(__map_reserved["hiddenBoost"] != null ? loadMap.existsReserved("hiddenBoost") : loadMap.h.hasOwnProperty("hiddenBoost")) {
			this.hiddenBoost = __map_reserved["hiddenBoost"] != null ? loadMap.getReserved("hiddenBoost") : loadMap.h["hiddenBoost"];
		}
	}
	,__class__: progress_Story
};
var progress_StoryLoader = function(storyName,onSuccess,onFail) {
	var fileName = "stories/" + storyName + ".json";
	var loader = new PIXI.loaders.Loader();
	loader.add(fileName);
	var hasError = false;
	loader["use"](function(res,next) {
		if(res.error) {
			console.log(res.error);
			if(!hasError) {
				onFail();
				hasError = true;
			}
			return;
		}
		var v = res.data;
		var _this = Resources.storiesInfo;
		if(__map_reserved[storyName] != null) {
			_this.setReserved(storyName,v);
		} else {
			_this.h[storyName] = v;
		}
		next();
	});
	loader.load(onSuccess);
};
$hxClasses["progress.StoryLoader"] = progress_StoryLoader;
progress_StoryLoader.__name__ = ["progress","StoryLoader"];
progress_StoryLoader.shouldShowUnlockAllStoriesButton = function(game) {
	var stories = Resources.allStoriesInfo;
	var _g = 0;
	while(_g < stories.length) {
		var story = stories[_g];
		++_g;
		if(story.unlockedWithAll && !progress_StoryLoader.hasCompletedRequirements(game,story)) {
			return true;
		}
	}
	return false;
};
progress_StoryLoader.hasCompletedRequirements = function(game,story) {
	if(story.requirements == null) {
		return true;
	}
	if(story.unlockedWithAll && game.metaGame.unlockedAll) {
		return true;
	}
	return common_ArrayExtensions.all(story.requirements,function(r) {
		if(!(r == "notDemo" && !Config.isLimitedDemo)) {
			return game.metaGame.hasWonScenario(r);
		} else {
			return true;
		}
	});
};
progress_StoryLoader.prototype = {
	__class__: progress_StoryLoader
};
var progress_UnlockState = $hxClasses["progress.UnlockState"] = { __ename__ : ["progress","UnlockState"], __constructs__ : ["Locked","Unlocked","Createable","Researched"] };
progress_UnlockState.Locked = ["Locked",0];
progress_UnlockState.Locked.toString = $estr;
progress_UnlockState.Locked.__enum__ = progress_UnlockState;
progress_UnlockState.Unlocked = ["Unlocked",1];
progress_UnlockState.Unlocked.toString = $estr;
progress_UnlockState.Unlocked.__enum__ = progress_UnlockState;
progress_UnlockState.Createable = ["Createable",2];
progress_UnlockState.Createable.toString = $estr;
progress_UnlockState.Createable.__enum__ = progress_UnlockState;
progress_UnlockState.Researched = ["Researched",3];
progress_UnlockState.Researched.toString = $estr;
progress_UnlockState.Researched.__enum__ = progress_UnlockState;
var progress_Unlocks = function(city) {
	this.checkBuildRelatedUnlocksIn = 0;
	this.numberOfModernArtMuseumArtworksUnlocked = 4;
	this.unlockedManagementOptions = true;
	this.unlockedBuildingModeButton = true;
	this.unlockedDecorationTab = true;
	this.city = city;
	this.unlockState = new haxe_ds_StringMap();
	this.shouldNotifyForUnlock = new haxe_ds_StringMap();
	this.shouldNotifyForCategoryUnlock = new haxe_ds_StringMap();
	this.explicityLocked = [];
	var _this = city.progress.resources.buildingInfo;
	var building = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(building.hasNext()) {
		var building1 = building.next();
		var k = "buildings." + building1.className;
		var v = building1.unlockedByDefault && building1.knowledge == 0 ? progress_UnlockState.Researched : building1.unlockedByDefault ? progress_UnlockState.Unlocked : progress_UnlockState.Locked;
		var _this1 = this.unlockState;
		if(__map_reserved[k] != null) {
			_this1.setReserved(k,v);
		} else {
			_this1.h[k] = v;
		}
	}
	var _this2 = Resources.buildingUpgradesInfo;
	var buildingUpgrade = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
	while(buildingUpgrade.hasNext()) {
		var buildingUpgrade1 = buildingUpgrade.next();
		var upgradeDefaultUnlocked = buildingUpgrade1.unlockedByDefault == null || buildingUpgrade1.unlockedByDefault;
		var k1 = "buildingUpgrades." + buildingUpgrade1.className;
		var v1 = upgradeDefaultUnlocked && buildingUpgrade1.knowledge == 0 ? progress_UnlockState.Researched : upgradeDefaultUnlocked ? progress_UnlockState.Unlocked : progress_UnlockState.Locked;
		var _this3 = this.unlockState;
		if(__map_reserved[k1] != null) {
			_this3.setReserved(k1,v1);
		} else {
			_this3.h[k1] = v1;
		}
	}
	var _this4 = Resources.cityUpgradesInfo;
	var cityUpgrade = new haxe_ds__$StringMap_StringMapIterator(_this4,_this4.arrayKeys());
	while(cityUpgrade.hasNext()) {
		var cityUpgrade1 = cityUpgrade.next();
		var upgradeDefaultUnlocked1 = cityUpgrade1.unlockedByDefault == null || cityUpgrade1.unlockedByDefault;
		var k2 = "cityUpgrades." + cityUpgrade1.className;
		var v2 = upgradeDefaultUnlocked1 ? progress_UnlockState.Unlocked : progress_UnlockState.Locked;
		var _this5 = this.unlockState;
		if(__map_reserved[k2] != null) {
			_this5.setReserved(k2,v2);
		} else {
			_this5.h[k2] = v2;
		}
	}
};
$hxClasses["progress.Unlocks"] = progress_Unlocks;
progress_Unlocks.__name__ = ["progress","Unlocks"];
progress_Unlocks.prototype = {
	postLoad: function() {
		var _this = this.city.progress.resources.buildingInfo;
		var building = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(building.hasNext()) {
			var building1 = building.next();
			var key = "buildings." + building1.className;
			var needToUnlock = building1.unlockedByDefault && !common_ArrayExtensions.contains(this.explicityLocked,key);
			if(needToUnlock && building1.knowledge == 0) {
				var v = progress_UnlockState.Researched;
				var _this1 = this.unlockState;
				if(__map_reserved[key] != null) {
					_this1.setReserved(key,v);
				} else {
					_this1.h[key] = v;
				}
			} else {
				var tmp;
				if(needToUnlock) {
					var _this2 = this.unlockState;
					if((__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]) != null) {
						var _this3 = this.unlockState;
						tmp = (__map_reserved[key] != null ? _this3.getReserved(key) : _this3.h[key]) == progress_UnlockState.Locked;
					} else {
						tmp = true;
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					var v1 = progress_UnlockState.Unlocked;
					var _this4 = this.unlockState;
					if(__map_reserved[key] != null) {
						_this4.setReserved(key,v1);
					} else {
						_this4.h[key] = v1;
					}
				} else {
					var _this5 = this.unlockState;
					if((__map_reserved[key] != null ? _this5.getReserved(key) : _this5.h[key]) == null) {
						var v2 = progress_UnlockState.Locked;
						var _this6 = this.unlockState;
						if(__map_reserved[key] != null) {
							_this6.setReserved(key,v2);
						} else {
							_this6.h[key] = v2;
						}
					}
				}
			}
		}
		var _this7 = Resources.buildingUpgradesInfo;
		var buildingUpgrade = new haxe_ds__$StringMap_StringMapIterator(_this7,_this7.arrayKeys());
		while(buildingUpgrade.hasNext()) {
			var buildingUpgrade1 = buildingUpgrade.next();
			var key1 = "buildingUpgrades." + buildingUpgrade1.className;
			var upgradeDefaultUnlocked = (buildingUpgrade1.unlockedByDefault == null || buildingUpgrade1.unlockedByDefault) && !common_ArrayExtensions.contains(this.explicityLocked,key1);
			if(upgradeDefaultUnlocked && buildingUpgrade1.knowledge == 0) {
				var v3 = progress_UnlockState.Researched;
				var _this8 = this.unlockState;
				if(__map_reserved[key1] != null) {
					_this8.setReserved(key1,v3);
				} else {
					_this8.h[key1] = v3;
				}
			} else {
				var tmp1;
				if(upgradeDefaultUnlocked) {
					var _this9 = this.unlockState;
					if((__map_reserved[key1] != null ? _this9.getReserved(key1) : _this9.h[key1]) != null) {
						var _this10 = this.unlockState;
						tmp1 = (__map_reserved[key1] != null ? _this10.getReserved(key1) : _this10.h[key1]) == progress_UnlockState.Locked;
					} else {
						tmp1 = true;
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					var v4 = progress_UnlockState.Unlocked;
					var _this11 = this.unlockState;
					if(__map_reserved[key1] != null) {
						_this11.setReserved(key1,v4);
					} else {
						_this11.h[key1] = v4;
					}
				} else {
					var _this12 = this.unlockState;
					if((__map_reserved[key1] != null ? _this12.getReserved(key1) : _this12.h[key1]) == null) {
						var v5 = progress_UnlockState.Locked;
						var _this13 = this.unlockState;
						if(__map_reserved[key1] != null) {
							_this13.setReserved(key1,v5);
						} else {
							_this13.h[key1] = v5;
						}
					}
				}
			}
		}
		var _this14 = Resources.cityUpgradesInfo;
		var cityUpgrade = new haxe_ds__$StringMap_StringMapIterator(_this14,_this14.arrayKeys());
		while(cityUpgrade.hasNext()) {
			var cityUpgrade1 = cityUpgrade.next();
			var key2 = "cityUpgrades." + cityUpgrade1.className;
			var upgradeDefaultUnlocked1 = cityUpgrade1.unlockedByDefault == null || cityUpgrade1.unlockedByDefault;
			var tmp2;
			if(upgradeDefaultUnlocked1) {
				var _this15 = this.unlockState;
				if((__map_reserved[key2] != null ? _this15.getReserved(key2) : _this15.h[key2]) != null) {
					var _this16 = this.unlockState;
					tmp2 = (__map_reserved[key2] != null ? _this16.getReserved(key2) : _this16.h[key2]) == progress_UnlockState.Locked;
				} else {
					tmp2 = true;
				}
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				var v6 = progress_UnlockState.Unlocked;
				var _this17 = this.unlockState;
				if(__map_reserved[key2] != null) {
					_this17.setReserved(key2,v6);
				} else {
					_this17.h[key2] = v6;
				}
			} else {
				var _this18 = this.unlockState;
				if((__map_reserved[key2] != null ? _this18.getReserved(key2) : _this18.h[key2]) == null) {
					var v7 = progress_UnlockState.Locked;
					var _this19 = this.unlockState;
					if(__map_reserved[key2] != null) {
						_this19.setReserved(key2,v7);
					} else {
						_this19.h[key2] = v7;
					}
				}
			}
		}
		this.city.permanentNumberCached = null;
		this.checkBuildRelatedUnlocks();
		this.city.gui.refreshCategoryBuildingsShown();
	}
	,lock: function(element) {
		var elementName = Type.getClassName(element);
		var v = progress_UnlockState.Locked;
		var _this = this.unlockState;
		if(__map_reserved[elementName] != null) {
			_this.setReserved(elementName,v);
		} else {
			_this.h[elementName] = v;
		}
		this.city.gui.refreshCategoryBuildingsShown();
		this.explicityLocked.push(elementName);
	}
	,unlock: function(element,dontReloadWindow) {
		if(dontReloadWindow == null) {
			dontReloadWindow = false;
		}
		var elementName = Type.getClassName(element);
		var tmp;
		var _this = this.unlockState;
		if((__map_reserved[elementName] != null ? _this.getReserved(elementName) : _this.h[elementName]) != null) {
			var _this1 = this.unlockState;
			tmp = (__map_reserved[elementName] != null ? _this1.getReserved(elementName) : _this1.h[elementName]) == progress_UnlockState.Locked;
		} else {
			tmp = true;
		}
		if(tmp) {
			var _this2 = this.city.progress.resources.buildingInfo;
			var elementInfo = __map_reserved[elementName] != null ? _this2.getReserved(elementName) : _this2.h[elementName];
			if(elementInfo == null) {
				var _this3 = Resources.buildingUpgradesInfo;
				if(__map_reserved[elementName] != null) {
					elementInfo = _this3.getReserved(elementName);
				} else {
					elementInfo = _this3.h[elementName];
				}
			}
			if(elementInfo == null) {
				var _this4 = Resources.cityUpgradesInfo;
				if(__map_reserved[elementName] != null) {
					elementInfo = _this4.getReserved(elementName);
				} else {
					elementInfo = _this4.h[elementName];
				}
			}
			var v = elementInfo.knowledge == 0 && elementInfo.showUnlockHint == null ? progress_UnlockState.Researched : progress_UnlockState.Unlocked;
			var _this5 = this.unlockState;
			if(__map_reserved[elementName] != null) {
				_this5.setReserved(elementName,v);
			} else {
				_this5.h[elementName] = v;
			}
			if(elementInfo.showUnlockHint == null) {
				this.notifyForUnlock(element);
			}
			this.city.gui.refreshCategoryBuildingsShown();
			if(!dontReloadWindow) {
				this.city.gui.reloadWindow();
			}
			this.city.permanentNumberCached = null;
			this.checkBuildRelatedUnlocks();
			return true;
		}
		return false;
	}
	,fullyUnlock: function(element) {
		var elementName = Type.getClassName(element);
		var _this = this.unlockState;
		if((__map_reserved[elementName] != null ? _this.getReserved(elementName) : _this.h[elementName]) == progress_UnlockState.Unlocked) {
			var v = progress_UnlockState.Createable;
			var _this1 = this.unlockState;
			if(__map_reserved[elementName] != null) {
				_this1.setReserved(elementName,v);
			} else {
				_this1.h[elementName] = v;
			}
			this.notifyForUnlock(element);
			this.city.gui.refreshCategoryBuildingsShown();
			this.city.gui.reloadWindow();
		}
	}
	,research: function(element) {
		var elementName = Type.getClassName(element);
		var _this = this.unlockState;
		var originalState = __map_reserved[elementName] != null ? _this.getReserved(elementName) : _this.h[elementName];
		var v = progress_UnlockState.Researched;
		var _this1 = this.unlockState;
		if(__map_reserved[elementName] != null) {
			_this1.setReserved(elementName,v);
		} else {
			_this1.h[elementName] = v;
		}
		if(originalState == progress_UnlockState.Locked) {
			this.city.gui.refreshCategoryBuildingsShown();
		}
		if(originalState != progress_UnlockState.Researched) {
			Analytics.sendEvent("research",elementName);
		}
	}
	,getUnlockState: function(element) {
		var elementName = Type.getClassName(element);
		var _this = this.unlockState;
		if(__map_reserved[elementName] != null) {
			return _this.getReserved(elementName);
		} else {
			return _this.h[elementName];
		}
	}
	,getShouldNotifyForUnlock: function(element) {
		var elementName = Type.getClassName(element);
		var _this = this.shouldNotifyForUnlock;
		var shouldNotifyForThis = __map_reserved[elementName] != null ? _this.getReserved(elementName) : _this.h[elementName];
		if(shouldNotifyForThis != null) {
			return shouldNotifyForThis;
		} else {
			return false;
		}
	}
	,notifyForUnlock: function(element) {
		var elementName = Type.getClassName(element);
		var _this = this.shouldNotifyForUnlock;
		if(__map_reserved[elementName] != null) {
			_this.setReserved(elementName,true);
		} else {
			_this.h[elementName] = true;
		}
		var _this1 = this.city.progress.resources.buildingInfo;
		var elementInfo = __map_reserved[elementName] != null ? _this1.getReserved(elementName) : _this1.h[elementName];
		if(elementInfo != null) {
			var k = elementInfo.category;
			var _this2 = this.shouldNotifyForCategoryUnlock;
			if(__map_reserved[k] != null) {
				_this2.setReserved(k,true);
			} else {
				_this2.h[k] = true;
			}
		}
	}
	,stopNotifyForUnlock: function(element) {
		var elementName = Type.getClassName(element);
		var _this = this.shouldNotifyForUnlock;
		if(__map_reserved[elementName] != null) {
			_this.setReserved(elementName,false);
		} else {
			_this.h[elementName] = false;
		}
	}
	,getShouldNotifyForCategoryUnlock: function(categoryName) {
		var _this = this.shouldNotifyForCategoryUnlock;
		if(__map_reserved[categoryName] != null) {
			return _this.getReserved(categoryName);
		} else {
			return _this.h[categoryName];
		}
	}
	,stopNotifyCategoryUnlock: function(categoryName) {
		var _this = this.shouldNotifyForCategoryUnlock;
		if(__map_reserved[categoryName] != null) {
			_this.setReserved(categoryName,false);
		} else {
			_this.h[categoryName] = false;
		}
	}
	,checkBuildRelatedUnlocksSoon: function() {
		this.checkBuildRelatedUnlocksIn = this.checkBuildRelatedUnlocksIn > 0 ? this.checkBuildRelatedUnlocksIn : 60;
	}
	,update: function(timeMod) {
		if(this.checkBuildRelatedUnlocksIn > 0) {
			this.checkBuildRelatedUnlocksIn -= timeMod;
			if(this.checkBuildRelatedUnlocksIn <= 0) {
				this.checkBuildRelatedUnlocks();
			}
		}
	}
	,checkBuildRelatedUnlocks: function() {
		var pmPerType = this.city.getAmountOfPermanentsPerType();
		if((__map_reserved["buildings.Park"] != null ? pmPerType.getReserved("buildings.Park") : pmPerType.h["buildings.Park"]) >= 5) {
			this.unlock(buildings_BotanicalGardens);
			if((__map_reserved["buildings.Park"] != null ? pmPerType.getReserved("buildings.Park") : pmPerType.h["buildings.Park"]) >= 10 && (__map_reserved["buildings.Laboratory"] != null ? pmPerType.getReserved("buildings.Laboratory") : pmPerType.h["buildings.Laboratory"]) >= 5) {
				this.fullyUnlock(buildings_BotanicalGardens);
			}
		}
		if((__map_reserved["buildings.ModernArtMuseum"] != null ? pmPerType.getReserved("buildings.ModernArtMuseum") : pmPerType.h["buildings.ModernArtMuseum"]) >= 3) {
			this.fullyUnlock(buildings_ArtColony);
		}
		var tmp;
		var _this = this.unlockState;
		if((__map_reserved["buildings.BotanicalGardens"] != null ? _this.getReserved("buildings.BotanicalGardens") : _this.h["buildings.BotanicalGardens"]) != progress_UnlockState.Researched) {
			var _this1 = this.unlockState;
			tmp = (__map_reserved["buildings.BotanicalGardens"] != null ? _this1.getReserved("buildings.BotanicalGardens") : _this1.h["buildings.BotanicalGardens"]) == progress_UnlockState.Createable;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.unlock(buildings_EcoFarm);
			if((__map_reserved["buildings.BotanicalGardens"] != null ? pmPerType.getReserved("buildings.BotanicalGardens") : pmPerType.h["buildings.BotanicalGardens"]) >= 10 && (__map_reserved["buildings.ExperimentalFarm"] != null ? pmPerType.getReserved("buildings.ExperimentalFarm") : pmPerType.h["buildings.ExperimentalFarm"]) >= 1) {
				this.fullyUnlock(buildings_EcoFarm);
			}
		}
		if((__map_reserved["buildings.Laboratory"] != null ? pmPerType.getReserved("buildings.Laboratory") : pmPerType.h["buildings.Laboratory"]) >= 5 && (__map_reserved["buildings.RefinedMetalFactory"] != null ? pmPerType.getReserved("buildings.RefinedMetalFactory") : pmPerType.h["buildings.RefinedMetalFactory"]) >= 1) {
			this.fullyUnlock(buildings_ComputerResearchCenter);
		}
		if((__map_reserved["buildings.ComputerResearchCenter"] != null ? pmPerType.getReserved("buildings.ComputerResearchCenter") : pmPerType.h["buildings.ComputerResearchCenter"]) >= 1) {
			this.unlock(buildings_ComputerChipFactory);
		}
		if((__map_reserved["buildings.MachinePartsFactory"] != null ? pmPerType.getReserved("buildings.MachinePartsFactory") : pmPerType.h["buildings.MachinePartsFactory"]) >= 3) {
			this.fullyUnlock(buildings_MechanicalHouse);
		}
		if((__map_reserved["buildings.LivingResearchCenter"] != null ? pmPerType.getReserved("buildings.LivingResearchCenter") : pmPerType.h["buildings.LivingResearchCenter"]) >= 1) {
			this.fullyUnlock(buildings_CuttingEdgeHome);
			this.unlock(buildings_ParkPod);
		}
		if((__map_reserved["buildings.ComputerChipFactory"] != null ? pmPerType.getReserved("buildings.ComputerChipFactory") : pmPerType.h["buildings.ComputerChipFactory"]) >= 1) {
			this.unlock(buildings_HackerHQ);
			if((__map_reserved["buildings.Arcade"] != null ? pmPerType.getReserved("buildings.Arcade") : pmPerType.h["buildings.Arcade"]) >= 3) {
				this.fullyUnlock(buildings_HackerHQ);
			}
		}
		if((__map_reserved["buildings.Pub"] != null ? pmPerType.getReserved("buildings.Pub") : pmPerType.h["buildings.Pub"]) >= 2) {
			this.unlock(buildings_Restaurant);
			if((__map_reserved["buildings.Pub"] != null ? pmPerType.getReserved("buildings.Pub") : pmPerType.h["buildings.Pub"]) >= 5) {
				this.fullyUnlock(buildings_Restaurant);
			}
		}
		if((__map_reserved["buildings.BlossomRestaurant"] != null ? pmPerType.getReserved("buildings.BlossomRestaurant") : pmPerType.h["buildings.BlossomRestaurant"]) >= 2) {
			this.unlock(buildings_BlossomHut);
			if((__map_reserved["buildings.BlossomRestaurant"] != null ? pmPerType.getReserved("buildings.BlossomRestaurant") : pmPerType.h["buildings.BlossomRestaurant"]) >= 10) {
				this.fullyUnlock(buildings_BlossomHut);
			}
		}
		if((__map_reserved["buildings.FarmByProductProcessor"] != null ? pmPerType.getReserved("buildings.FarmByProductProcessor") : pmPerType.h["buildings.FarmByProductProcessor"]) >= 10 && (__map_reserved["buildings.BotanicalGardens"] != null ? pmPerType.getReserved("buildings.BotanicalGardens") : pmPerType.h["buildings.BotanicalGardens"]) >= 200 && (__map_reserved["buildings.BlossomHut"] != null ? pmPerType.getReserved("buildings.BlossomHut") : pmPerType.h["buildings.BlossomHut"]) >= 50) {
			this.unlock(buildings_TreeHuggerBase);
		}
		if((__map_reserved["buildings.RefinedMetalFactory"] != null ? pmPerType.getReserved("buildings.RefinedMetalFactory") : pmPerType.h["buildings.RefinedMetalFactory"]) >= 1) {
			if((__map_reserved["buildings.StoneMine"] != null ? pmPerType.getReserved("buildings.StoneMine") : pmPerType.h["buildings.StoneMine"]) >= 15 && (__map_reserved["buildings.StoneTeleporter"] != null ? pmPerType.getReserved("buildings.StoneTeleporter") : pmPerType.h["buildings.StoneTeleporter"]) >= 3) {
				this.fullyUnlock(buildings_StoneResearchCenter);
			}
		}
		if((__map_reserved["buildings.MechanicalHouse"] != null ? pmPerType.getReserved("buildings.MechanicalHouse") : pmPerType.h["buildings.MechanicalHouse"]) >= 4 && (__map_reserved["buildings.RefinedMetalFactory"] != null ? pmPerType.getReserved("buildings.RefinedMetalFactory") : pmPerType.h["buildings.RefinedMetalFactory"]) >= 3 && (__map_reserved["buildings.ComputerChipFactory"] != null ? pmPerType.getReserved("buildings.ComputerChipFactory") : pmPerType.h["buildings.ComputerChipFactory"]) >= 1) {
			this.unlock(buildings_ExperimentationLab);
			if((__map_reserved["buildings.MechanicalHouse"] != null ? pmPerType.getReserved("buildings.MechanicalHouse") : pmPerType.h["buildings.MechanicalHouse"]) >= 12 && (__map_reserved["buildings.RefinedMetalFactory"] != null ? pmPerType.getReserved("buildings.RefinedMetalFactory") : pmPerType.h["buildings.RefinedMetalFactory"]) >= 10 && (__map_reserved["buildings.ComputerChipFactory"] != null ? pmPerType.getReserved("buildings.ComputerChipFactory") : pmPerType.h["buildings.ComputerChipFactory"]) >= 3) {
				this.fullyUnlock(buildings_ExperimentationLab);
			}
		}
		if((__map_reserved["buildings.TheMachine"] != null ? pmPerType.getReserved("buildings.TheMachine") : pmPerType.h["buildings.TheMachine"]) >= 1 && (__map_reserved["buildings.FestivalHQ"] != null ? pmPerType.getReserved("buildings.FestivalHQ") : pmPerType.h["buildings.FestivalHQ"]) >= 1) {
			this.unlock(buildings_FlowerPenthouse);
		}
		if((__map_reserved["buildings.School"] != null ? pmPerType.getReserved("buildings.School") : pmPerType.h["buildings.School"]) >= 5) {
			this.unlock(buildings_Library);
		}
		if((__map_reserved["buildings.StatueOfHappiness"] != null ? pmPerType.getReserved("buildings.StatueOfHappiness") : pmPerType.h["buildings.StatueOfHappiness"]) >= 1) {
			this.unlock(buildings_Beacon);
		}
		if(this.getUnlockState(buildings_BlossomHippieHQ) == progress_UnlockState.Unlocked) {
			if((__map_reserved["buildings.BotanicalGardens"] != null ? pmPerType.getReserved("buildings.BotanicalGardens") : pmPerType.h["buildings.BotanicalGardens"]) >= 20) {
				var isOk = false;
				var _g = 0;
				var _g1 = this.city.permanents;
				while(_g < _g1.length) {
					var bld = _g1[_g];
					++_g;
					if(bld["is"](buildings_BotanicalGardens)) {
						var grd = bld;
						if(grd.bottomBuilding == null || !grd.bottomBuilding["is"](buildings_BotanicalGardens)) {
							var topBld = grd.topBuilding;
							var i = 1;
							while(topBld != null && topBld["is"](buildings_BotanicalGardens)) {
								topBld = topBld.topBuilding;
								++i;
							}
							if(i >= 20) {
								isOk = true;
							}
						}
					}
				}
				if(isOk) {
					this.fullyUnlock(buildings_BlossomHippieHQ);
				}
			}
		}
	}
	,checkStatRelatedUnlocks: function() {
		if(this.city.simulation.stats.peopleWithHome >= 200) {
			this.fullyUnlock(buildings_LivingResearchCenter);
		}
		if(this.city.simulation.citizens.length >= 200) {
			this.fullyUnlock(buildings_HyperElevator);
		}
		if(this.city.simulation.happiness.happiness >= 99.99) {
			if(this.unlock(buildings_StatueOfHappiness)) {
				if(5 == 6) {
					PokiSDK.happyTime(1);
				}
			}
		}
		if(this.city.simulation.citizens.length >= 500 && this.city.teleporters.length > 1) {
			this.unlock(buildings_SecretSocietyHouse);
		}
		if(this.city.simulation.bonuses.fossilsCollected >= 5) {
			this.unlock(buildings_FossilMuseum);
		}
		if(this.city.simulation.citizens.length >= 750) {
			this.unlock(buildings_BlossomHippieHQ);
		}
		if(this.getUnlockState(buildings_Beacon) == progress_UnlockState.Unlocked) {
			if(this.city.simulation.happiness.fullHappinessTime >= 20160) {
				this.fullyUnlock(buildings_Beacon);
				console.log("beacon_unlocked");
			}
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(progress_Unlocks.saveDefinition);
		}
		queue.addString(haxe_Serializer.run(this.unlockState));
		queue.addString(haxe_Serializer.run(this.explicityLocked));
		var value = this.unlockedDecorationTab ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.unlockedBuildingModeButton ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var value2 = this.unlockedManagementOptions ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
		var value3 = this.numberOfModernArtMuseumArtworksUnlocked;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value3);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["unlockState"] != null ? loadMap.existsReserved("unlockState") : loadMap.h.hasOwnProperty("unlockState")) {
			this.unlockState = __map_reserved["unlockState"] != null ? loadMap.getReserved("unlockState") : loadMap.h["unlockState"];
		}
		if(__map_reserved["explicityLocked"] != null ? loadMap.existsReserved("explicityLocked") : loadMap.h.hasOwnProperty("explicityLocked")) {
			this.explicityLocked = __map_reserved["explicityLocked"] != null ? loadMap.getReserved("explicityLocked") : loadMap.h["explicityLocked"];
		}
		if(__map_reserved["unlockedDecorationTab"] != null ? loadMap.existsReserved("unlockedDecorationTab") : loadMap.h.hasOwnProperty("unlockedDecorationTab")) {
			this.unlockedDecorationTab = __map_reserved["unlockedDecorationTab"] != null ? loadMap.getReserved("unlockedDecorationTab") : loadMap.h["unlockedDecorationTab"];
		}
		if(__map_reserved["unlockedBuildingModeButton"] != null ? loadMap.existsReserved("unlockedBuildingModeButton") : loadMap.h.hasOwnProperty("unlockedBuildingModeButton")) {
			this.unlockedBuildingModeButton = __map_reserved["unlockedBuildingModeButton"] != null ? loadMap.getReserved("unlockedBuildingModeButton") : loadMap.h["unlockedBuildingModeButton"];
		}
		if(__map_reserved["unlockedManagementOptions"] != null ? loadMap.existsReserved("unlockedManagementOptions") : loadMap.h.hasOwnProperty("unlockedManagementOptions")) {
			this.unlockedManagementOptions = __map_reserved["unlockedManagementOptions"] != null ? loadMap.getReserved("unlockedManagementOptions") : loadMap.h["unlockedManagementOptions"];
		}
		if(__map_reserved["numberOfModernArtMuseumArtworksUnlocked"] != null ? loadMap.existsReserved("numberOfModernArtMuseumArtworksUnlocked") : loadMap.h.hasOwnProperty("numberOfModernArtMuseumArtworksUnlocked")) {
			this.numberOfModernArtMuseumArtworksUnlocked = __map_reserved["numberOfModernArtMuseumArtworksUnlocked"] != null ? loadMap.getReserved("numberOfModernArtMuseumArtworksUnlocked") : loadMap.h["numberOfModernArtMuseumArtworksUnlocked"];
		}
		this.postLoad();
	}
	,__class__: progress_Unlocks
};
var progress_scriptedStoryParts_AlienInvasion = function(city,story) {
	this.alienRayInited = false;
	this.isInvasionFinished = false;
	this.isInvasion = false;
	this.invasionProgress = 0;
	this.timeUntilInvasion = 0;
	progress_ScriptedStoryPart.call(this,city,story);
};
$hxClasses["progress.scriptedStoryParts.AlienInvasion"] = progress_scriptedStoryParts_AlienInvasion;
progress_scriptedStoryParts_AlienInvasion.__name__ = ["progress","scriptedStoryParts","AlienInvasion"];
progress_scriptedStoryParts_AlienInvasion.__super__ = progress_ScriptedStoryPart;
progress_scriptedStoryParts_AlienInvasion.prototype = $extend(progress_ScriptedStoryPart.prototype,{
	initialize: function($with) {
		this.timeUntilInvasion = $with.timeUntilInvasion;
	}
	,update: function(timeMod) {
		var _gthis = this;
		if(!this.isInvasionFinished) {
			if(this.isInvasion) {
				this.invasionProgress += timeMod;
				var alph = 0.0;
				if(!this.alienRayInited) {
					this.graphics = new PIXI.Graphics();
					this.city.movingViewStage.addChild(this.graphics);
					this.alienRayInited = true;
				}
				if(this.invasionProgress >= 30) {
					this.city.mainMovingViewStage.alpha = 0;
					alph = 1 - (this.invasionProgress - 30) / 30;
					if(this.invasionProgress >= 60) {
						this.city.progress.story.currentGoal = null;
						this.loseAliens();
						this.isInvasionFinished = true;
					}
				} else {
					alph = this.invasionProgress / 30;
				}
				this.graphics.clear();
				if(alph > 0) {
					this.graphics.beginFill(4388075,alph);
					var x1 = common_ArrayExtensions.min(this.city.worlds,function(w) {
						return w.rect.x - 10;
					}).rect.x - 10;
					var w1 = common_ArrayExtensions.min(this.city.worlds,function(w2) {
						return w2.rect.y - common_ArrayExtensions.max(w2.permanents,function(p) {
							return p.length * 20;
						}).length * 20 - _gthis.city.game.rect.height * _gthis.city.game.scaling;
					});
					var y1 = w1.rect.y - common_ArrayExtensions.max(w1.permanents,function(p1) {
						return p1.length * 20;
					}).length * 20 - _gthis.city.game.rect.height * _gthis.city.game.scaling;
					this.graphics.drawRect(x1,y1,common_ArrayExtensions.max(this.city.worlds,function(w3) {
						return w3.rect.get_x2() + 10;
					}).rect.get_x2() + 10 - x1,common_ArrayExtensions.max(this.city.worlds,function(w4) {
						return w4.rect.get_y2();
					}).rect.get_y2() + this.city.game.rect.height * this.city.game.scaling - y1);
					this.graphics.endFill();
				}
			} else {
				this.timeUntilInvasion -= timeMod;
				this.isInvasion = true;
			}
		}
	}
	,loseAliens: function() {
		var _gthis = this;
		this.city.activateLoserState();
		this.city.gui.createWindow();
		this.city.gui.windowAddTitleText("You Lost!");
		this.city.gui.windowAddInfoText("Aliens have destroyed your city blah blah.");
		this.city.gui.windowAddBottomButtons(null,"Try Again");
		this.city.gui.windowOnDestroy = function() {
			_gthis.city.game.newCity(_gthis.city.progress.story.storyName,_gthis.city.cityFile);
		};
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		progress_ScriptedStoryPart.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(progress_scriptedStoryParts_AlienInvasion.saveDefinition);
		}
		var value = this.timeUntilInvasion;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.invasionProgress;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.isInvasion ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
		var value3 = this.isInvasionFinished ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value3);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		progress_ScriptedStoryPart.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["timeUntilInvasion"] != null ? loadMap.existsReserved("timeUntilInvasion") : loadMap.h.hasOwnProperty("timeUntilInvasion")) {
			this.timeUntilInvasion = __map_reserved["timeUntilInvasion"] != null ? loadMap.getReserved("timeUntilInvasion") : loadMap.h["timeUntilInvasion"];
		}
		if(__map_reserved["invasionProgress"] != null ? loadMap.existsReserved("invasionProgress") : loadMap.h.hasOwnProperty("invasionProgress")) {
			this.invasionProgress = __map_reserved["invasionProgress"] != null ? loadMap.getReserved("invasionProgress") : loadMap.h["invasionProgress"];
		}
		if(__map_reserved["isInvasion"] != null ? loadMap.existsReserved("isInvasion") : loadMap.h.hasOwnProperty("isInvasion")) {
			this.isInvasion = __map_reserved["isInvasion"] != null ? loadMap.getReserved("isInvasion") : loadMap.h["isInvasion"];
		}
		if(__map_reserved["isInvasionFinished"] != null ? loadMap.existsReserved("isInvasionFinished") : loadMap.h.hasOwnProperty("isInvasionFinished")) {
			this.isInvasionFinished = __map_reserved["isInvasionFinished"] != null ? loadMap.getReserved("isInvasionFinished") : loadMap.h["isInvasionFinished"];
		}
	}
	,__class__: progress_scriptedStoryParts_AlienInvasion
});
var progress_scriptedStoryParts_SpawnCitizensRegularly = function(city,story) {
	this.afterDoneMessage = null;
	this.timeBetweenMax = 0;
	this.timeBetweenMin = 0;
	this.worldID = 0;
	this.ageRangeMax = 0;
	this.ageRangeMin = 0;
	this.groupSizeMax = 1;
	this.groupSizeMin = 0;
	this.nextSpawn = 0;
	this.spawnNumber = 0;
	progress_ScriptedStoryPart.call(this,city,story);
};
$hxClasses["progress.scriptedStoryParts.SpawnCitizensRegularly"] = progress_scriptedStoryParts_SpawnCitizensRegularly;
progress_scriptedStoryParts_SpawnCitizensRegularly.__name__ = ["progress","scriptedStoryParts","SpawnCitizensRegularly"];
progress_scriptedStoryParts_SpawnCitizensRegularly.__super__ = progress_ScriptedStoryPart;
progress_scriptedStoryParts_SpawnCitizensRegularly.prototype = $extend(progress_ScriptedStoryPart.prototype,{
	update: function(timeMod) {
		if(this.spawnNumber > 0 && this.simulation.time.timeSinceStart >= this.nextSpawn) {
			var val1 = this.spawnNumber;
			var val2 = random_Random.getInt(this.groupSizeMin,this.groupSizeMax + 1);
			var spawnAmount = val2 < val1 ? val2 : val1;
			this.spawnNumber -= spawnAmount;
			if(this.city.simulation.citizens.length < 200) {
				var globalBoost = this.city.simulation.boostManager.currentGlobalBoostAmount;
				if(globalBoost > 1.5) {
					spawnAmount *= 2;
				}
			}
			this.city.simulation.citizenSpawners.push(new simulation_SpawnFlyingSaucer(this.city.simulation,this.city.farForegroundStage,this.city.worlds[this.worldID],{ time : 0, type : "SpawnCitizensFlyingSaucer", amount : spawnAmount, ageRangeMin : this.ageRangeMin, ageRangeMax : this.ageRangeMax, world : this.worldID}));
			this.nextSpawn = this.simulation.time.timeSinceStart + 60 * random_Random.getFloat(this.timeBetweenMin,this.timeBetweenMax);
		} else if(this.spawnNumber <= 0 && this.simulation.citizenSpawners.length == 0) {
			if(this.afterDoneMessage != null && this.afterDoneMessage != "") {
				if(this.city.gui.showSimpleWindow(this.afterDoneMessage,null,false,true)) {
					HxOverrides.remove(this.story.scriptedParts,this);
				}
			} else {
				HxOverrides.remove(this.story.scriptedParts,this);
			}
		}
	}
	,initialize: function($with) {
		this.spawnNumber = $with.spawnNumber;
		this.groupSizeMin = $with.groupSizeMin;
		this.groupSizeMax = $with.groupSizeMax;
		this.ageRangeMin = $with.ageRangeMin;
		this.ageRangeMax = $with.ageRangeMax;
		this.worldID = $with.world;
		this.timeBetweenMin = $with.timeBetweenMin;
		this.timeBetweenMax = $with.timeBetweenMax;
		this.afterDoneMessage = $with.afterDoneMessage;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		progress_ScriptedStoryPart.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(progress_scriptedStoryParts_SpawnCitizensRegularly.saveDefinition);
		}
		var value = this.spawnNumber;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.nextSpawn;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.groupSizeMin;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
		var value3 = this.groupSizeMax;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value3);
		queue.size += 4;
		var value4 = this.ageRangeMin;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes4 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes4,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value4);
		queue.size += 4;
		var value5 = this.ageRangeMax;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes5 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes5,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value5);
		queue.size += 4;
		var value6 = this.worldID;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes6 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes6,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value6);
		queue.size += 4;
		var value7 = this.timeBetweenMin;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes7 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes7,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value7);
		queue.size += 4;
		var value8 = this.timeBetweenMax;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes8 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes8,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value8);
		queue.size += 4;
		queue.addString(this.afterDoneMessage);
	}
	,load: function(queue,definition) {
		progress_ScriptedStoryPart.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["spawnNumber"] != null ? loadMap.existsReserved("spawnNumber") : loadMap.h.hasOwnProperty("spawnNumber")) {
			this.spawnNumber = __map_reserved["spawnNumber"] != null ? loadMap.getReserved("spawnNumber") : loadMap.h["spawnNumber"];
		}
		if(__map_reserved["nextSpawn"] != null ? loadMap.existsReserved("nextSpawn") : loadMap.h.hasOwnProperty("nextSpawn")) {
			this.nextSpawn = __map_reserved["nextSpawn"] != null ? loadMap.getReserved("nextSpawn") : loadMap.h["nextSpawn"];
		}
		if(__map_reserved["groupSizeMin"] != null ? loadMap.existsReserved("groupSizeMin") : loadMap.h.hasOwnProperty("groupSizeMin")) {
			this.groupSizeMin = __map_reserved["groupSizeMin"] != null ? loadMap.getReserved("groupSizeMin") : loadMap.h["groupSizeMin"];
		}
		if(__map_reserved["groupSizeMax"] != null ? loadMap.existsReserved("groupSizeMax") : loadMap.h.hasOwnProperty("groupSizeMax")) {
			this.groupSizeMax = __map_reserved["groupSizeMax"] != null ? loadMap.getReserved("groupSizeMax") : loadMap.h["groupSizeMax"];
		}
		if(__map_reserved["ageRangeMin"] != null ? loadMap.existsReserved("ageRangeMin") : loadMap.h.hasOwnProperty("ageRangeMin")) {
			this.ageRangeMin = __map_reserved["ageRangeMin"] != null ? loadMap.getReserved("ageRangeMin") : loadMap.h["ageRangeMin"];
		}
		if(__map_reserved["ageRangeMax"] != null ? loadMap.existsReserved("ageRangeMax") : loadMap.h.hasOwnProperty("ageRangeMax")) {
			this.ageRangeMax = __map_reserved["ageRangeMax"] != null ? loadMap.getReserved("ageRangeMax") : loadMap.h["ageRangeMax"];
		}
		if(__map_reserved["worldID"] != null ? loadMap.existsReserved("worldID") : loadMap.h.hasOwnProperty("worldID")) {
			this.worldID = __map_reserved["worldID"] != null ? loadMap.getReserved("worldID") : loadMap.h["worldID"];
		}
		if(__map_reserved["timeBetweenMin"] != null ? loadMap.existsReserved("timeBetweenMin") : loadMap.h.hasOwnProperty("timeBetweenMin")) {
			this.timeBetweenMin = __map_reserved["timeBetweenMin"] != null ? loadMap.getReserved("timeBetweenMin") : loadMap.h["timeBetweenMin"];
		}
		if(__map_reserved["timeBetweenMax"] != null ? loadMap.existsReserved("timeBetweenMax") : loadMap.h.hasOwnProperty("timeBetweenMax")) {
			this.timeBetweenMax = __map_reserved["timeBetweenMax"] != null ? loadMap.getReserved("timeBetweenMax") : loadMap.h["timeBetweenMax"];
		}
		if(__map_reserved["afterDoneMessage"] != null ? loadMap.existsReserved("afterDoneMessage") : loadMap.h.hasOwnProperty("afterDoneMessage")) {
			this.afterDoneMessage = __map_reserved["afterDoneMessage"] != null ? loadMap.getReserved("afterDoneMessage") : loadMap.h["afterDoneMessage"];
		}
	}
	,__class__: progress_scriptedStoryParts_SpawnCitizensRegularly
});
var progress_worldGenerators_RandomMiniWorlds = function() { };
$hxClasses["progress.worldGenerators.RandomMiniWorlds"] = progress_worldGenerators_RandomMiniWorlds;
progress_worldGenerators_RandomMiniWorlds.__name__ = ["progress","worldGenerators","RandomMiniWorlds"];
progress_worldGenerators_RandomMiniWorlds.doGenerate = function(generatorArgs,city,storyInfo,cityStage,cityMidStage,cityBgStage) {
	var numberOfWorldsMin = generatorArgs.numberOfWorldsMin;
	var numberOfWorldsMax = generatorArgs.numberOfWorldsMax;
	var minX = generatorArgs.minX;
	var minY = generatorArgs.minY;
	var maxX = generatorArgs.maxX;
	var maxY = generatorArgs.maxY;
	var minWidth = generatorArgs.minWidth;
	var maxWidth = generatorArgs.maxWidth;
	var minHeight = generatorArgs.minHeight;
	var maxHeight = generatorArgs.maxHeight;
	var heightVariation = generatorArgs.heightVariation;
	var allAddedWorlds = [];
	var _g1 = 0;
	var _g = random_Random.getInt(numberOfWorldsMin,numberOfWorldsMax);
	while(_g1 < _g) {
		var i = _g1++;
		var tries = 0;
		while(++tries < 10000) {
			var xx = random_Random.getInt(minX / 20 | 0,(maxX / 20 | 0) + 1) * 20;
			var yy = random_Random.getInt(minY / 20 | 0,(maxY / 20 | 0) + 1) * 20;
			var ww = random_Random.getInt(minWidth / 20 | 0,(maxWidth / 20 | 0) + 1) * 20;
			var val = Math.round(((ww - minWidth) / (maxWidth - minWidth) * (maxHeight - minHeight) + minHeight + random_Random.getInt(heightVariation)) / 20);
			var hh = (val < 1 ? 1 : val > 100 ? 100 : val) * 20;
			var canCreateWorld = true;
			var _g2 = 0;
			var _g3 = city.worlds;
			while(_g2 < _g3.length) {
				var otherWorld = _g3[_g2];
				++_g2;
				if(otherWorld.rect.intersects(new common_Rectangle(xx - 20,yy - 40,ww + 41,hh + 61))) {
					canCreateWorld = false;
					break;
				}
			}
			if(!canCreateWorld) {
				continue;
			}
			var newWorld = new World(city.game,city,cityStage,cityMidStage,cityBgStage,new common_Rectangle(xx,yy,ww,hh),random_Random.getInt(1000000));
			city.worlds.push(newWorld);
			allAddedWorlds.push(newWorld);
			break;
		}
		if(tries >= 1000) {
			console.log("world not generated; max # of tries exceeded - RandomMiniWorlds.doGenerate with args:");
			console.log(generatorArgs);
		}
	}
	var buildOnWorlds = allAddedWorlds.slice();
	var createPermanents = [];
	var _g4 = 0;
	var _g11 = generatorArgs.initialBuildings;
	while(_g4 < _g11.length) {
		var initialBuilding = _g11[_g4];
		++_g4;
		var _g31 = 0;
		var _g21 = random_Random.getInt(initialBuilding.numberMin,initialBuilding.numberMax);
		while(_g31 < _g21) {
			var i1 = _g31++;
			createPermanents.push(Type.resolveClass("buildings." + Std.string(initialBuilding.className)));
		}
	}
	var _g5 = 0;
	var _g12 = generatorArgs.initialWorldResources;
	while(_g5 < _g12.length) {
		var initialWR = _g12[_g5];
		++_g5;
		var _g32 = 0;
		var _g22 = random_Random.getInt(initialWR.numberMin,initialWR.numberMax);
		while(_g32 < _g22) {
			var i2 = _g32++;
			createPermanents.push(Type.resolveClass("worldResources." + Std.string(initialWR.className)));
		}
	}
	var handledAllBuildings = false;
	var _g6 = 0;
	while(_g6 < createPermanents.length) {
		var pm = createPermanents[_g6];
		++_g6;
		var pmIsBuilding = Type.getClassName(pm).indexOf("buildings.") != -1;
		if(!handledAllBuildings && !pmIsBuilding) {
			if(generatorArgs.rememberWorldSpreadBetweenBuildingsAndWorldResources) {
				buildOnWorlds = allAddedWorlds.slice();
			}
			handledAllBuildings = true;
		}
		var buildOptions = [];
		var tries1 = 0;
		while(++tries1 <= 2) {
			var worldArrayToUse = allAddedWorlds;
			if(generatorArgs.spreadBuildingsEvenlyBetweenWorlds && pmIsBuilding || generatorArgs.spreadWorldResourcesEvenlyBetweenWorlds && !pmIsBuilding) {
				worldArrayToUse = buildOnWorlds;
			}
			var _g13 = 0;
			while(_g13 < worldArrayToUse.length) {
				var world = worldArrayToUse[_g13];
				++_g13;
				var pmPositionsFree = 0;
				var _g33 = 0;
				var _g23 = world.permanents.length;
				while(_g33 < _g23) {
					var xx1 = _g33++;
					var pmStack = world.permanents[xx1];
					if(pmStack.length == 0) {
						++pmPositionsFree;
					}
				}
				if(pmIsBuilding || (!generatorArgs.avoidGeneratingOverfullWorlds || world.permanents.length > 1 && pmPositionsFree > 1)) {
					var _g34 = 0;
					var _g24 = world.permanents.length;
					while(_g34 < _g24) {
						var xx2 = _g34++;
						var pmStack1 = world.permanents[xx2];
						if(pmStack1.length == 0) {
							buildOptions.push({ world : world, xPos : xx2});
						}
					}
				}
			}
			if(buildOptions.length == 0) {
				buildOnWorlds = allAddedWorlds.slice();
			} else {
				break;
			}
		}
		if(buildOptions.length > 0) {
			var chosenOption = random_Random.fromArray(buildOptions);
			HxOverrides.remove(buildOnWorlds,chosenOption.world);
			if(pmIsBuilding) {
				chosenOption.world.build(pm,chosenOption.xPos);
			} else {
				chosenOption.world.createWorldResource(pm,chosenOption.xPos);
			}
		}
	}
};
var random_Random = function() { };
$hxClasses["random.Random"] = random_Random;
random_Random.__name__ = ["random","Random"];
random_Random.getFloat = function(val0,val1) {
	var min = 0;
	var max = 1;
	if(val0 != null && val1 != null) {
		min = val0;
		max = val1;
	} else if(val0 != null) {
		max = val0;
	}
	return Math.random() * (max - min) + min;
};
random_Random.getInt = function(val0,val1) {
	var min = 0;
	var max = 2147483647;
	if(val0 != null && val1 != null) {
		min = val0;
		max = val1;
	} else if(val0 != null) {
		max = val0;
	}
	return Math.floor(Math.random() * (max - min)) + min;
};
random_Random.fromArray = function(arr) {
	if(arr.length == 0) {
		throw new js__$Boot_HaxeError("You can't get a random item from an empty array!");
	}
	return arr[random_Random.getInt(arr.length)];
};
var random_SeedeableRandom = function(seed) {
	var x = this.seed = seed == null ? Std.random(2147483647) : seed;
	var this1 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
	this.state0 = this1;
	var this2 = new haxe__$Int64__$_$_$Int64(0,89432);
	this.state1 = this2;
};
$hxClasses["random.SeedeableRandom"] = random_SeedeableRandom;
random_SeedeableRandom.__name__ = ["random","SeedeableRandom"];
random_SeedeableRandom.prototype = {
	getInt64: function() {
		var s0 = this.state0;
		var s1 = this.state1;
		this.state0 = s1;
		var b = 23;
		b &= 63;
		var b1;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(s1.high,s1.low);
			b1 = this1;
		} else if(b < 32) {
			var this2 = new haxe__$Int64__$_$_$Int64(s1.high << b | s1.low >>> 32 - b,s1.low << b);
			b1 = this2;
		} else {
			var this3 = new haxe__$Int64__$_$_$Int64(s1.low << b - 32,0);
			b1 = this3;
		}
		var this4 = new haxe__$Int64__$_$_$Int64(s1.high ^ b1.high,s1.low ^ b1.low);
		s1 = this4;
		var b2 = 18;
		b2 &= 63;
		var b3;
		if(b2 == 0) {
			var this5 = new haxe__$Int64__$_$_$Int64(s1.high,s1.low);
			b3 = this5;
		} else if(b2 < 32) {
			var this6 = new haxe__$Int64__$_$_$Int64(s1.high >> b2,s1.high << 32 - b2 | s1.low >>> b2);
			b3 = this6;
		} else {
			var this7 = new haxe__$Int64__$_$_$Int64(s1.high >> 31,s1.high >> b2 - 32);
			b3 = this7;
		}
		var this8 = new haxe__$Int64__$_$_$Int64(s1.high ^ b3.high,s1.low ^ b3.low);
		s1 = this8;
		var this9 = new haxe__$Int64__$_$_$Int64(s1.high ^ s0.high,s1.low ^ s0.low);
		s1 = this9;
		var b4 = 5;
		b4 &= 63;
		var b5;
		if(b4 == 0) {
			var this10 = new haxe__$Int64__$_$_$Int64(s0.high,s0.low);
			b5 = this10;
		} else if(b4 < 32) {
			var this11 = new haxe__$Int64__$_$_$Int64(s0.high >> b4,s0.high << 32 - b4 | s0.low >>> b4);
			b5 = this11;
		} else {
			var this12 = new haxe__$Int64__$_$_$Int64(s0.high >> 31,s0.high >> b4 - 32);
			b5 = this12;
		}
		var this13 = new haxe__$Int64__$_$_$Int64(s1.high ^ b5.high,s1.low ^ b5.low);
		s1 = this13;
		this.state1 = s1;
		var a = this.state0;
		var b6 = this.state1;
		var high = a.high + b6.high | 0;
		var low = a.low + b6.low | 0;
		if(haxe__$Int32_Int32_$Impl_$.ucompare(low,a.low) < 0) {
			var ret = high++;
			high = high | 0;
		}
		var this14 = new haxe__$Int64__$_$_$Int64(high,low);
		return this14;
	}
	,getInt: function(val0,val1) {
		var min = 0;
		var max = 2147483647;
		if(val0 != null && val1 != null) {
			min = val0;
			max = val1;
		} else if(val0 != null) {
			max = val0;
		}
		var a = this.getInt64();
		var b = 1;
		b &= 63;
		var a1;
		if(b == 0) {
			var this1 = new haxe__$Int64__$_$_$Int64(a.high,a.low);
			a1 = this1;
		} else if(b < 32) {
			var this2 = new haxe__$Int64__$_$_$Int64(a.high >>> b,a.high << 32 - b | a.low >>> b);
			a1 = this2;
		} else {
			var this3 = new haxe__$Int64__$_$_$Int64(0,a.high >>> b - 32);
			a1 = this3;
		}
		var x = max - min;
		var this4 = new haxe__$Int64__$_$_$Int64(x >> 31,x);
		var x1 = haxe__$Int64_Int64_$Impl_$.divMod(a1,this4).modulus;
		if(x1.high != x1.low >> 31) {
			throw new js__$Boot_HaxeError("Overflow");
		}
		return min + x1.low;
	}
	,getFloat: function(val0,val1) {
		var min = 0;
		var max = 1;
		if(val0 != null && val1 != null) {
			min = val0;
			max = val1;
		} else if(val0 != null) {
			max = val0;
		}
		var rndVal = this.getInt64();
		return Math.abs(rndVal.low / 2147483647) * (max - min) + min;
	}
	,__class__: random_SeedeableRandom
};
var simulation_BabyMaker = function(city,simulation1) {
	this.totalBabyMakeCapacity = 0;
	this.targetPopAmount = -1;
	this.mode = 0;
	this.softPopLimit = 2000;
	this.updateStatsIn = -2;
	this.city = city;
	this.simulation = simulation1;
	this.babyMakerCapacity = new haxe_ds_ObjectMap();
	this.babiesPerYear = new haxe_ds_ObjectMap();
};
$hxClasses["simulation.BabyMaker"] = simulation_BabyMaker;
simulation_BabyMaker.__name__ = ["simulation","BabyMaker"];
simulation_BabyMaker.prototype = {
	getCurrentBabyProduction: function() {
		if(this.simulation.happiness.happiness < 10 && this.simulation.stats.peopleWithHome < this.simulation.stats.people / 2 && this.city.materials.food < 1) {
			return 0.0;
		}
		if(this.simulation.happiness.happiness < 10) {
			return 0.8;
		}
		var _g = this.mode;
		switch(_g) {
		case 0:
			return 1 + this.simulation.happiness.happiness / 140 / Math.pow((Math.pow(this.simulation.citizens.length,1.2) + 500) / 1400,0.4);
		case 1:
			if(this.targetPopAmount == -1) {
				return 1;
			} else if(this.simulation.citizens.length >= this.targetPopAmount) {
				return 0.1;
			} else {
				return 3.0;
			}
			break;
		case 2:
			return 1 + 0.4 * (this.simulation.happiness.happiness / 140) / Math.pow((Math.pow(this.simulation.citizens.length,1.2) + 500) / 1400,0.4);
		case 3:
			return 1 + (this.simulation.happiness.happiness / 140 + Math.max(0,(this.simulation.happiness.happiness - 60) / 120)) / Math.pow((Math.pow(this.simulation.citizens.length,1.2) + 500) / 1400,0.4);
		}
	}
	,update: function(timeMod) {
		if(this.updateStatsIn <= 0) {
			this.updateStatsIn += 60;
			this.updateStats();
		}
		this.updateStatsIn -= timeMod;
		var yearsPast = this.simulation.time.minutesPerTick * timeMod / 60 / 24;
		var _g = 0;
		var _g1 = this.city.worlds;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			if(this.simulation.citizens.length < this.softPopLimit && this.simulation.citizens.length >= 2 && this.babyMakerCapacity.h[w.__id__] >= 2 && random_Random.getFloat() < this.babiesPerYear.h[w.__id__] * yearsPast) {
				this.createBaby(w);
			}
		}
	}
	,createBaby: function(w) {
		if(this.simulation.citizens.length == 0) {
			return;
		}
		var possibleParent = common_ArrayExtensions.findRandom(this.simulation.citizens,function(c) {
			if(c.onWorld == w && c.get_age() >= 20) {
				return c.get_age() < 55;
			} else {
				return false;
			}
		});
		var fatherOrMother = this.simulation.citizens[0];
		if(possibleParent != null) {
			fatherOrMother = possibleParent;
		}
		this.simulation.createCitizen(fatherOrMother.onWorld,0,fatherOrMother.inPermanent,fatherOrMother.relativeX | 0);
	}
	,onCitizenDeath: function() {
		if(this.simulation.citizens.length == this.softPopLimit) {
			if(this.totalBabyMakeCapacity != 0) {
				var r = random_Random.getFloat();
				var w = this.city.worlds[0];
				var _g = 0;
				var _g1 = this.city.worlds;
				while(_g < _g1.length) {
					var wrld = _g1[_g];
					++_g;
					r -= this.babyMakerCapacity.h[wrld.__id__] / this.totalBabyMakeCapacity;
					if(r <= 0) {
						w = wrld;
					}
				}
				this.createBaby(w);
			}
		}
	}
	,updateStats: function() {
		var _g = 0;
		var _g1 = this.city.worlds;
		while(_g < _g1.length) {
			var w = _g1[_g];
			++_g;
			this.babyMakerCapacity.set(w,0);
		}
		var _g2 = 0;
		var _g11 = this.simulation.citizens;
		while(_g2 < _g11.length) {
			var c = _g11[_g2];
			++_g2;
			var _g21 = c.onWorld;
			var _g3 = this.babyMakerCapacity;
			var v = _g3.h[_g21.__id__] + (c.get_age() >= 20 && c.get_age() < 45 ? 1 : c.get_age() >= 45 && c.get_age() < 55 ? 1 - (c.get_age() - 45) / 10 : 0);
			_g3.set(_g21,v);
		}
		var _g4 = 0;
		var _g12 = this.city.worlds;
		while(_g4 < _g12.length) {
			var w1 = _g12[_g4];
			++_g4;
			var currentBabiesPerPerson = this.getCurrentBabyProduction();
			var v1 = this.babyMakerCapacity.h[w1.__id__] * currentBabiesPerPerson / 30.;
			this.babiesPerYear.set(w1,v1);
			this.totalBabyMakeCapacity += this.babyMakerCapacity.h[w1.__id__];
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(simulation_BabyMaker.saveDefinition);
		}
		var value = this.softPopLimit;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		queue.addString(haxe_Serializer.run(this.mode));
		var value1 = this.targetPopAmount;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["softPopLimit"] != null ? loadMap.existsReserved("softPopLimit") : loadMap.h.hasOwnProperty("softPopLimit")) {
			this.softPopLimit = __map_reserved["softPopLimit"] != null ? loadMap.getReserved("softPopLimit") : loadMap.h["softPopLimit"];
		}
		if(__map_reserved["mode"] != null ? loadMap.existsReserved("mode") : loadMap.h.hasOwnProperty("mode")) {
			this.mode = __map_reserved["mode"] != null ? loadMap.getReserved("mode") : loadMap.h["mode"];
		}
		if(__map_reserved["targetPopAmount"] != null ? loadMap.existsReserved("targetPopAmount") : loadMap.h.hasOwnProperty("targetPopAmount")) {
			this.targetPopAmount = __map_reserved["targetPopAmount"] != null ? loadMap.getReserved("targetPopAmount") : loadMap.h["targetPopAmount"];
		}
	}
	,__class__: simulation_BabyMaker
};
var simulation_BonusResults = function() {
	this.fossilsCollected = 0;
	this.indoorFarmSpeed = 1;
	this.labSpeed = 1;
	this.machinePartsFactorySpeed = 1;
	this.extraFoodFromFarms = 0;
};
$hxClasses["simulation.BonusResults"] = simulation_BonusResults;
simulation_BonusResults.__name__ = ["simulation","BonusResults"];
simulation_BonusResults.prototype = {
	save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(simulation_BonusResults.saveDefinition);
		}
		var value = this.extraFoodFromFarms;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.machinePartsFactorySpeed;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.labSpeed;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
		var value3 = this.indoorFarmSpeed;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value3);
		queue.size += 8;
		var value4 = this.fossilsCollected;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes4 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes4,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value4);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["extraFoodFromFarms"] != null ? loadMap.existsReserved("extraFoodFromFarms") : loadMap.h.hasOwnProperty("extraFoodFromFarms")) {
			this.extraFoodFromFarms = __map_reserved["extraFoodFromFarms"] != null ? loadMap.getReserved("extraFoodFromFarms") : loadMap.h["extraFoodFromFarms"];
		}
		if(__map_reserved["machinePartsFactorySpeed"] != null ? loadMap.existsReserved("machinePartsFactorySpeed") : loadMap.h.hasOwnProperty("machinePartsFactorySpeed")) {
			this.machinePartsFactorySpeed = __map_reserved["machinePartsFactorySpeed"] != null ? loadMap.getReserved("machinePartsFactorySpeed") : loadMap.h["machinePartsFactorySpeed"];
		}
		if(__map_reserved["labSpeed"] != null ? loadMap.existsReserved("labSpeed") : loadMap.h.hasOwnProperty("labSpeed")) {
			this.labSpeed = __map_reserved["labSpeed"] != null ? loadMap.getReserved("labSpeed") : loadMap.h["labSpeed"];
		}
		if(__map_reserved["indoorFarmSpeed"] != null ? loadMap.existsReserved("indoorFarmSpeed") : loadMap.h.hasOwnProperty("indoorFarmSpeed")) {
			this.indoorFarmSpeed = __map_reserved["indoorFarmSpeed"] != null ? loadMap.getReserved("indoorFarmSpeed") : loadMap.h["indoorFarmSpeed"];
		}
		if(__map_reserved["fossilsCollected"] != null ? loadMap.existsReserved("fossilsCollected") : loadMap.h.hasOwnProperty("fossilsCollected")) {
			this.fossilsCollected = __map_reserved["fossilsCollected"] != null ? loadMap.getReserved("fossilsCollected") : loadMap.h["fossilsCollected"];
		}
	}
	,__class__: simulation_BonusResults
};
var simulation_BoostManager = function(simulation1) {
	this.disableRewardedAd = false;
	this.currentGlobalBoostAmount = 1.0;
	this.infoButtonShown = false;
	this.infoButtonParent = null;
	this.maxBoost = 10800;
	this.boostLeft = 0;
	this.simulation = simulation1;
	this.city = simulation1.city;
	if(5 == 6) {
		this.maxBoost = 7200;
	}
};
$hxClasses["simulation.BoostManager"] = simulation_BoostManager;
simulation_BoostManager.__name__ = ["simulation","BoostManager"];
simulation_BoostManager.prototype = {
	update: function(timeMod) {
		if(this.boostLeft > 0) {
			this.boostLeft -= timeMod;
			this.currentGlobalBoostAmount = 2.0;
		} else {
			this.currentGlobalBoostAmount = 1;
		}
		if(this.infoButtonParent != null) {
			if(this.boostLeft > 0 || this.boostAvailable()) {
				if(!this.infoButtonShown) {
					this.infoButtonShown = true;
					this.actuallyCreateBoostButton();
				}
			} else if(this.infoButtonShown) {
				this.infoButtonShown = false;
				this.infoButtonParent.removeChild(this.infoButton);
				this.infoButton = null;
			}
		}
	}
	,boostAvailable: function() {
		if(common_AdHelper.adAvailableRewarded() && this.boostLeft <= 0) {
			return !this.disableRewardedAd;
		} else {
			return false;
		}
	}
	,actuallyCreateBoostButton: function() {
		var _gthis = this;
		var parent = this.infoButtonParent;
		var stage = this.city.gui.stage;
		var theGUI = this.city.gui;
		var onClick = function() {
			if(_gthis.boostLeft <= 0 && _gthis.boostAvailable()) {
				common_AdHelper.showRewardedInterstitial(function() {
					_gthis.boostLeft = _gthis.maxBoost;
					if(simulation_BoostManager.enableExtraReward) {
						var mouse = _gthis.city.game.mouse;
						mouse.resetPosition();
						var extraReward = _gthis.getRandomReward();
						extraReward.materials.addToProduction(_gthis.city.simulation.stats);
						_gthis.city.materials.add(extraReward.materials);
						var createAdRewardWindow = null;
						createAdRewardWindow = function() {
							_gthis.city.gui.createWindow("adRewardWindow");
							_gthis.city.gui.setWindowReload(createAdRewardWindow);
							gui_AdRewardWindow.create(_gthis.city,_gthis.city.gui,_gthis.city.gui.innerWindowStage,_gthis.city.gui.windowInner,extraReward);
						};
						var createAdRewardWindow1 = createAdRewardWindow;
						createAdRewardWindow1();
					}
				});
			}
		};
		var onHover = function() {
			if(_gthis.boostLeft > 0) {
				theGUI.tooltip.setText("Boost","All resource production is now doubled!","Boost Active");
			} else {
				theGUI.tooltip.setText("Boost","Double your resource production for a while by watching a short ad!" + (simulation_BoostManager.enableExtraReward ? "\nPlus, instantly get a random extra resource reward!" : ""));
			}
		};
		var getAmount = function() {
			return "Boost";
		};
		var textureName = "spr_icon_boost";
		var minWidth = 20;
		var isActive = function() {
			return _gthis.boostLeft > 0;
		};
		this.infoButton = new gui_ContainerButtonWithProgress(this.city.gui,stage,parent,onClick,isActive,onHover,"spr_transparentbutton_info",10526880,16777215,function() {
			if(_gthis.boostLeft <= 0) {
				return -1;
			}
			var val = _gthis.boostLeft / _gthis.maxBoost;
			if(val < 0) {
				return 0;
			} else if(val > 1) {
				return 1;
			} else {
				return val;
			}
		});
		this.infoButton.container.fillSecondarySize = true;
		var extraSpacing = theGUI.game.isMobile ? 3 : 0;
		var extraSpacingText = theGUI.game.isMobile ? 2 : 0;
		this.infoButton.container.padding = { left : 2 + extraSpacing, right : extraSpacing + 3, top : extraSpacing + 2, bottom : extraSpacing + 1};
		this.infoButton.container.updateSize();
		this.infoButton.container.addChild(new gui_ContainerHolder(this.infoButton.container,stage,new PIXI.Sprite(Resources.getTexture(textureName))));
		this.infoButton.container.addChild(new gui_TextElement(this.infoButton.container,stage,null,getAmount,"Arial15",{ left : 1 + extraSpacingText, right : 0, top : 2, bottom : 0}));
		this.infoButton.container.minWidth = minWidth;
		parent.insertChild(this.infoButton,0);
		return this.infoButton;
	}
	,getRandomReward: function() {
		var rewardText = "";
		var rewardMaterials = new Materials();
		var canGiveMachineParts = false;
		var canGiveRefinedMetal = false;
		var canGiveComputerChips = false;
		var baseRewardMaxI = 11;
		if(this.city.materials.machineParts > 0.2) {
			baseRewardMaxI = 16;
			canGiveMachineParts = true;
		}
		if(this.city.materials.refinedMetal > 0.2) {
			baseRewardMaxI = 19;
			canGiveRefinedMetal = true;
		}
		if(this.city.materials.computerChips > 0.2) {
			baseRewardMaxI = 22;
			canGiveComputerChips = true;
		}
		var baseRewardI = random_Random.getInt(baseRewardMaxI);
		switch(baseRewardI) {
		case 0:
			rewardText = "Lunchbox";
			rewardMaterials.add(new Materials(0,0,10));
			break;
		case 1:
			rewardText = "Pile of Wood";
			rewardMaterials.add(new Materials(25));
			break;
		case 2:
			rewardText = "Book";
			rewardMaterials.add(new Materials(0,0,0,0,15));
			break;
		case 3:
			rewardText = "Alien Candy Bar";
			rewardMaterials.add(new Materials(0,0,15,0,5));
			break;
		case 4:
			rewardText = "Rock";
			rewardMaterials.add(new Materials(0,20,0,0,0));
			break;
		case 5:
			rewardText = "Pile of Materials";
			rewardMaterials.add(new Materials(random_Random.getInt(10,30),random_Random.getInt(10,30),0,0,0));
			break;
		case 6:
			rewardText = "Flower";
			rewardMaterials.add(new Materials(5,0,0,0,9));
			break;
		case 7:
			rewardText = "Statue";
			rewardMaterials.add(new Materials(0,15,0,0,7));
			break;
		case 8:
			rewardText = "Comet";
			rewardMaterials.add(new Materials(0,20,0,0,15));
			break;
		case 9:
			rewardText = "Brick";
			rewardMaterials.add(new Materials(0,25,0,0));
			break;
		case 10:
			rewardText = random_Random.fromArray(["Cabbage","Potato","Carrot","Bread"]);
			rewardMaterials.add(new Materials(0,0,7));
			break;
		case 11:
			rewardText = "Box of Wires";
			rewardMaterials.add(new Materials(5,0,0,10,0));
			break;
		case 12:
			rewardText = "Toolbox";
			rewardMaterials.add(new Materials(0,12,0,9));
			break;
		case 13:
			rewardText = "Mechanical Pear";
			rewardMaterials.add(new Materials(0,0,1,1,20));
			break;
		case 14:
			rewardText = "Beeping Device";
			rewardMaterials.add(new Materials(0,10,0,5,2));
			break;
		case 15:
			rewardText = "Robot Arm";
			rewardMaterials.add(new Materials(0,10,0,10,25));
			break;
		case 16:
			rewardText = "Sphere";
			rewardMaterials.add(new Materials(0,0,0,0,10,10,0));
			break;
		case 17:
			rewardText = "Gem";
			rewardMaterials.add(new Materials(0,0,0,0,0,20,0));
			break;
		case 18:
			rewardText = "Pile of Pebbles";
			rewardMaterials.add(new Materials(0,40,0,0,0,10,0));
			break;
		case 19:
			rewardText = "Laptop";
			rewardMaterials.add(new Materials(0,0,0,5,0,4,1));
			break;
		case 20:
			rewardText = "UFO";
			rewardMaterials.add(new Materials(0,0,0,0,15,5,2));
			break;
		case 21:
			rewardText = "Flashing Box";
			rewardMaterials.add(new Materials(0,20,0,0,8,0,1));
			break;
		}
		var extraWordR = random_Random.getFloat(0.8);
		var addedExtra = false;
		if(extraWordR < 0.05 && !addedExtra) {
			rewardText = "Big " + rewardText;
			rewardMaterials.multiply(1.5);
			addedExtra = true;
		}
		extraWordR -= 0.05;
		if(extraWordR < 0.04 && !addedExtra) {
			rewardText = "Mega " + rewardText;
			rewardMaterials.multiply(2);
			addedExtra = true;
		}
		extraWordR -= 0.04;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Giant " + rewardText;
			rewardMaterials.multiply(3);
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Smart " + rewardText;
			rewardMaterials.knowledge += 5;
			if(canGiveComputerChips) {
				rewardMaterials.computerChips += 1;
			}
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.01 && canGiveComputerChips && !addedExtra) {
			rewardText = "Network-Connected " + rewardText;
			rewardMaterials.computerChips += 2;
			addedExtra = true;
		}
		extraWordR -= 0.01;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Edible " + rewardText;
			var _g = rewardMaterials;
			_g.set_food(_g.food + 20);
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Slimy " + rewardText;
			var _g1 = rewardMaterials;
			_g1.set_food(_g1.food + 5);
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && canGiveRefinedMetal && !addedExtra) {
			rewardText = "Cold " + rewardText;
			rewardMaterials.refinedMetal += 5;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && canGiveMachineParts && !addedExtra && rewardText.indexOf("Mechanical") == -1) {
			rewardText = "Mechanical " + rewardText;
			rewardMaterials.machineParts += 6;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Growing " + rewardText;
			rewardMaterials.wood += 20;
			rewardMaterials.multiply(1.5);
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra && canGiveRefinedMetal) {
			rewardText = "Metal " + rewardText;
			rewardMaterials.refinedMetal += 4;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Musical " + rewardText;
			rewardMaterials.wood += 5;
			rewardMaterials.knowledge += 10;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Paper " + rewardText;
			rewardMaterials.multiply(0.5);
			rewardMaterials.knowledge += 15;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra && canGiveMachineParts) {
			rewardText = "Rotating " + rewardText;
			rewardMaterials.machineParts += 10;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.03 && !addedExtra) {
			rewardText = "Cool-Looking " + rewardText;
			rewardMaterials.multiply(2.2);
			rewardMaterials.knowledge += 1;
			addedExtra = true;
		}
		extraWordR -= 0.03;
		if(extraWordR < 0.02 && !addedExtra && canGiveComputerChips) {
			rewardText = "IOT " + rewardText;
			rewardMaterials.computerChips += 1;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Overgrown " + rewardText;
			rewardMaterials.wood *= 3;
			rewardMaterials.wood += 20;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.01 && !addedExtra) {
			rewardText = "Tiny " + rewardText;
			rewardMaterials.multiply(0.75);
			addedExtra = true;
		}
		extraWordR -= 0.01;
		if(extraWordR < 0.02 && !addedExtra && canGiveComputerChips) {
			rewardText = "Luminous " + rewardText;
			rewardMaterials.computerChips += 1;
			rewardMaterials.knowledge += 2;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Dark " + rewardText;
			rewardMaterials.knowledge += 5;
			rewardMaterials.stone += 2;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Stony " + rewardText;
			rewardMaterials.stone += 20;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Ancient " + rewardText;
			rewardMaterials.stone += 10;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Starry " + rewardText;
			rewardMaterials.stone += 10;
			rewardMaterials.knowledge += 5;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Delicious " + rewardText;
			var _g2 = rewardMaterials;
			_g2.set_food(_g2.food + 10);
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Profitable " + rewardText;
			rewardMaterials.multiply(1.2);
			var _g3 = rewardMaterials;
			_g3.set_food(_g3.food + 15);
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra) {
			rewardText = "Extremely Normal-Looking " + rewardText;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra && canGiveRefinedMetal) {
			rewardText = "Shiny " + rewardText;
			rewardMaterials.refinedMetal += 10;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra && canGiveMachineParts) {
			rewardText = "Dancing " + rewardText;
			rewardMaterials.machineParts += 8;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		if(extraWordR < 0.02 && !addedExtra && canGiveComputerChips) {
			rewardText = "Computerized " + rewardText;
			rewardMaterials.computerChips += 2;
			addedExtra = true;
		}
		extraWordR -= 0.02;
		var productionBasedMultiplier = Math.pow(this.city.simulation.stats.materialProduction[MaterialsHelper.findMaterialIndex("wood")][1] + this.city.simulation.stats.materialProduction[MaterialsHelper.findMaterialIndex("stone")][1] + this.city.simulation.stats.materialProduction[MaterialsHelper.findMaterialIndex("food")][1] + this.city.simulation.stats.materialProduction[MaterialsHelper.findMaterialIndex("knowledge")][1],0.66) / 16;
		rewardMaterials.multiply(productionBasedMultiplier < 1 ? 1 : productionBasedMultiplier > 12 ? 12 : productionBasedMultiplier);
		rewardMaterials.roundAll();
		return { text : rewardText, materials : rewardMaterials};
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(simulation_BoostManager.saveDefinition);
		}
		var value = this.boostLeft;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["boostLeft"] != null ? loadMap.existsReserved("boostLeft") : loadMap.h.hasOwnProperty("boostLeft")) {
			this.boostLeft = __map_reserved["boostLeft"] != null ? loadMap.getReserved("boostLeft") : loadMap.h["boostLeft"];
		}
	}
	,__class__: simulation_BoostManager
};
var simulation_CitizenEntertainment = function(citizen) {
	this.entertainmentInited = false;
	this.tryForDayEntertainment = 0;
	this.tryForEntertainment = 0;
	this.entertainmentFinishedTime = 0;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 6) {
		var i = _g1++;
		_g.push(0.0);
	}
	this.recentEntertainmentTypes = _g;
	this.citizen = citizen;
	this.entertainmentInited = false;
	this.tryForDayEntertainment = 0;
	this.setAgeRelatedEntertainment();
};
$hxClasses["simulation.CitizenEntertainment"] = simulation_CitizenEntertainment;
simulation_CitizenEntertainment.__name__ = ["simulation","CitizenEntertainment"];
simulation_CitizenEntertainment.prototype = {
	get_normallyAtHomeTimeFrom: function() {
		var tmp = this.citizen.get_workTimePreference();
		var tmp1;
		if(this.citizen.job == null) {
			tmp1 = 23;
		} else {
			var this1 = this.citizen.job.endTime;
			var this2 = this1;
			var newTime = this2;
			newTime += 4;
			newTime %= 24;
			tmp1 = newTime;
		}
		return tmp + tmp1;
	}
	,get_normallyAtHomeTimeTo: function() {
		var tmp = this.citizen.get_workTimePreference();
		var tmp1;
		if(this.citizen.job == null) {
			tmp1 = 8;
		} else {
			var this1 = this.citizen.job.startTime;
			tmp1 = this1;
		}
		return tmp + tmp1;
	}
	,setAgeRelatedEntertainment: function() {
		if(this.citizen.get_age() < 16 && random_Random.getInt(1000) < 998) {
			this.recentEntertainmentTypes[0] = this.citizen.simulation.time.timeSinceStart + 1440 * (this.citizen.get_age() - random_Random.getFloat(14,16));
		}
	}
	,updateEntertainment: function(timeMod) {
		var busy = false;
		if(this.citizen.inPermanent != null && this.citizen.inPermanent.isBuilding && this.citizen.inPermanent.isEntertainment) {
			var busy1 = true;
			var entertainmentBuilding = this.citizen.inPermanent;
			var timeSinceStart = this.citizen.simulation.time.timeSinceStart;
			if(!this.entertainmentInited) {
				if(entertainmentBuilding.get_isOpen()) {
					var currentEntertainmentDesirability = 1.0;
					if(this.citizen.job == null && this.citizen.school == null) {
						currentEntertainmentDesirability = 0.75;
					}
					this.entertainmentFinishedTime = timeSinceStart + 60 * random_Random.getFloat(entertainmentBuilding.get_minimumNormalTimeToSpend(),entertainmentBuilding.get_maximumNormalTimeToSpend());
					this.recentEntertainmentTypes[entertainmentBuilding.get_entertainmentType()] = timeSinceStart + 1440 * random_Random.getFloat(entertainmentBuilding.get_minimumEntertainmentGroupSatisfy(),entertainmentBuilding.get_maximumEntertainmentGroupSatisfy()) * currentEntertainmentDesirability;
					this.entertainmentInited = true;
				} else {
					this.entertainmentFinishedTime = timeSinceStart - 1000;
				}
			}
			if(!entertainmentBuilding.get_isOpenForExistingVisitors() || timeSinceStart >= this.entertainmentFinishedTime) {
				if(entertainmentBuilding.finishEntertainment(this.citizen,timeMod)) {
					busy1 = false;
					this.entertainmentInited = false;
				} else {
					entertainmentBuilding.beEntertained(this.citizen,timeMod);
				}
			} else {
				entertainmentBuilding.beEntertained(this.citizen,timeMod);
			}
			busy = busy1;
		}
		if(busy) {
			return true;
		}
		var tmp;
		var tmp1;
		if(this.citizen.get_age() > 16 && this.citizen.likesNightclubs) {
			var this1 = this.citizen.simulation.time.timeSinceStart / 60 % 24;
			var start = 23 + this.citizen.get_workTimePreference();
			var end = 6 + this.citizen.get_workTimePreference();
			if(start < end) {
				if(this1 >= start) {
					tmp1 = this1 < end;
				} else {
					tmp1 = false;
				}
			} else if(!(this1 >= start)) {
				tmp1 = this1 < end;
			} else {
				tmp1 = true;
			}
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = this.citizen.wantsNightEntertainmentIn <= 0;
		} else {
			tmp = false;
		}
		if(tmp) {
			busy = this.searchNightEntertainment();
		} else {
			var this2 = this.citizen.simulation.time.timeSinceStart / 60 % 24;
			var start1 = this.get_normallyAtHomeTimeFrom();
			var end1 = this.get_normallyAtHomeTimeTo();
			if(!(start1 < end1 ? this2 >= start1 && this2 < end1 : this2 >= start1 || this2 < end1)) {
				busy = this.searchDayEntertainment();
			}
		}
		return busy;
	}
	,stop: function() {
		this.entertainmentInited = false;
	}
	,searchNightEntertainment: function() {
		if(this.citizen.simulation.time.timeSinceStart >= this.tryForEntertainment) {
			if(!this.citizen.simulation.permanentFinder.canPerformQuery()) {
				return true;
			}
			var _this = this.citizen.simulation.permanentFinder;
			var citizen = this.citizen;
			var maximumDistance = random_Random.getFloat() < 0.02 ? 480 : 320;
			var time = _this.city.simulation.time.timeSinceStart;
			var xInd;
			var yInd;
			if(citizen.inPermanent != null) {
				xInd = citizen.inPermanent.worldPosition.x;
				yInd = citizen.inPermanent.worldPosition.y / 5 | 0;
			} else {
				xInd = (citizen.relativeX | 0) / 20 | 0;
				yInd = 0;
			}
			var key = citizen.onWorld.rect.x + ";" + citizen.onWorld.rect.y + ";" + xInd + ";" + yInd + "nightEntertainmentFind";
			var savedResult = _this.savedResults.get(key);
			var permanentToReturn = null;
			if(savedResult != null) {
				if(time < savedResult.expiry) {
					permanentToReturn = savedResult.permanent;
				} else {
					var tmp;
					if(savedResult.permanent != null) {
						var pm = savedResult.permanent;
						if(!pm.isBuilding || !pm.isEntertainment) {
							tmp = false;
						} else {
							var entertainmentBuilding = pm;
							tmp = entertainmentBuilding.get_isOpen();
						}
					} else {
						tmp = false;
					}
					if(tmp) {
						savedResult.expiry += 60;
						permanentToReturn = savedResult.permanent;
					}
				}
			}
			if(permanentToReturn == null) {
				var foundPermanent;
				if(citizen.inPermanent != null) {
					var from = citizen.inPermanent;
					var citizen1 = null;
					var _gthis = _this;
					_this.updateQueries += 1;
					_this.pfSeenStart += 3;
					if(_this.pfSeenStart > 100000) {
						_this.pfSeenStart = 1;
					}
					if(from != null) {
						var newPrioritizable = pathfinder_PermanentPrioritizable.create(0,from);
						from.pfRelatedPrioritizable = newPrioritizable;
						_this.pathQueue.enqueue(newPrioritizable);
					} else {
						var _g = 0;
						var _g1 = null.permanents;
						while(_g < _g1.length) {
							var bottomPermanents = _g1[_g];
							++_g;
							if(bottomPermanents.length == 0 || bottomPermanents[0] == null) {
								continue;
							}
							var newPriority = Math.abs(bottomPermanents[0].position.x);
							if(maximumDistance != -1 && newPriority > maximumDistance) {
								continue;
							}
							bottomPermanents[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority,bottomPermanents[0]);
							_this.pathQueue.enqueue(bottomPermanents[0].pfRelatedPrioritizable);
							bottomPermanents[0].pfSeen = _this.pfSeenStart;
						}
					}
					var maxNiceNess = -10000.0;
					var bestPermanent = null;
					var landingSiteGroups = _this.city.connections.landingSiteGroups;
					var teleportersDone = false;
					var _g2 = [];
					var _g11 = 0;
					while(_g11 < landingSiteGroups.length) {
						var i = landingSiteGroups[_g11];
						++_g11;
						_g2.push(false);
					}
					var landingSitesDone = _g2;
					var privateTeleporter = null;
					if(citizen1 != null && citizen1.home != null) {
						if(citizen1.home.get_hasPrivateTeleporter()) {
							privateTeleporter = citizen1.home;
						} else {
							privateTeleporter = null;
						}
					}
					while(_this.pathQueue.mSize != 0) {
						var currentQueueItem = _this.pathQueue.dequeue();
						var currentPermanent = currentQueueItem.permanent;
						currentPermanent.pfSeen = _this.pfSeenStart + 1;
						var foundPermanent1;
						if(!currentPermanent.isBuilding || !currentPermanent.isEntertainment) {
							foundPermanent1 = false;
						} else {
							var entertainmentBuilding1 = currentPermanent;
							foundPermanent1 = entertainmentBuilding1.get_isOpen();
						}
						if(foundPermanent1) {
							while(_this.pathQueue.mSize != 0) _this.pathQueue.dequeue().destroy();
							bestPermanent = currentPermanent;
							break;
						}
						if(currentPermanent.isBuilding) {
							var currentBuilding = currentPermanent;
							var permanentTo = currentBuilding.leftBuilding;
							if(permanentTo != null) {
								if(permanentTo.pfSeen == _gthis.pfSeenStart) {
									var relatedPrioritizable = permanentTo.pfRelatedPrioritizable;
									var newPriority1 = currentQueueItem.priority + 20;
									if(newPriority1 < relatedPrioritizable.priority) {
										_gthis.pathQueue.reprioritize(relatedPrioritizable,newPriority1);
									}
								} else if(permanentTo.pfSeen != _gthis.pfSeenStart + 1) {
									var newPriority2 = currentQueueItem.priority + 20;
									if(maximumDistance == -1 || newPriority2 <= maximumDistance) {
										permanentTo.pfSeen = _gthis.pfSeenStart;
										permanentTo.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority2,permanentTo);
										_gthis.pathQueue.enqueue(permanentTo.pfRelatedPrioritizable);
									}
								}
							}
							var permanentTo1 = currentBuilding.rightBuilding;
							if(permanentTo1 != null) {
								if(permanentTo1.pfSeen == _gthis.pfSeenStart) {
									var relatedPrioritizable1 = permanentTo1.pfRelatedPrioritizable;
									var newPriority3 = currentQueueItem.priority + 20;
									if(newPriority3 < relatedPrioritizable1.priority) {
										_gthis.pathQueue.reprioritize(relatedPrioritizable1,newPriority3);
									}
								} else if(permanentTo1.pfSeen != _gthis.pfSeenStart + 1) {
									var newPriority4 = currentQueueItem.priority + 20;
									if(maximumDistance == -1 || newPriority4 <= maximumDistance) {
										permanentTo1.pfSeen = _gthis.pfSeenStart;
										permanentTo1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority4,permanentTo1);
										_gthis.pathQueue.enqueue(permanentTo1.pfRelatedPrioritizable);
									}
								}
							}
							var permanentTo2 = currentBuilding.topBuilding;
							if(permanentTo2 != null) {
								if(permanentTo2.pfSeen == _gthis.pfSeenStart) {
									var relatedPrioritizable2 = permanentTo2.pfRelatedPrioritizable;
									var newPriority5 = currentQueueItem.priority + 20;
									if(newPriority5 < relatedPrioritizable2.priority) {
										_gthis.pathQueue.reprioritize(relatedPrioritizable2,newPriority5);
									}
								} else if(permanentTo2.pfSeen != _gthis.pfSeenStart + 1) {
									var newPriority6 = currentQueueItem.priority + 20;
									if(maximumDistance == -1 || newPriority6 <= maximumDistance) {
										permanentTo2.pfSeen = _gthis.pfSeenStart;
										permanentTo2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority6,permanentTo2);
										_gthis.pathQueue.enqueue(permanentTo2.pfRelatedPrioritizable);
									}
								}
							}
							var permanentTo3 = currentBuilding.bottomBuilding;
							if(permanentTo3 != null) {
								if(permanentTo3.pfSeen == _gthis.pfSeenStart) {
									var relatedPrioritizable3 = permanentTo3.pfRelatedPrioritizable;
									var newPriority7 = currentQueueItem.priority + 20;
									if(newPriority7 < relatedPrioritizable3.priority) {
										_gthis.pathQueue.reprioritize(relatedPrioritizable3,newPriority7);
									}
								} else if(permanentTo3.pfSeen != _gthis.pfSeenStart + 1) {
									var newPriority8 = currentQueueItem.priority + 20;
									if(maximumDistance == -1 || newPriority8 <= maximumDistance) {
										permanentTo3.pfSeen = _gthis.pfSeenStart;
										permanentTo3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority8,permanentTo3);
										_gthis.pathQueue.enqueue(permanentTo3.pfRelatedPrioritizable);
									}
								}
							}
							var isPrivateTeleporter = privateTeleporter == currentPermanent;
							var canTeleportFromHere = currentPermanent["is"](buildings_Teleporter) || isPrivateTeleporter;
							if(!teleportersDone && canTeleportFromHere) {
								var rnd = random_Random.getFloat(2);
								var tp = 0;
								var len = _this.city.teleporters.length;
								var invlen = 2 / len;
								var _g21 = 0;
								var _g12 = len;
								while(_g21 < _g12) {
									var tp1 = _g21++;
									var teleporter = _this.city.teleporters[tp1];
									var priorityAdd = 9 + (rnd + tp1 * invlen) % 2.0;
									if(teleporter != null) {
										if(teleporter.pfSeen == _gthis.pfSeenStart) {
											var relatedPrioritizable4 = teleporter.pfRelatedPrioritizable;
											var newPriority9 = currentQueueItem.priority + priorityAdd;
											if(newPriority9 < relatedPrioritizable4.priority) {
												_gthis.pathQueue.reprioritize(relatedPrioritizable4,newPriority9);
											}
										} else if(teleporter.pfSeen != _gthis.pfSeenStart + 1) {
											var newPriority10 = currentQueueItem.priority + priorityAdd;
											if(maximumDistance == -1 || newPriority10 <= maximumDistance) {
												teleporter.pfSeen = _gthis.pfSeenStart;
												teleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority10,teleporter);
												_gthis.pathQueue.enqueue(teleporter.pfRelatedPrioritizable);
											}
										}
									}
								}
								if(!isPrivateTeleporter && privateTeleporter != null) {
									if(privateTeleporter != null) {
										if(privateTeleporter.pfSeen == _gthis.pfSeenStart) {
											var relatedPrioritizable5 = privateTeleporter.pfRelatedPrioritizable;
											var newPriority11 = currentQueueItem.priority + 10;
											if(newPriority11 < relatedPrioritizable5.priority) {
												_gthis.pathQueue.reprioritize(relatedPrioritizable5,newPriority11);
											}
										} else if(privateTeleporter.pfSeen != _gthis.pfSeenStart + 1) {
											var newPriority12 = currentQueueItem.priority + 10;
											if(maximumDistance == -1 || newPriority12 <= maximumDistance) {
												privateTeleporter.pfSeen = _gthis.pfSeenStart;
												privateTeleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority12,privateTeleporter);
												_gthis.pathQueue.enqueue(privateTeleporter.pfRelatedPrioritizable);
											}
										}
									}
								}
								teleportersDone = true;
							} else if(currentPermanent["is"](buildings_LandingSite) && !landingSitesDone[currentPermanent.landingSiteGroup]) {
								var thisGroup = currentPermanent.landingSiteGroup;
								var _g13 = 0;
								var _g22 = _this.city.connections.landingSiteGroups[thisGroup];
								while(_g13 < _g22.length) {
									var landingSite = _g22[_g13];
									++_g13;
									var priorityAdd1 = landingSite.estimatedFlyingDistanceTo(currentPermanent);
									if(landingSite != null) {
										if(landingSite.pfSeen == _gthis.pfSeenStart) {
											var relatedPrioritizable6 = landingSite.pfRelatedPrioritizable;
											var newPriority13 = currentQueueItem.priority + priorityAdd1;
											if(newPriority13 < relatedPrioritizable6.priority) {
												_gthis.pathQueue.reprioritize(relatedPrioritizable6,newPriority13);
											}
										} else if(landingSite.pfSeen != _gthis.pfSeenStart + 1) {
											var newPriority14 = currentQueueItem.priority + priorityAdd1;
											if(maximumDistance == -1 || newPriority14 <= maximumDistance) {
												landingSite.pfSeen = _gthis.pfSeenStart;
												landingSite.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority14,landingSite);
												_gthis.pathQueue.enqueue(landingSite.pfRelatedPrioritizable);
											}
										}
									}
								}
								landingSitesDone[thisGroup] = true;
							} else if(!currentQueueItem.dontCheckElevators && currentPermanent["is"](buildings_HyperElevator) && currentPermanent.pfSeen != 3) {
								var _g14 = 0;
								var _g23 = _this.city.connections.elevatorConnections.get(currentBuilding.world)[currentBuilding.worldPosition.x];
								while(_g14 < _g23.length) {
									var elevator = _g23[_g14];
									++_g14;
									var priorityAdd2 = Math.abs(elevator.worldPosition.y - currentBuilding.worldPosition.y);
									if(elevator != null) {
										if(elevator.pfSeen == _gthis.pfSeenStart) {
											var relatedPrioritizable7 = elevator.pfRelatedPrioritizable;
											var newPriority15 = currentQueueItem.priority + priorityAdd2;
											if(newPriority15 < relatedPrioritizable7.priority) {
												_gthis.pathQueue.reprioritize(relatedPrioritizable7,newPriority15);
											}
										} else if(elevator.pfSeen != _gthis.pfSeenStart + 1) {
											var newPriority16 = currentQueueItem.priority + priorityAdd2;
											if(maximumDistance == -1 || newPriority16 <= maximumDistance) {
												elevator.pfSeen = _gthis.pfSeenStart;
												elevator.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority16,elevator);
												_gthis.pathQueue.enqueue(elevator.pfRelatedPrioritizable);
											}
										}
									}
									if(elevator.pfRelatedPrioritizable != null) {
										elevator.pfRelatedPrioritizable.dontCheckElevators = true;
									}
								}
							}
						}
						if(currentPermanent.worldPosition.y == 0) {
							var _g15 = 0;
							var _g24 = currentPermanent.world.permanents;
							while(_g15 < _g24.length) {
								var bottomPermanents1 = _g24[_g15];
								++_g15;
								if(bottomPermanents1.length == 0 || bottomPermanents1[0] == null) {
									continue;
								}
								var permanentTo4 = bottomPermanents1[0];
								var priorityAdd3 = Math.abs(bottomPermanents1[0].position.x - currentPermanent.position.x);
								if(permanentTo4 != null) {
									if(permanentTo4.pfSeen == _gthis.pfSeenStart) {
										var relatedPrioritizable8 = permanentTo4.pfRelatedPrioritizable;
										var newPriority17 = currentQueueItem.priority + priorityAdd3;
										if(newPriority17 < relatedPrioritizable8.priority) {
											_gthis.pathQueue.reprioritize(relatedPrioritizable8,newPriority17);
										}
									} else if(permanentTo4.pfSeen != _gthis.pfSeenStart + 1) {
										var newPriority18 = currentQueueItem.priority + priorityAdd3;
										if(maximumDistance == -1 || newPriority18 <= maximumDistance) {
											permanentTo4.pfSeen = _gthis.pfSeenStart;
											permanentTo4.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority18,permanentTo4);
											_gthis.pathQueue.enqueue(permanentTo4.pfRelatedPrioritizable);
										}
									}
								}
							}
						}
						currentQueueItem.destroy();
					}
					foundPermanent = bestPermanent;
				} else {
					var fromWorldX = citizen.relativeX;
					var citizen2 = null;
					var _gthis1 = _this;
					_this.updateQueries += 1;
					_this.pfSeenStart += 3;
					if(_this.pfSeenStart > 100000) {
						_this.pfSeenStart = 1;
					}
					var _g3 = 0;
					var _g16 = citizen.onWorld.permanents;
					while(_g3 < _g16.length) {
						var bottomPermanents2 = _g16[_g3];
						++_g3;
						if(bottomPermanents2.length == 0 || bottomPermanents2[0] == null) {
							continue;
						}
						var newPriority19 = Math.abs(bottomPermanents2[0].position.x - fromWorldX);
						if(maximumDistance != -1 && newPriority19 > maximumDistance) {
							continue;
						}
						bottomPermanents2[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority19,bottomPermanents2[0]);
						_this.pathQueue.enqueue(bottomPermanents2[0].pfRelatedPrioritizable);
						bottomPermanents2[0].pfSeen = _this.pfSeenStart;
					}
					var maxNiceNess1 = -10000.0;
					var bestPermanent1 = null;
					var landingSiteGroups1 = _this.city.connections.landingSiteGroups;
					var teleportersDone1 = false;
					var _g4 = [];
					var _g17 = 0;
					while(_g17 < landingSiteGroups1.length) {
						var i1 = landingSiteGroups1[_g17];
						++_g17;
						_g4.push(false);
					}
					var landingSitesDone1 = _g4;
					var privateTeleporter1 = null;
					if(citizen2 != null && citizen2.home != null) {
						if(citizen2.home.get_hasPrivateTeleporter()) {
							privateTeleporter1 = citizen2.home;
						} else {
							privateTeleporter1 = null;
						}
					}
					while(_this.pathQueue.mSize != 0) {
						var currentQueueItem1 = _this.pathQueue.dequeue();
						var currentPermanent1 = currentQueueItem1.permanent;
						currentPermanent1.pfSeen = _this.pfSeenStart + 1;
						var foundPermanent2;
						if(!currentPermanent1.isBuilding || !currentPermanent1.isEntertainment) {
							foundPermanent2 = false;
						} else {
							var entertainmentBuilding2 = currentPermanent1;
							foundPermanent2 = entertainmentBuilding2.get_isOpen();
						}
						if(foundPermanent2) {
							while(_this.pathQueue.mSize != 0) _this.pathQueue.dequeue().destroy();
							bestPermanent1 = currentPermanent1;
							break;
						}
						if(currentPermanent1.isBuilding) {
							var currentBuilding1 = currentPermanent1;
							var permanentTo5 = currentBuilding1.leftBuilding;
							if(permanentTo5 != null) {
								if(permanentTo5.pfSeen == _gthis1.pfSeenStart) {
									var relatedPrioritizable9 = permanentTo5.pfRelatedPrioritizable;
									var newPriority20 = currentQueueItem1.priority + 20;
									if(newPriority20 < relatedPrioritizable9.priority) {
										_gthis1.pathQueue.reprioritize(relatedPrioritizable9,newPriority20);
									}
								} else if(permanentTo5.pfSeen != _gthis1.pfSeenStart + 1) {
									var newPriority21 = currentQueueItem1.priority + 20;
									if(maximumDistance == -1 || newPriority21 <= maximumDistance) {
										permanentTo5.pfSeen = _gthis1.pfSeenStart;
										permanentTo5.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority21,permanentTo5);
										_gthis1.pathQueue.enqueue(permanentTo5.pfRelatedPrioritizable);
									}
								}
							}
							var permanentTo6 = currentBuilding1.rightBuilding;
							if(permanentTo6 != null) {
								if(permanentTo6.pfSeen == _gthis1.pfSeenStart) {
									var relatedPrioritizable10 = permanentTo6.pfRelatedPrioritizable;
									var newPriority22 = currentQueueItem1.priority + 20;
									if(newPriority22 < relatedPrioritizable10.priority) {
										_gthis1.pathQueue.reprioritize(relatedPrioritizable10,newPriority22);
									}
								} else if(permanentTo6.pfSeen != _gthis1.pfSeenStart + 1) {
									var newPriority23 = currentQueueItem1.priority + 20;
									if(maximumDistance == -1 || newPriority23 <= maximumDistance) {
										permanentTo6.pfSeen = _gthis1.pfSeenStart;
										permanentTo6.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority23,permanentTo6);
										_gthis1.pathQueue.enqueue(permanentTo6.pfRelatedPrioritizable);
									}
								}
							}
							var permanentTo7 = currentBuilding1.topBuilding;
							if(permanentTo7 != null) {
								if(permanentTo7.pfSeen == _gthis1.pfSeenStart) {
									var relatedPrioritizable11 = permanentTo7.pfRelatedPrioritizable;
									var newPriority24 = currentQueueItem1.priority + 20;
									if(newPriority24 < relatedPrioritizable11.priority) {
										_gthis1.pathQueue.reprioritize(relatedPrioritizable11,newPriority24);
									}
								} else if(permanentTo7.pfSeen != _gthis1.pfSeenStart + 1) {
									var newPriority25 = currentQueueItem1.priority + 20;
									if(maximumDistance == -1 || newPriority25 <= maximumDistance) {
										permanentTo7.pfSeen = _gthis1.pfSeenStart;
										permanentTo7.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority25,permanentTo7);
										_gthis1.pathQueue.enqueue(permanentTo7.pfRelatedPrioritizable);
									}
								}
							}
							var permanentTo8 = currentBuilding1.bottomBuilding;
							if(permanentTo8 != null) {
								if(permanentTo8.pfSeen == _gthis1.pfSeenStart) {
									var relatedPrioritizable12 = permanentTo8.pfRelatedPrioritizable;
									var newPriority26 = currentQueueItem1.priority + 20;
									if(newPriority26 < relatedPrioritizable12.priority) {
										_gthis1.pathQueue.reprioritize(relatedPrioritizable12,newPriority26);
									}
								} else if(permanentTo8.pfSeen != _gthis1.pfSeenStart + 1) {
									var newPriority27 = currentQueueItem1.priority + 20;
									if(maximumDistance == -1 || newPriority27 <= maximumDistance) {
										permanentTo8.pfSeen = _gthis1.pfSeenStart;
										permanentTo8.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority27,permanentTo8);
										_gthis1.pathQueue.enqueue(permanentTo8.pfRelatedPrioritizable);
									}
								}
							}
							var isPrivateTeleporter1 = privateTeleporter1 == currentPermanent1;
							var canTeleportFromHere1 = currentPermanent1["is"](buildings_Teleporter) || isPrivateTeleporter1;
							if(!teleportersDone1 && canTeleportFromHere1) {
								var rnd1 = random_Random.getFloat(2);
								var tp2 = 0;
								var len1 = _this.city.teleporters.length;
								var invlen1 = 2 / len1;
								var _g25 = 0;
								var _g18 = len1;
								while(_g25 < _g18) {
									var tp3 = _g25++;
									var teleporter1 = _this.city.teleporters[tp3];
									var priorityAdd4 = 9 + (rnd1 + tp3 * invlen1) % 2.0;
									if(teleporter1 != null) {
										if(teleporter1.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable13 = teleporter1.pfRelatedPrioritizable;
											var newPriority28 = currentQueueItem1.priority + priorityAdd4;
											if(newPriority28 < relatedPrioritizable13.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable13,newPriority28);
											}
										} else if(teleporter1.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority29 = currentQueueItem1.priority + priorityAdd4;
											if(maximumDistance == -1 || newPriority29 <= maximumDistance) {
												teleporter1.pfSeen = _gthis1.pfSeenStart;
												teleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority29,teleporter1);
												_gthis1.pathQueue.enqueue(teleporter1.pfRelatedPrioritizable);
											}
										}
									}
								}
								if(!isPrivateTeleporter1 && privateTeleporter1 != null) {
									if(privateTeleporter1 != null) {
										if(privateTeleporter1.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable14 = privateTeleporter1.pfRelatedPrioritizable;
											var newPriority30 = currentQueueItem1.priority + 10;
											if(newPriority30 < relatedPrioritizable14.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable14,newPriority30);
											}
										} else if(privateTeleporter1.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority31 = currentQueueItem1.priority + 10;
											if(maximumDistance == -1 || newPriority31 <= maximumDistance) {
												privateTeleporter1.pfSeen = _gthis1.pfSeenStart;
												privateTeleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority31,privateTeleporter1);
												_gthis1.pathQueue.enqueue(privateTeleporter1.pfRelatedPrioritizable);
											}
										}
									}
								}
								teleportersDone1 = true;
							} else if(currentPermanent1["is"](buildings_LandingSite) && !landingSitesDone1[currentPermanent1.landingSiteGroup]) {
								var thisGroup1 = currentPermanent1.landingSiteGroup;
								var _g19 = 0;
								var _g26 = _this.city.connections.landingSiteGroups[thisGroup1];
								while(_g19 < _g26.length) {
									var landingSite1 = _g26[_g19];
									++_g19;
									var priorityAdd5 = landingSite1.estimatedFlyingDistanceTo(currentPermanent1);
									if(landingSite1 != null) {
										if(landingSite1.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable15 = landingSite1.pfRelatedPrioritizable;
											var newPriority32 = currentQueueItem1.priority + priorityAdd5;
											if(newPriority32 < relatedPrioritizable15.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable15,newPriority32);
											}
										} else if(landingSite1.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority33 = currentQueueItem1.priority + priorityAdd5;
											if(maximumDistance == -1 || newPriority33 <= maximumDistance) {
												landingSite1.pfSeen = _gthis1.pfSeenStart;
												landingSite1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority33,landingSite1);
												_gthis1.pathQueue.enqueue(landingSite1.pfRelatedPrioritizable);
											}
										}
									}
								}
								landingSitesDone1[thisGroup1] = true;
							} else if(!currentQueueItem1.dontCheckElevators && currentPermanent1["is"](buildings_HyperElevator) && currentPermanent1.pfSeen != 3) {
								var _g110 = 0;
								var _g27 = _this.city.connections.elevatorConnections.get(currentBuilding1.world)[currentBuilding1.worldPosition.x];
								while(_g110 < _g27.length) {
									var elevator1 = _g27[_g110];
									++_g110;
									var priorityAdd6 = Math.abs(elevator1.worldPosition.y - currentBuilding1.worldPosition.y);
									if(elevator1 != null) {
										if(elevator1.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable16 = elevator1.pfRelatedPrioritizable;
											var newPriority34 = currentQueueItem1.priority + priorityAdd6;
											if(newPriority34 < relatedPrioritizable16.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable16,newPriority34);
											}
										} else if(elevator1.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority35 = currentQueueItem1.priority + priorityAdd6;
											if(maximumDistance == -1 || newPriority35 <= maximumDistance) {
												elevator1.pfSeen = _gthis1.pfSeenStart;
												elevator1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority35,elevator1);
												_gthis1.pathQueue.enqueue(elevator1.pfRelatedPrioritizable);
											}
										}
									}
									if(elevator1.pfRelatedPrioritizable != null) {
										elevator1.pfRelatedPrioritizable.dontCheckElevators = true;
									}
								}
							}
						}
						if(currentPermanent1.worldPosition.y == 0) {
							var _g111 = 0;
							var _g28 = currentPermanent1.world.permanents;
							while(_g111 < _g28.length) {
								var bottomPermanents3 = _g28[_g111];
								++_g111;
								if(bottomPermanents3.length == 0 || bottomPermanents3[0] == null) {
									continue;
								}
								var permanentTo9 = bottomPermanents3[0];
								var priorityAdd7 = Math.abs(bottomPermanents3[0].position.x - currentPermanent1.position.x);
								if(permanentTo9 != null) {
									if(permanentTo9.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable17 = permanentTo9.pfRelatedPrioritizable;
										var newPriority36 = currentQueueItem1.priority + priorityAdd7;
										if(newPriority36 < relatedPrioritizable17.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable17,newPriority36);
										}
									} else if(permanentTo9.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority37 = currentQueueItem1.priority + priorityAdd7;
										if(maximumDistance == -1 || newPriority37 <= maximumDistance) {
											permanentTo9.pfSeen = _gthis1.pfSeenStart;
											permanentTo9.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority37,permanentTo9);
											_gthis1.pathQueue.enqueue(permanentTo9.pfRelatedPrioritizable);
										}
									}
								}
							}
						}
						currentQueueItem1.destroy();
					}
					foundPermanent = bestPermanent1;
				}
				var v = { permanent : foundPermanent, expiry : time + 60};
				_this.savedResults.set(key,v);
				permanentToReturn = foundPermanent;
			}
			var nightEntertainment = permanentToReturn;
			if(nightEntertainment == null) {
				this.tryForEntertainment = this.citizen.simulation.time.timeSinceStart + 120 * this.citizen.simulation.time.minutesPerTick;
			} else {
				var _this1 = this.citizen;
				_this1.simulation.pathfinder.findPath(_this1,nightEntertainment);
				_this1.pathOnFail = null;
				this.entertainmentInited = false;
				return true;
			}
		}
		return false;
	}
	,searchDayEntertainment: function() {
		var _gthis = this;
		var timeSinceStart = this.citizen.simulation.time.timeSinceStart;
		if(timeSinceStart >= this.tryForDayEntertainment) {
			if(!this.citizen.simulation.permanentFinder.canPerformQuery()) {
				return false;
			}
			var _this = this.citizen.simulation.permanentFinder;
			var citizen = this.citizen;
			var maximumDistance = random_Random.getFloat() < 0.02 ? 480 : 160;
			var dayEntertainment;
			if(citizen.inPermanent != null) {
				var from = citizen.inPermanent;
				var citizen1 = citizen;
				var _gthis1 = _this;
				_this.updateQueries += 1;
				_this.pfSeenStart += 3;
				if(_this.pfSeenStart > 100000) {
					_this.pfSeenStart = 1;
				}
				if(from != null) {
					var newPrioritizable = pathfinder_PermanentPrioritizable.create(0,from);
					from.pfRelatedPrioritizable = newPrioritizable;
					_this.pathQueue.enqueue(newPrioritizable);
				} else {
					var _g = 0;
					var _g1 = null.permanents;
					while(_g < _g1.length) {
						var bottomPermanents = _g1[_g];
						++_g;
						if(bottomPermanents.length == 0 || bottomPermanents[0] == null) {
							continue;
						}
						var newPriority = Math.abs(bottomPermanents[0].position.x);
						if(maximumDistance != -1 && newPriority > maximumDistance) {
							continue;
						}
						bottomPermanents[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority,bottomPermanents[0]);
						_this.pathQueue.enqueue(bottomPermanents[0].pfRelatedPrioritizable);
						bottomPermanents[0].pfSeen = _this.pfSeenStart;
					}
				}
				var maxNiceNess = -10000.0;
				var bestPermanent = null;
				var landingSiteGroups = _this.city.connections.landingSiteGroups;
				var teleportersDone = false;
				var _g2 = [];
				var _g11 = 0;
				while(_g11 < landingSiteGroups.length) {
					var i = landingSiteGroups[_g11];
					++_g11;
					_g2.push(false);
				}
				var landingSitesDone = _g2;
				var privateTeleporter = null;
				if(citizen1 != null && citizen1.home != null) {
					if(citizen1.home.get_hasPrivateTeleporter()) {
						privateTeleporter = citizen1.home;
					} else {
						privateTeleporter = null;
					}
				}
				while(_this.pathQueue.mSize != 0) {
					var currentQueueItem = _this.pathQueue.dequeue();
					var currentPermanent = currentQueueItem.permanent;
					currentPermanent.pfSeen = _this.pfSeenStart + 1;
					var dayEntertainment1;
					if(!currentPermanent.isBuilding || !currentPermanent.isEntertainment) {
						dayEntertainment1 = false;
					} else {
						var entertainmentBuilding = currentPermanent;
						if(entertainmentBuilding.get_isOpen()) {
							dayEntertainment1 = timeSinceStart >= _gthis.recentEntertainmentTypes[entertainmentBuilding.get_entertainmentType()];
						} else {
							dayEntertainment1 = false;
						}
					}
					if(dayEntertainment1) {
						while(_this.pathQueue.mSize != 0) _this.pathQueue.dequeue().destroy();
						bestPermanent = currentPermanent;
						break;
					}
					if(currentPermanent.isBuilding) {
						var currentBuilding = currentPermanent;
						var permanentTo = currentBuilding.leftBuilding;
						if(permanentTo != null) {
							if(permanentTo.pfSeen == _gthis1.pfSeenStart) {
								var relatedPrioritizable = permanentTo.pfRelatedPrioritizable;
								var newPriority1 = currentQueueItem.priority + 20;
								if(newPriority1 < relatedPrioritizable.priority) {
									_gthis1.pathQueue.reprioritize(relatedPrioritizable,newPriority1);
								}
							} else if(permanentTo.pfSeen != _gthis1.pfSeenStart + 1) {
								var newPriority2 = currentQueueItem.priority + 20;
								if(maximumDistance == -1 || newPriority2 <= maximumDistance) {
									permanentTo.pfSeen = _gthis1.pfSeenStart;
									permanentTo.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority2,permanentTo);
									_gthis1.pathQueue.enqueue(permanentTo.pfRelatedPrioritizable);
								}
							}
						}
						var permanentTo1 = currentBuilding.rightBuilding;
						if(permanentTo1 != null) {
							if(permanentTo1.pfSeen == _gthis1.pfSeenStart) {
								var relatedPrioritizable1 = permanentTo1.pfRelatedPrioritizable;
								var newPriority3 = currentQueueItem.priority + 20;
								if(newPriority3 < relatedPrioritizable1.priority) {
									_gthis1.pathQueue.reprioritize(relatedPrioritizable1,newPriority3);
								}
							} else if(permanentTo1.pfSeen != _gthis1.pfSeenStart + 1) {
								var newPriority4 = currentQueueItem.priority + 20;
								if(maximumDistance == -1 || newPriority4 <= maximumDistance) {
									permanentTo1.pfSeen = _gthis1.pfSeenStart;
									permanentTo1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority4,permanentTo1);
									_gthis1.pathQueue.enqueue(permanentTo1.pfRelatedPrioritizable);
								}
							}
						}
						var permanentTo2 = currentBuilding.topBuilding;
						if(permanentTo2 != null) {
							if(permanentTo2.pfSeen == _gthis1.pfSeenStart) {
								var relatedPrioritizable2 = permanentTo2.pfRelatedPrioritizable;
								var newPriority5 = currentQueueItem.priority + 20;
								if(newPriority5 < relatedPrioritizable2.priority) {
									_gthis1.pathQueue.reprioritize(relatedPrioritizable2,newPriority5);
								}
							} else if(permanentTo2.pfSeen != _gthis1.pfSeenStart + 1) {
								var newPriority6 = currentQueueItem.priority + 20;
								if(maximumDistance == -1 || newPriority6 <= maximumDistance) {
									permanentTo2.pfSeen = _gthis1.pfSeenStart;
									permanentTo2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority6,permanentTo2);
									_gthis1.pathQueue.enqueue(permanentTo2.pfRelatedPrioritizable);
								}
							}
						}
						var permanentTo3 = currentBuilding.bottomBuilding;
						if(permanentTo3 != null) {
							if(permanentTo3.pfSeen == _gthis1.pfSeenStart) {
								var relatedPrioritizable3 = permanentTo3.pfRelatedPrioritizable;
								var newPriority7 = currentQueueItem.priority + 20;
								if(newPriority7 < relatedPrioritizable3.priority) {
									_gthis1.pathQueue.reprioritize(relatedPrioritizable3,newPriority7);
								}
							} else if(permanentTo3.pfSeen != _gthis1.pfSeenStart + 1) {
								var newPriority8 = currentQueueItem.priority + 20;
								if(maximumDistance == -1 || newPriority8 <= maximumDistance) {
									permanentTo3.pfSeen = _gthis1.pfSeenStart;
									permanentTo3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority8,permanentTo3);
									_gthis1.pathQueue.enqueue(permanentTo3.pfRelatedPrioritizable);
								}
							}
						}
						var isPrivateTeleporter = privateTeleporter == currentPermanent;
						var canTeleportFromHere = currentPermanent["is"](buildings_Teleporter) || isPrivateTeleporter;
						if(!teleportersDone && canTeleportFromHere) {
							var rnd = random_Random.getFloat(2);
							var tp = 0;
							var len = _this.city.teleporters.length;
							var invlen = 2 / len;
							var _g21 = 0;
							var _g12 = len;
							while(_g21 < _g12) {
								var tp1 = _g21++;
								var teleporter = _this.city.teleporters[tp1];
								var priorityAdd = 9 + (rnd + tp1 * invlen) % 2.0;
								if(teleporter != null) {
									if(teleporter.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable4 = teleporter.pfRelatedPrioritizable;
										var newPriority9 = currentQueueItem.priority + priorityAdd;
										if(newPriority9 < relatedPrioritizable4.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable4,newPriority9);
										}
									} else if(teleporter.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority10 = currentQueueItem.priority + priorityAdd;
										if(maximumDistance == -1 || newPriority10 <= maximumDistance) {
											teleporter.pfSeen = _gthis1.pfSeenStart;
											teleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority10,teleporter);
											_gthis1.pathQueue.enqueue(teleporter.pfRelatedPrioritizable);
										}
									}
								}
							}
							if(!isPrivateTeleporter && privateTeleporter != null) {
								if(privateTeleporter != null) {
									if(privateTeleporter.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable5 = privateTeleporter.pfRelatedPrioritizable;
										var newPriority11 = currentQueueItem.priority + 10;
										if(newPriority11 < relatedPrioritizable5.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable5,newPriority11);
										}
									} else if(privateTeleporter.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority12 = currentQueueItem.priority + 10;
										if(maximumDistance == -1 || newPriority12 <= maximumDistance) {
											privateTeleporter.pfSeen = _gthis1.pfSeenStart;
											privateTeleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority12,privateTeleporter);
											_gthis1.pathQueue.enqueue(privateTeleporter.pfRelatedPrioritizable);
										}
									}
								}
							}
							teleportersDone = true;
						} else if(currentPermanent["is"](buildings_LandingSite) && !landingSitesDone[currentPermanent.landingSiteGroup]) {
							var thisGroup = currentPermanent.landingSiteGroup;
							var _g13 = 0;
							var _g22 = _this.city.connections.landingSiteGroups[thisGroup];
							while(_g13 < _g22.length) {
								var landingSite = _g22[_g13];
								++_g13;
								var priorityAdd1 = landingSite.estimatedFlyingDistanceTo(currentPermanent);
								if(landingSite != null) {
									if(landingSite.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable6 = landingSite.pfRelatedPrioritizable;
										var newPriority13 = currentQueueItem.priority + priorityAdd1;
										if(newPriority13 < relatedPrioritizable6.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable6,newPriority13);
										}
									} else if(landingSite.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority14 = currentQueueItem.priority + priorityAdd1;
										if(maximumDistance == -1 || newPriority14 <= maximumDistance) {
											landingSite.pfSeen = _gthis1.pfSeenStart;
											landingSite.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority14,landingSite);
											_gthis1.pathQueue.enqueue(landingSite.pfRelatedPrioritizable);
										}
									}
								}
							}
							landingSitesDone[thisGroup] = true;
						} else if(!currentQueueItem.dontCheckElevators && currentPermanent["is"](buildings_HyperElevator) && currentPermanent.pfSeen != 3) {
							var _g14 = 0;
							var _g23 = _this.city.connections.elevatorConnections.get(currentBuilding.world)[currentBuilding.worldPosition.x];
							while(_g14 < _g23.length) {
								var elevator = _g23[_g14];
								++_g14;
								var priorityAdd2 = Math.abs(elevator.worldPosition.y - currentBuilding.worldPosition.y);
								if(elevator != null) {
									if(elevator.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable7 = elevator.pfRelatedPrioritizable;
										var newPriority15 = currentQueueItem.priority + priorityAdd2;
										if(newPriority15 < relatedPrioritizable7.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable7,newPriority15);
										}
									} else if(elevator.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority16 = currentQueueItem.priority + priorityAdd2;
										if(maximumDistance == -1 || newPriority16 <= maximumDistance) {
											elevator.pfSeen = _gthis1.pfSeenStart;
											elevator.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority16,elevator);
											_gthis1.pathQueue.enqueue(elevator.pfRelatedPrioritizable);
										}
									}
								}
								if(elevator.pfRelatedPrioritizable != null) {
									elevator.pfRelatedPrioritizable.dontCheckElevators = true;
								}
							}
						}
					}
					if(currentPermanent.worldPosition.y == 0) {
						var _g15 = 0;
						var _g24 = currentPermanent.world.permanents;
						while(_g15 < _g24.length) {
							var bottomPermanents1 = _g24[_g15];
							++_g15;
							if(bottomPermanents1.length == 0 || bottomPermanents1[0] == null) {
								continue;
							}
							var permanentTo4 = bottomPermanents1[0];
							var priorityAdd3 = Math.abs(bottomPermanents1[0].position.x - currentPermanent.position.x);
							if(permanentTo4 != null) {
								if(permanentTo4.pfSeen == _gthis1.pfSeenStart) {
									var relatedPrioritizable8 = permanentTo4.pfRelatedPrioritizable;
									var newPriority17 = currentQueueItem.priority + priorityAdd3;
									if(newPriority17 < relatedPrioritizable8.priority) {
										_gthis1.pathQueue.reprioritize(relatedPrioritizable8,newPriority17);
									}
								} else if(permanentTo4.pfSeen != _gthis1.pfSeenStart + 1) {
									var newPriority18 = currentQueueItem.priority + priorityAdd3;
									if(maximumDistance == -1 || newPriority18 <= maximumDistance) {
										permanentTo4.pfSeen = _gthis1.pfSeenStart;
										permanentTo4.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority18,permanentTo4);
										_gthis1.pathQueue.enqueue(permanentTo4.pfRelatedPrioritizable);
									}
								}
							}
						}
					}
					currentQueueItem.destroy();
				}
				dayEntertainment = bestPermanent;
			} else {
				var fromWorldX = citizen.relativeX;
				var citizen2 = citizen;
				var _gthis2 = _this;
				_this.updateQueries += 1;
				_this.pfSeenStart += 3;
				if(_this.pfSeenStart > 100000) {
					_this.pfSeenStart = 1;
				}
				var _g3 = 0;
				var _g16 = citizen.onWorld.permanents;
				while(_g3 < _g16.length) {
					var bottomPermanents2 = _g16[_g3];
					++_g3;
					if(bottomPermanents2.length == 0 || bottomPermanents2[0] == null) {
						continue;
					}
					var newPriority19 = Math.abs(bottomPermanents2[0].position.x - fromWorldX);
					if(maximumDistance != -1 && newPriority19 > maximumDistance) {
						continue;
					}
					bottomPermanents2[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority19,bottomPermanents2[0]);
					_this.pathQueue.enqueue(bottomPermanents2[0].pfRelatedPrioritizable);
					bottomPermanents2[0].pfSeen = _this.pfSeenStart;
				}
				var maxNiceNess1 = -10000.0;
				var bestPermanent1 = null;
				var landingSiteGroups1 = _this.city.connections.landingSiteGroups;
				var teleportersDone1 = false;
				var _g4 = [];
				var _g17 = 0;
				while(_g17 < landingSiteGroups1.length) {
					var i1 = landingSiteGroups1[_g17];
					++_g17;
					_g4.push(false);
				}
				var landingSitesDone1 = _g4;
				var privateTeleporter1 = null;
				if(citizen2 != null && citizen2.home != null) {
					if(citizen2.home.get_hasPrivateTeleporter()) {
						privateTeleporter1 = citizen2.home;
					} else {
						privateTeleporter1 = null;
					}
				}
				while(_this.pathQueue.mSize != 0) {
					var currentQueueItem1 = _this.pathQueue.dequeue();
					var currentPermanent1 = currentQueueItem1.permanent;
					currentPermanent1.pfSeen = _this.pfSeenStart + 1;
					var dayEntertainment2;
					if(!currentPermanent1.isBuilding || !currentPermanent1.isEntertainment) {
						dayEntertainment2 = false;
					} else {
						var entertainmentBuilding1 = currentPermanent1;
						if(entertainmentBuilding1.get_isOpen()) {
							dayEntertainment2 = timeSinceStart >= _gthis.recentEntertainmentTypes[entertainmentBuilding1.get_entertainmentType()];
						} else {
							dayEntertainment2 = false;
						}
					}
					if(dayEntertainment2) {
						while(_this.pathQueue.mSize != 0) _this.pathQueue.dequeue().destroy();
						bestPermanent1 = currentPermanent1;
						break;
					}
					if(currentPermanent1.isBuilding) {
						var currentBuilding1 = currentPermanent1;
						var permanentTo5 = currentBuilding1.leftBuilding;
						if(permanentTo5 != null) {
							if(permanentTo5.pfSeen == _gthis2.pfSeenStart) {
								var relatedPrioritizable9 = permanentTo5.pfRelatedPrioritizable;
								var newPriority20 = currentQueueItem1.priority + 20;
								if(newPriority20 < relatedPrioritizable9.priority) {
									_gthis2.pathQueue.reprioritize(relatedPrioritizable9,newPriority20);
								}
							} else if(permanentTo5.pfSeen != _gthis2.pfSeenStart + 1) {
								var newPriority21 = currentQueueItem1.priority + 20;
								if(maximumDistance == -1 || newPriority21 <= maximumDistance) {
									permanentTo5.pfSeen = _gthis2.pfSeenStart;
									permanentTo5.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority21,permanentTo5);
									_gthis2.pathQueue.enqueue(permanentTo5.pfRelatedPrioritizable);
								}
							}
						}
						var permanentTo6 = currentBuilding1.rightBuilding;
						if(permanentTo6 != null) {
							if(permanentTo6.pfSeen == _gthis2.pfSeenStart) {
								var relatedPrioritizable10 = permanentTo6.pfRelatedPrioritizable;
								var newPriority22 = currentQueueItem1.priority + 20;
								if(newPriority22 < relatedPrioritizable10.priority) {
									_gthis2.pathQueue.reprioritize(relatedPrioritizable10,newPriority22);
								}
							} else if(permanentTo6.pfSeen != _gthis2.pfSeenStart + 1) {
								var newPriority23 = currentQueueItem1.priority + 20;
								if(maximumDistance == -1 || newPriority23 <= maximumDistance) {
									permanentTo6.pfSeen = _gthis2.pfSeenStart;
									permanentTo6.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority23,permanentTo6);
									_gthis2.pathQueue.enqueue(permanentTo6.pfRelatedPrioritizable);
								}
							}
						}
						var permanentTo7 = currentBuilding1.topBuilding;
						if(permanentTo7 != null) {
							if(permanentTo7.pfSeen == _gthis2.pfSeenStart) {
								var relatedPrioritizable11 = permanentTo7.pfRelatedPrioritizable;
								var newPriority24 = currentQueueItem1.priority + 20;
								if(newPriority24 < relatedPrioritizable11.priority) {
									_gthis2.pathQueue.reprioritize(relatedPrioritizable11,newPriority24);
								}
							} else if(permanentTo7.pfSeen != _gthis2.pfSeenStart + 1) {
								var newPriority25 = currentQueueItem1.priority + 20;
								if(maximumDistance == -1 || newPriority25 <= maximumDistance) {
									permanentTo7.pfSeen = _gthis2.pfSeenStart;
									permanentTo7.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority25,permanentTo7);
									_gthis2.pathQueue.enqueue(permanentTo7.pfRelatedPrioritizable);
								}
							}
						}
						var permanentTo8 = currentBuilding1.bottomBuilding;
						if(permanentTo8 != null) {
							if(permanentTo8.pfSeen == _gthis2.pfSeenStart) {
								var relatedPrioritizable12 = permanentTo8.pfRelatedPrioritizable;
								var newPriority26 = currentQueueItem1.priority + 20;
								if(newPriority26 < relatedPrioritizable12.priority) {
									_gthis2.pathQueue.reprioritize(relatedPrioritizable12,newPriority26);
								}
							} else if(permanentTo8.pfSeen != _gthis2.pfSeenStart + 1) {
								var newPriority27 = currentQueueItem1.priority + 20;
								if(maximumDistance == -1 || newPriority27 <= maximumDistance) {
									permanentTo8.pfSeen = _gthis2.pfSeenStart;
									permanentTo8.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority27,permanentTo8);
									_gthis2.pathQueue.enqueue(permanentTo8.pfRelatedPrioritizable);
								}
							}
						}
						var isPrivateTeleporter1 = privateTeleporter1 == currentPermanent1;
						var canTeleportFromHere1 = currentPermanent1["is"](buildings_Teleporter) || isPrivateTeleporter1;
						if(!teleportersDone1 && canTeleportFromHere1) {
							var rnd1 = random_Random.getFloat(2);
							var tp2 = 0;
							var len1 = _this.city.teleporters.length;
							var invlen1 = 2 / len1;
							var _g25 = 0;
							var _g18 = len1;
							while(_g25 < _g18) {
								var tp3 = _g25++;
								var teleporter1 = _this.city.teleporters[tp3];
								var priorityAdd4 = 9 + (rnd1 + tp3 * invlen1) % 2.0;
								if(teleporter1 != null) {
									if(teleporter1.pfSeen == _gthis2.pfSeenStart) {
										var relatedPrioritizable13 = teleporter1.pfRelatedPrioritizable;
										var newPriority28 = currentQueueItem1.priority + priorityAdd4;
										if(newPriority28 < relatedPrioritizable13.priority) {
											_gthis2.pathQueue.reprioritize(relatedPrioritizable13,newPriority28);
										}
									} else if(teleporter1.pfSeen != _gthis2.pfSeenStart + 1) {
										var newPriority29 = currentQueueItem1.priority + priorityAdd4;
										if(maximumDistance == -1 || newPriority29 <= maximumDistance) {
											teleporter1.pfSeen = _gthis2.pfSeenStart;
											teleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority29,teleporter1);
											_gthis2.pathQueue.enqueue(teleporter1.pfRelatedPrioritizable);
										}
									}
								}
							}
							if(!isPrivateTeleporter1 && privateTeleporter1 != null) {
								if(privateTeleporter1 != null) {
									if(privateTeleporter1.pfSeen == _gthis2.pfSeenStart) {
										var relatedPrioritizable14 = privateTeleporter1.pfRelatedPrioritizable;
										var newPriority30 = currentQueueItem1.priority + 10;
										if(newPriority30 < relatedPrioritizable14.priority) {
											_gthis2.pathQueue.reprioritize(relatedPrioritizable14,newPriority30);
										}
									} else if(privateTeleporter1.pfSeen != _gthis2.pfSeenStart + 1) {
										var newPriority31 = currentQueueItem1.priority + 10;
										if(maximumDistance == -1 || newPriority31 <= maximumDistance) {
											privateTeleporter1.pfSeen = _gthis2.pfSeenStart;
											privateTeleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority31,privateTeleporter1);
											_gthis2.pathQueue.enqueue(privateTeleporter1.pfRelatedPrioritizable);
										}
									}
								}
							}
							teleportersDone1 = true;
						} else if(currentPermanent1["is"](buildings_LandingSite) && !landingSitesDone1[currentPermanent1.landingSiteGroup]) {
							var thisGroup1 = currentPermanent1.landingSiteGroup;
							var _g19 = 0;
							var _g26 = _this.city.connections.landingSiteGroups[thisGroup1];
							while(_g19 < _g26.length) {
								var landingSite1 = _g26[_g19];
								++_g19;
								var priorityAdd5 = landingSite1.estimatedFlyingDistanceTo(currentPermanent1);
								if(landingSite1 != null) {
									if(landingSite1.pfSeen == _gthis2.pfSeenStart) {
										var relatedPrioritizable15 = landingSite1.pfRelatedPrioritizable;
										var newPriority32 = currentQueueItem1.priority + priorityAdd5;
										if(newPriority32 < relatedPrioritizable15.priority) {
											_gthis2.pathQueue.reprioritize(relatedPrioritizable15,newPriority32);
										}
									} else if(landingSite1.pfSeen != _gthis2.pfSeenStart + 1) {
										var newPriority33 = currentQueueItem1.priority + priorityAdd5;
										if(maximumDistance == -1 || newPriority33 <= maximumDistance) {
											landingSite1.pfSeen = _gthis2.pfSeenStart;
											landingSite1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority33,landingSite1);
											_gthis2.pathQueue.enqueue(landingSite1.pfRelatedPrioritizable);
										}
									}
								}
							}
							landingSitesDone1[thisGroup1] = true;
						} else if(!currentQueueItem1.dontCheckElevators && currentPermanent1["is"](buildings_HyperElevator) && currentPermanent1.pfSeen != 3) {
							var _g110 = 0;
							var _g27 = _this.city.connections.elevatorConnections.get(currentBuilding1.world)[currentBuilding1.worldPosition.x];
							while(_g110 < _g27.length) {
								var elevator1 = _g27[_g110];
								++_g110;
								var priorityAdd6 = Math.abs(elevator1.worldPosition.y - currentBuilding1.worldPosition.y);
								if(elevator1 != null) {
									if(elevator1.pfSeen == _gthis2.pfSeenStart) {
										var relatedPrioritizable16 = elevator1.pfRelatedPrioritizable;
										var newPriority34 = currentQueueItem1.priority + priorityAdd6;
										if(newPriority34 < relatedPrioritizable16.priority) {
											_gthis2.pathQueue.reprioritize(relatedPrioritizable16,newPriority34);
										}
									} else if(elevator1.pfSeen != _gthis2.pfSeenStart + 1) {
										var newPriority35 = currentQueueItem1.priority + priorityAdd6;
										if(maximumDistance == -1 || newPriority35 <= maximumDistance) {
											elevator1.pfSeen = _gthis2.pfSeenStart;
											elevator1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority35,elevator1);
											_gthis2.pathQueue.enqueue(elevator1.pfRelatedPrioritizable);
										}
									}
								}
								if(elevator1.pfRelatedPrioritizable != null) {
									elevator1.pfRelatedPrioritizable.dontCheckElevators = true;
								}
							}
						}
					}
					if(currentPermanent1.worldPosition.y == 0) {
						var _g111 = 0;
						var _g28 = currentPermanent1.world.permanents;
						while(_g111 < _g28.length) {
							var bottomPermanents3 = _g28[_g111];
							++_g111;
							if(bottomPermanents3.length == 0 || bottomPermanents3[0] == null) {
								continue;
							}
							var permanentTo9 = bottomPermanents3[0];
							var priorityAdd7 = Math.abs(bottomPermanents3[0].position.x - currentPermanent1.position.x);
							if(permanentTo9 != null) {
								if(permanentTo9.pfSeen == _gthis2.pfSeenStart) {
									var relatedPrioritizable17 = permanentTo9.pfRelatedPrioritizable;
									var newPriority36 = currentQueueItem1.priority + priorityAdd7;
									if(newPriority36 < relatedPrioritizable17.priority) {
										_gthis2.pathQueue.reprioritize(relatedPrioritizable17,newPriority36);
									}
								} else if(permanentTo9.pfSeen != _gthis2.pfSeenStart + 1) {
									var newPriority37 = currentQueueItem1.priority + priorityAdd7;
									if(maximumDistance == -1 || newPriority37 <= maximumDistance) {
										permanentTo9.pfSeen = _gthis2.pfSeenStart;
										permanentTo9.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority37,permanentTo9);
										_gthis2.pathQueue.enqueue(permanentTo9.pfRelatedPrioritizable);
									}
								}
							}
						}
					}
					currentQueueItem1.destroy();
				}
				dayEntertainment = bestPermanent1;
			}
			if(dayEntertainment == null) {
				this.tryForDayEntertainment = timeSinceStart + 120 * this.citizen.simulation.time.minutesPerTick;
			} else {
				var _this1 = this.citizen;
				_this1.simulation.pathfinder.findPath(_this1,dayEntertainment);
				_this1.pathOnFail = null;
				this.entertainmentInited = false;
				return true;
			}
		}
		return false;
	}
	,__class__: simulation_CitizenEntertainment
};
var simulation_CitizenSpecialAction = function(citizen) {
	this.citizen = null;
	this.citizen = citizen;
	this.simulation = citizen.onWorld.city.simulation;
	this.time = this.simulation.time;
};
$hxClasses["simulation.CitizenSpecialAction"] = simulation_CitizenSpecialAction;
simulation_CitizenSpecialAction.__name__ = ["simulation","CitizenSpecialAction"];
simulation_CitizenSpecialAction.prototype = {
	update: function(timeMod) {
	}
	,isActive: function() {
		return false;
	}
	,onDie: function() {
		this.simulation.possibleCitizenHobbies.push({ hobbyClass : js_Boot.getClass(this), minimumCitizenAmount : 0});
	}
	,__class__: simulation_CitizenSpecialAction
};
var simulation_CitizenUpdater = function(simulation1) {
	this.simulation = simulation1;
};
$hxClasses["simulation.CitizenUpdater"] = simulation_CitizenUpdater;
simulation_CitizenUpdater.__name__ = ["simulation","CitizenUpdater"];
simulation_CitizenUpdater.prototype = {
	update: function(timeMod) {
		var _g = 0;
		var _g1 = this.simulation.citizens;
		while(_g < _g1.length) {
			var citizen = _g1[_g];
			++_g;
			citizen.update(timeMod);
		}
	}
	,__class__: simulation_CitizenUpdater
};
var simulation_CityConnections = function(city) {
	this.city = city;
};
$hxClasses["simulation.CityConnections"] = simulation_CityConnections;
simulation_CityConnections.__name__ = ["simulation","CityConnections"];
simulation_CityConnections.prototype = {
	updateCityConnections: function() {
		var _gthis = this;
		this.city.simulation.flyingPathfinder.updateWaypoints();
		var worlds = this.city.worlds;
		var permanents = this.city.permanents;
		var worldsWithTeleporter = [];
		var _g = 0;
		while(_g < permanents.length) {
			var permanent = permanents[_g];
			++_g;
			if(permanent.isBuilding) {
				permanent.leftBuilding = null;
				permanent.rightBuilding = null;
				permanent.topBuilding = null;
				permanent.bottomBuilding = null;
			}
		}
		this.elevatorConnections = new haxe_ds_ObjectMap();
		var _g1 = 0;
		while(_g1 < worlds.length) {
			var world = worlds[_g1];
			++_g1;
			var theseElevators = [];
			this.elevatorConnections.set(world,theseElevators);
			var _g2 = 0;
			var _g11 = world.permanents.length - 1;
			while(_g2 < _g11) {
				var i = _g2++;
				var permanentStack = world.permanents[i];
				var nextPermanentStack = world.permanents[i + 1];
				var _g4 = 0;
				var val1 = permanentStack.length;
				var val2 = nextPermanentStack.length;
				var _g3 = val2 < val1 ? val2 : val1;
				while(_g4 < _g3) {
					var j = _g4++;
					var thisPermanent = permanentStack[j];
					var nextPermanent = nextPermanentStack[j];
					if(thisPermanent != null && nextPermanent != null && thisPermanent.isBuilding && nextPermanent.isBuilding) {
						var thisBuilding = thisPermanent;
						var nextBuilding = nextPermanent;
						if(!thisBuilding.isRooftopBuilding && !nextBuilding.isRooftopBuilding) {
							thisBuilding.rightBuilding = nextBuilding;
							nextBuilding.leftBuilding = thisBuilding;
						}
					}
				}
			}
			var _g12 = 0;
			var _g21 = world.permanents;
			while(_g12 < _g21.length) {
				var permanentStack1 = _g21[_g12];
				++_g12;
				var stackElevators = [];
				theseElevators.push(stackElevators);
				var _g31 = 0;
				while(_g31 < permanentStack1.length) {
					var pm = permanentStack1[_g31];
					++_g31;
					if(pm != null && pm["is"](buildings_HyperElevator)) {
						stackElevators.push(pm);
					}
				}
				var _g41 = 0;
				var _g32 = permanentStack1.length - 1;
				while(_g41 < _g32) {
					var i1 = _g41++;
					var thisPermanent1 = permanentStack1[i1];
					var nextPermanent1 = permanentStack1[i1 + 1];
					if(thisPermanent1 != null && nextPermanent1 != null && thisPermanent1.isBuilding && nextPermanent1.isBuilding && !thisPermanent1.isRooftopBuilding) {
						thisPermanent1.topBuilding = nextPermanent1;
						nextPermanent1.bottomBuilding = thisPermanent1;
					}
				}
			}
		}
		var _g5 = 0;
		var _g13 = this.city.teleporters;
		while(_g5 < _g13.length) {
			var teleporter = _g13[_g5];
			++_g5;
			if(!common_ArrayExtensions.contains(worldsWithTeleporter,teleporter.world)) {
				worldsWithTeleporter.push(teleporter.world);
			}
		}
		var simulation1 = this.city.simulation;
		this.landingSiteGroups = [];
		var _g6 = 0;
		var _g14 = this.city.landingSites;
		while(_g6 < _g14.length) {
			var landingSite = _g14[_g6];
			++_g6;
			landingSite.landingSiteGroup = null;
		}
		var _g7 = 0;
		var _g15 = this.city.landingSites;
		while(_g7 < _g15.length) {
			var landingSite1 = _g15[_g7];
			++_g7;
			var addedToGroup = false;
			var otherLS = simulation1.flyingPathfinder.findAnyOtherLandingSite(landingSite1);
			if(otherLS != null) {
				addedToGroup = true;
				landingSite1.landingSiteGroup = otherLS.landingSiteGroup;
				this.landingSiteGroups[otherLS.landingSiteGroup].push(landingSite1);
			}
			if(!addedToGroup) {
				landingSite1.landingSiteGroup = this.landingSiteGroups.length;
				this.landingSiteGroups.push([landingSite1]);
			}
		}
		this.directWorldConnectionNumber = 0;
		var _g8 = 0;
		while(_g8 < worlds.length) {
			var world1 = worlds[_g8];
			++_g8;
			if(common_ArrayExtensions.contains(worldsWithTeleporter,world1)) {
				world1.reachableWorlds = worldsWithTeleporter;
			} else {
				world1.reachableWorlds = [world1];
			}
		}
		var _g9 = 0;
		var _g16 = this.landingSiteGroups;
		while(_g9 < _g16.length) {
			var landingSiteGroup = _g16[_g9];
			++_g9;
			var theseReachableWorlds = null;
			var _g22 = 0;
			while(_g22 < landingSiteGroup.length) {
				var ls = landingSiteGroup[_g22];
				++_g22;
				if(theseReachableWorlds == null) {
					theseReachableWorlds = ls.world.reachableWorlds;
				} else if(ls.world.reachableWorlds != theseReachableWorlds) {
					var _g33 = 0;
					var _g42 = ls.world.reachableWorlds;
					while(_g33 < _g42.length) {
						var w = _g42[_g33];
						++_g33;
						if(!common_ArrayExtensions.contains(theseReachableWorlds,w)) {
							theseReachableWorlds.push(w);
						}
						w.reachableWorlds = theseReachableWorlds;
					}
					ls.world.reachableWorlds = theseReachableWorlds;
				}
			}
		}
		var _g10 = 0;
		while(_g10 < worlds.length) {
			var world2 = [worlds[_g10]];
			++_g10;
			var hasWorldsCached = [world2[0].relevantWorldsForDirectCityConnectionsCache != null];
			var arr = [hasWorldsCached[0] ? world2[0].relevantWorldsForDirectCityConnectionsCache : worlds];
			if(!hasWorldsCached[0]) {
				world2[0].relevantWorldsForDirectCityConnectionsCache = [];
			}
			var testPossibleConnection = (function(arr1,hasWorldsCached1,world3) {
				return function(permanentStack2,nonNullPosX,nextToDir) {
					if(nonNullPosX != null) {
						var _g17 = 0;
						while(_g17 < arr1[0].length) {
							var otherWorld = arr1[0][_g17];
							++_g17;
							if((otherWorld.rect.y > world3[0].rect.y || otherWorld.rect.y == world3[0].rect.y && otherWorld.rect.x > world3[0].rect.x) && otherWorld.rect.x % 20 == world3[0].rect.x % 20 && otherWorld.rect.y % 20 == world3[0].rect.y % 20) {
								var otherPermanentStackX = ((nonNullPosX - otherWorld.rect.x) / 20 | 0) + nextToDir;
								if(otherPermanentStackX >= 0 && otherPermanentStackX < otherWorld.permanents.length) {
									if(!hasWorldsCached1[0] && !common_ArrayExtensions.contains(world3[0].relevantWorldsForDirectCityConnectionsCache,otherWorld)) {
										world3[0].relevantWorldsForDirectCityConnectionsCache.push(otherWorld);
									}
									var otherPermanentStack = otherWorld.permanents[otherPermanentStackX];
									var permanentHeightsBetweenWorlds = (otherWorld.rect.y - world3[0].rect.y) / 20 | 0;
									if(otherPermanentStack.length > permanentHeightsBetweenWorlds) {
										var isAnyConnection = false;
										var _g34 = 0;
										var val11 = permanentStack2.length;
										var val21 = otherPermanentStack.length - permanentHeightsBetweenWorlds;
										var _g23 = val21 < val11 ? val21 : val11;
										while(_g34 < _g23) {
											var i2 = _g34++;
											var thisPermanent2 = permanentStack2[i2];
											var otherPermanent = otherPermanentStack[i2 + permanentHeightsBetweenWorlds];
											if(thisPermanent2 != null && otherPermanent != null && thisPermanent2.isBuilding && otherPermanent.isBuilding) {
												var thisBuilding1 = thisPermanent2;
												var otherBuilding = otherPermanent;
												if(!thisBuilding1.isRooftopBuilding && !otherBuilding.isRooftopBuilding) {
													if(nextToDir == 1) {
														thisBuilding1.rightBuilding = otherBuilding;
														otherBuilding.leftBuilding = thisBuilding1;
													} else {
														thisBuilding1.leftBuilding = otherBuilding;
														otherBuilding.rightBuilding = thisBuilding1;
													}
													isAnyConnection = true;
													_gthis.directWorldConnectionNumber += 2;
												}
											}
										}
										if(isAnyConnection) {
											var oldRWs = world3[0].reachableWorlds;
											if(world3[0].reachableWorlds != otherWorld.reachableWorlds) {
												world3[0].reachableWorlds = otherWorld.reachableWorlds;
												var _g24 = 0;
												while(_g24 < oldRWs.length) {
													var w1 = oldRWs[_g24];
													++_g24;
													if(!common_ArrayExtensions.contains(world3[0].reachableWorlds,w1)) {
														world3[0].reachableWorlds.push(w1);
													}
												}
											}
											var _g25 = 0;
											while(_g25 < worlds.length) {
												var world21 = worlds[_g25];
												++_g25;
												if(world21.reachableWorlds == oldRWs) {
													world21.reachableWorlds = world3[0].reachableWorlds;
												}
											}
										}
									}
								}
							}
						}
					}
				};
			})(arr,hasWorldsCached,world2);
			testPossibleConnection(world2[0].permanents[0],world2[0].rect.x,-1);
			testPossibleConnection(world2[0].permanents[world2[0].permanents.length - 1],world2[0].rect.x + 20 * (world2[0].permanents.length - 1),1);
		}
		var currentWorldGroup = 0;
		var _g18 = 0;
		var _g19 = this.city.worlds;
		while(_g18 < _g19.length) {
			var world4 = _g19[_g18];
			++_g18;
			world4.worldGroup = null;
		}
		var _g20 = 0;
		var _g110 = this.city.worlds;
		while(_g20 < _g110.length) {
			var world5 = _g110[_g20];
			++_g20;
			if(world5.worldGroup != null) {
				continue;
			}
			var haveTeleporter = false;
			if(common_ArrayExtensions.contains(worldsWithTeleporter,world5)) {
				haveTeleporter = true;
			}
			var _g26 = 0;
			var _g35 = world5.reachableWorlds;
			while(_g26 < _g35.length) {
				var world22 = _g35[_g26];
				++_g26;
				world22.worldGroup = currentWorldGroup;
				world22.hasTeleporterOnGroup = haveTeleporter;
			}
			++currentWorldGroup;
		}
		this.numberOfWorldGroups = currentWorldGroup;
		if(this.city.builder != null) {
			this.city.builder.invalidateCache();
		}
	}
	,__class__: simulation_CityConnections
};
var simulation_Eating = function(simulation1) {
	this.foodShortage = 0;
	this.totalConsumedFoodPerDay = -1;
	this.simulation = simulation1;
};
$hxClasses["simulation.Eating"] = simulation_Eating;
simulation_Eating.__name__ = ["simulation","Eating"];
simulation_Eating.prototype = {
	update: function(timeMod) {
		var time = this.simulation.time.timeSinceStart / 60 % 24;
		this.totalConsumedFoodPerDay = this.simulation.citizens.length - this.simulation.stats.children * 0.5;
		if(time >= 7 && time < 20) {
			var partOfDay = this.simulation.time.minutesPerTick * timeMod / 60 / (20 - 7);
			var wantsToConsumeFood = Math.max(0,this.totalConsumedFoodPerDay * partOfDay);
			var consumedFoodNow = Math.min(this.simulation.city.materials.food,wantsToConsumeFood);
			var city = this.simulation.city;
			var _g = city.materials;
			_g.set_food(_g.food - consumedFoodNow);
			city.simulation.stats.materialUsed[0][0] += consumedFoodNow;
			this.foodShortage += wantsToConsumeFood - consumedFoodNow;
			this.foodShortage = Math.min(this.foodShortage,Math.ceil(this.totalConsumedFoodPerDay / 2));
		}
		if(this.foodShortage > 0 && this.simulation.city.materials.food > 0.1) {
			var reduceShortageBy = Math.min(this.simulation.city.materials.food,this.foodShortage);
			this.foodShortage -= reduceShortageBy;
			var city1 = this.simulation.city;
			var _g1 = city1.materials;
			_g1.set_food(_g1.food - reduceShortageBy);
			city1.simulation.stats.materialUsed[0][0] += reduceShortageBy;
			if(this.simulation.city.materials.food > 0) {
				this.foodShortage = 0;
			}
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(simulation_Eating.saveDefinition);
		}
		var value = this.foodShortage;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["foodShortage"] != null ? loadMap.existsReserved("foodShortage") : loadMap.h.hasOwnProperty("foodShortage")) {
			this.foodShortage = __map_reserved["foodShortage"] != null ? loadMap.getReserved("foodShortage") : loadMap.h["foodShortage"];
		}
	}
	,__class__: simulation_Eating
};
var simulation_EntertainmentTypeHelpers = function() { };
$hxClasses["simulation.EntertainmentTypeHelpers"] = simulation_EntertainmentTypeHelpers;
simulation_EntertainmentTypeHelpers.__name__ = ["simulation","EntertainmentTypeHelpers"];
simulation_EntertainmentTypeHelpers.getName = function(type) {
	switch(type) {
	case 0:
		return "Night Clubs";
	case 1:
		return "Pubs & Restaurants";
	case 2:
		return "Art";
	case 3:
		return "Nature";
	case 4:
		return "Gaming";
	case 5:
		return "Libraries";
	}
};
var simulation_Fish = function(city,stage,inPermanent,relativeX,relativeY) {
	this.verticalHeightToUse = 0;
	this.verticalWidthToUse = 0;
	this.startSlowingProb = 0.05;
	this.stopMoveProb = 0.2;
	this.normalSlowdown = 0.1;
	this.normalAcceleration = 0.05;
	this.maxSpeed = 0.6;
	this.stopSpeedSpeed = 0.4;
	this.slowing = false;
	this.speeding = false;
	this.moveSpeed = 0;
	this.relativeY = 2;
	this.relativeX = 2;
	this.inPermanent = null;
	this.spriteCanBeRotated = false;
	this.height = 1;
	this.width = 2;
	this.type = 0;
	this.city = city;
	this.stage = stage;
	this.type = random_Random.getInt(10);
	this.sprite = new PIXI.Sprite();
	stage.addChild(this.sprite);
	this.setTypeSprite();
	this.sprite.anchor.set(0.5,0.5);
	this.inPermanent = inPermanent;
	this.relativeX = relativeX;
	this.relativeY = relativeY;
	this.moveDirection = 0;
	this.moveSpeed = 0;
};
$hxClasses["simulation.Fish"] = simulation_Fish;
simulation_Fish.__name__ = ["simulation","Fish"];
simulation_Fish.prototype = {
	destroy: function() {
		this.sprite.destroy();
		HxOverrides.remove(this.city.simulation.fishes.fishes,this);
	}
	,save: function(queue) {
		this.saveBasics(queue);
		var value = this.inPermanent.id;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
	}
	,load: function(queue) {
		this.loadBasics(queue);
		var this1 = this.city.permanentsByID;
		var intToRead = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		this.inPermanent = this1.h[intToRead];
		this.updateDisplay();
	}
	,update: function(timeMod) {
		if(this.moveSpeed > 0 || this.speeding) {
			var movePot = 0.0;
			var _g = this.moveDirection;
			switch(_g) {
			case 0:
				movePot = this.leftMovePotential();
				if(movePot <= 0) {
					this.moveSpeed = 0;
					this.speeding = false;
					this.slowing = false;
				} else {
					this.relativeX -= Math.min(movePot,timeMod * this.moveSpeed);
				}
				break;
			case 1:
				movePot = this.topMovePotential();
				if(movePot <= 0) {
					this.moveSpeed = 0;
					this.speeding = false;
					this.slowing = false;
				} else {
					this.relativeY -= Math.min(movePot,timeMod * this.moveSpeed);
				}
				break;
			case 2:
				movePot = this.rightMovePotential();
				if(movePot <= 0) {
					this.moveSpeed = 0;
					this.speeding = false;
					this.slowing = false;
				} else {
					this.relativeX += Math.min(movePot,timeMod * this.moveSpeed);
				}
				break;
			case 3:
				movePot = this.bottomMovePotential();
				if(movePot <= 0) {
					this.moveSpeed = 0;
					this.speeding = false;
					this.slowing = false;
				} else {
					this.relativeY += Math.min(movePot,timeMod * this.moveSpeed);
				}
				break;
			default:
			}
			var bld = this.inPermanent;
			if(this.relativeX < 0 && bld.leftIsWaterFilled) {
				this.relativeX += 20;
				this.inPermanent = bld.leftAsWaterFilled;
			}
			if(this.relativeY < 0 && bld.topIsWaterFilled) {
				this.relativeY += 20;
				this.inPermanent = bld.topAsWaterFilled;
			}
			if(this.relativeX >= 20 && bld.rightIsWaterFilled) {
				this.relativeX -= 20;
				this.inPermanent = bld.rightAsWaterFilled;
			}
			if(this.relativeY >= 20 && bld.bottomIsWaterFilled) {
				this.relativeY -= 20;
				this.inPermanent = bld.bottomAsWaterFilled;
			}
			if(this.speeding) {
				this.moveSpeed = Math.min(this.maxSpeed,this.moveSpeed + this.normalAcceleration * timeMod);
				if(this.moveSpeed > this.stopSpeedSpeed && random_Random.getFloat(1) < this.stopMoveProb * timeMod || movePot < 2) {
					this.speeding = false;
				}
			} else if(this.slowing) {
				this.moveSpeed = Math.max(0,this.moveSpeed - this.normalSlowdown * timeMod);
			} else if(random_Random.getFloat(1) < this.startSlowingProb * (5 / (movePot < 1 ? 1 : movePot > 15 ? 15 : movePot)) * timeMod || movePot < 3) {
				this.slowing = true;
			}
		}
		if(this.moveSpeed == 0) {
			var dir = random_Random.getInt(12);
			if(dir == 0 || dir == 4 || this.moveDirection == 0 && dir == 11) {
				if(this.leftMovePotential() > 3) {
					this.moveDirection = 0;
					this.speeding = true;
					this.slowing = false;
				}
			} else if(dir == 1 || dir == 5 || this.moveDirection == 2 && dir == 11) {
				if(this.rightMovePotential() > 3) {
					this.moveDirection = 2;
					this.speeding = true;
					this.slowing = false;
				}
			} else if(dir == 2 || this.moveDirection == 1 && dir >= 10) {
				if(this.topMovePotential() > 3) {
					this.moveDirection = 1;
					this.speeding = true;
					this.slowing = false;
				}
			} else if(dir == 3 || this.moveDirection == 3 && dir >= 10) {
				if(this.bottomMovePotential() > 3) {
					this.moveDirection = 3;
					this.speeding = true;
					this.slowing = false;
				}
			} else {
				this.speeding = false;
				this.slowing = false;
			}
		}
		this.updateDisplay();
	}
	,leftMovePotential: function() {
		var lmp = 0.0;
		var bld = this.inPermanent;
		lmp += this.relativeX - this.width / 2 - 3;
		if(bld != null) {
			bld = bld.leftAsWaterFilled;
			if(bld != null && (this.relativeY > 3 + this.height / 2 || bld.topIsWaterFilled) && (this.relativeY < 17 - this.height / 2 || bld.bottomIsWaterFilled)) {
				lmp += 20;
			}
		}
		return lmp;
	}
	,rightMovePotential: function() {
		var mp = 0.0;
		var bld = this.inPermanent;
		mp += 17 - this.width / 2 - this.relativeX;
		if(bld != null) {
			bld = bld.rightAsWaterFilled;
			if(bld != null && (this.relativeY > 3 + this.height / 2 || bld.topIsWaterFilled) && (this.relativeY < 17 - this.height / 2 || bld.bottomIsWaterFilled)) {
				mp += 20;
			}
		}
		return mp;
	}
	,topMovePotential: function() {
		var lmp = 0.0;
		var bld = this.inPermanent;
		lmp += this.relativeY - this.verticalWidthToUse / 2 - 3;
		if(bld != null) {
			bld = bld.topAsWaterFilled;
			if(bld != null && (this.relativeX > 3 + this.verticalHeightToUse / 2 || bld.leftIsWaterFilled) && (this.relativeX < 17 - this.verticalHeightToUse / 2 || bld.rightIsWaterFilled)) {
				lmp += 20;
			}
		}
		return lmp;
	}
	,bottomMovePotential: function() {
		var mp = 0.0;
		var bld = this.inPermanent;
		mp += 17 - this.verticalWidthToUse / 2 - this.relativeY;
		if(bld != null) {
			bld = bld.bottomAsWaterFilled;
			if(bld != null && (this.relativeX > 3 + this.verticalHeightToUse / 2 || bld.leftIsWaterFilled) && (this.relativeX < 17 - this.verticalHeightToUse / 2 || bld.rightIsWaterFilled)) {
				mp += 20;
			}
		}
		return mp;
	}
	,updateDisplay: function() {
		this.sprite.position.set(this.inPermanent.position.x + this.relativeX,this.inPermanent.position.y + this.relativeY);
		if(this.spriteCanBeRotated) {
			if(this.moveDirection == 1) {
				this.sprite.rotation = 1.5 * Math.PI;
			} else if(this.moveDirection == 3) {
				this.sprite.rotation = 0.5 * Math.PI;
			} else if(this.moveDirection == 2) {
				this.sprite.rotation = 0;
			} else {
				this.sprite.rotation = Math.PI;
			}
		}
	}
	,postLoad: function() {
		this.setTypeSprite();
	}
	,setTypeSprite: function() {
		var smallFishTextures = Resources.getTexturesByWidth("spr_fish",2);
		var jellyTextures = Resources.getTexturesByWidth("spr_fish_jelly",5);
		var bigFishTextures = Resources.getTexturesByWidth("spr_fish_big",4);
		var snakeTextures = Resources.getTexturesByWidth("spr_fish_snake",8);
		var bigFishTextures2 = Resources.getTexturesByWidth("spr_fish_big2",5);
		this.spriteCanBeRotated = false;
		var _g = this.type;
		switch(_g) {
		case 0:
			this.sprite.texture = smallFishTextures[0];
			this.spriteCanBeRotated = true;
			break;
		case 1:
			this.sprite.texture = smallFishTextures[1];
			this.spriteCanBeRotated = true;
			break;
		case 2:
			this.sprite.texture = jellyTextures[0];
			this.maxSpeed = 0.4;
			this.stopSpeedSpeed = 0.2;
			this.normalAcceleration = 0.025;
			this.normalSlowdown = 0.025;
			this.spriteCanBeRotated = false;
			this.stopMoveProb = 0.03;
			this.startSlowingProb = 0.1;
			break;
		case 3:
			this.sprite.texture = bigFishTextures[0];
			this.spriteCanBeRotated = true;
			break;
		case 4:
			this.sprite.texture = snakeTextures[0];
			this.spriteCanBeRotated = true;
			this.maxSpeed = 0.3;
			this.stopSpeedSpeed = 0.2;
			this.normalAcceleration = 0.02;
			this.normalSlowdown = 0.02;
			this.stopMoveProb = 0.02;
			this.startSlowingProb = 0.1;
			break;
		case 5:
			this.sprite.texture = smallFishTextures[2];
			this.spriteCanBeRotated = true;
			break;
		case 6:
			this.sprite.texture = bigFishTextures[1];
			this.spriteCanBeRotated = true;
			break;
		case 7:
			this.sprite.texture = bigFishTextures2[0];
			this.spriteCanBeRotated = true;
			break;
		case 8:
			this.sprite.texture = smallFishTextures[3];
			this.spriteCanBeRotated = true;
			break;
		case 9:
			this.sprite.texture = smallFishTextures[4];
			this.spriteCanBeRotated = true;
			break;
		}
		this.width = Math.round(this.sprite.texture.width);
		this.height = Math.round(this.sprite.texture.height);
		if(this.spriteCanBeRotated) {
			this.verticalWidthToUse = this.width;
			this.verticalHeightToUse = this.height;
		} else {
			this.verticalWidthToUse = this.height;
			this.verticalHeightToUse = this.width;
		}
	}
	,pushBackIntoPermanent: function() {
		var bld = this.inPermanent;
		var widthToUse = this.moveDirection == 1 || this.moveDirection == 3 ? this.verticalHeightToUse : this.width;
		var heightToUse = this.moveDirection == 1 || this.moveDirection == 3 ? this.verticalWidthToUse : this.height;
		if(!bld.leftIsWaterFilled && this.relativeX < 3 + widthToUse / 2) {
			this.relativeX = 3 + widthToUse / 2;
		}
		if(!bld.topIsWaterFilled && this.relativeY < 3 + heightToUse / 2) {
			this.relativeY = 3 + heightToUse / 2;
		}
		if(!bld.rightIsWaterFilled && this.relativeX > 17 - widthToUse / 2) {
			this.relativeX = 17 - widthToUse / 2;
		}
		if(!bld.bottomIsWaterFilled && this.relativeY > 17 - heightToUse / 2) {
			this.relativeY = 17 - heightToUse / 2;
		}
	}
	,saveBasics: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(simulation_Fish.saveDefinition);
		}
		var value = this.type;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.relativeX;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.relativeY;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
	}
	,loadBasics: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["type"] != null ? loadMap.existsReserved("type") : loadMap.h.hasOwnProperty("type")) {
			this.type = __map_reserved["type"] != null ? loadMap.getReserved("type") : loadMap.h["type"];
		}
		if(__map_reserved["relativeX"] != null ? loadMap.existsReserved("relativeX") : loadMap.h.hasOwnProperty("relativeX")) {
			this.relativeX = __map_reserved["relativeX"] != null ? loadMap.getReserved("relativeX") : loadMap.h["relativeX"];
		}
		if(__map_reserved["relativeY"] != null ? loadMap.existsReserved("relativeY") : loadMap.h.hasOwnProperty("relativeY")) {
			this.relativeY = __map_reserved["relativeY"] != null ? loadMap.getReserved("relativeY") : loadMap.h["relativeY"];
		}
		this.postLoad();
	}
	,__class__: simulation_Fish
};
var simulation_FishManager = function(simulation1) {
	this.simulation = simulation1;
	this.fishes = [];
};
$hxClasses["simulation.FishManager"] = simulation_FishManager;
simulation_FishManager.__name__ = ["simulation","FishManager"];
simulation_FishManager.prototype = {
	update: function(timeMod) {
		var _g = 0;
		var _g1 = this.fishes;
		while(_g < _g1.length) {
			var fish = _g1[_g];
			++_g;
			fish.update(timeMod);
		}
	}
	,save: function(queue) {
		var value = this.fishes.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var _g = 0;
		var _g1 = this.fishes;
		while(_g < _g1.length) {
			var fish = _g1[_g];
			++_g;
			fish.save(queue);
		}
	}
	,load: function(queue) {
		var intToRead = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var len = intToRead;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var newFish = new simulation_Fish(this.simulation.city,this.simulation.city.aboveCitizensInBuildingStage,null,0,0);
			newFish.load(queue);
			this.fishes.push(newFish);
		}
	}
	,__class__: simulation_FishManager
};
var simulation_FlyingSaucer = function(simulation1,stage,path,start,destination) {
	this.stage = stage;
	this.simulation = simulation1;
	this.start = start;
	this.destination = destination;
	this.pathPos = path.length - 1;
	this.position = new common_FPoint(path[this.pathPos].x,path[this.pathPos].y);
	this.sprite = Resources.makeSprite(start.get_saucherTexture());
	this.sprite.position.set(this.position.x,this.position.y);
	stage.addChild(this.sprite);
	this.path = path;
	this.passengers = [];
	this.leavingIn = 12;
	start.currentlyLandedSaucer = this;
};
$hxClasses["simulation.FlyingSaucer"] = simulation_FlyingSaucer;
simulation_FlyingSaucer.__name__ = ["simulation","FlyingSaucer"];
simulation_FlyingSaucer.prototype = {
	setDestination: function(newDestination,newPath) {
		this.path = newPath;
		this.pathPos = this.path.length - 1;
		this.destination = newDestination;
	}
	,addPassenger: function(citizen) {
		this.passengers.push(citizen);
		this.start.timesUsed++;
	}
	,destroy: function() {
		HxOverrides.remove(this.simulation.flyingSaucers,this);
		this.stage.removeChild(this.sprite);
	}
	,cancel: function() {
		var _g = 0;
		var _g1 = this.passengers;
		while(_g < _g1.length) {
			var person = _g1[_g];
			++_g;
			person.fullyBeingControlled = false;
			person.canViewSelfInBuilding = true;
			if(person.recyclePathArray) {
				pooling_Int32ArrayPool.returnToPool(person.path);
				person.recyclePathArray = false;
			}
			person.path = null;
			person.nextPathPos = -1;
			person.pathEnd = -1;
			person.currentPathAction = null;
			if(!person.canViewSelfInBuilding) {
				person.delayCanViewSelfInBuilding = true;
			}
			person.canViewSelfInBuilding = true;
			person.verticalPathProgress = 0;
			person.pathEndFunction = null;
			person.requestingPathGoal = null;
			person.pathOnlyRelatedTo = null;
			person.pathWalkSpeed = 1;
			person.pathCanBeReconsidered = true;
			if(person.sprite.alpha > 0 && person.sprite.alpha < 1) {
				person.sprite.alpha = 1;
			}
		}
		this.destroy();
	}
	,update: function(timeMod) {
		if(this.leavingIn > 0) {
			this.leavingIn -= timeMod;
			if(this.leavingIn <= 0) {
				this.start.currentlyLandedSaucer = null;
			}
			return;
		}
		var flyingDistanceLeft = timeMod * 3;
		while(flyingDistanceLeft > 0) {
			var goalX = this.path[this.pathPos].x;
			var goalY = this.path[this.pathPos].y;
			if(Math.abs(this.position.x - goalX) > 0.01) {
				var diff = goalX - this.position.x;
				this.position.x += (diff > 0 ? 1 : diff < 0 ? -1 : 0) * Math.min(flyingDistanceLeft,Math.abs(diff));
				flyingDistanceLeft -= Math.abs(diff);
			} else if(Math.abs(this.position.y - goalY) > 0.01) {
				var diff1 = goalY - this.position.y;
				this.position.y += (diff1 > 0 ? 1 : diff1 < 0 ? -1 : 0) * Math.min(flyingDistanceLeft,Math.abs(diff1));
				flyingDistanceLeft -= Math.abs(diff1);
			} else {
				this.position.x = goalX;
				this.position.y = goalY;
				if(this.pathPos == 0) {
					var _g = 0;
					var _g1 = this.passengers;
					while(_g < _g1.length) {
						var person = _g1[_g];
						++_g;
						person.fullyBeingControlled = false;
						if(person.inPermanent != null) {
							person.inPermanent.onCitizenLeave(person,this.destination);
						}
						person.inPermanent = this.destination;
						person.onWorld = person.inPermanent.world;
						person.inBuildingSince = person.city.simulation.time.timeSinceStart;
						if(person.currentPathActionPermanent != this.destination) {
							this.destination.timesUsedStopOver++;
						} else {
							this.destination.timesUsedTo++;
						}
					}
					this.destination.addFlyingSaucer();
					this.destroy();
					return;
				} else {
					this.pathPos--;
				}
			}
		}
		this.sprite.position.set(this.position.x,this.position.y);
	}
	,__class__: simulation_FlyingSaucer
};
var simulation_Happiness = function(city,simulation1) {
	this.veryUnhappyFromDay = -1;
	this.lastShownVeryUnhappyWarning = -1;
	this.shouldUpdateHappinessIn = 0;
	this.happinessEnthusiasmLevel = 0;
	this.actualHappiness = 0;
	this.foodShortageUnhappiness = 0;
	this.enthusiasmHappiness = 0;
	this.fullHappinessTime = 0;
	this.happiness = -1;
	this.city = city;
	this.simulation = simulation1;
	this.entertainmentTypes = [0,1,2,3,4];
	HxOverrides.remove(this.entertainmentTypes,5);
	var _g = [];
	var _g2 = 0;
	var _g1 = this.entertainmentTypes.length;
	while(_g2 < _g1) {
		var i = _g2++;
		_g.push(0);
	}
	this.happinessPerEntertainmentType = _g;
	this.actionSpeedModifierWithoutPenalties = 1;
	this.happinessBoosts = [];
};
$hxClasses["simulation.Happiness"] = simulation_Happiness;
simulation_Happiness.__name__ = ["simulation","Happiness"];
simulation_Happiness.prototype = {
	set_happiness: function(newHappiness) {
		this.actionSpeedModifier = newHappiness <= 50 ? 0.25 + newHappiness / 50 * 0.75 : 1 + (newHappiness - 50) / 50;
		return this.happiness = newHappiness;
	}
	,update: function(timeMod) {
		var time = this.simulation.time;
		var b = this.happinessBoosts.length - 1;
		while(b >= 0) {
			var boost = this.happinessBoosts[b];
			if(boost.hasPassed(time)) {
				this.happinessBoosts.splice(b,1);
			}
			--b;
		}
		if(this.shouldUpdateHappinessIn <= 0) {
			this.actualHappiness = this.getActualHappiness();
			this.shouldUpdateHappinessIn = 60;
		} else {
			this.shouldUpdateHappinessIn -= Math.max(1,timeMod);
		}
		if(this.happiness == -1) {
			this.set_happiness(this.actualHappiness);
		}
		var changeHappinessWith = 0.05 * timeMod;
		if(Math.abs(this.actualHappiness - this.happiness) < changeHappinessWith) {
			this.set_happiness(this.actualHappiness);
		} else {
			var _g = this;
			var num = this.actualHappiness - this.happiness;
			_g.set_happiness(_g.happiness + (num > 0 ? 1 : num < 0 ? -1 : 0) * changeHappinessWith);
		}
		if(this.happiness >= 99.99) {
			this.fullHappinessTime += timeMod * this.city.simulation.time.minutesPerTick;
		} else {
			this.fullHappinessTime = 0;
		}
		if(this.happiness <= 10.01) {
			if(1 + ((time.timeSinceStart | 0) / 1440 | 0) != this.lastShownVeryUnhappyWarning) {
				if(this.veryUnhappyFromDay == -1) {
					this.veryUnhappyFromDay = 1 + ((time.timeSinceStart | 0) / 1440 | 0);
					this.lastShownVeryUnhappyWarning = 1 + ((time.timeSinceStart | 0) / 1440 | 0);
					this.city.gui.showSimpleWindow("Your citizens are very unhappy! They work much slower while they're unhappy, so it's a good idea to solve their problems. " + this.city.game.textHelper.clickOrTap() + " on the Happiness button near the bottom right for more information.","Your citizens are unhappy!",true,true);
					this.city.gui.pauseForWindow();
				}
			}
		} else {
			this.veryUnhappyFromDay = -1;
		}
		if(5 == 1) {
			common_KongTools.reportHappiness(this.happiness | 0);
		}
	}
	,getActualHappiness: function() {
		var doneWorld = new haxe_ds_ObjectMap();
		var worldGroup = new haxe_ds_ObjectMap();
		var maxWorldGroup = 0;
		var entertainmentPerGroup = [];
		var entertainmentSubtypeBuildingsPerGroup = [];
		var medicalBuildingsPerGroup = [];
		var citizensPerGroup = [];
		var entertainmentTypeNum = this.entertainmentTypes.length;
		var _g = 0;
		var _g1 = this.city.worlds;
		while(_g < _g1.length) {
			var worldForGrouping = _g1[_g];
			++_g;
			if(!doneWorld.h[worldForGrouping.__id__]) {
				var _g2 = [];
				var _g4 = 0;
				var _g3 = entertainmentTypeNum;
				while(_g4 < _g3) {
					var i = _g4++;
					_g2.push([]);
				}
				var theseEntertainmentSubtypesBuildings = _g2;
				var theseMedicalBuildings = [];
				var entertainment = 0.0;
				var _g31 = 0;
				var _g41 = worldForGrouping.reachableWorlds;
				while(_g31 < _g41.length) {
					var world = _g41[_g31];
					++_g31;
					worldGroup.set(world,maxWorldGroup);
					doneWorld.set(world,true);
					var _g5 = 0;
					var _g6 = world.permanents;
					while(_g5 < _g6.length) {
						var permanentStack = _g6[_g5];
						++_g5;
						var _g7 = 0;
						while(_g7 < permanentStack.length) {
							var permanent = permanentStack[_g7];
							++_g7;
							if(permanent == null) {
								continue;
							}
							if(permanent.isBuilding) {
								if(permanent.isEntertainment) {
									var entertainmentBuilding = permanent;
									var index = this.entertainmentTypes.indexOf(entertainmentBuilding.get_entertainmentType());
									if(index != -1) {
										theseEntertainmentSubtypesBuildings[index].push(entertainmentBuilding);
									}
								} else if(permanent.isMedical) {
									var medicalBuilding = permanent;
									theseMedicalBuildings.push(medicalBuilding);
								}
							}
							entertainment += permanent.get_baseEntertainmentCapacity() + permanent.bonusEntertainmentCapacity;
						}
					}
				}
				entertainmentPerGroup[maxWorldGroup] = entertainment;
				entertainmentSubtypeBuildingsPerGroup[maxWorldGroup] = theseEntertainmentSubtypesBuildings;
				medicalBuildingsPerGroup[maxWorldGroup] = theseMedicalBuildings;
				citizensPerGroup[maxWorldGroup] = 0;
				++maxWorldGroup;
			}
		}
		this.homeHappiness = 0;
		this.schoolHappiness = 0;
		this.purposeHappiness = 0;
		var kids = 0;
		var _g8 = 0;
		var _g11 = this.simulation.citizens;
		while(_g8 < _g11.length) {
			var citizen = _g11[_g8];
			++_g8;
			if(citizen.home != null) {
				this.homeHappiness += citizen.home.get_attractiveness();
			}
			if(citizen.job != null) {
				this.purposeHappiness += 100;
			} else if(citizen.lastInfrequentUpdateAge < 16) {
				++kids;
				if(citizen.school != null) {
					this.schoolHappiness += 100;
					this.purposeHappiness += 100;
				}
			}
			citizensPerGroup[worldGroup.h[citizen.onWorld.__id__]] += 1;
		}
		if(this.simulation.citizens.length > 0) {
			this.homeHappiness /= this.simulation.citizens.length;
			this.purposeHappiness /= this.simulation.citizens.length;
		}
		if(kids > 0) {
			this.schoolHappiness /= kids;
		} else {
			this.schoolHappiness = common_ArrayExtensions.any(this.city.permanents,function(p) {
				if(p["is"](buildings_School)) {
					return p.workers.length >= 1;
				} else {
					return false;
				}
			}) ? 100 : 0;
		}
		var _g12 = 0;
		var _g9 = this.happinessPerEntertainmentType.length;
		while(_g12 < _g9) {
			var i1 = _g12++;
			this.happinessPerEntertainmentType[i1] = 0;
		}
		this.entertainmentHappiness = 0;
		this.medicalHappiness = 0;
		var _g13 = 0;
		var _g10 = maxWorldGroup;
		while(_g13 < _g10) {
			var i2 = _g13++;
			var thisEntertainmentHappiness = 32.999999999999993 * Math.min(entertainmentPerGroup[i2],citizensPerGroup[i2]);
			var _g32 = 0;
			var _g21 = entertainmentSubtypeBuildingsPerGroup[i2].length;
			while(_g32 < _g21) {
				var j = _g32++;
				var subTypeBuildings = entertainmentSubtypeBuildingsPerGroup[i2][j];
				subTypeBuildings.sort(function(b1,b2) {
					var num = b2.get_entertainmentQuality() - b1.get_entertainmentQuality();
					if(num > 0) {
						return 1;
					} else if(num < 0) {
						return -1;
					} else {
						return 0;
					}
				});
				var amountOfCitizensLeft = citizensPerGroup[i2];
				var thisEntertainmentHappinessPart = 0;
				var _g42 = 0;
				while(_g42 < subTypeBuildings.length) {
					var entertainmentBuilding1 = subTypeBuildings[_g42];
					++_g42;
					var citizensForBuilding = amountOfCitizensLeft > entertainmentBuilding1.get_entertainmentCapacity() ? entertainmentBuilding1.get_entertainmentCapacity() : amountOfCitizensLeft;
					thisEntertainmentHappinessPart += citizensForBuilding * entertainmentBuilding1.get_entertainmentQuality();
					amountOfCitizensLeft -= citizensForBuilding;
					if(amountOfCitizensLeft <= 0) {
						break;
					}
				}
				thisEntertainmentHappiness += thisEntertainmentHappinessPart * (0.67 / entertainmentTypeNum);
				this.happinessPerEntertainmentType[j] += thisEntertainmentHappinessPart / this.simulation.citizens.length;
			}
			this.entertainmentHappiness += thisEntertainmentHappiness / this.simulation.citizens.length;
			var theseMedicalBuildings1 = medicalBuildingsPerGroup[i2];
			theseMedicalBuildings1.sort(function(b11,b21) {
				var num1 = b21.get_medicalQuality() - b11.get_medicalQuality();
				if(num1 > 0) {
					return 1;
				} else if(num1 < 0) {
					return -1;
				} else {
					return 0;
				}
			});
			var amountOfCitizensLeft1 = citizensPerGroup[i2];
			var thisMedicalPart = 0;
			var _g22 = 0;
			while(_g22 < theseMedicalBuildings1.length) {
				var medicalBuilding1 = theseMedicalBuildings1[_g22];
				++_g22;
				var citizensForBuilding1 = amountOfCitizensLeft1 > medicalBuilding1.get_medicalCapacity() ? medicalBuilding1.get_medicalCapacity() : amountOfCitizensLeft1;
				thisMedicalPart += citizensForBuilding1 * medicalBuilding1.get_medicalQuality();
				amountOfCitizensLeft1 -= citizensForBuilding1;
				if(amountOfCitizensLeft1 <= 0) {
					break;
				}
			}
			this.medicalHappiness += thisMedicalPart / this.simulation.citizens.length;
		}
		this.entertainmentHappiness = Math.min(100,this.entertainmentHappiness + 0.01);
		this.medicalHappiness = Math.min(100,this.medicalHappiness + 0.01);
		var newHappiness = this.homeHappiness * 0.4 + this.entertainmentHappiness * 0.3 + this.schoolHappiness * 0.1 + this.medicalHappiness * 0.1 + this.purposeHappiness * 0.1;
		newHappiness = Math.min(100,newHappiness + 0.01);
		this.actionSpeedModifierWithoutPenalties = newHappiness <= 50 ? 0.25 + newHappiness / 50 * 0.75 : 1 + (newHappiness - 50) / 50;
		var foodShortage = this.simulation.eating.foodShortage;
		if(foodShortage > 0) {
			if(this.actionSpeedModifierWithoutPenalties < 1) {
				this.actionSpeedModifierWithoutPenalties = 1;
			}
			if(foodShortage >= 10) {
				this.foodShortageUnhappiness = newHappiness;
				newHappiness = 0;
			} else if(newHappiness > 10) {
				this.foodShortageUnhappiness = newHappiness - 10;
				newHappiness = 10;
			} else {
				this.foodShortageUnhappiness = 0;
			}
		} else {
			this.foodShortageUnhappiness = 0;
		}
		if(newHappiness < this.happinessEnthusiasmLevel) {
			this.enthusiasmHappiness = this.happinessEnthusiasmLevel - newHappiness;
			newHappiness = this.happinessEnthusiasmLevel;
		} else {
			this.enthusiasmHappiness = 0;
		}
		var _g14 = 0;
		var _g15 = this.happinessBoosts;
		while(_g14 < _g15.length) {
			var boost = _g15[_g14];
			++_g14;
			if(!boost.canGoOverMax) {
				newHappiness = Math.min(100,newHappiness + boost.boost);
			}
		}
		var _g16 = 0;
		var _g17 = this.happinessBoosts;
		while(_g16 < _g17.length) {
			var boost1 = _g17[_g16];
			++_g16;
			if(boost1.canGoOverMax) {
				newHappiness += boost1.boost;
			}
		}
		return newHappiness;
	}
	,addBoost: function(boost) {
		this.happinessBoosts.push(boost);
	}
	,save: function(queue) {
		this.saveBasics(queue);
		var value = this.happinessBoosts.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var _g = 0;
		var _g1 = this.happinessBoosts;
		while(_g < _g1.length) {
			var boost = _g1[_g];
			++_g;
			boost.save(queue);
		}
	}
	,load: function(queue) {
		this.loadBasics(queue);
		if(queue.version >= 20) {
			var intToRead = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var happinessBoostsLen = intToRead;
			var _g1 = 0;
			var _g = happinessBoostsLen;
			while(_g1 < _g) {
				var i = _g1++;
				var boost = new simulation_HappinessBoost(0,0,"");
				boost.load(queue);
				this.happinessBoosts.push(boost);
			}
		}
	}
	,saveBasics: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(simulation_Happiness.saveDefinition);
		}
		var value = this.happiness;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.homeHappiness;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.purposeHappiness;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
		var value3 = this.entertainmentHappiness;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value3);
		queue.size += 8;
		var value4 = this.schoolHappiness;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes4 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes4,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value4);
		queue.size += 8;
		var value5 = this.medicalHappiness;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes5 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes5,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value5);
		queue.size += 8;
		var value6 = this.fullHappinessTime;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes6 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes6,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value6);
		queue.size += 8;
		var value7 = this.actualHappiness;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes7 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes7,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value7);
		queue.size += 8;
		var value8 = this.happinessEnthusiasmLevel;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes8 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes8,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value8);
		queue.size += 4;
		var value9 = this.lastShownVeryUnhappyWarning;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes9 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes9,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value9);
		queue.size += 4;
		var value10 = this.veryUnhappyFromDay;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes10 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes10,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value10);
		queue.size += 4;
	}
	,loadBasics: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["happiness"] != null ? loadMap.existsReserved("happiness") : loadMap.h.hasOwnProperty("happiness")) {
			this.set_happiness(__map_reserved["happiness"] != null ? loadMap.getReserved("happiness") : loadMap.h["happiness"]);
		}
		if(__map_reserved["homeHappiness"] != null ? loadMap.existsReserved("homeHappiness") : loadMap.h.hasOwnProperty("homeHappiness")) {
			this.homeHappiness = __map_reserved["homeHappiness"] != null ? loadMap.getReserved("homeHappiness") : loadMap.h["homeHappiness"];
		}
		if(__map_reserved["purposeHappiness"] != null ? loadMap.existsReserved("purposeHappiness") : loadMap.h.hasOwnProperty("purposeHappiness")) {
			this.purposeHappiness = __map_reserved["purposeHappiness"] != null ? loadMap.getReserved("purposeHappiness") : loadMap.h["purposeHappiness"];
		}
		if(__map_reserved["entertainmentHappiness"] != null ? loadMap.existsReserved("entertainmentHappiness") : loadMap.h.hasOwnProperty("entertainmentHappiness")) {
			this.entertainmentHappiness = __map_reserved["entertainmentHappiness"] != null ? loadMap.getReserved("entertainmentHappiness") : loadMap.h["entertainmentHappiness"];
		}
		if(__map_reserved["schoolHappiness"] != null ? loadMap.existsReserved("schoolHappiness") : loadMap.h.hasOwnProperty("schoolHappiness")) {
			this.schoolHappiness = __map_reserved["schoolHappiness"] != null ? loadMap.getReserved("schoolHappiness") : loadMap.h["schoolHappiness"];
		}
		if(__map_reserved["medicalHappiness"] != null ? loadMap.existsReserved("medicalHappiness") : loadMap.h.hasOwnProperty("medicalHappiness")) {
			this.medicalHappiness = __map_reserved["medicalHappiness"] != null ? loadMap.getReserved("medicalHappiness") : loadMap.h["medicalHappiness"];
		}
		if(__map_reserved["fullHappinessTime"] != null ? loadMap.existsReserved("fullHappinessTime") : loadMap.h.hasOwnProperty("fullHappinessTime")) {
			this.fullHappinessTime = __map_reserved["fullHappinessTime"] != null ? loadMap.getReserved("fullHappinessTime") : loadMap.h["fullHappinessTime"];
		}
		if(__map_reserved["actualHappiness"] != null ? loadMap.existsReserved("actualHappiness") : loadMap.h.hasOwnProperty("actualHappiness")) {
			this.actualHappiness = __map_reserved["actualHappiness"] != null ? loadMap.getReserved("actualHappiness") : loadMap.h["actualHappiness"];
		}
		if(__map_reserved["happinessEnthusiasmLevel"] != null ? loadMap.existsReserved("happinessEnthusiasmLevel") : loadMap.h.hasOwnProperty("happinessEnthusiasmLevel")) {
			this.happinessEnthusiasmLevel = __map_reserved["happinessEnthusiasmLevel"] != null ? loadMap.getReserved("happinessEnthusiasmLevel") : loadMap.h["happinessEnthusiasmLevel"];
		}
		if(__map_reserved["lastShownVeryUnhappyWarning"] != null ? loadMap.existsReserved("lastShownVeryUnhappyWarning") : loadMap.h.hasOwnProperty("lastShownVeryUnhappyWarning")) {
			this.lastShownVeryUnhappyWarning = __map_reserved["lastShownVeryUnhappyWarning"] != null ? loadMap.getReserved("lastShownVeryUnhappyWarning") : loadMap.h["lastShownVeryUnhappyWarning"];
		}
		if(__map_reserved["veryUnhappyFromDay"] != null ? loadMap.existsReserved("veryUnhappyFromDay") : loadMap.h.hasOwnProperty("veryUnhappyFromDay")) {
			this.veryUnhappyFromDay = __map_reserved["veryUnhappyFromDay"] != null ? loadMap.getReserved("veryUnhappyFromDay") : loadMap.h["veryUnhappyFromDay"];
		}
	}
	,__class__: simulation_Happiness
};
var simulation_HappinessBoost = function(boostUntil,boost,text) {
	this.canGoOverMax = true;
	this.boostUntil = boostUntil;
	this.boost = boost;
	this.text = text;
};
$hxClasses["simulation.HappinessBoost"] = simulation_HappinessBoost;
simulation_HappinessBoost.__name__ = ["simulation","HappinessBoost"];
simulation_HappinessBoost.withDuration = function(cityTime,duration,boost,text) {
	return new simulation_HappinessBoost(cityTime.timeSinceStart + duration,boost,text);
};
simulation_HappinessBoost.prototype = {
	hasPassed: function(cityTime) {
		return cityTime.timeSinceStart > this.boostUntil;
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(simulation_HappinessBoost.saveDefinition);
		}
		var value = this.boostUntil;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.boost;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		queue.addString(this.text);
		var value2 = this.canGoOverMax ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["boostUntil"] != null ? loadMap.existsReserved("boostUntil") : loadMap.h.hasOwnProperty("boostUntil")) {
			this.boostUntil = __map_reserved["boostUntil"] != null ? loadMap.getReserved("boostUntil") : loadMap.h["boostUntil"];
		}
		if(__map_reserved["boost"] != null ? loadMap.existsReserved("boost") : loadMap.h.hasOwnProperty("boost")) {
			this.boost = __map_reserved["boost"] != null ? loadMap.getReserved("boost") : loadMap.h["boost"];
		}
		if(__map_reserved["text"] != null ? loadMap.existsReserved("text") : loadMap.h.hasOwnProperty("text")) {
			this.text = __map_reserved["text"] != null ? loadMap.getReserved("text") : loadMap.h["text"];
		}
		if(__map_reserved["canGoOverMax"] != null ? loadMap.existsReserved("canGoOverMax") : loadMap.h.hasOwnProperty("canGoOverMax")) {
			this.canGoOverMax = __map_reserved["canGoOverMax"] != null ? loadMap.getReserved("canGoOverMax") : loadMap.h["canGoOverMax"];
		}
	}
	,__class__: simulation_HappinessBoost
};
var simulation_HouseAssigner = function(city,simulation1) {
	this.shouldUpdateHouses = true;
	this.city = city;
	this.simulation = simulation1;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 101) {
		var i = _g1++;
		_g.push(0);
	}
	this.peoplePerHomeQuality = _g;
	var _g11 = [];
	var _g2 = 0;
	while(_g2 < 101) {
		var i1 = _g2++;
		_g11.push(0);
	}
	this.emptyPlacesPerHomeQuality = _g11;
	var _g21 = [];
	var _g3 = 0;
	while(_g3 < 101) {
		var i2 = _g3++;
		_g21.push(0);
	}
	this.transferFrom = _g21;
	this.citizensWithFixedHomes = [];
};
$hxClasses["simulation.HouseAssigner"] = simulation_HouseAssigner;
simulation_HouseAssigner.__name__ = ["simulation","HouseAssigner"];
simulation_HouseAssigner.prototype = {
	assignHouses: function() {
		if(!this.shouldUpdateHouses) {
			return;
		}
		var _g = [];
		var _g2 = 0;
		var _g1 = this.city.connections.numberOfWorldGroups;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(false);
		}
		var doneWorldGroup = _g;
		var _g11 = [];
		var _g3 = 0;
		var _g21 = this.city.connections.numberOfWorldGroups;
		while(_g3 < _g21) {
			var i1 = _g3++;
			_g11.push(0);
		}
		simulation_HouseAssigner.privateTeleportersLeft = _g11;
		var _g22 = 0;
		var _g31 = this.city.worlds;
		while(_g22 < _g31.length) {
			var world = _g31[_g22];
			++_g22;
			if(doneWorldGroup[world.worldGroup]) {
				continue;
			}
			var _g4 = 0;
			while(_g4 < 101) {
				var i2 = _g4++;
				this.peoplePerHomeQuality[i2] = 0;
			}
			var _g41 = 0;
			while(_g41 < 101) {
				var i3 = _g41++;
				this.emptyPlacesPerHomeQuality[i3] = 0;
			}
			var _g42 = 0;
			while(_g42 < 101) {
				var i4 = _g42++;
				this.transferFrom[i4] = 0;
			}
			simulation_HouseAssigner.privateTeleportersLeft[world.worldGroup] = 0;
			var _g43 = 0;
			var _g5 = this.city.worlds;
			while(_g43 < _g5.length) {
				var w = _g5[_g43];
				++_g43;
				if(world.worldGroup != w.worldGroup) {
					continue;
				}
				var _g6 = 0;
				var _g7 = w.permanents;
				while(_g6 < _g7.length) {
					var ps = _g7[_g6];
					++_g6;
					var _g8 = 0;
					while(_g8 < ps.length) {
						var p = ps[_g8];
						++_g8;
						if(p != null && p["is"](buildings_House)) {
							var thisHome = p;
							var val = thisHome.get_attractiveness();
							var quality = (val < 0 ? 0 : val > 100 ? 100 : val) | 0;
							if(!p["is"](buildings_WorkWithHome)) {
								if(thisHome.get_hasPrivateTeleporter() && thisHome.get_remainingCapacity() > 0) {
									simulation_HouseAssigner.privateTeleportersLeft[world.worldGroup] += 1;
								}
								var _g9 = 0;
								var _g10 = thisHome.residents;
								while(_g9 < _g10.length) {
									var res = _g10[_g9];
									++_g9;
									if(!res.isForcedHome) {
										this.peoplePerHomeQuality[quality] += 1;
									}
								}
								this.emptyPlacesPerHomeQuality[quality] += thisHome.get_remainingCapacity();
							}
						}
					}
				}
			}
			var checkingPeople = 0;
			var checkingPlaces = 100;
			while(checkingPeople < checkingPlaces) {
				while(checkingPeople < checkingPlaces && this.peoplePerHomeQuality[checkingPeople] > 0) {
					var val1 = this.emptyPlacesPerHomeQuality[checkingPlaces];
					var val2 = this.peoplePerHomeQuality[checkingPeople];
					var transferNum = val2 < val1 ? val2 : val1;
					this.transferFrom[checkingPeople] += transferNum;
					this.emptyPlacesPerHomeQuality[checkingPlaces] -= transferNum;
					this.peoplePerHomeQuality[checkingPeople] -= transferNum;
					--checkingPlaces;
				}
				++checkingPeople;
			}
			var _g44 = 0;
			var _g51 = this.city.worlds;
			while(_g44 < _g51.length) {
				var w1 = _g51[_g44];
				++_g44;
				if(world.worldGroup != w1.worldGroup) {
					continue;
				}
				var _g61 = 0;
				var _g71 = w1.permanents;
				while(_g61 < _g71.length) {
					var ps1 = _g71[_g61];
					++_g61;
					var _g81 = 0;
					while(_g81 < ps1.length) {
						var p1 = ps1[_g81];
						++_g81;
						if(p1 != null && p1["is"](buildings_House)) {
							var thisHome1 = p1;
							var val3 = thisHome1.get_attractiveness();
							var quality1 = (val3 < 0 ? 0 : val3 > 100 ? 100 : val3) | 0;
							if(this.transferFrom[quality1] > 0) {
								var c = thisHome1.residents.length;
								while(--c >= 0) {
									var citizen = thisHome1.residents[c];
									if(this.transferFrom[quality1] > 0 && !citizen.isForcedHome) {
										citizen.evictFromHome();
										this.transferFrom[quality1]--;
									}
								}
							}
						}
					}
				}
			}
			doneWorldGroup[world.worldGroup] = true;
		}
		var _g23 = [];
		var _g45 = 0;
		var _g32 = this.city.connections.numberOfWorldGroups;
		while(_g45 < _g32) {
			var i5 = _g45++;
			_g23.push(false);
		}
		var worldGroupIsImpossible = _g23;
		var _g33 = 0;
		var _g46 = this.simulation.citizens;
		while(_g33 < _g46.length) {
			var citizen1 = _g46[_g33];
			++_g33;
			if(!worldGroupIsImpossible[citizen1.onWorld.worldGroup]) {
				var citizen2 = [citizen1];
				var isHouseWithCapacityOnReachableWorld = (function() {
					return function(c1,pm) {
						var pm1 = pm;
						if(pm1["is"](buildings_House) && pm1.get_remainingCapacity() > 0 && (pm1.get_fixedCapacityForWorkers() == 0 || Lambda.count(pm1.workers,(function() {
							return function(w2) {
								return w2.job == pm1;
							};
						})()) >= pm1.get_fixedCapacityForWorkers())) {
							return c1.onWorld.worldGroup == pm.world.worldGroup;
						} else {
							return false;
						}
					};
				})();
				var isHouseWithCapacityOnReachableWorldFromBuilding = (function() {
					return function(building,pm2) {
						var pm3 = pm2;
						if(pm3["is"](buildings_House) && pm3.get_remainingCapacity() > 0 && (pm3.get_fixedCapacityForWorkers() == 0 || Lambda.count(pm3.workers,(function() {
							return function(w3) {
								return w3.job == pm3;
							};
						})()) >= pm3.get_fixedCapacityForWorkers())) {
							return building.world.worldGroup == pm2.world.worldGroup;
						} else {
							return false;
						}
					};
				})();
				var isHouseWithCapacityOnReachableWorldOrTeleporter = (function() {
					return function(c2,pm4) {
						var isHouseWithCapacityOnReachableWorldOrTeleporter1;
						var pm5 = pm4;
						if(pm5["is"](buildings_House) && pm5.get_remainingCapacity() > 0 && (pm5.get_fixedCapacityForWorkers() == 0 || Lambda.count(pm5.workers,(function() {
							return function(w4) {
								return w4.job == pm5;
							};
						})()) >= pm5.get_fixedCapacityForWorkers())) {
							isHouseWithCapacityOnReachableWorldOrTeleporter1 = c2.onWorld.worldGroup == pm4.world.worldGroup;
						} else {
							isHouseWithCapacityOnReachableWorldOrTeleporter1 = false;
						}
						if(!isHouseWithCapacityOnReachableWorldOrTeleporter1) {
							return pm4["is"](buildings_Teleporter);
						} else {
							return true;
						}
					};
				})();
				var isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter = (function() {
					return function(building1,pm6) {
						var isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter1;
						var pm7 = pm6;
						if(pm7["is"](buildings_House) && pm7.get_remainingCapacity() > 0 && (pm7.get_fixedCapacityForWorkers() == 0 || Lambda.count(pm7.workers,(function() {
							return function(w5) {
								return w5.job == pm7;
							};
						})()) >= pm7.get_fixedCapacityForWorkers())) {
							isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter1 = building1.world.worldGroup == pm6.world.worldGroup;
						} else {
							isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter1 = false;
						}
						if(!isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter1) {
							return pm6["is"](buildings_Teleporter);
						} else {
							return true;
						}
					};
				})();
				if(citizen2[0].home == null) {
					var newHome = null;
					if(simulation_HouseAssigner.privateTeleportersLeft[citizen2[0].onWorld.worldGroup] > 0) {
						if(citizen2[0].job != null) {
							var _this = this.simulation.permanentFinder;
							var from = citizen2[0].job;
							var isGoal = (function(a1,f) {
								return function(pm8) {
									return f[0](a1[0],pm8);
								};
							})([citizen2[0].job],[isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter]);
							var getAttractiveness = (function() {
								return function(house) {
									if(house["is"](buildings_Teleporter)) {
										return 100;
									} else {
										return house.get_baseAttractiveness() + house.bonusAttractiveness;
									}
								};
							})();
							var goalNiceness = getAttractiveness;
							var _gthis = _this;
							_this.updateQueries += 1;
							_this.pfSeenStart += 3;
							if(_this.pfSeenStart > 100000) {
								_this.pfSeenStart = 1;
							}
							if(from != null) {
								var newPrioritizable = pathfinder_PermanentPrioritizable.create(0,from);
								from.pfRelatedPrioritizable = newPrioritizable;
								_this.pathQueue.enqueue(newPrioritizable);
							} else {
								var _g12 = 0;
								var _g13 = null.permanents;
								while(_g12 < _g13.length) {
									var bottomPermanents = _g13[_g12];
									++_g12;
									if(bottomPermanents.length == 0 || bottomPermanents[0] == null) {
										continue;
									}
									var newPriority = Math.abs(bottomPermanents[0].position.x - 99.999999);
									bottomPermanents[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority,bottomPermanents[0]);
									_this.pathQueue.enqueue(bottomPermanents[0].pfRelatedPrioritizable);
									bottomPermanents[0].pfSeen = _this.pfSeenStart;
								}
							}
							var maxNiceNess = -10000.0;
							var bestPermanent = null;
							var landingSiteGroups = _this.city.connections.landingSiteGroups;
							var teleportersDone = false;
							var _g14 = [];
							var _g15 = 0;
							while(_g15 < landingSiteGroups.length) {
								var i6 = landingSiteGroups[_g15];
								++_g15;
								_g14.push(false);
							}
							var landingSitesDone = _g14;
							var privateTeleporter = null;
							while(_this.pathQueue.mSize != 0) {
								var currentQueueItem = _this.pathQueue.dequeue();
								var currentPermanent = currentQueueItem.permanent;
								currentPermanent.pfSeen = _this.pfSeenStart + 1;
								if(isGoal(currentPermanent)) {
									if(goalNiceness != null) {
										var thisNiceness = goalNiceness(currentPermanent);
										if(thisNiceness >= 100000000) {
											bestPermanent = currentPermanent;
											break;
										}
										if(thisNiceness > maxNiceNess) {
											bestPermanent = currentPermanent;
											maxNiceNess = thisNiceness;
										}
									} else {
										while(_this.pathQueue.mSize != 0) _this.pathQueue.dequeue().destroy();
										bestPermanent = currentPermanent;
										break;
									}
								}
								if(currentPermanent.isBuilding) {
									var currentBuilding = currentPermanent;
									var permanentTo = currentBuilding.leftBuilding;
									if(permanentTo != null) {
										if(permanentTo.pfSeen == _gthis.pfSeenStart) {
											var relatedPrioritizable = permanentTo.pfRelatedPrioritizable;
											var newPriority1 = currentQueueItem.priority + 20;
											if(newPriority1 < relatedPrioritizable.priority) {
												_gthis.pathQueue.reprioritize(relatedPrioritizable,newPriority1);
											}
										} else if(permanentTo.pfSeen != _gthis.pfSeenStart + 1) {
											var newPriority2 = currentQueueItem.priority + 20;
											permanentTo.pfSeen = _gthis.pfSeenStart;
											permanentTo.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority2,permanentTo);
											_gthis.pathQueue.enqueue(permanentTo.pfRelatedPrioritizable);
										}
									}
									var permanentTo1 = currentBuilding.rightBuilding;
									if(permanentTo1 != null) {
										if(permanentTo1.pfSeen == _gthis.pfSeenStart) {
											var relatedPrioritizable1 = permanentTo1.pfRelatedPrioritizable;
											var newPriority3 = currentQueueItem.priority + 20;
											if(newPriority3 < relatedPrioritizable1.priority) {
												_gthis.pathQueue.reprioritize(relatedPrioritizable1,newPriority3);
											}
										} else if(permanentTo1.pfSeen != _gthis.pfSeenStart + 1) {
											var newPriority4 = currentQueueItem.priority + 20;
											permanentTo1.pfSeen = _gthis.pfSeenStart;
											permanentTo1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority4,permanentTo1);
											_gthis.pathQueue.enqueue(permanentTo1.pfRelatedPrioritizable);
										}
									}
									var permanentTo2 = currentBuilding.topBuilding;
									if(permanentTo2 != null) {
										if(permanentTo2.pfSeen == _gthis.pfSeenStart) {
											var relatedPrioritizable2 = permanentTo2.pfRelatedPrioritizable;
											var newPriority5 = currentQueueItem.priority + 20;
											if(newPriority5 < relatedPrioritizable2.priority) {
												_gthis.pathQueue.reprioritize(relatedPrioritizable2,newPriority5);
											}
										} else if(permanentTo2.pfSeen != _gthis.pfSeenStart + 1) {
											var newPriority6 = currentQueueItem.priority + 20;
											permanentTo2.pfSeen = _gthis.pfSeenStart;
											permanentTo2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority6,permanentTo2);
											_gthis.pathQueue.enqueue(permanentTo2.pfRelatedPrioritizable);
										}
									}
									var permanentTo3 = currentBuilding.bottomBuilding;
									if(permanentTo3 != null) {
										if(permanentTo3.pfSeen == _gthis.pfSeenStart) {
											var relatedPrioritizable3 = permanentTo3.pfRelatedPrioritizable;
											var newPriority7 = currentQueueItem.priority + 20;
											if(newPriority7 < relatedPrioritizable3.priority) {
												_gthis.pathQueue.reprioritize(relatedPrioritizable3,newPriority7);
											}
										} else if(permanentTo3.pfSeen != _gthis.pfSeenStart + 1) {
											var newPriority8 = currentQueueItem.priority + 20;
											permanentTo3.pfSeen = _gthis.pfSeenStart;
											permanentTo3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority8,permanentTo3);
											_gthis.pathQueue.enqueue(permanentTo3.pfRelatedPrioritizable);
										}
									}
									var isPrivateTeleporter = privateTeleporter == currentPermanent;
									var canTeleportFromHere = currentPermanent["is"](buildings_Teleporter) || isPrivateTeleporter;
									if(!teleportersDone && canTeleportFromHere) {
										var rnd = random_Random.getFloat(2);
										var tp = 0;
										var len = _this.city.teleporters.length;
										var invlen = 2 / len;
										var _g24 = 0;
										var _g16 = len;
										while(_g24 < _g16) {
											var tp1 = _g24++;
											var teleporter = _this.city.teleporters[tp1];
											var priorityAdd = 9 + (rnd + tp1 * invlen) % 2.0;
											if(teleporter != null) {
												if(teleporter.pfSeen == _gthis.pfSeenStart) {
													var relatedPrioritizable4 = teleporter.pfRelatedPrioritizable;
													var newPriority9 = currentQueueItem.priority + priorityAdd;
													if(newPriority9 < relatedPrioritizable4.priority) {
														_gthis.pathQueue.reprioritize(relatedPrioritizable4,newPriority9);
													}
												} else if(teleporter.pfSeen != _gthis.pfSeenStart + 1) {
													var newPriority10 = currentQueueItem.priority + priorityAdd;
													teleporter.pfSeen = _gthis.pfSeenStart;
													teleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority10,teleporter);
													_gthis.pathQueue.enqueue(teleporter.pfRelatedPrioritizable);
												}
											}
										}
										if(!isPrivateTeleporter && privateTeleporter != null) {
											if(privateTeleporter != null) {
												if(privateTeleporter.pfSeen == _gthis.pfSeenStart) {
													var relatedPrioritizable5 = privateTeleporter.pfRelatedPrioritizable;
													var newPriority11 = currentQueueItem.priority + 10;
													if(newPriority11 < relatedPrioritizable5.priority) {
														_gthis.pathQueue.reprioritize(relatedPrioritizable5,newPriority11);
													}
												} else if(privateTeleporter.pfSeen != _gthis.pfSeenStart + 1) {
													var newPriority12 = currentQueueItem.priority + 10;
													privateTeleporter.pfSeen = _gthis.pfSeenStart;
													privateTeleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority12,privateTeleporter);
													_gthis.pathQueue.enqueue(privateTeleporter.pfRelatedPrioritizable);
												}
											}
										}
										teleportersDone = true;
									} else if(currentPermanent["is"](buildings_LandingSite) && !landingSitesDone[currentPermanent.landingSiteGroup]) {
										var thisGroup = currentPermanent.landingSiteGroup;
										var _g17 = 0;
										var _g25 = _this.city.connections.landingSiteGroups[thisGroup];
										while(_g17 < _g25.length) {
											var landingSite = _g25[_g17];
											++_g17;
											var priorityAdd1 = landingSite.estimatedFlyingDistanceTo(currentPermanent);
											if(landingSite != null) {
												if(landingSite.pfSeen == _gthis.pfSeenStart) {
													var relatedPrioritizable6 = landingSite.pfRelatedPrioritizable;
													var newPriority13 = currentQueueItem.priority + priorityAdd1;
													if(newPriority13 < relatedPrioritizable6.priority) {
														_gthis.pathQueue.reprioritize(relatedPrioritizable6,newPriority13);
													}
												} else if(landingSite.pfSeen != _gthis.pfSeenStart + 1) {
													var newPriority14 = currentQueueItem.priority + priorityAdd1;
													landingSite.pfSeen = _gthis.pfSeenStart;
													landingSite.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority14,landingSite);
													_gthis.pathQueue.enqueue(landingSite.pfRelatedPrioritizable);
												}
											}
										}
										landingSitesDone[thisGroup] = true;
									} else if(!currentQueueItem.dontCheckElevators && currentPermanent["is"](buildings_HyperElevator) && currentPermanent.pfSeen != 3) {
										var _g18 = 0;
										var _g26 = _this.city.connections.elevatorConnections.get(currentBuilding.world)[currentBuilding.worldPosition.x];
										while(_g18 < _g26.length) {
											var elevator = _g26[_g18];
											++_g18;
											var priorityAdd2 = Math.abs(elevator.worldPosition.y - currentBuilding.worldPosition.y);
											if(elevator != null) {
												if(elevator.pfSeen == _gthis.pfSeenStart) {
													var relatedPrioritizable7 = elevator.pfRelatedPrioritizable;
													var newPriority15 = currentQueueItem.priority + priorityAdd2;
													if(newPriority15 < relatedPrioritizable7.priority) {
														_gthis.pathQueue.reprioritize(relatedPrioritizable7,newPriority15);
													}
												} else if(elevator.pfSeen != _gthis.pfSeenStart + 1) {
													var newPriority16 = currentQueueItem.priority + priorityAdd2;
													elevator.pfSeen = _gthis.pfSeenStart;
													elevator.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority16,elevator);
													_gthis.pathQueue.enqueue(elevator.pfRelatedPrioritizable);
												}
											}
											if(elevator.pfRelatedPrioritizable != null) {
												elevator.pfRelatedPrioritizable.dontCheckElevators = true;
											}
										}
									}
								}
								if(currentPermanent.worldPosition.y == 0) {
									var _g19 = 0;
									var _g27 = currentPermanent.world.permanents;
									while(_g19 < _g27.length) {
										var bottomPermanents1 = _g27[_g19];
										++_g19;
										if(bottomPermanents1.length == 0 || bottomPermanents1[0] == null) {
											continue;
										}
										var permanentTo4 = bottomPermanents1[0];
										var priorityAdd3 = Math.abs(bottomPermanents1[0].position.x - currentPermanent.position.x);
										if(permanentTo4 != null) {
											if(permanentTo4.pfSeen == _gthis.pfSeenStart) {
												var relatedPrioritizable8 = permanentTo4.pfRelatedPrioritizable;
												var newPriority17 = currentQueueItem.priority + priorityAdd3;
												if(newPriority17 < relatedPrioritizable8.priority) {
													_gthis.pathQueue.reprioritize(relatedPrioritizable8,newPriority17);
												}
											} else if(permanentTo4.pfSeen != _gthis.pfSeenStart + 1) {
												var newPriority18 = currentQueueItem.priority + priorityAdd3;
												permanentTo4.pfSeen = _gthis.pfSeenStart;
												permanentTo4.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority18,permanentTo4);
												_gthis.pathQueue.enqueue(permanentTo4.pfRelatedPrioritizable);
											}
										}
									}
								}
								currentQueueItem.destroy();
							}
							newHome = bestPermanent;
						} else {
							var newHome1 = this.city.permanents;
							var newHome2 = (function(c3,f1) {
								return function(pm9) {
									return f1[0](c3[0],pm9);
								};
							})([citizen2[0]],[isHouseWithCapacityOnReachableWorldOrTeleporter]);
							var getAttractiveness1 = (function() {
								return function(house1) {
									if(house1["is"](buildings_Teleporter)) {
										return 100;
									} else {
										return house1.get_baseAttractiveness() + house1.bonusAttractiveness;
									}
								};
							})();
							newHome = common_ArrayExtensions.whereMax(newHome1,newHome2,getAttractiveness1);
						}
						if(newHome != null && newHome["is"](buildings_Teleporter)) {
							newHome = Lambda.find(this.city.permanents,(function(citizen3) {
								return function(pm10) {
									if(pm10["is"](buildings_House) && citizen3[0].onWorld.worldGroup == pm10.world.worldGroup) {
										var thisHouse = pm10;
										if(thisHouse.get_hasPrivateTeleporter()) {
											var pm11 = pm10;
											if(pm11["is"](buildings_House) && pm11.get_remainingCapacity() > 0) {
												if(pm11.get_fixedCapacityForWorkers() != 0) {
													return Lambda.count(pm11.workers,(function() {
														return function(w6) {
															return w6.job == pm11;
														};
													})()) >= pm11.get_fixedCapacityForWorkers();
												} else {
													return true;
												}
											} else {
												return false;
											}
										}
									}
									return false;
								};
							})(citizen2));
						}
					} else if(citizen2[0].job != null) {
						var _this1 = this.simulation.permanentFinder;
						var from1 = citizen2[0].job;
						var isGoal1 = (function(a11,f2) {
							return function(pm12) {
								return f2[0](a11[0],pm12);
							};
						})([citizen2[0].job],[isHouseWithCapacityOnReachableWorldFromBuilding]);
						var getAttractiveness2 = (function() {
							return function(house2) {
								return house2.get_baseAttractiveness() + house2.bonusAttractiveness;
							};
						})();
						var goalNiceness1 = getAttractiveness2;
						var _gthis1 = _this1;
						_this1.updateQueries += 1;
						_this1.pfSeenStart += 3;
						if(_this1.pfSeenStart > 100000) {
							_this1.pfSeenStart = 1;
						}
						if(from1 != null) {
							var newPrioritizable1 = pathfinder_PermanentPrioritizable.create(0,from1);
							from1.pfRelatedPrioritizable = newPrioritizable1;
							_this1.pathQueue.enqueue(newPrioritizable1);
						} else {
							var _g20 = 0;
							var _g110 = null.permanents;
							while(_g20 < _g110.length) {
								var bottomPermanents2 = _g110[_g20];
								++_g20;
								if(bottomPermanents2.length == 0 || bottomPermanents2[0] == null) {
									continue;
								}
								var newPriority19 = Math.abs(bottomPermanents2[0].position.x - 99.999999);
								bottomPermanents2[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority19,bottomPermanents2[0]);
								_this1.pathQueue.enqueue(bottomPermanents2[0].pfRelatedPrioritizable);
								bottomPermanents2[0].pfSeen = _this1.pfSeenStart;
							}
						}
						var maxNiceNess1 = -10000.0;
						var bestPermanent1 = null;
						var landingSiteGroups1 = _this1.city.connections.landingSiteGroups;
						var teleportersDone1 = false;
						var _g28 = [];
						var _g111 = 0;
						while(_g111 < landingSiteGroups1.length) {
							var i7 = landingSiteGroups1[_g111];
							++_g111;
							_g28.push(false);
						}
						var landingSitesDone1 = _g28;
						var privateTeleporter1 = null;
						while(_this1.pathQueue.mSize != 0) {
							var currentQueueItem1 = _this1.pathQueue.dequeue();
							var currentPermanent1 = currentQueueItem1.permanent;
							currentPermanent1.pfSeen = _this1.pfSeenStart + 1;
							if(isGoal1(currentPermanent1)) {
								if(goalNiceness1 != null) {
									var thisNiceness1 = goalNiceness1(currentPermanent1);
									if(thisNiceness1 >= 100000000) {
										bestPermanent1 = currentPermanent1;
										break;
									}
									if(thisNiceness1 > maxNiceNess1) {
										bestPermanent1 = currentPermanent1;
										maxNiceNess1 = thisNiceness1;
									}
								} else {
									while(_this1.pathQueue.mSize != 0) _this1.pathQueue.dequeue().destroy();
									bestPermanent1 = currentPermanent1;
									break;
								}
							}
							if(currentPermanent1.isBuilding) {
								var currentBuilding1 = currentPermanent1;
								var permanentTo5 = currentBuilding1.leftBuilding;
								if(permanentTo5 != null) {
									if(permanentTo5.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable9 = permanentTo5.pfRelatedPrioritizable;
										var newPriority20 = currentQueueItem1.priority + 20;
										if(newPriority20 < relatedPrioritizable9.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable9,newPriority20);
										}
									} else if(permanentTo5.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority21 = currentQueueItem1.priority + 20;
										permanentTo5.pfSeen = _gthis1.pfSeenStart;
										permanentTo5.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority21,permanentTo5);
										_gthis1.pathQueue.enqueue(permanentTo5.pfRelatedPrioritizable);
									}
								}
								var permanentTo6 = currentBuilding1.rightBuilding;
								if(permanentTo6 != null) {
									if(permanentTo6.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable10 = permanentTo6.pfRelatedPrioritizable;
										var newPriority22 = currentQueueItem1.priority + 20;
										if(newPriority22 < relatedPrioritizable10.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable10,newPriority22);
										}
									} else if(permanentTo6.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority23 = currentQueueItem1.priority + 20;
										permanentTo6.pfSeen = _gthis1.pfSeenStart;
										permanentTo6.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority23,permanentTo6);
										_gthis1.pathQueue.enqueue(permanentTo6.pfRelatedPrioritizable);
									}
								}
								var permanentTo7 = currentBuilding1.topBuilding;
								if(permanentTo7 != null) {
									if(permanentTo7.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable11 = permanentTo7.pfRelatedPrioritizable;
										var newPriority24 = currentQueueItem1.priority + 20;
										if(newPriority24 < relatedPrioritizable11.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable11,newPriority24);
										}
									} else if(permanentTo7.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority25 = currentQueueItem1.priority + 20;
										permanentTo7.pfSeen = _gthis1.pfSeenStart;
										permanentTo7.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority25,permanentTo7);
										_gthis1.pathQueue.enqueue(permanentTo7.pfRelatedPrioritizable);
									}
								}
								var permanentTo8 = currentBuilding1.bottomBuilding;
								if(permanentTo8 != null) {
									if(permanentTo8.pfSeen == _gthis1.pfSeenStart) {
										var relatedPrioritizable12 = permanentTo8.pfRelatedPrioritizable;
										var newPriority26 = currentQueueItem1.priority + 20;
										if(newPriority26 < relatedPrioritizable12.priority) {
											_gthis1.pathQueue.reprioritize(relatedPrioritizable12,newPriority26);
										}
									} else if(permanentTo8.pfSeen != _gthis1.pfSeenStart + 1) {
										var newPriority27 = currentQueueItem1.priority + 20;
										permanentTo8.pfSeen = _gthis1.pfSeenStart;
										permanentTo8.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority27,permanentTo8);
										_gthis1.pathQueue.enqueue(permanentTo8.pfRelatedPrioritizable);
									}
								}
								var isPrivateTeleporter1 = privateTeleporter1 == currentPermanent1;
								var canTeleportFromHere1 = currentPermanent1["is"](buildings_Teleporter) || isPrivateTeleporter1;
								if(!teleportersDone1 && canTeleportFromHere1) {
									var rnd1 = random_Random.getFloat(2);
									var tp2 = 0;
									var len1 = _this1.city.teleporters.length;
									var invlen1 = 2 / len1;
									var _g29 = 0;
									var _g112 = len1;
									while(_g29 < _g112) {
										var tp3 = _g29++;
										var teleporter1 = _this1.city.teleporters[tp3];
										var priorityAdd4 = 9 + (rnd1 + tp3 * invlen1) % 2.0;
										if(teleporter1 != null) {
											if(teleporter1.pfSeen == _gthis1.pfSeenStart) {
												var relatedPrioritizable13 = teleporter1.pfRelatedPrioritizable;
												var newPriority28 = currentQueueItem1.priority + priorityAdd4;
												if(newPriority28 < relatedPrioritizable13.priority) {
													_gthis1.pathQueue.reprioritize(relatedPrioritizable13,newPriority28);
												}
											} else if(teleporter1.pfSeen != _gthis1.pfSeenStart + 1) {
												var newPriority29 = currentQueueItem1.priority + priorityAdd4;
												teleporter1.pfSeen = _gthis1.pfSeenStart;
												teleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority29,teleporter1);
												_gthis1.pathQueue.enqueue(teleporter1.pfRelatedPrioritizable);
											}
										}
									}
									if(!isPrivateTeleporter1 && privateTeleporter1 != null) {
										if(privateTeleporter1 != null) {
											if(privateTeleporter1.pfSeen == _gthis1.pfSeenStart) {
												var relatedPrioritizable14 = privateTeleporter1.pfRelatedPrioritizable;
												var newPriority30 = currentQueueItem1.priority + 10;
												if(newPriority30 < relatedPrioritizable14.priority) {
													_gthis1.pathQueue.reprioritize(relatedPrioritizable14,newPriority30);
												}
											} else if(privateTeleporter1.pfSeen != _gthis1.pfSeenStart + 1) {
												var newPriority31 = currentQueueItem1.priority + 10;
												privateTeleporter1.pfSeen = _gthis1.pfSeenStart;
												privateTeleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority31,privateTeleporter1);
												_gthis1.pathQueue.enqueue(privateTeleporter1.pfRelatedPrioritizable);
											}
										}
									}
									teleportersDone1 = true;
								} else if(currentPermanent1["is"](buildings_LandingSite) && !landingSitesDone1[currentPermanent1.landingSiteGroup]) {
									var thisGroup1 = currentPermanent1.landingSiteGroup;
									var _g113 = 0;
									var _g210 = _this1.city.connections.landingSiteGroups[thisGroup1];
									while(_g113 < _g210.length) {
										var landingSite1 = _g210[_g113];
										++_g113;
										var priorityAdd5 = landingSite1.estimatedFlyingDistanceTo(currentPermanent1);
										if(landingSite1 != null) {
											if(landingSite1.pfSeen == _gthis1.pfSeenStart) {
												var relatedPrioritizable15 = landingSite1.pfRelatedPrioritizable;
												var newPriority32 = currentQueueItem1.priority + priorityAdd5;
												if(newPriority32 < relatedPrioritizable15.priority) {
													_gthis1.pathQueue.reprioritize(relatedPrioritizable15,newPriority32);
												}
											} else if(landingSite1.pfSeen != _gthis1.pfSeenStart + 1) {
												var newPriority33 = currentQueueItem1.priority + priorityAdd5;
												landingSite1.pfSeen = _gthis1.pfSeenStart;
												landingSite1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority33,landingSite1);
												_gthis1.pathQueue.enqueue(landingSite1.pfRelatedPrioritizable);
											}
										}
									}
									landingSitesDone1[thisGroup1] = true;
								} else if(!currentQueueItem1.dontCheckElevators && currentPermanent1["is"](buildings_HyperElevator) && currentPermanent1.pfSeen != 3) {
									var _g114 = 0;
									var _g211 = _this1.city.connections.elevatorConnections.get(currentBuilding1.world)[currentBuilding1.worldPosition.x];
									while(_g114 < _g211.length) {
										var elevator1 = _g211[_g114];
										++_g114;
										var priorityAdd6 = Math.abs(elevator1.worldPosition.y - currentBuilding1.worldPosition.y);
										if(elevator1 != null) {
											if(elevator1.pfSeen == _gthis1.pfSeenStart) {
												var relatedPrioritizable16 = elevator1.pfRelatedPrioritizable;
												var newPriority34 = currentQueueItem1.priority + priorityAdd6;
												if(newPriority34 < relatedPrioritizable16.priority) {
													_gthis1.pathQueue.reprioritize(relatedPrioritizable16,newPriority34);
												}
											} else if(elevator1.pfSeen != _gthis1.pfSeenStart + 1) {
												var newPriority35 = currentQueueItem1.priority + priorityAdd6;
												elevator1.pfSeen = _gthis1.pfSeenStart;
												elevator1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority35,elevator1);
												_gthis1.pathQueue.enqueue(elevator1.pfRelatedPrioritizable);
											}
										}
										if(elevator1.pfRelatedPrioritizable != null) {
											elevator1.pfRelatedPrioritizable.dontCheckElevators = true;
										}
									}
								}
							}
							if(currentPermanent1.worldPosition.y == 0) {
								var _g115 = 0;
								var _g212 = currentPermanent1.world.permanents;
								while(_g115 < _g212.length) {
									var bottomPermanents3 = _g212[_g115];
									++_g115;
									if(bottomPermanents3.length == 0 || bottomPermanents3[0] == null) {
										continue;
									}
									var permanentTo9 = bottomPermanents3[0];
									var priorityAdd7 = Math.abs(bottomPermanents3[0].position.x - currentPermanent1.position.x);
									if(permanentTo9 != null) {
										if(permanentTo9.pfSeen == _gthis1.pfSeenStart) {
											var relatedPrioritizable17 = permanentTo9.pfRelatedPrioritizable;
											var newPriority36 = currentQueueItem1.priority + priorityAdd7;
											if(newPriority36 < relatedPrioritizable17.priority) {
												_gthis1.pathQueue.reprioritize(relatedPrioritizable17,newPriority36);
											}
										} else if(permanentTo9.pfSeen != _gthis1.pfSeenStart + 1) {
											var newPriority37 = currentQueueItem1.priority + priorityAdd7;
											permanentTo9.pfSeen = _gthis1.pfSeenStart;
											permanentTo9.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority37,permanentTo9);
											_gthis1.pathQueue.enqueue(permanentTo9.pfRelatedPrioritizable);
										}
									}
								}
							}
							currentQueueItem1.destroy();
						}
						newHome = bestPermanent1;
					} else {
						var newHome3 = this.city.permanents;
						var newHome4 = (function(c4,f3) {
							return function(pm13) {
								return f3[0](c4[0],pm13);
							};
						})([citizen2[0]],[isHouseWithCapacityOnReachableWorld]);
						var getAttractiveness3 = (function() {
							return function(house3) {
								return house3.get_baseAttractiveness() + house3.bonusAttractiveness;
							};
						})();
						newHome = common_ArrayExtensions.whereMax(newHome3,newHome4,getAttractiveness3);
					}
					if(newHome != null) {
						citizen2[0].home = newHome;
						newHome.residents.push(citizen2[0]);
						if(newHome.get_hasPrivateTeleporter()) {
							simulation_HouseAssigner.privateTeleportersLeft[citizen2[0].onWorld.worldGroup]--;
						}
					}
				}
				if(citizen1.home == null) {
					worldGroupIsImpossible[citizen1.onWorld.worldGroup] = true;
				}
			}
		}
		this.shouldUpdateHouses = false;
	}
	,load: function(queue) {
		var intToRead = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var numberOfCitizensWithFixedHomes = intToRead;
		this.citizensWithFixedHomes = [];
		var _g1 = 0;
		var _g = numberOfCitizensWithFixedHomes;
		while(_g1 < _g) {
			var i = _g1++;
			var theCitizen = this.simulation.citizens;
			var intToRead1 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var theCitizen1 = theCitizen[intToRead1];
			theCitizen1.isForcedHome = true;
			this.citizensWithFixedHomes.push(theCitizen1);
		}
	}
	,save: function(queue) {
		var value = this.citizensWithFixedHomes.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		if(this.citizensWithFixedHomes.length >= 10) {
			var _g = 0;
			var _g1 = this.simulation.citizens;
			while(_g < _g1.length) {
				var citizen = _g1[_g];
				++_g;
				if(citizen.isForcedHome) {
					var value1 = this.simulation.citizens.indexOf(citizen);
					if(queue.size + 4 > queue.bytes.length) {
						var oldBytes1 = queue.bytes;
						queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
						queue.bytes.blit(0,oldBytes1,0,queue.size);
					}
					queue.bytes.setInt32(queue.size,value1);
					queue.size += 4;
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = this.citizensWithFixedHomes;
			while(_g2 < _g11.length) {
				var citizen1 = _g11[_g2];
				++_g2;
				var value2 = this.simulation.citizens.indexOf(citizen1);
				if(queue.size + 4 > queue.bytes.length) {
					var oldBytes2 = queue.bytes;
					queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
					queue.bytes.blit(0,oldBytes2,0,queue.size);
				}
				queue.bytes.setInt32(queue.size,value2);
				queue.size += 4;
			}
		}
	}
	,__class__: simulation_HouseAssigner
};
var simulation_JobAssigner = function(city,simulation1) {
	this.citizensWithoutJob = [];
	this.buildingsHaveWork = true;
	this.city = city;
	this.simulation = simulation1;
	this.priorityJobs = new haxe_ds_StringMap();
};
$hxClasses["simulation.JobAssigner"] = simulation_JobAssigner;
simulation_JobAssigner.__name__ = ["simulation","JobAssigner"];
simulation_JobAssigner.prototype = {
	assignJobs: function() {
		if(this.buildingsHaveWork) {
			var buildingsWithJob = [];
			var _g = [];
			var _g2 = 0;
			var _g1 = PermanentMetaHelper.getClassIDLength();
			while(_g2 < _g1) {
				var i = _g2++;
				_g.push(0);
			}
			var workersShortPerBuildingType = _g;
			var _g11 = [];
			var _g3 = 0;
			var _g21 = PermanentMetaHelper.getClassIDLength();
			while(_g3 < _g21) {
				var i1 = _g3++;
				_g11.push(false);
			}
			var isMaxPrio = _g11;
			var prioJob = this.priorityJobs.keys();
			while(prioJob.hasNext()) {
				var prioJob1 = prioJob.next();
				var classID = PermanentMetaHelper.getClassID(prioJob1);
				var priorityJobs;
				var _this = this.priorityJobs;
				if(__map_reserved[prioJob1] != null ? _this.existsReserved(prioJob1) : _this.h.hasOwnProperty(prioJob1)) {
					var _this1 = this.priorityJobs;
					if(__map_reserved[prioJob1] != null) {
						priorityJobs = _this1.getReserved(prioJob1);
					} else {
						priorityJobs = _this1.h[prioJob1];
					}
				} else {
					priorityJobs = 0;
				}
				isMaxPrio[classID] = priorityJobs == 1000000;
				workersShortPerBuildingType[classID] = isMaxPrio[classID] ? 0 : priorityJobs;
			}
			var _g22 = 0;
			var _g31 = this.city.workBuildings;
			while(_g22 < _g31.length) {
				var thisWork = _g31[_g22];
				++_g22;
				if(thisWork.workers.length < thisWork.get_jobs()) {
					buildingsWithJob.push(thisWork);
				}
				if(isMaxPrio[thisWork.classID]) {
					workersShortPerBuildingType[thisWork.classID] += thisWork.get_jobs();
				}
				workersShortPerBuildingType[thisWork.classID] -= thisWork.workers.length;
			}
			var isHandlingPriorityJobs = false;
			var priorityJobShortTypes = 0;
			var _g23 = 0;
			while(_g23 < workersShortPerBuildingType.length) {
				var w = workersShortPerBuildingType[_g23];
				++_g23;
				if(w > 0) {
					isHandlingPriorityJobs = true;
					++priorityJobShortTypes;
				}
			}
			if(!isHandlingPriorityJobs && this.citizensWithoutJob.length == 0) {
				this.buildingsHaveWork = false;
				return;
			}
			var buildingsWithJobNeedSort = true;
			var anyJobHadResult = true;
			var _g24 = [];
			var _g4 = 0;
			var _g32 = this.city.connections.numberOfWorldGroups;
			while(_g4 < _g32) {
				var i2 = _g4++;
				_g24.push(false);
			}
			var worldGroupNoOptions = _g24;
			while(anyJobHadResult) {
				anyJobHadResult = false;
				if(buildingsWithJobNeedSort) {
					buildingsWithJob.sort((function() {
						return function(b1,b2) {
							if(b1.workers.length > b2.workers.length) {
								return 1;
							} else if(b1.workers.length < b2.workers.length) {
								return -1;
							} else {
								return 0;
							}
						};
					})());
					buildingsWithJobNeedSort = false;
				}
				var _g33 = 0;
				while(_g33 < buildingsWithJob.length) {
					var building = [buildingsWithJob[_g33]];
					++_g33;
					if(building[0].workers.length == building[0].get_jobs()) {
						continue;
					}
					if(isHandlingPriorityJobs && workersShortPerBuildingType[building[0].classID] <= 0) {
						continue;
					}
					var bestCitizen = Lambda.find(this.citizensWithoutJob,(function(building1) {
						return function(c) {
							if(c.onWorld.worldGroup != building1[0].world.worldGroup) {
								if(c.home != null && c.home.get_hasPrivateTeleporter() && building1[0].world.hasTeleporterOnGroup) {
									return !building1[0]["is"](buildings_House);
								} else {
									return false;
								}
							} else {
								return true;
							}
						};
					})(building));
					if(isHandlingPriorityJobs && bestCitizen == null) {
						if(!worldGroupNoOptions[building[0].world.worldGroup]) {
							var bestFoundBuildingToFireFrom = null;
							var bestFoundBuildingToFireFromWorkers = 0;
							var _g41 = 0;
							var _g5 = this.city.workBuildings;
							while(_g41 < _g5.length) {
								var thisWork1 = _g5[_g41];
								++_g41;
								if(building[0].world.worldGroup == thisWork1.world.worldGroup && thisWork1.workers.length > bestFoundBuildingToFireFromWorkers && workersShortPerBuildingType[thisWork1.classID] < 0) {
									bestFoundBuildingToFireFrom = thisWork1;
									bestFoundBuildingToFireFromWorkers = thisWork1.workers.length;
								}
							}
							if(bestFoundBuildingToFireFrom != null && bestFoundBuildingToFireFrom.workers.length > 0) {
								bestCitizen = bestFoundBuildingToFireFrom.workers[bestFoundBuildingToFireFrom.workers.length - 1];
								bestCitizen.loseJob(true);
								workersShortPerBuildingType[bestFoundBuildingToFireFrom.classID] += 1;
							} else {
								worldGroupNoOptions[building[0].world.worldGroup] = true;
							}
						}
					}
					if(bestCitizen != null) {
						anyJobHadResult = true;
						workersShortPerBuildingType[building[0].classID] -= 1;
						HxOverrides.remove(this.citizensWithoutJob,bestCitizen);
						building[0].workers.push(bestCitizen);
						bestCitizen.job = building[0];
						building[0].afterGiveJob(bestCitizen);
						if(bestCitizen.onWorld.worldGroup == building[0].world.worldGroup) {
							bestCitizen.evictFromHome();
							var hasAssignedHome = false;
							if(building[0]["is"](buildings_House) && building[0].get_remainingCapacity() > 0) {
								var home = building[0];
								bestCitizen.home = home;
								home.residents.push(bestCitizen);
								hasAssignedHome = true;
							}
							if(!hasAssignedHome || bestCitizen.home == null) {
								var _this2 = this.simulation.houseAssigner;
								var citizen = [bestCitizen];
								var isHouseWithCapacityOnReachableWorld = (function() {
									return function(c1,pm) {
										var pm1 = pm;
										if(pm1["is"](buildings_House) && pm1.get_remainingCapacity() > 0 && (pm1.get_fixedCapacityForWorkers() == 0 || Lambda.count(pm1.workers,(function() {
											return function(w1) {
												return w1.job == pm1;
											};
										})()) >= pm1.get_fixedCapacityForWorkers())) {
											return c1.onWorld.worldGroup == pm.world.worldGroup;
										} else {
											return false;
										}
									};
								})();
								var isHouseWithCapacityOnReachableWorldFromBuilding = (function() {
									return function(building2,pm2) {
										var pm3 = pm2;
										if(pm3["is"](buildings_House) && pm3.get_remainingCapacity() > 0 && (pm3.get_fixedCapacityForWorkers() == 0 || Lambda.count(pm3.workers,(function() {
											return function(w2) {
												return w2.job == pm3;
											};
										})()) >= pm3.get_fixedCapacityForWorkers())) {
											return building2.world.worldGroup == pm2.world.worldGroup;
										} else {
											return false;
										}
									};
								})();
								var isHouseWithCapacityOnReachableWorldOrTeleporter = (function() {
									return function(c2,pm4) {
										var isHouseWithCapacityOnReachableWorldOrTeleporter1;
										var pm5 = pm4;
										if(pm5["is"](buildings_House) && pm5.get_remainingCapacity() > 0 && (pm5.get_fixedCapacityForWorkers() == 0 || Lambda.count(pm5.workers,(function() {
											return function(w3) {
												return w3.job == pm5;
											};
										})()) >= pm5.get_fixedCapacityForWorkers())) {
											isHouseWithCapacityOnReachableWorldOrTeleporter1 = c2.onWorld.worldGroup == pm4.world.worldGroup;
										} else {
											isHouseWithCapacityOnReachableWorldOrTeleporter1 = false;
										}
										if(!isHouseWithCapacityOnReachableWorldOrTeleporter1) {
											return pm4["is"](buildings_Teleporter);
										} else {
											return true;
										}
									};
								})();
								var isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter = (function() {
									return function(building3,pm6) {
										var isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter1;
										var pm7 = pm6;
										if(pm7["is"](buildings_House) && pm7.get_remainingCapacity() > 0 && (pm7.get_fixedCapacityForWorkers() == 0 || Lambda.count(pm7.workers,(function() {
											return function(w4) {
												return w4.job == pm7;
											};
										})()) >= pm7.get_fixedCapacityForWorkers())) {
											isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter1 = building3.world.worldGroup == pm6.world.worldGroup;
										} else {
											isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter1 = false;
										}
										if(!isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter1) {
											return pm6["is"](buildings_Teleporter);
										} else {
											return true;
										}
									};
								})();
								if(citizen[0].home == null) {
									var newHome = null;
									if(simulation_HouseAssigner.privateTeleportersLeft[citizen[0].onWorld.worldGroup] > 0) {
										if(citizen[0].job != null) {
											var _this3 = _this2.simulation.permanentFinder;
											var from = citizen[0].job;
											var isGoal = (function(a1,f) {
												return function(pm8) {
													return f[0](a1[0],pm8);
												};
											})([citizen[0].job],[isHouseWithCapacityOnReachableWorldFromBuildingOrTeleporter]);
											var getAttractiveness = (function() {
												return function(house) {
													if(house["is"](buildings_Teleporter)) {
														return 100;
													} else {
														return house.get_baseAttractiveness() + house.bonusAttractiveness;
													}
												};
											})();
											var goalNiceness = getAttractiveness;
											var _gthis = _this3;
											_this3.updateQueries += 1;
											_this3.pfSeenStart += 3;
											if(_this3.pfSeenStart > 100000) {
												_this3.pfSeenStart = 1;
											}
											if(from != null) {
												var newPrioritizable = pathfinder_PermanentPrioritizable.create(0,from);
												from.pfRelatedPrioritizable = newPrioritizable;
												_this3.pathQueue.enqueue(newPrioritizable);
											} else {
												var _g6 = 0;
												var _g12 = null.permanents;
												while(_g6 < _g12.length) {
													var bottomPermanents = _g12[_g6];
													++_g6;
													if(bottomPermanents.length == 0 || bottomPermanents[0] == null) {
														continue;
													}
													var newPriority = Math.abs(bottomPermanents[0].position.x - 99.999999);
													bottomPermanents[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority,bottomPermanents[0]);
													_this3.pathQueue.enqueue(bottomPermanents[0].pfRelatedPrioritizable);
													bottomPermanents[0].pfSeen = _this3.pfSeenStart;
												}
											}
											var maxNiceNess = -10000.0;
											var bestPermanent = null;
											var landingSiteGroups = _this3.city.connections.landingSiteGroups;
											var teleportersDone = false;
											var _g7 = [];
											var _g13 = 0;
											while(_g13 < landingSiteGroups.length) {
												var i3 = landingSiteGroups[_g13];
												++_g13;
												_g7.push(false);
											}
											var landingSitesDone = _g7;
											var privateTeleporter = null;
											while(_this3.pathQueue.mSize != 0) {
												var currentQueueItem = _this3.pathQueue.dequeue();
												var currentPermanent = currentQueueItem.permanent;
												currentPermanent.pfSeen = _this3.pfSeenStart + 1;
												if(isGoal(currentPermanent)) {
													if(goalNiceness != null) {
														var thisNiceness = goalNiceness(currentPermanent);
														if(thisNiceness >= 100000000) {
															bestPermanent = currentPermanent;
															break;
														}
														if(thisNiceness > maxNiceNess) {
															bestPermanent = currentPermanent;
															maxNiceNess = thisNiceness;
														}
													} else {
														while(_this3.pathQueue.mSize != 0) _this3.pathQueue.dequeue().destroy();
														bestPermanent = currentPermanent;
														break;
													}
												}
												if(currentPermanent.isBuilding) {
													var currentBuilding = currentPermanent;
													var permanentTo = currentBuilding.leftBuilding;
													if(permanentTo != null) {
														if(permanentTo.pfSeen == _gthis.pfSeenStart) {
															var relatedPrioritizable = permanentTo.pfRelatedPrioritizable;
															var newPriority1 = currentQueueItem.priority + 20;
															if(newPriority1 < relatedPrioritizable.priority) {
																_gthis.pathQueue.reprioritize(relatedPrioritizable,newPriority1);
															}
														} else if(permanentTo.pfSeen != _gthis.pfSeenStart + 1) {
															var newPriority2 = currentQueueItem.priority + 20;
															permanentTo.pfSeen = _gthis.pfSeenStart;
															permanentTo.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority2,permanentTo);
															_gthis.pathQueue.enqueue(permanentTo.pfRelatedPrioritizable);
														}
													}
													var permanentTo1 = currentBuilding.rightBuilding;
													if(permanentTo1 != null) {
														if(permanentTo1.pfSeen == _gthis.pfSeenStart) {
															var relatedPrioritizable1 = permanentTo1.pfRelatedPrioritizable;
															var newPriority3 = currentQueueItem.priority + 20;
															if(newPriority3 < relatedPrioritizable1.priority) {
																_gthis.pathQueue.reprioritize(relatedPrioritizable1,newPriority3);
															}
														} else if(permanentTo1.pfSeen != _gthis.pfSeenStart + 1) {
															var newPriority4 = currentQueueItem.priority + 20;
															permanentTo1.pfSeen = _gthis.pfSeenStart;
															permanentTo1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority4,permanentTo1);
															_gthis.pathQueue.enqueue(permanentTo1.pfRelatedPrioritizable);
														}
													}
													var permanentTo2 = currentBuilding.topBuilding;
													if(permanentTo2 != null) {
														if(permanentTo2.pfSeen == _gthis.pfSeenStart) {
															var relatedPrioritizable2 = permanentTo2.pfRelatedPrioritizable;
															var newPriority5 = currentQueueItem.priority + 20;
															if(newPriority5 < relatedPrioritizable2.priority) {
																_gthis.pathQueue.reprioritize(relatedPrioritizable2,newPriority5);
															}
														} else if(permanentTo2.pfSeen != _gthis.pfSeenStart + 1) {
															var newPriority6 = currentQueueItem.priority + 20;
															permanentTo2.pfSeen = _gthis.pfSeenStart;
															permanentTo2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority6,permanentTo2);
															_gthis.pathQueue.enqueue(permanentTo2.pfRelatedPrioritizable);
														}
													}
													var permanentTo3 = currentBuilding.bottomBuilding;
													if(permanentTo3 != null) {
														if(permanentTo3.pfSeen == _gthis.pfSeenStart) {
															var relatedPrioritizable3 = permanentTo3.pfRelatedPrioritizable;
															var newPriority7 = currentQueueItem.priority + 20;
															if(newPriority7 < relatedPrioritizable3.priority) {
																_gthis.pathQueue.reprioritize(relatedPrioritizable3,newPriority7);
															}
														} else if(permanentTo3.pfSeen != _gthis.pfSeenStart + 1) {
															var newPriority8 = currentQueueItem.priority + 20;
															permanentTo3.pfSeen = _gthis.pfSeenStart;
															permanentTo3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority8,permanentTo3);
															_gthis.pathQueue.enqueue(permanentTo3.pfRelatedPrioritizable);
														}
													}
													var isPrivateTeleporter = privateTeleporter == currentPermanent;
													var canTeleportFromHere = currentPermanent["is"](buildings_Teleporter) || isPrivateTeleporter;
													if(!teleportersDone && canTeleportFromHere) {
														var rnd = random_Random.getFloat(2);
														var tp = 0;
														var len = _this3.city.teleporters.length;
														var invlen = 2 / len;
														var _g25 = 0;
														var _g14 = len;
														while(_g25 < _g14) {
															var tp1 = _g25++;
															var teleporter = _this3.city.teleporters[tp1];
															var priorityAdd = 9 + (rnd + tp1 * invlen) % 2.0;
															if(teleporter != null) {
																if(teleporter.pfSeen == _gthis.pfSeenStart) {
																	var relatedPrioritizable4 = teleporter.pfRelatedPrioritizable;
																	var newPriority9 = currentQueueItem.priority + priorityAdd;
																	if(newPriority9 < relatedPrioritizable4.priority) {
																		_gthis.pathQueue.reprioritize(relatedPrioritizable4,newPriority9);
																	}
																} else if(teleporter.pfSeen != _gthis.pfSeenStart + 1) {
																	var newPriority10 = currentQueueItem.priority + priorityAdd;
																	teleporter.pfSeen = _gthis.pfSeenStart;
																	teleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority10,teleporter);
																	_gthis.pathQueue.enqueue(teleporter.pfRelatedPrioritizable);
																}
															}
														}
														if(!isPrivateTeleporter && privateTeleporter != null) {
															if(privateTeleporter != null) {
																if(privateTeleporter.pfSeen == _gthis.pfSeenStart) {
																	var relatedPrioritizable5 = privateTeleporter.pfRelatedPrioritizable;
																	var newPriority11 = currentQueueItem.priority + 10;
																	if(newPriority11 < relatedPrioritizable5.priority) {
																		_gthis.pathQueue.reprioritize(relatedPrioritizable5,newPriority11);
																	}
																} else if(privateTeleporter.pfSeen != _gthis.pfSeenStart + 1) {
																	var newPriority12 = currentQueueItem.priority + 10;
																	privateTeleporter.pfSeen = _gthis.pfSeenStart;
																	privateTeleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority12,privateTeleporter);
																	_gthis.pathQueue.enqueue(privateTeleporter.pfRelatedPrioritizable);
																}
															}
														}
														teleportersDone = true;
													} else if(currentPermanent["is"](buildings_LandingSite) && !landingSitesDone[currentPermanent.landingSiteGroup]) {
														var thisGroup = currentPermanent.landingSiteGroup;
														var _g15 = 0;
														var _g26 = _this3.city.connections.landingSiteGroups[thisGroup];
														while(_g15 < _g26.length) {
															var landingSite = _g26[_g15];
															++_g15;
															var priorityAdd1 = landingSite.estimatedFlyingDistanceTo(currentPermanent);
															if(landingSite != null) {
																if(landingSite.pfSeen == _gthis.pfSeenStart) {
																	var relatedPrioritizable6 = landingSite.pfRelatedPrioritizable;
																	var newPriority13 = currentQueueItem.priority + priorityAdd1;
																	if(newPriority13 < relatedPrioritizable6.priority) {
																		_gthis.pathQueue.reprioritize(relatedPrioritizable6,newPriority13);
																	}
																} else if(landingSite.pfSeen != _gthis.pfSeenStart + 1) {
																	var newPriority14 = currentQueueItem.priority + priorityAdd1;
																	landingSite.pfSeen = _gthis.pfSeenStart;
																	landingSite.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority14,landingSite);
																	_gthis.pathQueue.enqueue(landingSite.pfRelatedPrioritizable);
																}
															}
														}
														landingSitesDone[thisGroup] = true;
													} else if(!currentQueueItem.dontCheckElevators && currentPermanent["is"](buildings_HyperElevator) && currentPermanent.pfSeen != 3) {
														var _g16 = 0;
														var _g27 = _this3.city.connections.elevatorConnections.get(currentBuilding.world)[currentBuilding.worldPosition.x];
														while(_g16 < _g27.length) {
															var elevator = _g27[_g16];
															++_g16;
															var priorityAdd2 = Math.abs(elevator.worldPosition.y - currentBuilding.worldPosition.y);
															if(elevator != null) {
																if(elevator.pfSeen == _gthis.pfSeenStart) {
																	var relatedPrioritizable7 = elevator.pfRelatedPrioritizable;
																	var newPriority15 = currentQueueItem.priority + priorityAdd2;
																	if(newPriority15 < relatedPrioritizable7.priority) {
																		_gthis.pathQueue.reprioritize(relatedPrioritizable7,newPriority15);
																	}
																} else if(elevator.pfSeen != _gthis.pfSeenStart + 1) {
																	var newPriority16 = currentQueueItem.priority + priorityAdd2;
																	elevator.pfSeen = _gthis.pfSeenStart;
																	elevator.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority16,elevator);
																	_gthis.pathQueue.enqueue(elevator.pfRelatedPrioritizable);
																}
															}
															if(elevator.pfRelatedPrioritizable != null) {
																elevator.pfRelatedPrioritizable.dontCheckElevators = true;
															}
														}
													}
												}
												if(currentPermanent.worldPosition.y == 0) {
													var _g17 = 0;
													var _g28 = currentPermanent.world.permanents;
													while(_g17 < _g28.length) {
														var bottomPermanents1 = _g28[_g17];
														++_g17;
														if(bottomPermanents1.length == 0 || bottomPermanents1[0] == null) {
															continue;
														}
														var permanentTo4 = bottomPermanents1[0];
														var priorityAdd3 = Math.abs(bottomPermanents1[0].position.x - currentPermanent.position.x);
														if(permanentTo4 != null) {
															if(permanentTo4.pfSeen == _gthis.pfSeenStart) {
																var relatedPrioritizable8 = permanentTo4.pfRelatedPrioritizable;
																var newPriority17 = currentQueueItem.priority + priorityAdd3;
																if(newPriority17 < relatedPrioritizable8.priority) {
																	_gthis.pathQueue.reprioritize(relatedPrioritizable8,newPriority17);
																}
															} else if(permanentTo4.pfSeen != _gthis.pfSeenStart + 1) {
																var newPriority18 = currentQueueItem.priority + priorityAdd3;
																permanentTo4.pfSeen = _gthis.pfSeenStart;
																permanentTo4.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority18,permanentTo4);
																_gthis.pathQueue.enqueue(permanentTo4.pfRelatedPrioritizable);
															}
														}
													}
												}
												currentQueueItem.destroy();
											}
											newHome = bestPermanent;
										} else {
											var _this4 = _this2.city.permanents;
											var newHome1 = (function(c3,f1) {
												return function(pm9) {
													return f1[0](c3[0],pm9);
												};
											})([citizen[0]],[isHouseWithCapacityOnReachableWorldOrTeleporter]);
											var getAttractiveness1 = (function() {
												return function(house1) {
													if(house1["is"](buildings_Teleporter)) {
														return 100;
													} else {
														return house1.get_baseAttractiveness() + house1.bonusAttractiveness;
													}
												};
											})();
											newHome = common_ArrayExtensions.whereMax(_this4,newHome1,getAttractiveness1);
										}
										if(newHome != null && newHome["is"](buildings_Teleporter)) {
											newHome = Lambda.find(_this2.city.permanents,(function(citizen1) {
												return function(pm10) {
													if(pm10["is"](buildings_House) && citizen1[0].onWorld.worldGroup == pm10.world.worldGroup) {
														var thisHouse = pm10;
														if(thisHouse.get_hasPrivateTeleporter()) {
															var pm11 = pm10;
															if(pm11["is"](buildings_House) && pm11.get_remainingCapacity() > 0) {
																if(pm11.get_fixedCapacityForWorkers() != 0) {
																	return Lambda.count(pm11.workers,(function() {
																		return function(w5) {
																			return w5.job == pm11;
																		};
																	})()) >= pm11.get_fixedCapacityForWorkers();
																} else {
																	return true;
																}
															} else {
																return false;
															}
														}
													}
													return false;
												};
											})(citizen));
										}
									} else if(citizen[0].job != null) {
										var _this5 = _this2.simulation.permanentFinder;
										var from1 = citizen[0].job;
										var isGoal1 = (function(a11,f2) {
											return function(pm12) {
												return f2[0](a11[0],pm12);
											};
										})([citizen[0].job],[isHouseWithCapacityOnReachableWorldFromBuilding]);
										var getAttractiveness2 = (function() {
											return function(house2) {
												return house2.get_baseAttractiveness() + house2.bonusAttractiveness;
											};
										})();
										var goalNiceness1 = getAttractiveness2;
										var _gthis1 = _this5;
										_this5.updateQueries += 1;
										_this5.pfSeenStart += 3;
										if(_this5.pfSeenStart > 100000) {
											_this5.pfSeenStart = 1;
										}
										if(from1 != null) {
											var newPrioritizable1 = pathfinder_PermanentPrioritizable.create(0,from1);
											from1.pfRelatedPrioritizable = newPrioritizable1;
											_this5.pathQueue.enqueue(newPrioritizable1);
										} else {
											var _g8 = 0;
											var _g18 = null.permanents;
											while(_g8 < _g18.length) {
												var bottomPermanents2 = _g18[_g8];
												++_g8;
												if(bottomPermanents2.length == 0 || bottomPermanents2[0] == null) {
													continue;
												}
												var newPriority19 = Math.abs(bottomPermanents2[0].position.x - 99.999999);
												bottomPermanents2[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority19,bottomPermanents2[0]);
												_this5.pathQueue.enqueue(bottomPermanents2[0].pfRelatedPrioritizable);
												bottomPermanents2[0].pfSeen = _this5.pfSeenStart;
											}
										}
										var maxNiceNess1 = -10000.0;
										var bestPermanent1 = null;
										var landingSiteGroups1 = _this5.city.connections.landingSiteGroups;
										var teleportersDone1 = false;
										var _g9 = [];
										var _g19 = 0;
										while(_g19 < landingSiteGroups1.length) {
											var i4 = landingSiteGroups1[_g19];
											++_g19;
											_g9.push(false);
										}
										var landingSitesDone1 = _g9;
										var privateTeleporter1 = null;
										while(_this5.pathQueue.mSize != 0) {
											var currentQueueItem1 = _this5.pathQueue.dequeue();
											var currentPermanent1 = currentQueueItem1.permanent;
											currentPermanent1.pfSeen = _this5.pfSeenStart + 1;
											if(isGoal1(currentPermanent1)) {
												if(goalNiceness1 != null) {
													var thisNiceness1 = goalNiceness1(currentPermanent1);
													if(thisNiceness1 >= 100000000) {
														bestPermanent1 = currentPermanent1;
														break;
													}
													if(thisNiceness1 > maxNiceNess1) {
														bestPermanent1 = currentPermanent1;
														maxNiceNess1 = thisNiceness1;
													}
												} else {
													while(_this5.pathQueue.mSize != 0) _this5.pathQueue.dequeue().destroy();
													bestPermanent1 = currentPermanent1;
													break;
												}
											}
											if(currentPermanent1.isBuilding) {
												var currentBuilding1 = currentPermanent1;
												var permanentTo5 = currentBuilding1.leftBuilding;
												if(permanentTo5 != null) {
													if(permanentTo5.pfSeen == _gthis1.pfSeenStart) {
														var relatedPrioritizable9 = permanentTo5.pfRelatedPrioritizable;
														var newPriority20 = currentQueueItem1.priority + 20;
														if(newPriority20 < relatedPrioritizable9.priority) {
															_gthis1.pathQueue.reprioritize(relatedPrioritizable9,newPriority20);
														}
													} else if(permanentTo5.pfSeen != _gthis1.pfSeenStart + 1) {
														var newPriority21 = currentQueueItem1.priority + 20;
														permanentTo5.pfSeen = _gthis1.pfSeenStart;
														permanentTo5.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority21,permanentTo5);
														_gthis1.pathQueue.enqueue(permanentTo5.pfRelatedPrioritizable);
													}
												}
												var permanentTo6 = currentBuilding1.rightBuilding;
												if(permanentTo6 != null) {
													if(permanentTo6.pfSeen == _gthis1.pfSeenStart) {
														var relatedPrioritizable10 = permanentTo6.pfRelatedPrioritizable;
														var newPriority22 = currentQueueItem1.priority + 20;
														if(newPriority22 < relatedPrioritizable10.priority) {
															_gthis1.pathQueue.reprioritize(relatedPrioritizable10,newPriority22);
														}
													} else if(permanentTo6.pfSeen != _gthis1.pfSeenStart + 1) {
														var newPriority23 = currentQueueItem1.priority + 20;
														permanentTo6.pfSeen = _gthis1.pfSeenStart;
														permanentTo6.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority23,permanentTo6);
														_gthis1.pathQueue.enqueue(permanentTo6.pfRelatedPrioritizable);
													}
												}
												var permanentTo7 = currentBuilding1.topBuilding;
												if(permanentTo7 != null) {
													if(permanentTo7.pfSeen == _gthis1.pfSeenStart) {
														var relatedPrioritizable11 = permanentTo7.pfRelatedPrioritizable;
														var newPriority24 = currentQueueItem1.priority + 20;
														if(newPriority24 < relatedPrioritizable11.priority) {
															_gthis1.pathQueue.reprioritize(relatedPrioritizable11,newPriority24);
														}
													} else if(permanentTo7.pfSeen != _gthis1.pfSeenStart + 1) {
														var newPriority25 = currentQueueItem1.priority + 20;
														permanentTo7.pfSeen = _gthis1.pfSeenStart;
														permanentTo7.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority25,permanentTo7);
														_gthis1.pathQueue.enqueue(permanentTo7.pfRelatedPrioritizable);
													}
												}
												var permanentTo8 = currentBuilding1.bottomBuilding;
												if(permanentTo8 != null) {
													if(permanentTo8.pfSeen == _gthis1.pfSeenStart) {
														var relatedPrioritizable12 = permanentTo8.pfRelatedPrioritizable;
														var newPriority26 = currentQueueItem1.priority + 20;
														if(newPriority26 < relatedPrioritizable12.priority) {
															_gthis1.pathQueue.reprioritize(relatedPrioritizable12,newPriority26);
														}
													} else if(permanentTo8.pfSeen != _gthis1.pfSeenStart + 1) {
														var newPriority27 = currentQueueItem1.priority + 20;
														permanentTo8.pfSeen = _gthis1.pfSeenStart;
														permanentTo8.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority27,permanentTo8);
														_gthis1.pathQueue.enqueue(permanentTo8.pfRelatedPrioritizable);
													}
												}
												var isPrivateTeleporter1 = privateTeleporter1 == currentPermanent1;
												var canTeleportFromHere1 = currentPermanent1["is"](buildings_Teleporter) || isPrivateTeleporter1;
												if(!teleportersDone1 && canTeleportFromHere1) {
													var rnd1 = random_Random.getFloat(2);
													var tp2 = 0;
													var len1 = _this5.city.teleporters.length;
													var invlen1 = 2 / len1;
													var _g29 = 0;
													var _g110 = len1;
													while(_g29 < _g110) {
														var tp3 = _g29++;
														var teleporter1 = _this5.city.teleporters[tp3];
														var priorityAdd4 = 9 + (rnd1 + tp3 * invlen1) % 2.0;
														if(teleporter1 != null) {
															if(teleporter1.pfSeen == _gthis1.pfSeenStart) {
																var relatedPrioritizable13 = teleporter1.pfRelatedPrioritizable;
																var newPriority28 = currentQueueItem1.priority + priorityAdd4;
																if(newPriority28 < relatedPrioritizable13.priority) {
																	_gthis1.pathQueue.reprioritize(relatedPrioritizable13,newPriority28);
																}
															} else if(teleporter1.pfSeen != _gthis1.pfSeenStart + 1) {
																var newPriority29 = currentQueueItem1.priority + priorityAdd4;
																teleporter1.pfSeen = _gthis1.pfSeenStart;
																teleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority29,teleporter1);
																_gthis1.pathQueue.enqueue(teleporter1.pfRelatedPrioritizable);
															}
														}
													}
													if(!isPrivateTeleporter1 && privateTeleporter1 != null) {
														if(privateTeleporter1 != null) {
															if(privateTeleporter1.pfSeen == _gthis1.pfSeenStart) {
																var relatedPrioritizable14 = privateTeleporter1.pfRelatedPrioritizable;
																var newPriority30 = currentQueueItem1.priority + 10;
																if(newPriority30 < relatedPrioritizable14.priority) {
																	_gthis1.pathQueue.reprioritize(relatedPrioritizable14,newPriority30);
																}
															} else if(privateTeleporter1.pfSeen != _gthis1.pfSeenStart + 1) {
																var newPriority31 = currentQueueItem1.priority + 10;
																privateTeleporter1.pfSeen = _gthis1.pfSeenStart;
																privateTeleporter1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority31,privateTeleporter1);
																_gthis1.pathQueue.enqueue(privateTeleporter1.pfRelatedPrioritizable);
															}
														}
													}
													teleportersDone1 = true;
												} else if(currentPermanent1["is"](buildings_LandingSite) && !landingSitesDone1[currentPermanent1.landingSiteGroup]) {
													var thisGroup1 = currentPermanent1.landingSiteGroup;
													var _g111 = 0;
													var _g210 = _this5.city.connections.landingSiteGroups[thisGroup1];
													while(_g111 < _g210.length) {
														var landingSite1 = _g210[_g111];
														++_g111;
														var priorityAdd5 = landingSite1.estimatedFlyingDistanceTo(currentPermanent1);
														if(landingSite1 != null) {
															if(landingSite1.pfSeen == _gthis1.pfSeenStart) {
																var relatedPrioritizable15 = landingSite1.pfRelatedPrioritizable;
																var newPriority32 = currentQueueItem1.priority + priorityAdd5;
																if(newPriority32 < relatedPrioritizable15.priority) {
																	_gthis1.pathQueue.reprioritize(relatedPrioritizable15,newPriority32);
																}
															} else if(landingSite1.pfSeen != _gthis1.pfSeenStart + 1) {
																var newPriority33 = currentQueueItem1.priority + priorityAdd5;
																landingSite1.pfSeen = _gthis1.pfSeenStart;
																landingSite1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority33,landingSite1);
																_gthis1.pathQueue.enqueue(landingSite1.pfRelatedPrioritizable);
															}
														}
													}
													landingSitesDone1[thisGroup1] = true;
												} else if(!currentQueueItem1.dontCheckElevators && currentPermanent1["is"](buildings_HyperElevator) && currentPermanent1.pfSeen != 3) {
													var _g112 = 0;
													var _g211 = _this5.city.connections.elevatorConnections.get(currentBuilding1.world)[currentBuilding1.worldPosition.x];
													while(_g112 < _g211.length) {
														var elevator1 = _g211[_g112];
														++_g112;
														var priorityAdd6 = Math.abs(elevator1.worldPosition.y - currentBuilding1.worldPosition.y);
														if(elevator1 != null) {
															if(elevator1.pfSeen == _gthis1.pfSeenStart) {
																var relatedPrioritizable16 = elevator1.pfRelatedPrioritizable;
																var newPriority34 = currentQueueItem1.priority + priorityAdd6;
																if(newPriority34 < relatedPrioritizable16.priority) {
																	_gthis1.pathQueue.reprioritize(relatedPrioritizable16,newPriority34);
																}
															} else if(elevator1.pfSeen != _gthis1.pfSeenStart + 1) {
																var newPriority35 = currentQueueItem1.priority + priorityAdd6;
																elevator1.pfSeen = _gthis1.pfSeenStart;
																elevator1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority35,elevator1);
																_gthis1.pathQueue.enqueue(elevator1.pfRelatedPrioritizable);
															}
														}
														if(elevator1.pfRelatedPrioritizable != null) {
															elevator1.pfRelatedPrioritizable.dontCheckElevators = true;
														}
													}
												}
											}
											if(currentPermanent1.worldPosition.y == 0) {
												var _g113 = 0;
												var _g212 = currentPermanent1.world.permanents;
												while(_g113 < _g212.length) {
													var bottomPermanents3 = _g212[_g113];
													++_g113;
													if(bottomPermanents3.length == 0 || bottomPermanents3[0] == null) {
														continue;
													}
													var permanentTo9 = bottomPermanents3[0];
													var priorityAdd7 = Math.abs(bottomPermanents3[0].position.x - currentPermanent1.position.x);
													if(permanentTo9 != null) {
														if(permanentTo9.pfSeen == _gthis1.pfSeenStart) {
															var relatedPrioritizable17 = permanentTo9.pfRelatedPrioritizable;
															var newPriority36 = currentQueueItem1.priority + priorityAdd7;
															if(newPriority36 < relatedPrioritizable17.priority) {
																_gthis1.pathQueue.reprioritize(relatedPrioritizable17,newPriority36);
															}
														} else if(permanentTo9.pfSeen != _gthis1.pfSeenStart + 1) {
															var newPriority37 = currentQueueItem1.priority + priorityAdd7;
															permanentTo9.pfSeen = _gthis1.pfSeenStart;
															permanentTo9.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority37,permanentTo9);
															_gthis1.pathQueue.enqueue(permanentTo9.pfRelatedPrioritizable);
														}
													}
												}
											}
											currentQueueItem1.destroy();
										}
										newHome = bestPermanent1;
									} else {
										var _this6 = _this2.city.permanents;
										var newHome2 = (function(c4,f3) {
											return function(pm13) {
												return f3[0](c4[0],pm13);
											};
										})([citizen[0]],[isHouseWithCapacityOnReachableWorld]);
										var getAttractiveness3 = (function() {
											return function(house3) {
												return house3.get_baseAttractiveness() + house3.bonusAttractiveness;
											};
										})();
										newHome = common_ArrayExtensions.whereMax(_this6,newHome2,getAttractiveness3);
									}
									if(newHome != null) {
										citizen[0].home = newHome;
										newHome.residents.push(citizen[0]);
										if(newHome.get_hasPrivateTeleporter()) {
											simulation_HouseAssigner.privateTeleportersLeft[citizen[0].onWorld.worldGroup]--;
										}
									}
								}
							}
						}
						if(this.citizensWithoutJob.length == 0 && !isHandlingPriorityJobs) {
							return;
						}
						if(workersShortPerBuildingType[building[0].classID] <= 0) {
							--priorityJobShortTypes;
							if(priorityJobShortTypes <= 0) {
								isHandlingPriorityJobs = false;
								buildingsWithJobNeedSort = true;
								break;
							}
						}
					}
				}
				if(!anyJobHadResult && isHandlingPriorityJobs) {
					anyJobHadResult = true;
					isHandlingPriorityJobs = false;
					buildingsWithJobNeedSort = true;
				}
			}
			this.buildingsHaveWork = false;
		}
	}
	,giveCitizenJob: function(citizen,work) {
		if(common_ArrayExtensions.contains(this.citizensWithoutJob,citizen)) {
			HxOverrides.remove(this.citizensWithoutJob,citizen);
		}
		work.workers.push(citizen);
		citizen.job = work;
		work.afterGiveJob(citizen);
	}
	,save: function(queue) {
		var value = Lambda.count(this.priorityJobs);
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var pj = this.priorityJobs.keys();
		while(pj.hasNext()) {
			var pj1 = pj.next();
			queue.addString(pj1);
			var _this = this.priorityJobs;
			var value1 = __map_reserved[pj1] != null ? _this.getReserved(pj1) : _this.h[pj1];
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes1 = queue.bytes;
				queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes.blit(0,oldBytes1,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value1);
			queue.size += 4;
		}
	}
	,load: function(queue) {
		var intToRead = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var num = intToRead;
		var _g1 = 0;
		var _g = num;
		while(_g1 < _g) {
			var i = _g1++;
			var key;
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead1;
				var stringLength = queue.bytes.getInt32(readPos);
				key = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead2;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				key = str;
			}
			var this1 = this.priorityJobs;
			var intToRead3 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var v = intToRead3;
			var _this = this1;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,v);
			} else {
				_this.h[key] = v;
			}
		}
	}
	,__class__: simulation_JobAssigner
};
var simulation_ResourcePriorityManager = function(city) {
	this.priorities = [];
	this.city = city;
};
$hxClasses["simulation.ResourcePriorityManager"] = simulation_ResourcePriorityManager;
simulation_ResourcePriorityManager.__name__ = ["simulation","ResourcePriorityManager"];
simulation_ResourcePriorityManager.prototype = {
	prioritize: function(worldResource) {
		if(!common_ArrayExtensions.contains(this.priorities,worldResource)) {
			this.priorities.push(worldResource);
		}
		this.invalidatePathfindingAfterPrioritizeChange(worldResource);
	}
	,invalidatePathfindingAfterPrioritizeChange: function(worldResource) {
		if(worldResource["is"](worldResources_Rock)) {
			var _g = 0;
			var _g1 = this.city.permanents;
			while(_g < _g1.length) {
				var pm = _g1[_g];
				++_g;
				if(pm["is"](buildings_StoneMine)) {
					pm.invalidatePathfindingRelatedInfo();
				}
			}
		}
		if(worldResource["is"](worldResources_Forest)) {
			var _g2 = 0;
			var _g11 = this.city.permanents;
			while(_g2 < _g11.length) {
				var pm1 = _g11[_g2];
				++_g2;
				if(pm1["is"](buildings_WoodcuttingCentre)) {
					pm1.invalidatePathfindingRelatedInfo();
				}
			}
		}
	}
	,hasResourcePrioritiesFor: function(type) {
		return common_ArrayExtensions.any(this.priorities,function(p) {
			return p["is"](type);
		});
	}
	,deprioritize: function(worldResource) {
		if(common_ArrayExtensions.contains(this.priorities,worldResource)) {
			this.invalidatePathfindingAfterPrioritizeChange(worldResource);
			HxOverrides.remove(this.priorities,worldResource);
		}
	}
	,isPrioritized: function(worldResource) {
		return common_ArrayExtensions.contains(this.priorities,worldResource);
	}
	,load: function(queue) {
		var intToRead = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var numberOfStonePriorities = intToRead;
		this.priorities = [];
		var _g1 = 0;
		var _g = numberOfStonePriorities;
		while(_g1 < _g) {
			var i = _g1++;
			var this1 = this.city.permanentsByID;
			var intToRead1 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var pm = this1.h[intToRead1];
			if(pm != null) {
				this.priorities.push(pm);
			}
		}
	}
	,save: function(queue) {
		var value = this.priorities.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var _g = 0;
		var _g1 = this.priorities;
		while(_g < _g1.length) {
			var sp = _g1[_g];
			++_g;
			var value1 = sp.id;
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes1 = queue.bytes;
				queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes.blit(0,oldBytes1,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value1);
			queue.size += 4;
		}
	}
	,__class__: simulation_ResourcePriorityManager
};
var simulation_SchoolAssigner = function(city,simulation1) {
	this.schoolsShouldBeUpdated = false;
	this.city = city;
	this.simulation = simulation1;
};
$hxClasses["simulation.SchoolAssigner"] = simulation_SchoolAssigner;
simulation_SchoolAssigner.__name__ = ["simulation","SchoolAssigner"];
simulation_SchoolAssigner.prototype = {
	assignSchools: function() {
		if(this.schoolsShouldBeUpdated) {
			var schoolsThatAcceptStudents = this.city.permanents.filter(function(p) {
				if(p["is"](buildings_School) && p.students.length < p.studentCapacity) {
					return p.workers.length > 0;
				} else {
					return false;
				}
			});
			if(schoolsThatAcceptStudents.length >= 0) {
				schoolsThatAcceptStudents.sort(function(s1,s2) {
					return s1.students.length - s2.students.length;
				});
				var possibleStudents = this.city.simulation.citizens.filter(function(c) {
					if(c.get_age() < 16) {
						return c.school == null;
					} else {
						return false;
					}
				});
				var anyAssigned = true;
				while(possibleStudents.length > 0 && anyAssigned) {
					anyAssigned = false;
					var i = schoolsThatAcceptStudents.length;
					while(--i >= 0) {
						var school = [schoolsThatAcceptStudents[i]];
						var correctStudent = Lambda.find(possibleStudents,(function(school1) {
							return function(s) {
								if(s.onWorld.worldGroup != school1[0].world.worldGroup) {
									if(s.home != null && s.home.get_hasPrivateTeleporter()) {
										return school1[0].world.hasTeleporterOnGroup;
									} else {
										return false;
									}
								} else {
									return true;
								}
							};
						})(school));
						if(correctStudent != null) {
							anyAssigned = true;
							HxOverrides.remove(possibleStudents,correctStudent);
							correctStudent.school = school[0];
							school[0].students.push(correctStudent);
							if(school[0].students.length >= school[0].studentCapacity) {
								schoolsThatAcceptStudents.splice(i,1);
							}
						}
						if(possibleStudents.length == 0) {
							break;
						}
					}
				}
			}
			this.schoolsShouldBeUpdated = false;
		}
	}
	,__class__: simulation_SchoolAssigner
};
var simulation_SpawnFlyingSaucer = function(simulation1,stage,toWorld,spawn,toXIndex) {
	this.stage = stage;
	this.simulation = simulation1;
	this.toWorld = toWorld;
	this.spawn = spawn;
	if(toXIndex == null) {
		var bestFoundQuality = -5;
		var xIndexOptions = [];
		var _g1 = 0;
		var _g = toWorld.permanents.length;
		while(_g1 < _g) {
			var x = _g1++;
			var q = -1;
			var permanentStack = toWorld.permanents[x];
			if(permanentStack.length == 0) {
				q = 1;
			} else if(permanentStack[0] != null && permanentStack[0]["is"](Building) && !permanentStack[0].isRooftopBuilding) {
				q = 0;
			}
			if(q > bestFoundQuality) {
				bestFoundQuality = q;
				xIndexOptions = [];
			}
			if(q >= bestFoundQuality) {
				xIndexOptions.push(x);
			}
		}
		toXIndex = random_Random.fromArray(xIndexOptions);
	}
	this.toXIndex = toXIndex;
	this.yPositionAboveWorld = 1000 + toWorld.permanents[toXIndex].length * 20;
	this.sprite = Resources.makeSprite("spr_flyingsaucer");
	this.setSpritePosition();
	stage.addChild(this.sprite);
};
$hxClasses["simulation.SpawnFlyingSaucer"] = simulation_SpawnFlyingSaucer;
simulation_SpawnFlyingSaucer.__name__ = ["simulation","SpawnFlyingSaucer"];
simulation_SpawnFlyingSaucer.fromLoad = function(queue,simulation1,stage) {
	var simulation2 = simulation1.city.worlds;
	var intToRead = queue.bytes.getInt32(queue.readStart);
	queue.readStart += 4;
	var world = simulation2[intToRead];
	var intToRead1 = queue.bytes.getInt32(queue.readStart);
	queue.readStart += 4;
	var toXIndex = intToRead1;
	var floatToRead = queue.bytes.getDouble(queue.readStart);
	queue.readStart += 8;
	var yPositionAboveWorld = floatToRead;
	var spawn = queue.readJSON();
	var newFlyingSaucer = new simulation_SpawnFlyingSaucer(simulation1,stage,world,spawn,toXIndex);
	newFlyingSaucer.yPositionAboveWorld = yPositionAboveWorld;
	return newFlyingSaucer;
};
simulation_SpawnFlyingSaucer.prototype = {
	update: function(timeMod) {
		this.yPositionAboveWorld -= timeMod * 3;
		this.setSpritePosition();
		if(this.yPositionAboveWorld <= this.toWorld.permanents[this.toXIndex].length * 20) {
			this.spawnCitizens();
			this.destroy();
		}
	}
	,spawnCitizens: function() {
		var startPermanent = null;
		var startX = null;
		var permanentsArray = this.toWorld.permanents[this.toXIndex];
		if(permanentsArray.length == 0) {
			startX = this.toXIndex * 20;
		} else {
			startPermanent = permanentsArray[permanentsArray.length - 1];
		}
		var _g1 = 0;
		var _g = this.spawn.amount;
		while(_g1 < _g) {
			var i = _g1++;
			var age = this.spawn.ageRangeMin;
			if(this.spawn.ageRangeMin != this.spawn.ageRangeMax) {
				age = random_Random.getFloat(this.spawn.ageRangeMin,this.spawn.ageRangeMax);
			}
			this.simulation.createCitizen(this.toWorld,age,startPermanent,startX);
		}
	}
	,setSpritePosition: function() {
		this.sprite.position.set(this.toWorld.rect.x + this.toXIndex * 20,this.toWorld.rect.y - this.yPositionAboveWorld - 20 + 1);
	}
	,destroy: function() {
		this.stage.removeChild(this.sprite);
		HxOverrides.remove(this.simulation.citizenSpawners,this);
	}
	,save: function(queue) {
		var value = this.simulation.city.worlds.indexOf(this.toWorld);
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var value1 = this.toXIndex;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		var value2 = this.yPositionAboveWorld;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value2);
		queue.size += 8;
		queue.addJSON(this.spawn);
	}
	,__class__: simulation_SpawnFlyingSaucer
};
var simulation_Stats = function(city,simulation1) {
	this.peopleWorkingAtLabs = 0;
	this.people = 0;
	this.jobs = 0;
	this.houseCapacity = 0;
	this.peopleWithHome = 0;
	this.peopleWithAJob = 0;
	this.children = 0;
	this.laborForce = 0;
	this.shouldUpdateIn = -1;
	this.city = city;
	this.simulation = simulation1;
	this.materialProduction = [];
	this.materialUsed = [];
	this.materialProduction.push([0,0,0,0,0,0,0]);
	this.materialProduction.push([0,0,0,0,0,0,0]);
	this.materialProduction.push([0,0,0,0,0,0,0]);
	this.materialProduction.push([0,0,0,0,0,0,0]);
	this.materialProduction.push([0,0,0,0,0,0,0]);
	this.materialProduction.push([0,0,0,0,0,0,0]);
	this.materialProduction.push([0,0,0,0,0,0,0]);
	this.materialProduction.push([0,0,0,0,0,0,0]);
	this.materialProduction.push([0,0,0,0,0,0,0]);
	this.materialProduction.push([0,0,0,0,0,0,0]);
	this.materialUsed.push([0,0,0,0,0,0,0]);
	this.materialUsed.push([0,0,0,0,0,0,0]);
	this.materialUsed.push([0,0,0,0,0,0,0]);
	this.materialUsed.push([0,0,0,0,0,0,0]);
	this.materialUsed.push([0,0,0,0,0,0,0]);
	this.materialUsed.push([0,0,0,0,0,0,0]);
	this.materialUsed.push([0,0,0,0,0,0,0]);
	this.materialUsed.push([0,0,0,0,0,0,0]);
	this.materialUsed.push([0,0,0,0,0,0,0]);
	this.materialUsed.push([0,0,0,0,0,0,0]);
};
$hxClasses["simulation.Stats"] = simulation_Stats;
simulation_Stats.__name__ = ["simulation","Stats"];
simulation_Stats.prototype = {
	save: function(queue) {
		this.saveBasics(queue);
		var value = this.materialProduction.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var _g1 = 0;
		var _g = this.materialProduction.length;
		while(_g1 < _g) {
			var i = _g1++;
			queue.addString(MaterialsHelper.findMaterialName(i));
			var value1 = this.materialProduction[i].length;
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes1 = queue.bytes;
				queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes.blit(0,oldBytes1,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value1);
			queue.size += 4;
			var _g2 = 0;
			var _g3 = this.materialProduction[i];
			while(_g2 < _g3.length) {
				var prod = _g3[_g2];
				++_g2;
				if(queue.size + 8 > queue.bytes.length) {
					var oldBytes2 = queue.bytes;
					queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
					queue.bytes.blit(0,oldBytes2,0,queue.size);
				}
				queue.bytes.setDouble(queue.size,prod);
				queue.size += 8;
			}
		}
		var value2 = this.materialUsed.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes3 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes3,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
		var _g11 = 0;
		var _g4 = this.materialUsed.length;
		while(_g11 < _g4) {
			var i1 = _g11++;
			queue.addString(MaterialsHelper.findMaterialName(i1));
			var value3 = this.materialUsed[i1].length;
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes4 = queue.bytes;
				queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes.blit(0,oldBytes4,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value3);
			queue.size += 4;
			var _g21 = 0;
			var _g31 = this.materialUsed[i1];
			while(_g21 < _g31.length) {
				var prod1 = _g31[_g21];
				++_g21;
				if(queue.size + 8 > queue.bytes.length) {
					var oldBytes5 = queue.bytes;
					queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
					queue.bytes.blit(0,oldBytes5,0,queue.size);
				}
				queue.bytes.setDouble(queue.size,prod1);
				queue.size += 8;
			}
		}
	}
	,load: function(queue) {
		this.loadBasics(queue);
		if(queue.version >= 5) {
			var intToRead = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var numberOfSavedMaterialArrays = intToRead;
			var _g1 = 0;
			var _g = numberOfSavedMaterialArrays;
			while(_g1 < _g) {
				var i = _g1++;
				var index;
				var byteToRead = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead == 1) {
					var intToRead1 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos = intToRead1;
					var stringLength = queue.bytes.getInt32(readPos);
					index = queue.bytes.getString(readPos + 4,stringLength);
				} else {
					var intToRead2 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len = intToRead2;
					var str = queue.bytes.getString(queue.readStart,len);
					queue.readStart += len;
					index = str;
				}
				var index1 = MaterialsHelper.findMaterialIndex(index);
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var historyLength = intToRead3;
				var _g3 = 0;
				var _g2 = historyLength;
				while(_g3 < _g2) {
					var j = _g3++;
					var floatToRead = queue.bytes.getDouble(queue.readStart);
					queue.readStart += 8;
					var prod = floatToRead;
					if(this.materialProduction[index1].length <= j) {
						this.materialProduction[index1].push(prod);
					} else {
						this.materialProduction[index1][j] = prod;
					}
				}
			}
		}
		if(queue.version >= 11) {
			var intToRead4 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var numberOfSavedMaterialArrays1 = intToRead4;
			var _g11 = 0;
			var _g4 = numberOfSavedMaterialArrays1;
			while(_g11 < _g4) {
				var i1 = _g11++;
				var index2;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead5;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					index2 = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead6;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					index2 = str1;
				}
				var index3 = MaterialsHelper.findMaterialIndex(index2);
				var intToRead7 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var historyLength1 = intToRead7;
				var _g31 = 0;
				var _g21 = historyLength1;
				while(_g31 < _g21) {
					var j1 = _g31++;
					var floatToRead1 = queue.bytes.getDouble(queue.readStart);
					queue.readStart += 8;
					var cons = floatToRead1;
					if(this.materialUsed[index3].length <= j1) {
						this.materialUsed[index3].push(cons);
					} else {
						this.materialUsed[index3][j1] = cons;
					}
				}
			}
		}
	}
	,update: function(timeMod) {
		if(this.shouldUpdateIn <= 0) {
			this.laborForce = 0;
			this.peopleWithAJob = 0;
			this.peopleWithHome = 0;
			this.children = 0;
			this.houseCapacity = 0;
			this.peopleWorkingAtLabs = 0;
			this.people = this.simulation.citizens.length;
			this.jobs = 0;
			var _g = 0;
			var _g1 = this.simulation.citizens;
			while(_g < _g1.length) {
				var citizen = _g1[_g];
				++_g;
				if(citizen.lastInfrequentUpdateAge >= 16) {
					this.laborForce += 1;
					if(citizen.job != null) {
						this.peopleWithAJob += 1;
						if(citizen.job["is"](buildings_Laboratory) || citizen.job["is"](buildings_ExperimentationLab)) {
							this.peopleWorkingAtLabs += 1;
						}
					}
				} else {
					this.children += 1;
				}
				if(citizen.home != null) {
					this.peopleWithHome += 1;
				}
			}
			var _g2 = 0;
			var _g11 = this.city.permanents;
			while(_g2 < _g11.length) {
				var permanent = _g11[_g2];
				++_g2;
				if(permanent["is"](buildings_House)) {
					this.houseCapacity += permanent.get_residentCapacity();
				}
				if(permanent["is"](buildings_Work)) {
					this.jobs += permanent.get_jobs();
				}
			}
			this.shouldUpdateIn += 20;
			this.city.progress.unlocks.checkStatRelatedUnlocks();
		} else {
			this.shouldUpdateIn -= Math.max(1,timeMod);
		}
	}
	,midnightUpdate: function() {
		var _g = 0;
		var _g1 = this.materialProduction;
		while(_g < _g1.length) {
			var singleMaterialProduction = _g1[_g];
			++_g;
			var i = singleMaterialProduction.length;
			while(--i >= 1) singleMaterialProduction[i] = singleMaterialProduction[i - 1];
			singleMaterialProduction[0] = 0;
		}
		var _g2 = 0;
		var _g11 = this.materialUsed;
		while(_g2 < _g11.length) {
			var singleMaterialUse = _g11[_g2];
			++_g2;
			var i1 = singleMaterialUse.length;
			while(--i1 >= 1) singleMaterialUse[i1] = singleMaterialUse[i1 - 1];
			singleMaterialUse[0] = 0;
		}
	}
	,amountOfBuildingsOfType: function(type) {
		var count = 0;
		var _g = 0;
		var _g1 = this.city.permanents;
		while(_g < _g1.length) {
			var pm = _g1[_g];
			++_g;
			if(pm["is"](type)) {
				++count;
			}
		}
		return count;
	}
	,saveBasics: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(simulation_Stats.saveDefinition);
		}
	}
	,loadBasics: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: simulation_Stats
};
var simulation_citizenSpecialActions_ClimbIntoTree = function(citizen) {
	simulation_CitizenSpecialAction.call(this,citizen);
};
$hxClasses["simulation.citizenSpecialActions.ClimbIntoTree"] = simulation_citizenSpecialActions_ClimbIntoTree;
simulation_citizenSpecialActions_ClimbIntoTree.__name__ = ["simulation","citizenSpecialActions","ClimbIntoTree"];
simulation_citizenSpecialActions_ClimbIntoTree.__super__ = simulation_CitizenSpecialAction;
simulation_citizenSpecialActions_ClimbIntoTree.prototype = $extend(simulation_CitizenSpecialAction.prototype,{
	update: function(timeMod) {
		if(this.citizen.inPermanent != null && this.citizen.inPermanent["is"](worldResources_Forest)) {
			var inForest = this.citizen.inPermanent;
			if(((this.time.timeSinceStart | 0) / 60 | 0) % 24 == 4 && (this.time.timeSinceStart | 0) % 60 > 45) {
				if(this.citizen.relativeY != 0) {
					var tmp = this.citizen;
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
					arr[0] = 9;
					arr[1] = 0;
					tmp.setPath(arr,0,2);
				}
			} else if(this.citizen.relativeY == 0) {
				var tmp1 = this.citizen;
				var pool1 = pooling_Int32ArrayPool.pool;
				var arr1 = pool1[4].length > 0 ? pool1[4].splice(pool1[4].length - 1,1)[0] : new Int32Array(4);
				arr1[0] = 4;
				arr1[1] = inForest.get_treeClimbX();
				arr1[2] = 9;
				arr1[3] = inForest.get_treeClimbY();
				tmp1.setPath(arr1,0,4);
			}
		} else {
			var nearestForest = null;
			var nearestForestDist = 100000.0;
			var _g = 0;
			var _g1 = this.citizen.onWorld.permanents;
			while(_g < _g1.length) {
				var stack = _g1[_g];
				++_g;
				if(stack.length >= 1 && stack[0] != null && stack[0]["is"](worldResources_Forest)) {
					var thisForest = stack[0];
					if(thisForest.materialsLeft == thisForest.initialMaterials) {
						var dist = thisForest.worldPosition.x * 20 - this.citizen.get_worldX();
						if(dist < nearestForestDist) {
							nearestForest = thisForest;
							nearestForestDist = dist;
						}
					}
				}
			}
			if(nearestForest != null) {
				var _this = this.citizen;
				_this.simulation.pathfinder.findPath(_this,nearestForest);
				_this.pathOnFail = null;
			}
		}
	}
	,isActive: function() {
		if(((this.time.timeSinceStart | 0) / 60 | 0) % 24 >= 0) {
			return ((this.time.timeSinceStart | 0) / 60 | 0) % 24 <= 4;
		} else {
			return false;
		}
	}
	,__class__: simulation_citizenSpecialActions_ClimbIntoTree
});
var simulation_citizenSpecialActions_ClimbOntoRuins = function(citizen) {
	this.cancelAction = false;
	simulation_CitizenSpecialAction.call(this,citizen);
};
$hxClasses["simulation.citizenSpecialActions.ClimbOntoRuins"] = simulation_citizenSpecialActions_ClimbOntoRuins;
simulation_citizenSpecialActions_ClimbOntoRuins.__name__ = ["simulation","citizenSpecialActions","ClimbOntoRuins"];
simulation_citizenSpecialActions_ClimbOntoRuins.__super__ = simulation_CitizenSpecialAction;
simulation_citizenSpecialActions_ClimbOntoRuins.prototype = $extend(simulation_CitizenSpecialAction.prototype,{
	update: function(timeMod) {
		if(this.cancelAction) {
			return;
		}
		if(this.citizen.inPermanent != null && this.citizen.inPermanent["is"](worldResources_AlienRuins)) {
			var inAlienRuins = this.citizen.inPermanent;
			if(((this.time.timeSinceStart | 0) / 60 | 0) % 24 == 4.5 && (this.time.timeSinceStart | 0) % 60 > 45) {
				if(this.citizen.relativeY != 0) {
					var tmp = this.citizen;
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
					arr[0] = 9;
					arr[1] = 0;
					tmp.setPath(arr,0,2);
				}
			} else if(this.citizen.relativeY == 0) {
				var tmp1 = this.citizen;
				var pool1 = pooling_Int32ArrayPool.pool;
				var arr1 = pool1[4].length > 0 ? pool1[4].splice(pool1[4].length - 1,1)[0] : new Int32Array(4);
				arr1[0] = 4;
				arr1[1] = inAlienRuins.get_climbX();
				arr1[2] = 9;
				arr1[3] = inAlienRuins.get_climbY();
				tmp1.setPath(arr1,0,4);
			}
		} else {
			var nearestRuins = null;
			var nearestRuinsDist = 100000.0;
			var _g = 0;
			var _g1 = this.citizen.onWorld.permanents;
			while(_g < _g1.length) {
				var stack = _g1[_g];
				++_g;
				if(stack.length >= 1 && stack[0] != null && stack[0]["is"](worldResources_AlienRuins)) {
					var thisRuins = stack[0];
					var dist = thisRuins.worldPosition.x * 20 - this.citizen.get_worldX();
					if(dist < nearestRuinsDist) {
						nearestRuins = thisRuins;
						nearestRuinsDist = dist;
					}
				}
			}
			if(nearestRuins != null) {
				var _this = this.citizen;
				_this.simulation.pathfinder.findPath(_this,nearestRuins);
				_this.pathOnFail = null;
			} else {
				this.cancelAction = true;
			}
		}
	}
	,isActive: function() {
		if(((this.time.timeSinceStart | 0) / 60 | 0) % 24 >= 0.5 && ((this.time.timeSinceStart | 0) / 60 | 0) % 24 <= 4.5) {
			return !this.cancelAction;
		} else {
			return false;
		}
	}
	,__class__: simulation_citizenSpecialActions_ClimbOntoRuins
});
var simulation_citizenSpecialActions_DanceOnBall = function(citizen) {
	this.goIntoDirection = 1;
	this.currentSprite = null;
	simulation_CitizenSpecialAction.call(this,citizen);
};
$hxClasses["simulation.citizenSpecialActions.DanceOnBall"] = simulation_citizenSpecialActions_DanceOnBall;
simulation_citizenSpecialActions_DanceOnBall.__name__ = ["simulation","citizenSpecialActions","DanceOnBall"];
simulation_citizenSpecialActions_DanceOnBall.__super__ = simulation_CitizenSpecialAction;
simulation_citizenSpecialActions_DanceOnBall.prototype = $extend(simulation_CitizenSpecialAction.prototype,{
	update: function(timeMod) {
		if(((this.time.timeSinceStart | 0) / 60 | 0) % 24 >= 1 && ((this.time.timeSinceStart | 0) / 60 | 0) % 24 <= 5) {
			if(this.citizen.inPermanent != null) {
				this.citizen.goDownTowardsWorldSurface(timeMod);
			} else {
				this.citizen.setRelativeY(4);
				if(this.currentSprite == null) {
					this.goIntoDirection = random_Random.fromArray([-1,1]);
					this.currentSprite = new PIXI.Sprite(Resources.getTexture("spr_citizen_ball"));
					this.currentSprite.position.y = this.citizen.onWorld.rect.y - 4;
					this.citizen.onWorld.city.farForegroundStage.addChild(this.currentSprite);
				}
				this.citizen.setRelativeX(this.citizen.relativeX + timeMod * 0.5 * this.goIntoDirection);
				if(this.goIntoDirection == 1 && this.citizen.relativeX >= this.citizen.onWorld.rect.width - 2 || this.goIntoDirection == -1 && this.citizen.relativeX <= 0) {
					this.goIntoDirection = -this.goIntoDirection;
				}
				this.currentSprite.position.x = this.citizen.onWorld.rect.x + this.citizen.relativeX - 1;
			}
		} else if(this.currentSprite != null) {
			this.citizen.onWorld.city.farForegroundStage.removeChild(this.currentSprite);
			var _this = this.citizen;
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = 5;
			_this.setPath(arr,0,2,true);
			_this.pathEndFunction = null;
			_this.pathOnlyRelatedTo = _this.inPermanent;
			this.currentSprite = null;
			this.citizen.setRelativeY(0);
		}
	}
	,isActive: function() {
		if(!(((this.time.timeSinceStart | 0) / 60 | 0) % 24 >= 1 && ((this.time.timeSinceStart | 0) / 60 | 0) % 24 <= 5)) {
			return this.currentSprite != null;
		} else {
			return true;
		}
	}
	,onDie: function() {
		simulation_CitizenSpecialAction.prototype.onDie.call(this);
		if(this.currentSprite != null) {
			this.citizen.onWorld.city.farForegroundStage.removeChild(this.currentSprite);
		}
	}
	,__class__: simulation_citizenSpecialActions_DanceOnBall
});
var simulation_citizenSpecialActions_MoveToEdge = function(citizen) {
	simulation_CitizenSpecialAction.call(this,citizen);
};
$hxClasses["simulation.citizenSpecialActions.MoveToEdge"] = simulation_citizenSpecialActions_MoveToEdge;
simulation_citizenSpecialActions_MoveToEdge.__name__ = ["simulation","citizenSpecialActions","MoveToEdge"];
simulation_citizenSpecialActions_MoveToEdge.__super__ = simulation_CitizenSpecialAction;
simulation_citizenSpecialActions_MoveToEdge.prototype = $extend(simulation_CitizenSpecialAction.prototype,{
	update: function(timeMod) {
		var citizenMaxX = this.citizen.onWorld.rect.width - 2;
		if(this.citizen.inPermanent != null || this.citizen.relativeX > 0 && this.citizen.relativeX < citizenMaxX) {
			if(this.citizen.inPermanent == null) {
				var _this = this.citizen;
				var x = this.citizen.relativeX < citizenMaxX / 2 ? 0 : citizenMaxX;
				var pool = pooling_Int32ArrayPool.pool;
				var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
				arr[0] = 4;
				arr[1] = x;
				_this.setPath(arr,0,2,true);
				_this.pathEndFunction = null;
				_this.pathOnlyRelatedTo = _this.inPermanent;
			} else {
				this.citizen.goDownTowardsWorldSurface(timeMod);
			}
		}
	}
	,isActive: function() {
		var this1 = this.time.timeSinceStart / 60 % 24;
		if(!(this1 >= 23)) {
			return this1 < 5;
		} else {
			return true;
		}
	}
	,__class__: simulation_citizenSpecialActions_MoveToEdge
});
var simulation_citizenSpecialActions_Protester = function(citizen) {
	this.goingIntoThisDirection = 0;
	this.goIntoDirection = 1;
	this.currentSprite = null;
	simulation_CitizenSpecialAction.call(this,citizen);
};
$hxClasses["simulation.citizenSpecialActions.Protester"] = simulation_citizenSpecialActions_Protester;
simulation_citizenSpecialActions_Protester.__name__ = ["simulation","citizenSpecialActions","Protester"];
simulation_citizenSpecialActions_Protester.__super__ = simulation_CitizenSpecialAction;
simulation_citizenSpecialActions_Protester.prototype = $extend(simulation_CitizenSpecialAction.prototype,{
	update: function(timeMod) {
		if(((this.time.timeSinceStart | 0) / 60 | 0) % 24 >= 0 && ((this.time.timeSinceStart | 0) / 60 | 0) % 24 <= 4 && (this.citizensAreVeryHappy() || this.citizensAreVeryUnhappy())) {
			if(this.citizen.inPermanent != null) {
				this.citizen.goDownTowardsWorldSurface(timeMod);
			} else {
				if(this.currentSprite == null) {
					this.goIntoDirection = random_Random.fromArray([-1,1]);
					if(this.citizensAreVeryHappy()) {
						this.currentSprite = new PIXI.Sprite(Resources.getTexture("spr_protestsign_happy"));
					} else {
						this.currentSprite = new PIXI.Sprite(Resources.getTexture("spr_protestsign_sad"));
					}
					this.currentSprite.position.y = this.citizen.onWorld.rect.y - this.currentSprite.height;
					this.citizen.onWorld.city.farForegroundStage.addChild(this.currentSprite);
				}
				this.citizen.setRelativeX(this.citizen.relativeX + timeMod * 0.66666666666666663 * this.goIntoDirection);
				if(this.goIntoDirection == 1 && this.citizen.relativeX >= this.citizen.onWorld.rect.width - 2 || this.goIntoDirection == -1 && this.citizen.relativeX <= 0) {
					this.goIntoDirection = -this.goIntoDirection;
				} else if(this.goingIntoThisDirection > 150 && random_Random.getInt(90) == 1) {
					this.goIntoDirection = -this.goIntoDirection;
					this.goingIntoThisDirection = 0;
				} else {
					this.goingIntoThisDirection += timeMod;
				}
				this.currentSprite.position.x = this.citizen.onWorld.rect.x + this.citizen.relativeX - (this.goIntoDirection == 1 ? 2 : 5);
			}
		} else if(this.currentSprite != null) {
			this.citizen.onWorld.city.farForegroundStage.removeChild(this.currentSprite);
			var _this = this.citizen;
			var pool = pooling_Int32ArrayPool.pool;
			var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
			arr[0] = 8;
			arr[1] = 5;
			_this.setPath(arr,0,2,true);
			_this.pathEndFunction = null;
			_this.pathOnlyRelatedTo = _this.inPermanent;
			this.currentSprite = null;
		}
	}
	,isActive: function() {
		if(!(((this.time.timeSinceStart | 0) / 60 | 0) % 24 >= 0 && ((this.time.timeSinceStart | 0) / 60 | 0) % 24 <= 4 && (this.citizensAreVeryHappy() || this.citizensAreVeryUnhappy()))) {
			return this.currentSprite != null;
		} else {
			return true;
		}
	}
	,citizensAreVeryHappy: function() {
		return this.simulation.happiness.happiness >= 99.99;
	}
	,citizensAreVeryUnhappy: function() {
		return this.simulation.happiness.happiness <= 10.01;
	}
	,onDie: function() {
		simulation_CitizenSpecialAction.prototype.onDie.call(this);
		if(this.currentSprite != null) {
			this.citizen.onWorld.city.farForegroundStage.removeChild(this.currentSprite);
		}
	}
	,__class__: simulation_citizenSpecialActions_Protester
});
var simulation_citizenSpecialActions_WatchStars = function(citizen) {
	this.currentSprite = null;
	simulation_CitizenSpecialAction.call(this,citizen);
};
$hxClasses["simulation.citizenSpecialActions.WatchStars"] = simulation_citizenSpecialActions_WatchStars;
simulation_citizenSpecialActions_WatchStars.__name__ = ["simulation","citizenSpecialActions","WatchStars"];
simulation_citizenSpecialActions_WatchStars.__super__ = simulation_CitizenSpecialAction;
simulation_citizenSpecialActions_WatchStars.prototype = $extend(simulation_CitizenSpecialAction.prototype,{
	update: function(timeMod) {
		var _gthis = this;
		if(((this.time.timeSinceStart | 0) / 60 | 0) % 24 >= 0 && ((this.time.timeSinceStart | 0) / 60 | 0) % 24 <= 4) {
			if(this.currentSprite == null) {
				if(this.citizen.inPermanent != null) {
					this.citizen.goDownTowardsWorldSurface(timeMod);
				} else {
					var telescopeWidth = 4;
					var telescopeHeight = 5;
					var bestPosition = pathfinder_PathfindingTools.findNearestBestBuildingStack(this.citizen,function(stack) {
						if(stack.length == 0 || stack[0] == null) {
							return 1000;
						}
						if(stack[0]["is"](worldResources_Forest)) {
							return 999;
						}
						return 0;
					}) * 20 + random_Random.getInt(telescopeWidth,18 - telescopeWidth);
					var _this = this.citizen;
					var pool = pooling_Int32ArrayPool.pool;
					var arr = pool[2].length > 0 ? pool[2].splice(pool[2].length - 1,1)[0] : new Int32Array(2);
					arr[0] = 4;
					arr[1] = bestPosition;
					_this.setPath(arr,0,2,true);
					_this.pathEndFunction = function() {
						var tmp = Resources.getTexture("spr_telescope");
						_gthis.currentSprite = new PIXI.Sprite(tmp);
						_gthis.currentSprite.position.y = _gthis.citizen.onWorld.rect.y - telescopeHeight;
						if(random_Random.getInt(2) == 0) {
							_gthis.currentSprite.position.x = _gthis.citizen.onWorld.rect.x + bestPosition - telescopeWidth;
						} else {
							_gthis.currentSprite.position.x = _gthis.citizen.onWorld.rect.x + bestPosition + 2 + telescopeWidth;
							_gthis.currentSprite.scale.x = -1;
						}
						_gthis.citizen.onWorld.city.farForegroundStage.addChild(_gthis.currentSprite);
					};
					_this.pathOnlyRelatedTo = _this.inPermanent;
				}
			}
		} else if(this.currentSprite != null) {
			this.citizen.onWorld.city.farForegroundStage.removeChild(this.currentSprite);
			var _this1 = this.citizen;
			var pool1 = pooling_Int32ArrayPool.pool;
			var arr1 = pool1[2].length > 0 ? pool1[2].splice(pool1[2].length - 1,1)[0] : new Int32Array(2);
			arr1[0] = 8;
			arr1[1] = 5;
			_this1.setPath(arr1,0,2,true);
			_this1.pathEndFunction = null;
			_this1.pathOnlyRelatedTo = _this1.inPermanent;
			this.currentSprite = null;
		}
	}
	,isActive: function() {
		if(!(((this.time.timeSinceStart | 0) / 60 | 0) % 24 >= 0 && ((this.time.timeSinceStart | 0) / 60 | 0) % 24 <= 4)) {
			return this.currentSprite != null;
		} else {
			return true;
		}
	}
	,onDie: function() {
		simulation_CitizenSpecialAction.prototype.onDie.call(this);
		if(this.currentSprite != null) {
			this.citizen.onWorld.city.farForegroundStage.removeChild(this.currentSprite);
		}
	}
	,__class__: simulation_citizenSpecialActions_WatchStars
});
var simulation_festival_Festival = function(city,simulation1,manager,centerBuilding) {
	this.started = false;
	this.city = city;
	this.simulation = simulation1;
	this.manager = manager;
	this.centerBuilding = centerBuilding;
};
$hxClasses["simulation.festival.Festival"] = simulation_festival_Festival;
simulation_festival_Festival.__name__ = ["simulation","festival","Festival"];
simulation_festival_Festival.prototype = {
	get_normalDuration: function() {
		return 1440;
	}
	,plan: function() {
		var dayStart = (1 + ((this.city.simulation.time.timeSinceStart | 0) / 1440 | 0) + 1) * 24 * 60;
		this.timeStart = this.city.simulation.time.timeSinceStart;
		this.timeEnd = this.timeStart + this.get_normalDuration();
	}
	,isNow: function() {
		return this.city.simulation.time.timeSinceStart >= this.timeStart;
	}
	,getText: function() {
		return "Now having a festival!";
	}
	,end: function() {
		this.manager.endFestival(this);
		var _g = 0;
		var _g1 = this.city.permanents;
		while(_g < _g1.length) {
			var pm = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(pm,buildings_IBuildingWithFestivalSpecials)) {
				var festivalPM = pm;
				festivalPM.stopFestival();
			}
		}
	}
	,update: function(timeMod) {
		if(this.city.simulation.time.timeSinceStart > this.timeEnd) {
			this.end();
		} else if(this.isNow()) {
			if(!this.started) {
				this.startFestival();
				this.started = true;
			}
			this.updateFestival(timeMod);
		}
	}
	,updateFestival: function(timeMod) {
	}
	,startFestival: function() {
	}
	,doStartRepeatables: function() {
		var _g = 0;
		var _g1 = this.city.permanents;
		while(_g < _g1.length) {
			var pm = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(pm,buildings_IBuildingWithFestivalSpecials)) {
				var festivalPM = pm;
				festivalPM.initFestival();
			}
		}
	}
	,isInvolvedWithFestival: function(citizen) {
		return true;
	}
	,citizenFestivalUpdate: function(citizen,timeMod) {
	}
	,updateFestivalCitizen: function(citizen,timeMod) {
		if(this.isInvolvedWithFestival(citizen)) {
			if(!citizen.fullyBeingControlled) {
				Citizen.shouldUpdateDraw = false;
				if(citizen.delayCanViewSelfInBuilding) {
					citizen.delayCanViewSelfInBuilding = false;
					Citizen.shouldUpdateDraw = true;
				}
				citizen.updatePath(timeMod);
				if(citizen.path == null && !citizen.isRequestingPath) {
					var f = $bind(this,this.citizenFestivalUpdate);
					var a1 = citizen;
					(function(a2) {
						f(a1,a2);
					})(timeMod);
				}
				if(Citizen.shouldUpdateDraw) {
					citizen.actuallyUpdateDraw();
				}
			}
		} else {
			citizen.update(timeMod);
		}
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(simulation_festival_Festival.saveDefinition);
		}
		var value = this.timeStart;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.timeEnd;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
		var value2 = this.started ? 1 : 0;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes2 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes2,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value2);
		queue.size += 4;
	}
	,load: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["timeStart"] != null ? loadMap.existsReserved("timeStart") : loadMap.h.hasOwnProperty("timeStart")) {
			this.timeStart = __map_reserved["timeStart"] != null ? loadMap.getReserved("timeStart") : loadMap.h["timeStart"];
		}
		if(__map_reserved["timeEnd"] != null ? loadMap.existsReserved("timeEnd") : loadMap.h.hasOwnProperty("timeEnd")) {
			this.timeEnd = __map_reserved["timeEnd"] != null ? loadMap.getReserved("timeEnd") : loadMap.h["timeEnd"];
		}
		if(__map_reserved["started"] != null ? loadMap.existsReserved("started") : loadMap.h.hasOwnProperty("started")) {
			this.started = __map_reserved["started"] != null ? loadMap.getReserved("started") : loadMap.h["started"];
		}
	}
	,__class__: simulation_festival_Festival
};
var simulation_festival_FestivalManager = function(city,simulation1) {
	this.city = city;
	this.simulation = simulation1;
	this.festivals = [];
};
$hxClasses["simulation.festival.FestivalManager"] = simulation_festival_FestivalManager;
simulation_festival_FestivalManager.__name__ = ["simulation","festival","FestivalManager"];
simulation_festival_FestivalManager.prototype = {
	addFestival: function(festival) {
		this.festivals.push(festival);
	}
	,hasNoPlannedFestival: function() {
		return this.festivals.length == 0;
	}
	,plannedFestival: function() {
		var _g = 0;
		var _g1 = this.festivals;
		while(_g < _g1.length) {
			var festival = _g1[_g];
			++_g;
			if(!festival.started) {
				return festival;
			}
		}
		return null;
	}
	,hasFestival: function() {
		return common_ArrayExtensions.any(this.festivals,function(f) {
			return f.isNow();
		});
	}
	,updateFestivalCitizens: function(timeMod) {
		var _g = 0;
		var _g1 = this.festivals;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.simulation.citizens;
			while(_g2 < _g3.length) {
				var citizen = _g3[_g2];
				++_g2;
				f.updateFestivalCitizen(citizen,timeMod);
			}
		}
	}
	,currentFestival: function() {
		var _g = 0;
		var _g1 = this.festivals;
		while(_g < _g1.length) {
			var festival = _g1[_g];
			++_g;
			if(festival.isNow()) {
				return festival;
			}
		}
		return null;
	}
	,update: function(timeMod) {
		var curr = this.currentFestival();
		if(curr != null) {
			curr.update(timeMod);
		}
	}
	,endFestival: function(fest) {
		HxOverrides.remove(this.festivals,fest);
	}
	,save: function(queue) {
		var value = this.festivals.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var _g = 0;
		var _g1 = this.festivals;
		while(_g < _g1.length) {
			var festival = _g1[_g];
			++_g;
			queue.addString(Type.getClassName(festival == null ? null : js_Boot.getClass(festival)));
			var value1 = festival.centerBuilding.id;
			if(queue.size + 4 > queue.bytes.length) {
				var oldBytes1 = queue.bytes;
				queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
				queue.bytes.blit(0,oldBytes1,0,queue.size);
			}
			queue.bytes.setInt32(queue.size,value1);
			queue.size += 4;
			festival.save(queue);
		}
	}
	,load: function(queue) {
		var intToRead = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var len = intToRead;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var className;
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead1;
				var stringLength = queue.bytes.getInt32(readPos);
				className = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len1 = intToRead2;
				var str = queue.bytes.getString(queue.readStart,len1);
				queue.readStart += len1;
				className = str;
			}
			var intToRead3 = queue.bytes.getInt32(queue.readStart);
			queue.readStart += 4;
			var centerBuilding = intToRead3;
			var fes = Type.createInstance(Type.resolveClass(className),[this.city,this.simulation,this,this.city.findPermanentByID(centerBuilding)]);
			fes.load(queue);
			this.festivals.push(fes);
		}
	}
	,afterLoad: function() {
		var _g = 0;
		var _g1 = this.festivals;
		while(_g < _g1.length) {
			var fes = _g1[_g];
			++_g;
			if(fes.started) {
				fes.doStartRepeatables();
			}
		}
	}
	,__class__: simulation_festival_FestivalManager
};
var simulation_festival_MusicFestival = function(city,simulation1,manager,centerBuilding) {
	simulation_festival_Festival.call(this,city,simulation1,manager,centerBuilding);
};
$hxClasses["simulation.festival.MusicFestival"] = simulation_festival_MusicFestival;
simulation_festival_MusicFestival.__name__ = ["simulation","festival","MusicFestival"];
simulation_festival_MusicFestival.involvedCitizens = function(simulation1) {
	return simulation1.citizens.filter(function(c) {
		if(c.get_age() > 18) {
			if(c.job != null) {
				return !c.job["is"](buildings_School);
			} else {
				return true;
			}
		} else {
			return false;
		}
	});
};
simulation_festival_MusicFestival.canDo = function(city,simulation1,centerBuilding) {
	var involvedCitizenNum = simulation_festival_MusicFestival.involvedCitizens(simulation1).length;
	var relevantBuildingNum = simulation_festival_MusicFestival.relevantBuildings(simulation1,centerBuilding).length;
	if(involvedCitizenNum > simulation_festival_MusicFestival.minCitizens) {
		return relevantBuildingNum > (involvedCitizenNum / 100 | 0);
	} else {
		return false;
	}
};
simulation_festival_MusicFestival.relevantBuildings = function(simulation1,centerBuilding) {
	var relevants = [];
	var _this = simulation1.permanentFinder;
	var _gthis = _this;
	_this.updateQueries += 1;
	_this.pfSeenStart += 3;
	if(_this.pfSeenStart > 100000) {
		_this.pfSeenStart = 1;
	}
	if(centerBuilding != null) {
		var newPrioritizable = pathfinder_PermanentPrioritizable.create(0,centerBuilding);
		centerBuilding.pfRelatedPrioritizable = newPrioritizable;
		_this.pathQueue.enqueue(newPrioritizable);
	} else {
		var _g = 0;
		var _g1 = null.permanents;
		while(_g < _g1.length) {
			var bottomPermanents = _g1[_g];
			++_g;
			if(bottomPermanents.length == 0 || bottomPermanents[0] == null) {
				continue;
			}
			var newPriority = Math.abs(bottomPermanents[0].position.x - null);
			bottomPermanents[0].pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority,bottomPermanents[0]);
			_this.pathQueue.enqueue(bottomPermanents[0].pfRelatedPrioritizable);
			bottomPermanents[0].pfSeen = _this.pfSeenStart;
		}
	}
	var maxNiceNess = -10000.0;
	var bestPermanent = null;
	var landingSiteGroups = _this.city.connections.landingSiteGroups;
	var teleportersDone = false;
	var _g2 = [];
	var _g11 = 0;
	while(_g11 < landingSiteGroups.length) {
		var i = landingSiteGroups[_g11];
		++_g11;
		_g2.push(false);
	}
	var landingSitesDone = _g2;
	var privateTeleporter = null;
	while(_this.pathQueue.mSize != 0) {
		var currentQueueItem = _this.pathQueue.dequeue();
		var currentPermanent = currentQueueItem.permanent;
		currentPermanent.pfSeen = _this.pfSeenStart + 1;
		if(currentPermanent.isBuilding) {
			var bld = currentPermanent;
			if(bld.isEntertainment) {
				var ent = bld;
				if(ent.get_entertainmentType() == 3 || ent.get_entertainmentType() == 0 || ent.get_entertainmentType() == 1) {
					if(bld.couldStandHere() && !bld["is"](buildings_EcoFarm)) {
						relevants.push(ent);
					}
				}
			}
		}
		if(currentPermanent.isBuilding) {
			var currentBuilding = currentPermanent;
			var permanentTo = currentBuilding.leftBuilding;
			if(permanentTo != null) {
				if(permanentTo.pfSeen == _gthis.pfSeenStart) {
					var relatedPrioritizable = permanentTo.pfRelatedPrioritizable;
					var newPriority1 = currentQueueItem.priority + 20;
					if(newPriority1 < relatedPrioritizable.priority) {
						_gthis.pathQueue.reprioritize(relatedPrioritizable,newPriority1);
					}
				} else if(permanentTo.pfSeen != _gthis.pfSeenStart + 1) {
					var newPriority2 = currentQueueItem.priority + 20;
					permanentTo.pfSeen = _gthis.pfSeenStart;
					permanentTo.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority2,permanentTo);
					_gthis.pathQueue.enqueue(permanentTo.pfRelatedPrioritizable);
				}
			}
			var permanentTo1 = currentBuilding.rightBuilding;
			if(permanentTo1 != null) {
				if(permanentTo1.pfSeen == _gthis.pfSeenStart) {
					var relatedPrioritizable1 = permanentTo1.pfRelatedPrioritizable;
					var newPriority3 = currentQueueItem.priority + 20;
					if(newPriority3 < relatedPrioritizable1.priority) {
						_gthis.pathQueue.reprioritize(relatedPrioritizable1,newPriority3);
					}
				} else if(permanentTo1.pfSeen != _gthis.pfSeenStart + 1) {
					var newPriority4 = currentQueueItem.priority + 20;
					permanentTo1.pfSeen = _gthis.pfSeenStart;
					permanentTo1.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority4,permanentTo1);
					_gthis.pathQueue.enqueue(permanentTo1.pfRelatedPrioritizable);
				}
			}
			var permanentTo2 = currentBuilding.topBuilding;
			if(permanentTo2 != null) {
				if(permanentTo2.pfSeen == _gthis.pfSeenStart) {
					var relatedPrioritizable2 = permanentTo2.pfRelatedPrioritizable;
					var newPriority5 = currentQueueItem.priority + 20;
					if(newPriority5 < relatedPrioritizable2.priority) {
						_gthis.pathQueue.reprioritize(relatedPrioritizable2,newPriority5);
					}
				} else if(permanentTo2.pfSeen != _gthis.pfSeenStart + 1) {
					var newPriority6 = currentQueueItem.priority + 20;
					permanentTo2.pfSeen = _gthis.pfSeenStart;
					permanentTo2.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority6,permanentTo2);
					_gthis.pathQueue.enqueue(permanentTo2.pfRelatedPrioritizable);
				}
			}
			var permanentTo3 = currentBuilding.bottomBuilding;
			if(permanentTo3 != null) {
				if(permanentTo3.pfSeen == _gthis.pfSeenStart) {
					var relatedPrioritizable3 = permanentTo3.pfRelatedPrioritizable;
					var newPriority7 = currentQueueItem.priority + 20;
					if(newPriority7 < relatedPrioritizable3.priority) {
						_gthis.pathQueue.reprioritize(relatedPrioritizable3,newPriority7);
					}
				} else if(permanentTo3.pfSeen != _gthis.pfSeenStart + 1) {
					var newPriority8 = currentQueueItem.priority + 20;
					permanentTo3.pfSeen = _gthis.pfSeenStart;
					permanentTo3.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority8,permanentTo3);
					_gthis.pathQueue.enqueue(permanentTo3.pfRelatedPrioritizable);
				}
			}
			var isPrivateTeleporter = privateTeleporter == currentPermanent;
			var canTeleportFromHere = currentPermanent["is"](buildings_Teleporter) || isPrivateTeleporter;
			if(!teleportersDone && canTeleportFromHere) {
				var rnd = random_Random.getFloat(2);
				var tp = 0;
				var len = _this.city.teleporters.length;
				var invlen = 2 / len;
				var _g21 = 0;
				var _g12 = len;
				while(_g21 < _g12) {
					var tp1 = _g21++;
					var teleporter = _this.city.teleporters[tp1];
					var priorityAdd = 9 + (rnd + tp1 * invlen) % 2.0;
					if(teleporter != null) {
						if(teleporter.pfSeen == _gthis.pfSeenStart) {
							var relatedPrioritizable4 = teleporter.pfRelatedPrioritizable;
							var newPriority9 = currentQueueItem.priority + priorityAdd;
							if(newPriority9 < relatedPrioritizable4.priority) {
								_gthis.pathQueue.reprioritize(relatedPrioritizable4,newPriority9);
							}
						} else if(teleporter.pfSeen != _gthis.pfSeenStart + 1) {
							var newPriority10 = currentQueueItem.priority + priorityAdd;
							teleporter.pfSeen = _gthis.pfSeenStart;
							teleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority10,teleporter);
							_gthis.pathQueue.enqueue(teleporter.pfRelatedPrioritizable);
						}
					}
				}
				if(!isPrivateTeleporter && privateTeleporter != null) {
					if(privateTeleporter != null) {
						if(privateTeleporter.pfSeen == _gthis.pfSeenStart) {
							var relatedPrioritizable5 = privateTeleporter.pfRelatedPrioritizable;
							var newPriority11 = currentQueueItem.priority + 10;
							if(newPriority11 < relatedPrioritizable5.priority) {
								_gthis.pathQueue.reprioritize(relatedPrioritizable5,newPriority11);
							}
						} else if(privateTeleporter.pfSeen != _gthis.pfSeenStart + 1) {
							var newPriority12 = currentQueueItem.priority + 10;
							privateTeleporter.pfSeen = _gthis.pfSeenStart;
							privateTeleporter.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority12,privateTeleporter);
							_gthis.pathQueue.enqueue(privateTeleporter.pfRelatedPrioritizable);
						}
					}
				}
				teleportersDone = true;
			} else if(currentPermanent["is"](buildings_LandingSite) && !landingSitesDone[currentPermanent.landingSiteGroup]) {
				var thisGroup = currentPermanent.landingSiteGroup;
				var _g13 = 0;
				var _g22 = _this.city.connections.landingSiteGroups[thisGroup];
				while(_g13 < _g22.length) {
					var landingSite = _g22[_g13];
					++_g13;
					var priorityAdd1 = landingSite.estimatedFlyingDistanceTo(currentPermanent);
					if(landingSite != null) {
						if(landingSite.pfSeen == _gthis.pfSeenStart) {
							var relatedPrioritizable6 = landingSite.pfRelatedPrioritizable;
							var newPriority13 = currentQueueItem.priority + priorityAdd1;
							if(newPriority13 < relatedPrioritizable6.priority) {
								_gthis.pathQueue.reprioritize(relatedPrioritizable6,newPriority13);
							}
						} else if(landingSite.pfSeen != _gthis.pfSeenStart + 1) {
							var newPriority14 = currentQueueItem.priority + priorityAdd1;
							landingSite.pfSeen = _gthis.pfSeenStart;
							landingSite.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority14,landingSite);
							_gthis.pathQueue.enqueue(landingSite.pfRelatedPrioritizable);
						}
					}
				}
				landingSitesDone[thisGroup] = true;
			} else if(!currentQueueItem.dontCheckElevators && currentPermanent["is"](buildings_HyperElevator) && currentPermanent.pfSeen != 3) {
				var _g14 = 0;
				var _g23 = _this.city.connections.elevatorConnections.get(currentBuilding.world)[currentBuilding.worldPosition.x];
				while(_g14 < _g23.length) {
					var elevator = _g23[_g14];
					++_g14;
					var priorityAdd2 = Math.abs(elevator.worldPosition.y - currentBuilding.worldPosition.y);
					if(elevator != null) {
						if(elevator.pfSeen == _gthis.pfSeenStart) {
							var relatedPrioritizable7 = elevator.pfRelatedPrioritizable;
							var newPriority15 = currentQueueItem.priority + priorityAdd2;
							if(newPriority15 < relatedPrioritizable7.priority) {
								_gthis.pathQueue.reprioritize(relatedPrioritizable7,newPriority15);
							}
						} else if(elevator.pfSeen != _gthis.pfSeenStart + 1) {
							var newPriority16 = currentQueueItem.priority + priorityAdd2;
							elevator.pfSeen = _gthis.pfSeenStart;
							elevator.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority16,elevator);
							_gthis.pathQueue.enqueue(elevator.pfRelatedPrioritizable);
						}
					}
					if(elevator.pfRelatedPrioritizable != null) {
						elevator.pfRelatedPrioritizable.dontCheckElevators = true;
					}
				}
			}
		}
		if(currentPermanent.worldPosition.y == 0) {
			var _g15 = 0;
			var _g24 = currentPermanent.world.permanents;
			while(_g15 < _g24.length) {
				var bottomPermanents1 = _g24[_g15];
				++_g15;
				if(bottomPermanents1.length == 0 || bottomPermanents1[0] == null) {
					continue;
				}
				var permanentTo4 = bottomPermanents1[0];
				var priorityAdd3 = Math.abs(bottomPermanents1[0].position.x - currentPermanent.position.x);
				if(permanentTo4 != null) {
					if(permanentTo4.pfSeen == _gthis.pfSeenStart) {
						var relatedPrioritizable8 = permanentTo4.pfRelatedPrioritizable;
						var newPriority17 = currentQueueItem.priority + priorityAdd3;
						if(newPriority17 < relatedPrioritizable8.priority) {
							_gthis.pathQueue.reprioritize(relatedPrioritizable8,newPriority17);
						}
					} else if(permanentTo4.pfSeen != _gthis.pfSeenStart + 1) {
						var newPriority18 = currentQueueItem.priority + priorityAdd3;
						permanentTo4.pfSeen = _gthis.pfSeenStart;
						permanentTo4.pfRelatedPrioritizable = pathfinder_PermanentPrioritizable.create(newPriority18,permanentTo4);
						_gthis.pathQueue.enqueue(permanentTo4.pfRelatedPrioritizable);
					}
				}
			}
		}
		currentQueueItem.destroy();
	}
	return relevants;
};
simulation_festival_MusicFestival.__super__ = simulation_festival_Festival;
simulation_festival_MusicFestival.prototype = $extend(simulation_festival_Festival.prototype,{
	isInvolvedWithFestival: function(citizen) {
		if(citizen.get_age() > 18) {
			if(citizen.job != null) {
				return !citizen.job["is"](buildings_School);
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,updateFestival: function(timeMod) {
	}
	,doStartRepeatables: function() {
		simulation_festival_Festival.prototype.doStartRepeatables.call(this);
		var involvedCitizens = simulation_festival_MusicFestival.involvedCitizens(this.simulation);
		var involvedCitizensNum = involvedCitizens.length;
		var desiredNumberOfVenues = involvedCitizensNum / simulation_festival_MusicFestival.citizensPerVenue | 0;
		var nonConsideredVenues = [];
		this.currentFestivalVenues = simulation_festival_MusicFestival.relevantBuildings(this.simulation,this.centerBuilding);
		if(this.currentFestivalVenues.length > desiredNumberOfVenues) {
			nonConsideredVenues = this.currentFestivalVenues.splice(desiredNumberOfVenues,this.currentFestivalVenues.length - desiredNumberOfVenues);
		}
		var len = this.currentFestivalVenues.length;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var bld = this.currentFestivalVenues[i];
			while(bld.leftBuilding != null && common_ArrayExtensions.contains(nonConsideredVenues,bld.leftBuilding)) {
				HxOverrides.remove(nonConsideredVenues,bld.leftBuilding);
				this.currentFestivalVenues.push(bld.leftBuilding);
				bld = bld.leftBuilding;
			}
			bld = this.currentFestivalVenues[i];
			while(bld.rightBuilding != null && common_ArrayExtensions.contains(nonConsideredVenues,bld.rightBuilding)) {
				HxOverrides.remove(nonConsideredVenues,bld.rightBuilding);
				this.currentFestivalVenues.push(bld.rightBuilding);
				bld = bld.rightBuilding;
			}
		}
		this.currentFestivalVenuesSet = new haxe_ds_ObjectMap();
		this.currentTempWorkers = new haxe_ds_ObjectMap();
		var _g2 = 0;
		var _g11 = this.currentFestivalVenues;
		while(_g2 < _g11.length) {
			var bld1 = _g11[_g2];
			++_g2;
			this.currentFestivalVenuesSet.set(bld1,true);
			var v = [];
			this.currentTempWorkers.set(bld1,v);
		}
	}
	,startFestival: function() {
		this.doStartRepeatables();
		this.simulation.happiness.addBoost(simulation_HappinessBoost.withDuration(this.simulation.time,simulation_festival_MusicFestival.happinessBoostDuration,simulation_festival_MusicFestival.happinessBoostGiven,"Music Festival Boost"));
	}
	,citizenFestivalUpdate: function(citizen,timeMod) {
		var busy = false;
		if(!citizen.tryFinishWork(timeMod)) {
			return;
		}
		if((citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null) != null && this.currentFestivalVenuesSet.h.__keys__[(citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).__id__] != null) {
			var tempWorkers = this.currentTempWorkers.h[(citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).__id__];
			var isWorkBuilding = (citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null)["is"](buildings_Work);
			var workBuilding = citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null;
			var buildingAsFestivalWorkHaver = null;
			var buildingIsFestivalWorkHaver = false;
			if(js_Boot.__instanceof(citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null,buildings_IBuildingWithFestivalSpecials)) {
				buildingAsFestivalWorkHaver = citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null;
				buildingIsFestivalWorkHaver = true;
			}
			var citizenIsInvolvedWithFestival = false;
			var i = tempWorkers.length;
			var citizenID = 0;
			while(--i >= 0) {
				var tw = tempWorkers[i];
				if(tw.hasDied || !this.isInvolvedWithFestival(tw)) {
					tempWorkers.splice(i,1);
				} else if(tw == citizen) {
					citizenID = i;
					citizenIsInvolvedWithFestival = true;
				}
			}
			if(!buildingIsFestivalWorkHaver && isWorkBuilding && tempWorkers.length < workBuilding.get_jobs() || buildingIsFestivalWorkHaver && tempWorkers.length < buildingAsFestivalWorkHaver.festivalJobs) {
				if(!citizenIsInvolvedWithFestival) {
					citizenIsInvolvedWithFestival = true;
					tempWorkers.push(citizen);
				}
			}
			if(citizenIsInvolvedWithFestival) {
				busy = true;
				if(buildingIsFestivalWorkHaver) {
					buildingAsFestivalWorkHaver.doFestivalWork(this,citizen,timeMod,citizenID);
				} else {
					workBuilding.work(citizen,timeMod,false);
				}
			} else {
				var _this = citizen.entertainment;
				var _gthis = _this;
				var busy1 = true;
				var entertainmentBuilding = _this.citizen.inPermanent;
				var timeSinceStart = _this.citizen.simulation.time.timeSinceStart;
				if(!_this.entertainmentInited) {
					var currentEntertainmentDesirability = 1.0;
					if(_this.citizen.job == null && _this.citizen.school == null) {
						currentEntertainmentDesirability = 0.75;
					}
					_this.entertainmentFinishedTime = timeSinceStart + 60 * random_Random.getFloat(entertainmentBuilding.get_minimumNormalTimeToSpend(),entertainmentBuilding.get_maximumNormalTimeToSpend());
					_this.recentEntertainmentTypes[entertainmentBuilding.get_entertainmentType()] = timeSinceStart + 1440 * random_Random.getFloat(entertainmentBuilding.get_minimumEntertainmentGroupSatisfy(),entertainmentBuilding.get_maximumEntertainmentGroupSatisfy()) * currentEntertainmentDesirability;
					_this.entertainmentInited = true;
				}
				if(timeSinceStart >= _this.entertainmentFinishedTime) {
					if(entertainmentBuilding.finishEntertainment(_this.citizen,timeMod)) {
						busy1 = false;
						_this.entertainmentInited = false;
					} else if(buildingIsFestivalWorkHaver) {
						var _this1 = _gthis.citizen;
						var buildingAsFestivalWorkHaver1 = _this1.inPermanent != null && _this1.inPermanent.isBuilding ? _this1.inPermanent : null;
						buildingAsFestivalWorkHaver1.beEntertainedFestival(this,_gthis.citizen,timeMod);
					} else {
						entertainmentBuilding.beEntertained(_gthis.citizen,timeMod);
					}
				} else if(buildingIsFestivalWorkHaver) {
					var _this2 = _gthis.citizen;
					var buildingAsFestivalWorkHaver2 = _this2.inPermanent != null && _this2.inPermanent.isBuilding ? _this2.inPermanent : null;
					buildingAsFestivalWorkHaver2.beEntertainedFestival(this,_gthis.citizen,timeMod);
				} else {
					entertainmentBuilding.beEntertained(_gthis.citizen,timeMod);
				}
				busy = busy1;
				citizen.dynamicUnsavedVars.searchingFestivalBuilding = null;
			}
			citizen.canViewSelfInBuilding = true;
		}
		if(!busy) {
			if(citizen.dynamicUnsavedVars.searchingFestivalBuilding != null && !citizen.dynamicUnsavedVars.searchingFestivalBuilding.destroyed) {
				citizen.simulation.pathfinder.findPath(citizen,citizen.dynamicUnsavedVars.searchingFestivalBuilding);
				citizen.pathOnFail = null;
			} else {
				var newVenue = random_Random.fromArray(this.currentFestivalVenues);
				if(!newVenue.destroyed) {
					citizen.simulation.pathfinder.findPath(citizen,newVenue);
					citizen.pathOnFail = null;
					citizen.dynamicUnsavedVars.searchingFestivalBuilding = newVenue;
				}
			}
		}
	}
	,getText: function() {
		if(!this.isNow()) {
			return "You planned an awesome Music Festival!";
		}
		return "Now entertaining your citizens with a great Music Festival!";
	}
	,end: function() {
		var _g = 0;
		var _g1 = this.city.simulation.citizens;
		while(_g < _g1.length) {
			var citizen = _g1[_g];
			++_g;
			if((citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null) == null) {
				continue;
			}
			var tempWorkersInBuilding = this.currentTempWorkers.h[(citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null).__id__];
			if(tempWorkersInBuilding != null && common_ArrayExtensions.contains(tempWorkersInBuilding,citizen)) {
				var buildingAsFestivalWorkHaver = null;
				var buildingIsFestivalWorkHaver = false;
				var workBuilding = citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null;
				if(js_Boot.__instanceof(citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null,buildings_IBuildingWithFestivalSpecials)) {
					buildingAsFestivalWorkHaver = citizen.inPermanent != null && citizen.inPermanent.isBuilding ? citizen.inPermanent : null;
					buildingIsFestivalWorkHaver = true;
				}
				if(buildingIsFestivalWorkHaver) {
					buildingAsFestivalWorkHaver.endFestivalWork(this,citizen);
				} else {
					workBuilding.work(citizen,0,true);
				}
			}
		}
		simulation_festival_Festival.prototype.end.call(this);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		simulation_festival_Festival.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(simulation_festival_MusicFestival.saveDefinition);
		}
	}
	,load: function(queue,definition) {
		simulation_festival_Festival.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
	}
	,__class__: simulation_festival_MusicFestival
});
var thx_Either = $hxClasses["thx.Either"] = { __ename__ : ["thx","Either"], __constructs__ : ["Left","Right"] };
thx_Either.Left = function(value) { var $x = ["Left",0,value]; $x.__enum__ = thx_Either; $x.toString = $estr; return $x; };
thx_Either.Right = function(value) { var $x = ["Right",1,value]; $x.__enum__ = thx_Either; $x.toString = $estr; return $x; };
var thx_Floats = function() { };
$hxClasses["thx.Floats"] = thx_Floats;
thx_Floats.__name__ = ["thx","Floats"];
thx_Floats.wrapCircular = function(v,max) {
	v %= max;
	if(v < 0) {
		v += max;
	}
	return v;
};
var thx_color__$Hsl_Hsl_$Impl_$ = {};
$hxClasses["thx.color._Hsl.Hsl_Impl_"] = thx_color__$Hsl_Hsl_$Impl_$;
thx_color__$Hsl_Hsl_$Impl_$.__name__ = ["thx","color","_Hsl","Hsl_Impl_"];
thx_color__$Hsl_Hsl_$Impl_$.toRgb = function(this1) {
	return thx_color__$Rgbx_Rgbx_$Impl_$.toRgb(thx_color__$Hsl_Hsl_$Impl_$.toRgbx(this1));
};
thx_color__$Hsl_Hsl_$Impl_$.toRgbx = function(this1) {
	var this2 = [thx_color__$Hsl_Hsl_$Impl_$._c(this1[0] + 120,this1[1],this1[2]),thx_color__$Hsl_Hsl_$Impl_$._c(this1[0],this1[1],this1[2]),thx_color__$Hsl_Hsl_$Impl_$._c(this1[0] - 120,this1[1],this1[2])];
	return this2;
};
thx_color__$Hsl_Hsl_$Impl_$._c = function(d,s,l) {
	var m2 = l <= 0.5 ? l * (1 + s) : l + s - l * s;
	var m1 = 2 * l - m2;
	d = thx_Floats.wrapCircular(d,360);
	if(d < 60) {
		return m1 + (m2 - m1) * d / 60;
	} else if(d < 180) {
		return m2;
	} else if(d < 240) {
		return m1 + (m2 - m1) * (240 - d) / 60;
	} else {
		return m1;
	}
};
var thx_color__$Hsv_Hsv_$Impl_$ = {};
$hxClasses["thx.color._Hsv.Hsv_Impl_"] = thx_color__$Hsv_Hsv_$Impl_$;
thx_color__$Hsv_Hsv_$Impl_$.__name__ = ["thx","color","_Hsv","Hsv_Impl_"];
thx_color__$Hsv_Hsv_$Impl_$.toRgb = function(this1) {
	return thx_color__$Rgbx_Rgbx_$Impl_$.toRgb(thx_color__$Hsv_Hsv_$Impl_$.toRgbx(this1));
};
thx_color__$Hsv_Hsv_$Impl_$.toRgbx = function(this1) {
	if(this1[1] == 0) {
		var this2 = [this1[2],this1[2],this1[2]];
		return this2;
	}
	var r;
	var g;
	var b;
	var i;
	var f;
	var p;
	var q;
	var t;
	var h = this1[0] / 60;
	i = Math.floor(h);
	f = h - i;
	p = this1[2] * (1 - this1[1]);
	q = this1[2] * (1 - f * this1[1]);
	t = this1[2] * (1 - (1 - f) * this1[1]);
	switch(i) {
	case 0:
		r = this1[2];
		g = t;
		b = p;
		break;
	case 1:
		r = q;
		g = this1[2];
		b = p;
		break;
	case 2:
		r = p;
		g = this1[2];
		b = t;
		break;
	case 3:
		r = p;
		g = q;
		b = this1[2];
		break;
	case 4:
		r = t;
		g = p;
		b = this1[2];
		break;
	default:
		r = this1[2];
		g = p;
		b = q;
	}
	var this3 = [r,g,b];
	return this3;
};
var thx_color__$Rgb_Rgb_$Impl_$ = {};
$hxClasses["thx.color._Rgb.Rgb_Impl_"] = thx_color__$Rgb_Rgb_$Impl_$;
thx_color__$Rgb_Rgb_$Impl_$.__name__ = ["thx","color","_Rgb","Rgb_Impl_"];
thx_color__$Rgb_Rgb_$Impl_$.toInt = function(this1) {
	return this1;
};
thx_color__$Rgb_Rgb_$Impl_$.get_red = function(this1) {
	return this1 >> 16 & 255;
};
thx_color__$Rgb_Rgb_$Impl_$.get_green = function(this1) {
	return this1 >> 8 & 255;
};
thx_color__$Rgb_Rgb_$Impl_$.get_blue = function(this1) {
	return this1 & 255;
};
var thx_color__$Rgbx_Rgbx_$Impl_$ = {};
$hxClasses["thx.color._Rgbx.Rgbx_Impl_"] = thx_color__$Rgbx_Rgbx_$Impl_$;
thx_color__$Rgbx_Rgbx_$Impl_$.__name__ = ["thx","color","_Rgbx","Rgbx_Impl_"];
thx_color__$Rgbx_Rgbx_$Impl_$.toRgb = function(this1) {
	var this2 = (Math.round(this1[0] * 255) & 255) << 16 | (Math.round(this1[1] * 255) & 255) << 8 | Math.round(this1[2] * 255) & 255;
	return this2;
};
var worldResources_AlienRuins = function(game,id,city,world,position,worldPosition,stage,spriteName) {
	this.standingPlaces = [];
	this.spriteName = "";
	this.bonusesAwarded = 0;
	this.explored = 0;
	this.spriteName = spriteName == null ? random_Random.fromArray(["spr_alienruins","spr_alienruins_2"]) : spriteName;
	WorldResource.call(this,game,id,city,world,position,worldPosition,stage,Resources.getTexture(this.spriteName));
	this.standingPlaces = [2,3,8,9,10,15,16];
	this.bonusesAwarded = 0;
	this.myAwardedBonuses = [];
};
$hxClasses["worldResources.AlienRuins"] = worldResources_AlienRuins;
worldResources_AlienRuins.__name__ = ["worldResources","AlienRuins"];
worldResources_AlienRuins.__super__ = WorldResource;
worldResources_AlienRuins.prototype = $extend(WorldResource.prototype,{
	get_name: function() {
		return "Alien Ruins";
	}
	,get_climbX: function() {
		if(this.spriteName == "spr_alienruins") {
			return 9;
		} else {
			return 15;
		}
	}
	,get_climbY: function() {
		if(this.spriteName == "spr_alienruins") {
			return 17;
		} else {
			return 16;
		}
	}
	,getBonuses: function(bonusNumber) {
		var _gthis = this;
		var createBonus = function(name,description,onGet) {
			return { name : name, description : description, onGet : onGet};
		};
		var createMatBonus = function(name1,description1,mat) {
			return { name : name1, description : description1, onGet : function() {
				_gthis.city.materials.add(mat);
				mat.addToProduction(_gthis.city.simulation.stats);
			}};
		};
		switch(bonusNumber) {
		case 0:
			return [createMatBonus("Overgrown","Your explorers chopped some roots for 20 wood.",new Materials(20)),createMatBonus("Big Rock","Your explorers found a big rock containing 25 stone.",new Materials(0,25)),createMatBonus("Small Pebbles","Your explorers almost tripped over a huge heap of small pebbles. They gathered them for 22 stone.",new Materials(0,22)),createMatBonus("Alien Refrigerator","Your explorers found an alien refrigerator with 12 food in it. They then dismantled it for 5 machine parts.",new Materials(0,0,12,5))];
		case 1:
			return [createMatBonus("Purple Wood","Your explorers found a hidden supply of 40 strange purple wood.",new Materials(40)),createMatBonus("Huge Pillar","Your explorers cut down a huge pillar that stood in their way. It contained 35 stone.",new Materials(0,35)),createMatBonus("Beeping Device","Your explorers dismantled a weird beeping device and gained 20 machine parts.",new Materials(0,0,0,20)),createMatBonus("Canned Food","Your explorers found a pile of cans with sweet-tasting luminous plants in it. The plants turned out to be quite nutritious, so your citizens can eat them for 42 food.",new Materials(0,0,42,0))];
		case 2:
			return [createMatBonus("Box with Wires","Your explorers found a wooden box filled with wires. The box was made of 10 wood and the wires work as 5 machine parts.",new Materials(10,0,0,5)),createMatBonus("Pile of Wood","Your explorers found a large pile with 17 wood.",new Materials(17)),createMatBonus("Large Stone Door","Your explorers cut down a large stone door and gained 15 stone.",new Materials(0,15)),createMatBonus("Berry Bushes","Your explorers found some berry bushes containing 22 food.",new Materials(0,0,22))];
		case 3:
			return [createBonus("Farming Rock Paintings","Your explorers found some paintings on a rock of a better way to farm. Farmers now get 5 more food from each harvest.",function() {
				_gthis.city.simulation.bonuses.extraFoodFromFarms += 5;
			}),createBonus("Alien Housing Blueprint","Your explorers found a blueprint to build an alien house.",function() {
				_gthis.city.progress.unlocks.unlock(buildings_AlienHouse);
				_gthis.city.progress.unlocks.unlock(cityUpgrades_SlimyLiving);
			}),createBonus("Alien Factories Information","Your explorers found a book containing information about alien factories. With this knowledge, machine parts factories now work 10% faster.",function() {
				_gthis.city.simulation.bonuses.machinePartsFactorySpeed *= 1.1;
			}),createBonus("Alien Brain","Your explorers found a perfectly preserved alien brain in a jar. With knowledge about its structure, researchers in labs understand the human brain better and can gather knowledge 5% faster.",function() {
				_gthis.city.simulation.bonuses.labSpeed *= 1.05;
			})];
		default:
			return [];
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		WorldResource.prototype.addWindowInfoLines.call(this);
		var gui1 = this.city.gui;
		var $window = gui1.windowInner;
		gui1.windowAddInfoText(null,function() {
			return "" + (_gthis.explored | 0) + "% explored.";
		});
		$window.addChild(new gui_TextElement($window,gui1.innerWindowStage,"Findings",null,"Arial15",{ left : 0, right : 0, top : 3, bottom : 0}));
		if(this.myAwardedBonuses.length == 0) {
			gui1.windowAddInfoText("Your explorers haven't found anything here yet!");
		} else {
			var _g = 0;
			var _g1 = this.myAwardedBonuses;
			while(_g < _g1.length) {
				var bonus = _g1[_g];
				++_g;
				gui1.windowAddInfoText("" + bonus.name + ": " + bonus.description);
			}
		}
	}
	,awardAnyBonuses: function() {
		if(this.bonusesAwarded < ((this.explored | 0) / 25 | 0) && this.explored >= 25 * (this.bonusesAwarded + 1)) {
			var newBonus;
			var possibleBonuses = this.getBonuses(this.bonusesAwarded);
			possibleBonuses = Lambda.array(possibleBonuses.filter(function(b) {
				return !common_ArrayExtensions.contains(worldResources_AlienRuins.alreadyFoundBonuses,b.name);
			}));
			if(possibleBonuses.length > 0) {
				newBonus = random_Random.fromArray(possibleBonuses);
				var alienHousingBonus = Lambda.find(possibleBonuses,function(pb) {
					return pb.name == "Alien Housing Blueprint";
				});
				if(Lambda.count(this.city.permanents,function(pm) {
					return pm["is"](worldResources_AlienRuins);
				}) < 4 && alienHousingBonus != null) {
					newBonus = alienHousingBonus;
				}
				newBonus.onGet();
				this.myAwardedBonuses.push(newBonus);
				worldResources_AlienRuins.alreadyFoundBonuses.push(newBonus.name);
				if(this.city.gui.windowRelatedTo == this) {
					this.reloadWindow();
				}
			}
			this.bonusesAwarded += 1;
		}
	}
	,createBonusWindow: function(newBonus) {
		this.city.gui.showSimpleWindow(newBonus.description,"Alien Ruins Exploration Update",true);
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = false;
		}
		WorldResource.prototype.save.call(this,queue);
		this.saveBasics(queue);
		var value = this.myAwardedBonuses.length;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value);
		queue.size += 4;
		var _g = 0;
		var _g1 = this.myAwardedBonuses;
		while(_g < _g1.length) {
			var awardedBonus = _g1[_g];
			++_g;
			queue.addString(awardedBonus.name);
			queue.addString(awardedBonus.description);
		}
	}
	,load: function(queue,definition) {
		WorldResource.prototype.load.call(this,queue);
		this.loadBasics(queue);
		var intToRead = queue.bytes.getInt32(queue.readStart);
		queue.readStart += 4;
		var len = intToRead;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var bonus;
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead1;
				var stringLength = queue.bytes.getInt32(readPos);
				bonus = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len1 = intToRead2;
				var str = queue.bytes.getString(queue.readStart,len1);
				queue.readStart += len1;
				bonus = str;
			}
			var bonus1;
			var byteToRead1 = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead1 == 1) {
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos1 = intToRead3;
				var stringLength1 = queue.bytes.getInt32(readPos1);
				bonus1 = queue.bytes.getString(readPos1 + 4,stringLength1);
			} else {
				var intToRead4 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len2 = intToRead4;
				var str1 = queue.bytes.getString(queue.readStart,len2);
				queue.readStart += len2;
				bonus1 = str1;
			}
			var bonus2 = { name : bonus, description : bonus1};
			this.myAwardedBonuses.push(bonus2);
			worldResources_AlienRuins.alreadyFoundBonuses.push(bonus2.name);
		}
	}
	,postLoad: function() {
		this.sprite.texture = Resources.getTexture(this.spriteName);
	}
	,saveBasics: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		if(shouldSaveDefinition) {
			queue.addString(worldResources_AlienRuins.saveDefinition);
		}
		var value = this.explored;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.bonusesAwarded;
		if(queue.size + 4 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 4) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setInt32(queue.size,value1);
		queue.size += 4;
		queue.addString(this.spriteName);
	}
	,loadBasics: function(queue,definition) {
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["explored"] != null ? loadMap.existsReserved("explored") : loadMap.h.hasOwnProperty("explored")) {
			this.explored = __map_reserved["explored"] != null ? loadMap.getReserved("explored") : loadMap.h["explored"];
		}
		if(__map_reserved["bonusesAwarded"] != null ? loadMap.existsReserved("bonusesAwarded") : loadMap.h.hasOwnProperty("bonusesAwarded")) {
			this.bonusesAwarded = __map_reserved["bonusesAwarded"] != null ? loadMap.getReserved("bonusesAwarded") : loadMap.h["bonusesAwarded"];
		}
		if(__map_reserved["spriteName"] != null ? loadMap.existsReserved("spriteName") : loadMap.h.hasOwnProperty("spriteName")) {
			this.spriteName = __map_reserved["spriteName"] != null ? loadMap.getReserved("spriteName") : loadMap.h["spriteName"];
		}
		this.postLoad();
	}
	,__class__: worldResources_AlienRuins
});
var worldResources_LimitedWorldResource = function(game,id,city,world,position,worldPosition,stage,texturesName,initialMaterials,regrowTexturesName) {
	this.maxCitizenX = 17;
	this.minCitizenX = 1;
	this.regrowProgress = 0;
	this.textures = Resources.getTexturesByWidth(texturesName,20);
	this.regrowTextures = regrowTexturesName == null ? null : Resources.getTexturesByWidth(regrowTexturesName,20);
	this.initialMaterials = initialMaterials;
	this.materialsLeft = initialMaterials;
	WorldResource.call(this,game,id,city,world,position,worldPosition,stage,this.textures[0]);
};
$hxClasses["worldResources.LimitedWorldResource"] = worldResources_LimitedWorldResource;
worldResources_LimitedWorldResource.__name__ = ["worldResources","LimitedWorldResource"];
worldResources_LimitedWorldResource.__interfaces__ = [worldResources_ILimitedMaterialGatherPlace];
worldResources_LimitedWorldResource.updateTextureOfLimitedResourceSprite = function(materialsLeft,initialMaterials,regrowProgress,textures,regrowTextures,sprite) {
	if(materialsLeft <= 0.0000001) {
		sprite.texture = regrowTextures != null ? regrowTextures[regrowProgress / 100 * regrowTextures.length | 0] : textures[textures.length - 1];
	} else {
		var i = Math.floor((initialMaterials - materialsLeft) / initialMaterials * textures.length);
		if(initialMaterials != materialsLeft && i == 0 && textures.length > 1) {
			i = 1;
		}
		sprite.texture = textures[i];
	}
};
worldResources_LimitedWorldResource.updateRegrow = function(target,timeMod,city) {
	if(target.materialsLeft <= 0) {
		var this1 = city.simulation.time.timeSinceStart / 60 % 24;
		var start = 7;
		var end = 20;
		if(start < end ? this1 >= start && this1 < end : this1 >= start || this1 < end) {
			target.regrowProgress += target.get_regrowSpeed() * timeMod;
		} else {
			var this2 = city.simulation.time.timeSinceStart / 60 % 24;
			var start1 = 7 - 1;
			var end1 = 20 + 1;
			if(start1 < end1 ? this2 >= start1 && this2 < end1 : this2 >= start1 || this2 < end1) {
				target.regrowProgress += target.get_regrowSpeed() * timeMod * 0.5;
			}
		}
		if(target.regrowProgress >= 100) {
			target.materialsLeft = target.initialMaterials;
			target.regrowProgress = 0;
		}
		target.updateTexture();
	}
};
worldResources_LimitedWorldResource.__super__ = WorldResource;
worldResources_LimitedWorldResource.prototype = $extend(WorldResource.prototype,{
	get_destroyedOnEmpty: function() {
		return true;
	}
	,get_doNotGather: function() {
		return false;
	}
	,get_resourceName: function() {
		return "";
	}
	,get_regrowSpeed: function() {
		return 0.0;
	}
	,get_stayIfEmpty: function() {
		return false;
	}
	,postLoad: function() {
		this.updateTexture();
	}
	,update: function(timeMod) {
		WorldResource.prototype.update.call(this,timeMod);
		var city = this.city;
		if(this.materialsLeft <= 0) {
			var this1 = city.simulation.time.timeSinceStart / 60 % 24;
			var start = 7;
			var end = 20;
			if(start < end ? this1 >= start && this1 < end : this1 >= start || this1 < end) {
				this.regrowProgress += this.get_regrowSpeed() * timeMod;
			} else {
				var this2 = city.simulation.time.timeSinceStart / 60 % 24;
				var start1 = 7 - 1;
				var end1 = 20 + 1;
				if(start1 < end1 ? this2 >= start1 && this2 < end1 : this2 >= start1 || this2 < end1) {
					this.regrowProgress += this.get_regrowSpeed() * timeMod * 0.5;
				}
			}
			if(this.regrowProgress >= 100) {
				this.materialsLeft = this.initialMaterials;
				this.regrowProgress = 0;
			}
			this.updateTexture();
		}
	}
	,updateTexture: function() {
		var materialsLeft = this.materialsLeft;
		var initialMaterials = this.initialMaterials;
		var textures = this.textures;
		var regrowTextures = this.regrowTextures;
		var sprite = this.sprite;
		if(materialsLeft <= 0.0000001) {
			sprite.texture = regrowTextures != null ? regrowTextures[this.regrowProgress / 100 * regrowTextures.length | 0] : textures[textures.length - 1];
		} else {
			var i = Math.floor((initialMaterials - materialsLeft) / initialMaterials * textures.length);
			if(initialMaterials != materialsLeft && i == 0 && textures.length > 1) {
				i = 1;
			}
			sprite.texture = textures[i];
		}
	}
	,addWindowInfoLines: function() {
		var _gthis = this;
		WorldResource.prototype.addWindowInfoLines.call(this);
		this.city.gui.windowAddInfoText(null,function() {
			if(_gthis.materialsLeft <= 0) {
				return "" + (_gthis.regrowProgress | 0) + "% grown.";
			} else {
				return "" + (_gthis.materialsLeft | 0) + "/" + _gthis.initialMaterials + " " + _gthis.get_resourceName() + " left.";
			}
		});
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		WorldResource.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(worldResources_LimitedWorldResource.saveDefinition);
		}
		var value = this.materialsLeft;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value);
		queue.size += 8;
		var value1 = this.regrowProgress;
		if(queue.size + 8 > queue.bytes.length) {
			var oldBytes1 = queue.bytes;
			queue.bytes = new haxe_io_Bytes(new ArrayBuffer((queue.size + 8) * 2));
			queue.bytes.blit(0,oldBytes1,0,queue.size);
		}
		queue.bytes.setDouble(queue.size,value1);
		queue.size += 8;
	}
	,load: function(queue,definition) {
		WorldResource.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["materialsLeft"] != null ? loadMap.existsReserved("materialsLeft") : loadMap.h.hasOwnProperty("materialsLeft")) {
			this.materialsLeft = __map_reserved["materialsLeft"] != null ? loadMap.getReserved("materialsLeft") : loadMap.h["materialsLeft"];
		}
		if(__map_reserved["regrowProgress"] != null ? loadMap.existsReserved("regrowProgress") : loadMap.h.hasOwnProperty("regrowProgress")) {
			this.regrowProgress = __map_reserved["regrowProgress"] != null ? loadMap.getReserved("regrowProgress") : loadMap.h["regrowProgress"];
		}
		this.postLoad();
	}
	,__class__: worldResources_LimitedWorldResource
});
var worldResources_Forest = function(game,id,city,world,position,worldPosition,stage,texture,amountOfWood,regrowTexture) {
	if(regrowTexture == null) {
		regrowTexture = "spr_forest_grow";
	}
	if(amountOfWood == null) {
		amountOfWood = 200;
	}
	if(texture == null) {
		texture = "spr_forest";
	}
	worldResources_LimitedWorldResource.call(this,game,id,city,world,position,worldPosition,stage,texture,amountOfWood,regrowTexture);
	this.managementMode = worldResources_ForestManagementMode.CutDownAndRegrow;
};
$hxClasses["worldResources.Forest"] = worldResources_Forest;
worldResources_Forest.__name__ = ["worldResources","Forest"];
worldResources_Forest.__super__ = worldResources_LimitedWorldResource;
worldResources_Forest.prototype = $extend(worldResources_LimitedWorldResource.prototype,{
	get_name: function() {
		return "Forest";
	}
	,get_resourceName: function() {
		return "wood";
	}
	,get_regrowSpeed: function() {
		return 0.003;
	}
	,get_destroyedOnEmpty: function() {
		return this.managementMode == worldResources_ForestManagementMode.CutDownAndUproot;
	}
	,get_doNotGather: function() {
		return this.managementMode == worldResources_ForestManagementMode.Protect;
	}
	,get_treeClimbX: function() {
		return 7;
	}
	,get_treeClimbY: function() {
		return 13;
	}
	,setManagementMode: function(mode,noRecursion) {
		if(noRecursion == null) {
			noRecursion = false;
		}
		this.managementMode = mode;
		if(!noRecursion && gui_UpgradeWindowParts.hasMultiUpgradeModeOn) {
			var _g = 0;
			var _g1 = this.city.permanents;
			while(_g < _g1.length) {
				var permanent = _g1[_g];
				++_g;
				if(permanent["is"](worldResources_Forest)) {
					permanent.setManagementMode(mode,true);
				}
			}
		}
	}
	,createMainWindowPart: function() {
		var _gthis = this;
		var gui1 = this.city.gui;
		worldResources_LimitedWorldResource.prototype.createMainWindowPart.call(this);
		gui1.window.minWidth = 235;
		var titleContainer = gui_UpgradeWindowParts.createHeader(gui1,"Forest Management");
		gui_UpgradeWindowParts.addOneAndMaxButtons(gui1,titleContainer,function() {
			gui_UpgradeWindowParts.hasMultiUpgradeModeOn = false;
			_gthis.reloadWindow();
		},function() {
			gui_UpgradeWindowParts.hasMultiUpgradeModeOn = true;
			_gthis.reloadWindow();
		},"Only set the management mode for this forest.",function() {
			return "---";
		},function() {
			return "Set the management mode for all forests (" + _gthis.city.simulation.stats.amountOfBuildingsOfType(worldResources_Forest) + ").";
		},false);
		gui1.windowAddInfoText(gui_UpgradeWindowParts.hasMultiUpgradeModeOn ? "What should woodcutters do with all forests?" : "What should woodcutters do with this forest?");
		gui_UpgradeWindowParts.createActivatableButton(gui1,this.managementMode == worldResources_ForestManagementMode.CutDownAndRegrow,function() {
			_gthis.setManagementMode(worldResources_ForestManagementMode.CutDownAndRegrow);
			_gthis.reloadWindow();
		},"Cut Down and Regrow",gui_UpgradeWindowParts.hasMultiUpgradeModeOn ? "Cut them down, then let them regrow." : "Cut it down, then let it regrow.");
		gui_UpgradeWindowParts.createActivatableButton(gui1,this.managementMode == worldResources_ForestManagementMode.Protect,function() {
			_gthis.setManagementMode(worldResources_ForestManagementMode.Protect);
			_gthis.reloadWindow();
		},"Protect",gui_UpgradeWindowParts.hasMultiUpgradeModeOn ? "Don't cut them down." : "Don't cut it down.");
		gui_UpgradeWindowParts.createActivatableButton(gui1,this.managementMode == worldResources_ForestManagementMode.CutDownAndUproot,function() {
			_gthis.setManagementMode(worldResources_ForestManagementMode.CutDownAndUproot);
			_gthis.reloadWindow();
		},"Cut Down and Uproot",gui_UpgradeWindowParts.hasMultiUpgradeModeOn ? "Cut them down to make room for other things." : "Cut it down to make room for other things.");
		gui1.windowInner.addChild(new gui_GUISpacing(gui1.windowInner,new common_Point(2,4)));
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		var prioritizeButton;
		var isConfirmButton = false;
		prioritizeButton = this.city.gui.windowAddBottomButtons([{ text : this.materialsLeft <= 0 ? "Uproot" : this.city.simulation.resourcePriorityManager.isPrioritized(this) ? "Prioritized" : "Prioritize", onHover : function() {
			if(_gthis.materialsLeft <= 0) {
				if(!isConfirmButton) {
					_gthis.city.gui.tooltip.setText(_gthis,"Instantly destroy this forest.");
				}
			} else if(_gthis.city.simulation.resourcePriorityManager.isPrioritized(_gthis)) {
				var _gthis1 = _gthis.city.gui.tooltip;
				var prioritizeButton1 = "Woodcutters will cut this forest first. " + _gthis.game.textHelper.clickOrTap() + " to disable.";
				_gthis1.setText(_gthis,prioritizeButton1,"Prioritized");
			} else {
				_gthis.city.gui.tooltip.setText(_gthis,"When prioritized, woodcutters will cut this forest first.","Prioritize");
			}
		}, action : function() {
			if(_gthis.materialsLeft <= 0) {
				if(isConfirmButton) {
					_gthis.city.gui.closeWindow();
					_gthis.destroy();
					_gthis.materialsLeft = 0;
				} else {
					prioritizeButton.setText("Really Uproot?");
					isConfirmButton = true;
				}
			} else if(_gthis.city.simulation.resourcePriorityManager.isPrioritized(_gthis)) {
				_gthis.city.simulation.resourcePriorityManager.deprioritize(_gthis);
				prioritizeButton.setText("Prioritize");
			} else {
				_gthis.city.simulation.resourcePriorityManager.prioritize(_gthis);
				prioritizeButton.setText("Prioritized");
			}
		}}])[0];
		var wereMaterialsLeft = this.materialsLeft <= 0;
		prioritizeButton.onUpdate = function() {
			if(_gthis.materialsLeft <= 0 != wereMaterialsLeft) {
				if(_gthis.materialsLeft <= 0) {
					isConfirmButton = false;
					prioritizeButton.setText("Uproot");
				} else if(_gthis.city.simulation.resourcePriorityManager.isPrioritized(_gthis)) {
					prioritizeButton.setText("Prioritize");
				} else {
					prioritizeButton.setText("Prioritized");
				}
				wereMaterialsLeft = _gthis.materialsLeft <= 0;
			}
		};
	}
	,save: function(queue,shouldSaveDefinition) {
		if(shouldSaveDefinition == null) {
			shouldSaveDefinition = true;
		}
		worldResources_LimitedWorldResource.prototype.save.call(this,queue);
		if(shouldSaveDefinition) {
			queue.addString(worldResources_Forest.saveDefinition);
		}
		queue.addString(this.managementMode[0]);
	}
	,load: function(queue,definition) {
		worldResources_LimitedWorldResource.prototype.load.call(this,queue);
		if(definition == null) {
			var byteToRead = queue.bytes.b[queue.readStart];
			queue.readStart += 1;
			if(byteToRead == 1) {
				var intToRead = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var readPos = intToRead;
				var stringLength = queue.bytes.getInt32(readPos);
				definition = queue.bytes.getString(readPos + 4,stringLength);
			} else {
				var intToRead1 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				var len = intToRead1;
				var str = queue.bytes.getString(queue.readStart,len);
				queue.readStart += len;
				definition = str;
			}
		} else {
			definition = definition;
		}
		var loadMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = definition.split("|");
		while(_g < _g1.length) {
			var varAndType = _g1[_g];
			++_g;
			if(varAndType == "") {
				continue;
			}
			var varAndTypeArray = varAndType.split("$");
			var res;
			var _g2 = varAndTypeArray[1];
			switch(_g2) {
			case "Bool":
				var intToRead2 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				if(intToRead2 == 1) {
					res = true;
				} else {
					res = false;
				}
				break;
			case "FPoint":
				res = queue.readFPoint();
				break;
			case "Float":
				var floatToRead = queue.bytes.getDouble(queue.readStart);
				queue.readStart += 8;
				res = floatToRead;
				break;
			case "Int":
				var intToRead3 = queue.bytes.getInt32(queue.readStart);
				queue.readStart += 4;
				res = intToRead3;
				break;
			case "Point":
				res = queue.readPoint();
				break;
			case "Rectangle":
				res = queue.readRectangle();
				break;
			case "String":
				var value;
				var byteToRead1 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead1 == 1) {
					var intToRead4 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos1 = intToRead4;
					var stringLength1 = queue.bytes.getInt32(readPos1);
					value = queue.bytes.getString(readPos1 + 4,stringLength1);
				} else {
					var intToRead5 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len1 = intToRead5;
					var str1 = queue.bytes.getString(queue.readStart,len1);
					queue.readStart += len1;
					value = str1;
				}
				res = value;
				break;
			case "ds":
				var res1;
				var byteToRead2 = queue.bytes.b[queue.readStart];
				queue.readStart += 1;
				if(byteToRead2 == 1) {
					var intToRead6 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var readPos2 = intToRead6;
					var stringLength2 = queue.bytes.getInt32(readPos2);
					res1 = queue.bytes.getString(readPos2 + 4,stringLength2);
				} else {
					var intToRead7 = queue.bytes.getInt32(queue.readStart);
					queue.readStart += 4;
					var len2 = intToRead7;
					var str2 = queue.bytes.getString(queue.readStart,len2);
					queue.readStart += len2;
					res1 = str2;
				}
				res = haxe_Unserializer.run(res1);
				break;
			default:
				var typeName = _g2;
				var resolvedEnum = Type.resolveEnum(typeName);
				if(resolvedEnum != null) {
					var res2;
					var byteToRead3 = queue.bytes.b[queue.readStart];
					queue.readStart += 1;
					if(byteToRead3 == 1) {
						var intToRead8 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var readPos3 = intToRead8;
						var stringLength3 = queue.bytes.getInt32(readPos3);
						res2 = queue.bytes.getString(readPos3 + 4,stringLength3);
					} else {
						var intToRead9 = queue.bytes.getInt32(queue.readStart);
						queue.readStart += 4;
						var len3 = intToRead9;
						var str3 = queue.bytes.getString(queue.readStart,len3);
						queue.readStart += len3;
						res2 = str3;
					}
					res = Type.createEnum(resolvedEnum,res2);
				} else {
					throw new js__$Boot_HaxeError("That type isn't supported while loading the game!");
				}
			}
			var key = varAndTypeArray[0];
			if(__map_reserved[key] != null) {
				loadMap.setReserved(key,res);
			} else {
				loadMap.h[key] = res;
			}
		}
		if(__map_reserved["managementMode"] != null ? loadMap.existsReserved("managementMode") : loadMap.h.hasOwnProperty("managementMode")) {
			this.managementMode = __map_reserved["managementMode"] != null ? loadMap.getReserved("managementMode") : loadMap.h["managementMode"];
		}
	}
	,__class__: worldResources_Forest
});
var worldResources_BirchForest = function(game,id,city,world,position,worldPosition,stage) {
	worldResources_Forest.call(this,game,id,city,world,position,worldPosition,stage,"spr_birchforest",120,"spr_pineforest_grow");
};
$hxClasses["worldResources.BirchForest"] = worldResources_BirchForest;
worldResources_BirchForest.__name__ = ["worldResources","BirchForest"];
worldResources_BirchForest.__super__ = worldResources_Forest;
worldResources_BirchForest.prototype = $extend(worldResources_Forest.prototype,{
	get_name: function() {
		return "Pine Forest";
	}
	,get_regrowSpeed: function() {
		return 0.01;
	}
	,get_treeClimbX: function() {
		return 12;
	}
	,get_treeClimbY: function() {
		return 13;
	}
	,__class__: worldResources_BirchForest
});
var worldResources_ComputerAlienRuins = function(game,id,city,world,position,worldPosition,stage) {
	worldResources_AlienRuins.call(this,game,id,city,world,position,worldPosition,stage,"spr_alienruins_3");
};
$hxClasses["worldResources.ComputerAlienRuins"] = worldResources_ComputerAlienRuins;
worldResources_ComputerAlienRuins.__name__ = ["worldResources","ComputerAlienRuins"];
worldResources_ComputerAlienRuins.__super__ = worldResources_AlienRuins;
worldResources_ComputerAlienRuins.prototype = $extend(worldResources_AlienRuins.prototype,{
	get_climbX: function() {
		return 9;
	}
	,get_climbY: function() {
		return 15;
	}
	,getBonuses: function(bonusNumber) {
		var _gthis = this;
		var createBonus = function(name,description,onGet) {
			return { name : name, description : description, onGet : onGet};
		};
		var createMatBonus = function(name1,description1,mat) {
			return { name : name1, description : description1, onGet : function() {
				_gthis.city.materials.add(mat);
				mat.addToProduction(_gthis.city.simulation.stats);
			}};
		};
		switch(bonusNumber) {
		case 0:
			return [createMatBonus("Orange Rocks","Your explorers laid eye on some orange rocks. They are good for 35 stone.",new Materials(0,35))];
		case 1:
			return [createMatBonus("Mushrooms","Your explorers found some suspicious mushrooms. Very carefully, they tasted a bit. To everyone's surprise, they actually taste pretty good and you got 55 food.",new Materials(0,0,55))];
		case 2:
			return [createMatBonus("Gears","Your explorers found a pile of gears. They work as seven machine parts.",new Materials(0,0,0,7))];
		case 3:
			return [createBonus("Strange Device","Your explorers found a small device, that may have something to do with the inaccessible worlds.",function() {
			})];
		default:
			return [];
		}
	}
	,__class__: worldResources_ComputerAlienRuins
});
var worldResources_ForestManagementMode = $hxClasses["worldResources.ForestManagementMode"] = { __ename__ : ["worldResources","ForestManagementMode"], __constructs__ : ["CutDownAndRegrow","Protect","CutDownAndUproot"] };
worldResources_ForestManagementMode.CutDownAndRegrow = ["CutDownAndRegrow",0];
worldResources_ForestManagementMode.CutDownAndRegrow.toString = $estr;
worldResources_ForestManagementMode.CutDownAndRegrow.__enum__ = worldResources_ForestManagementMode;
worldResources_ForestManagementMode.Protect = ["Protect",1];
worldResources_ForestManagementMode.Protect.toString = $estr;
worldResources_ForestManagementMode.Protect.__enum__ = worldResources_ForestManagementMode;
worldResources_ForestManagementMode.CutDownAndUproot = ["CutDownAndUproot",2];
worldResources_ForestManagementMode.CutDownAndUproot.toString = $estr;
worldResources_ForestManagementMode.CutDownAndUproot.__enum__ = worldResources_ForestManagementMode;
var worldResources_PineForest = function(game,id,city,world,position,worldPosition,stage) {
	worldResources_Forest.call(this,game,id,city,world,position,worldPosition,stage,"spr_pineforest",200,"spr_pineforest_grow");
};
$hxClasses["worldResources.PineForest"] = worldResources_PineForest;
worldResources_PineForest.__name__ = ["worldResources","PineForest"];
worldResources_PineForest.__super__ = worldResources_Forest;
worldResources_PineForest.prototype = $extend(worldResources_Forest.prototype,{
	get_name: function() {
		return "Pine Forest";
	}
	,get_regrowSpeed: function() {
		return 0.005;
	}
	,get_treeClimbX: function() {
		return 15;
	}
	,get_treeClimbY: function() {
		return 3;
	}
	,__class__: worldResources_PineForest
});
var worldResources_Rock = function(game,id,city,world,position,worldPosition,stage) {
	worldResources_LimitedWorldResource.call(this,game,id,city,world,position,worldPosition,stage,"spr_rock",250);
};
$hxClasses["worldResources.Rock"] = worldResources_Rock;
worldResources_Rock.__name__ = ["worldResources","Rock"];
worldResources_Rock.__super__ = worldResources_LimitedWorldResource;
worldResources_Rock.prototype = $extend(worldResources_LimitedWorldResource.prototype,{
	get_name: function() {
		return "Rock";
	}
	,get_resourceName: function() {
		return "stone";
	}
	,createWindowAddBottomButtons: function() {
		var _gthis = this;
		var prioritizeButton = this.city.gui.windowAddBottomButtons([{ text : this.city.simulation.resourcePriorityManager.isPrioritized(this) ? "Prioritized" : "Prioritize", onHover : function() {
			if(_gthis.city.simulation.resourcePriorityManager.isPrioritized(_gthis)) {
				var _gthis1 = _gthis.city.gui.tooltip;
				var prioritizeButton1 = "Stone miners will mine this rock first. " + _gthis.game.textHelper.clickOrTap() + " to disable.";
				_gthis1.setText(_gthis,prioritizeButton1,"Prioritized");
			} else {
				_gthis.city.gui.tooltip.setText(_gthis,"When prioritized, stone miners will mine this rock first.","Prioritize");
			}
		}, action : function() {
			if(_gthis.city.simulation.resourcePriorityManager.isPrioritized(_gthis)) {
				_gthis.city.simulation.resourcePriorityManager.deprioritize(_gthis);
				prioritizeButton.setText("Prioritize");
			} else {
				_gthis.city.simulation.resourcePriorityManager.prioritize(_gthis);
				prioritizeButton.setText("Prioritized");
			}
		}}])[0];
	}
	,__class__: worldResources_Rock
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
Analytics.enabled = false;
Analytics.ready = false;
Analytics.useAltEarlyGame = false;
Analytics.sessionTime = 0;
Analytics.reportedLongPlaytime = false;
Analytics.didABTest = false;
Analytics.capturedErrors = [];
Analytics.errorsReported = 0;
Permanent.width = 20;
Permanent.height = 20;
Permanent.destroyingForReplacement = false;
Permanent.destroyingDisableMoveDown = false;
Permanent.saveDefinition = "";
Building.spriteName = "";
BuildingUpgrade.saveDefinition = "spriteIndex$Int";
Citizen.spriteCitizens = new haxe_ds_ObjectMap();
Citizen.shouldUpdateDraw = false;
Citizen.saveDefinition = "hasBuildingInited$Bool|spriteIndex$Int|relativeX$Float|bornOn$Float|actualWorkTimePreference$Float|currentAction$LifeAction|hasWorkTools$Bool|lastInfrequentUpdateAge$Float|dieAgeModifier$Float|educationLevel$Float";
City.simulationSpeedMultiplier = 0.6666666666666666666;
City.saveInterval = 1.95;
City.saveGameVersion = 27;
City.partContainerSize = 5000;
City.saveDefinition = "maxPermanentID$Int|viewPos$FPoint|zoomScale$Float";
CityTime.saveDefinition = "timeSinceStart$Float";
Config.enableCheats = false;
Config.earlyGameFix1 = false;
Config.earlyGameFix2 = false;
Config.isLimitedDemo = true;
Config.mailingListURL = "http://eepurl.com/gweDy9";
Config.splashScreenDone = false;
Config.siteLockUrls = (function($this) {
	var $r;
	var _g = 5;
	$r = _g == 4 ? ["coolmathgames.com","coolmath-games.com","wagtailgames.com","florianvanstrien.nl","localhost","127.0.0.1","192.168.178."] : null;
	return $r;
}(this));
Config.hasFullscreen = (function($this) {
	var $r;
	var _g = 5;
	$r = (function($this) {
		var $r;
		switch(_g) {
		case 3:
			$r = false;
			break;
		case 4:
			$r = false;
			break;
		case 6:
			$r = false;
			break;
		case 7:
			$r = true;
			break;
		default:
			$r = true;
		}
		return $r;
	}($this));
	return $r;
}(this));
Config.canBeMobile = (function($this) {
	var $r;
	var _g = 5;
	$r = (function($this) {
		var $r;
		switch(_g) {
		case 0:
			$r = true;
			break;
		case 2:
			$r = true;
			break;
		case 4:
			$r = true;
			break;
		case 6:
			$r = true;
			break;
		case 7:
			$r = true;
			break;
		case 8:
			$r = true;
			break;
		default:
			$r = false;
		}
		return $r;
	}($this));
	return $r;
}(this));
Config.forceMobile = (function($this) {
	var $r;
	var _g = 5;
	$r = _g == 8 ? true : false;
	return $r;
}(this));
Config.noInputYet = true;
Config.hadFullStepWithInput = false;
Config.lastInput = 0;
Config.allowUnlimitedResources = false;
Config.cheatSpeedEnabled = false;
Game.isLoading = false;
Main.isMobile = false;
Main.isLargeMobile = false;
Main.isCanvasRenderer = false;
Materials.saveDefinition = "wood$Float|stone$Float|food$Float|machineParts$Float|knowledge$Float|refinedMetal$Float|computerChips$Float|cacao$Float|chocolate$Float|magic$Float";
MaterialsHelper.materialNames = ["food","wood","stone","machineParts","refinedMetal","computerChips","cacao","chocolate","knowledge","magic"];
PermanentMetaHelper.buildingClassesNumber = 0;
PermanentMetaHelper.registeredClassNames = new haxe_ds_StringMap();
Resources.storiesInfo = new haxe_ds_StringMap();
Resources.singleTextureCache = new haxe_ds_StringMap();
Resources.multiTextureCache = new haxe_ds_StringMap();
Resources.multiTextureCache2 = new haxe_ds_StringMap();
Resources.citizenNames = [];
Settings.settingsLoaded = false;
Settings.musicOn = true;
Settings.soundOn = true;
Settings.fullscreen = false;
Settings.secretCodesEnabled = [];
Settings.pathfindingWorkers = -1;
buildingUpgrades_AIMining.stoneBoost = 0.3;
buildingUpgrades_BetterLightShow.entertainmentBoost = 40;
buildingUpgrades_BetterPickaxes.stoneBoost = 0.2;
buildingUpgrades_DieShrink.efficiencyMod = 2;
buildingUpgrades_DieShrink.extraChipsPerStepPerWorker = 0.00005;
buildingUpgrades_FarmingResearch.extraFoodPerHarvest = 10;
buildingUpgrades_FossilScanner.stoneBoost = 0.3;
buildingUpgrades_MachinePartsFactoryEfficiency.efficiencyMod = 1;
buildingUpgrades_MachinePartsFactoryTurbo.efficiencyMod = 2;
buildingUpgrades_MachinePartsFactoryTurbo.extraMachinePartsMadePerStepPerWorker = 0.0015;
buildingUpgrades_ModernHomePlant.extraYearsPerYear = 0.05;
buildingUpgrades_PickaxeTech.stoneBoost = 0.3;
buildingUpgrades_RefinedMetalsFactoryHack.efficiencyMod = 1;
buildingUpgrades_RefinedMetalsFactoryHack.extraRefinedMetalsMadePerWorker = 0.0005;
buildingUpgrades_TreePlantationResearch.growthSpeedBoost = 0.2;
buildingUpgrades_UltimateScrewdriver.efficiencyMod = 0.058;
buildings_AlienDecryptor.spriteName = "spr_aliendecryptor";
buildings_AlienDecryptor.saveDefinition = "timeWorking$Float";
buildings_AlienHouse.spriteName = "spr_alienhouse";
buildings_Aquarium.spriteName = "spr_aquarium";
buildings_Aquarium.gardenTextureSets = [2];
buildings_Aquarium.openTime = 6.0;
buildings_Aquarium.closeTime = 23;
buildings_Aquarium.saveDefinition = "currentTexture$Int";
buildings_Arcade.spriteName = "spr_arcade";
buildings_Arcade.closeTime = 23;
buildings_Arcade.saveDefinition = "";
buildings_ArtColony.spriteName = "spr_artcolony";
buildings_ArtColony.progressPerStep = 0.00002;
buildings_ArtColony.unlockNewWorkAfter = [4,7,8,10,13,13];
buildings_ArtColony.openTime = 15.0;
buildings_ArtColony.closeTime = 21.5;
buildings_ArtColony.saveDefinition = "currentTexture$Int|currentWorkProgress$Float";
buildings_Beacon.spriteName = "spr_beacon";
buildings_Beacon.saveDefinition = "";
buildings_BlossomHippieHQ.spriteName = "spr_blossomhippiehq";
buildings_BlossomHippieHQ.lastMission = 8;
buildings_BlossomHippieHQ.saveDefinition = "lastEventDoneOnDay$Int|doingEvent$Int|eventPhase$Int|currentMission$Int";
buildings_BlossomHut.spriteName = "spr_bloomrestaurant";
buildings_BlossomRestaurant.spriteName = "spr_bloomrestaurant";
buildings_BlossomRestaurant.closeTime = 0.5;
buildings_BlueCollarWork.workToolsX = 4;
buildings_BlueCollarWork.workToolsTime = 20;
buildings_BoardGameStore.spriteName = "spr_boardgamestore";
buildings_BoardGameStore.closeTime = 23;
buildings_BoardGameStore.firstFloorChairs = [4,12];
buildings_BoardGameStore.saveDefinition = "";
buildings_BotanicalGardens.spriteName = "spr_botanicalgardens";
buildings_BotanicalGardens.gardenTextureSets = [2,3,2,4,2,2];
buildings_BotanicalGardens.openTime = 6.0;
buildings_BotanicalGardens.closeTime = 22;
buildings_BotanicalGardens.saveDefinition = "currentTexture$Int";
buildings_CacaoFarm.spriteName = "spr_cacaofarm";
buildings_CacaoFarm.foodPerHarvest = 35;
buildings_CacaoFarm.growSpeed = 0.75;
buildings_CacaoFarm.harvestAmount = 0.025;
buildings_CacaoFarm.passiveGrowSpeed = 0.012;
buildings_CacaoFarm.passiveGrowSpeedBadLight = 0.006;
buildings_CacaoFarm.saveDefinition = "farmStage$buildings.CacaoFarmStage|percentGrown$Float|foodLeft$Float|percentCleaned$Float";
buildings_Factory.timePerFrame = 4;
buildings_MaterialConvertingFactory.saveDefinition = "totalMaterialUsed$Float|materialMade$Float";
buildings_ChocolateFactory.spriteName = "spr_chocolatefactory";
buildings_ChocolateFactory.saveDefinition = "";
buildings_ComputerChipFactory.spriteName = "spr_computerchipfactory";
buildings_ComputerChipFactory.saveDefinition = "";
buildings_ComputerResearchCenter.spriteName = "spr_computerresearchcenter";
buildings_ComputerResearchCenter.knowledgePerStep = 0.0014;
buildings_ComputerResearchCenter.saveDefinition = "totalKnowledgeGenerated$Float";
buildings_CuttingEdgeHome.spriteName = "spr_cuttingedgehome";
buildings_EcoFarm.spriteName = "spr_ecofarm";
buildings_EcoFarm.openTime = 12.0;
buildings_EcoFarm.closeTime = 20.5;
buildings_EcoFarm.crop2Sprites = ["spr_ecofarm_crop2","spr_ecofarm_crop2_alt","spr_ecofarm_crop2_alt2"];
buildings_EcoFarm.crop3Sprites = ["spr_ecofarm_crop3","spr_ecofarm_crop3_alt"];
buildings_EcoFarm.saveDefinition = "openDay$Int|crop2Sprite$Int|crop3Sprite$Int";
buildings_EscapeRoom.spriteName = "spr_labescaperoom";
buildings_EscapeRoom.closeTime = 23.99;
buildings_EscapeRoom.maxVisitors = 10;
buildings_EscapeRoom.saveDefinition = "";
buildings_ExperimentalFarm.spriteName = "spr_experimentalfarm";
buildings_ExperimentalFarm.indoorFarmSpeedIncrease = 0.1;
buildings_ExperimentalFarm.saveDefinition = "";
buildings_ExperimentationLab.spriteName = "spr_experimentationlab";
buildings_ExperimentationLab.saveDefinition = "";
buildings_ExplorationCentre.spriteName = "spr_explorationcentre";
buildings_ExplorationCentre.explorePerAction = 0.25;
buildings_ExplorationCentre.knowledgePerExploreAction = 0.25;
buildings_ExplorationCentre.knowledgePerStep = 0.001;
buildings_RefinedMetalFactory.spriteName = "spr_refinedmetalfactory";
buildings_RefinedMetalFactory.originalEfficiency = 5.0;
buildings_RefinedMetalFactory.origMaterialsMadePerStepPerWorker = 0.001;
buildings_RefinedMetalFactory.saveDefinition = "";
buildings_FactoryPub.spriteName = "spr_refinedmetalfactorypub";
buildings_FactoryPub.closeTime = 4.5;
buildings_FactoryPub.saveDefinition = "";
buildings_FarmByProductProcessor.spriteName = "spr_farmbyproductprocessor";
buildings_FarmByProductProcessor.woodPerFarm = 0.0014;
buildings_FarmByProductProcessor.saveDefinition = "woodMade$Float";
buildings_FarmGrowArea.saveDefinition = "farmStage$buildings.FarmStage|percentGrown$Float|foodLeft$Float|originalFoodLeft$Float|percentCleaned$Float";
buildings_FarmHouse.spriteName = "spr_farmhouse";
buildings_FarmHouse.saveDefinition = "stageProgress$Float|materialPhase$Int|totalMaterialsProduced$Float";
buildings_FestivalHQ.spriteName = "spr_festivalhq";
buildings_FestivalHQ.saveDefinition = "festivalCoolDown$Float";
buildings_FlowerPenthouse.spriteName = "spr_flowerpenthouse";
buildings_FlowerPenthouse.saveDefinition = "mirrored$Bool";
buildings_FossilMuseum.spriteName = "spr_fossilmuseum";
buildings_FossilMuseum.knowledgePerStepPerFossil = 0.001;
buildings_FossilMuseum.closeTime = 23;
buildings_FossilMuseum.educationPerDay = 0.035;
buildings_FossilMuseum.educationCap = 1.6;
buildings_FossilMuseum.saveDefinition = "totalKnowledgeGenerated$Float";
buildings_HackerHQ.spriteName = "spr_hackerhq";
buildings_HackerHQ.lastMission = 11;
buildings_HackerHQ.walkAroundPositions = [3,9,12,13];
buildings_HackerHQ.saveDefinition = "lastEventDoneOnDay$Int|doingEvent$Int|eventPhase$Int|currentMission$Int";
buildings_HighTechNightClub.spriteName = "spr_tech_nightclub";
buildings_HighTechNightClub.closeTime = 6;
buildings_HighTechNightClub.saveDefinition = "";
buildings_HoloGameHall.spriteName = "spr_hologamehall";
buildings_HoloGameHall.openTime = 12;
buildings_HoloGameHall.closeTime = 2;
buildings_HoloGameHall.monsterSize = 14;
buildings_HoloGameHall.boosterSpriteSize = 9;
buildings_HyperElevator.spriteName = "spr_hyperelevator";
buildings_HyperElevator.closeDoorSpeed = 0.5;
buildings_HyperElevator.openDoorSpeed = 0.5;
buildings_HyperElevator.doorOpenTime = 45;
buildings_HyperElevator.saveDefinition = "timesUsed$Int|timesUsedTo$Int";
buildings_IndoorFarm.spriteName = "spr_indoorfarm";
buildings_IndoorFarm.foodPerHarvest = 25;
buildings_IndoorFarm.growSpeed = 1.15;
buildings_IndoorFarm.harvestAmount = 0.25;
buildings_IndoorFarm.cleanSpeed = 5;
buildings_IndoorFarm.passiveGrowSpeed = 0.018;
buildings_IndoorFarm.passiveGrowSpeedBadLight = 0.009;
buildings_IndoorFarm.saveDefinition = "farmStage$buildings.FarmStage|percentGrown$Float|foodLeft$Float|percentCleaned$Float";
buildings_Laboratory.spriteName = "spr_laboratory";
buildings_Laboratory.knowledgePerStep = 0.00125;
buildings_Laboratory.firstScientistX = 5;
buildings_Laboratory.secondScientistX = 13;
buildings_Laboratory.scientistY = 9;
buildings_Laboratory.saveDefinition = "totalKnowledgeGenerated$Float";
buildings_LandedExplorationShip.spriteName = "spr_explorationship";
buildings_LandedExplorationShip.saveDefinition = "";
buildings_LandingSite.spriteName = "spr_landingplace";
buildings_LandingSite.flyingSpeed = 3;
buildings_LandingSite.flyingSpeedForPathCalculations = 1.5;
buildings_LandingSite.gettingNewFlyingSaucerStageNumber = 16;
buildings_LandingSite.yChangePerNewGetStep = 0.25;
buildings_LandingSite.maxTimeUntilCanGetNewFlyingSaucer = 30;
buildings_LandingSite.numberOfFlyingSaucerTypes = 6;
buildings_LandingSite.saveDefinition = "timesUsed$Int|timesUsedTo$Int|timesUsedStopOver$Int|saucerType$Int";
buildings_Library.spriteName = "spr_library";
buildings_Library.closeTime = 22;
buildings_Library.educationPerDay = 0.025;
buildings_Library.educationCap = 1.5;
buildings_Library.saveDefinition = "";
buildings_LivingResearchCenter.spriteName = "spr_livingresearchcenter";
buildings_LivingResearchCenter.knowledgePerWalk = 0.10799999999999998;
buildings_LivingResearchCenter.saveDefinition = "totalKnowledgeGenerated$Float";
buildings_MachinePartsFactory.spriteName = "spr_machinepartsfactory";
buildings_MachinePartsFactory.saveDefinition = "";
buildings_MechanicalHouse.spriteName = "spr_mechanicalhouse";
buildings_MechanicalHouse.ifMachinePartsFactoryBonus = 50;
buildings_MedicalClinic.spriteName = "spr_medicalclinic";
buildings_Misdirector.spriteName = "spr_misdirector";
buildings_Misdirector.normalKnowledgeProduction = 0.5;
buildings_Misdirector.reducedKnowledgeProduction = 0.05;
buildings_Misdirector.saveDefinition = "knowledgeGenerated$Float|timesUsedTo$Int";
buildings_ModernArtMuseum.spriteName = "spr_modernartmuseum";
buildings_ModernArtMuseum.closeTime = 21.5;
buildings_ModernArtMuseum.saveDefinition = "currentTexture$Int";
buildings_ModernRusticHome.spriteName = "spr_modernrustichome";
buildings_NightClub.spriteName = "spr_nightclub";
buildings_NightClub.laserMinXWithLeft = 1;
buildings_NightClub.laserMinX = 6;
buildings_NightClub.laserMaxX = 18;
buildings_NightClub.laserMaxY = 18;
buildings_NightClub.closeTime = 6;
buildings_NightClub.nightClubColorOptions = 5;
buildings_NightClub.saveDefinition = "nightClubColor$Int";
buildings_NormalHouse.spriteName = "spr_normalhouse";
buildings_NormalHouse.saveDefinition = "doorMainTexture$Int";
buildings_Observatory.spriteName = "spr_observatory";
buildings_Observatory.knowledgePerStep = 0.002;
buildings_Observatory.starDatabaseUpgradeAmount = 1.5;
buildings_Observatory.starDatabaseAndUniverseDBUpgradeAmount = 6;
buildings_Observatory.saveDefinition = "totalKnowledgeGenerated$Float";
buildings_OutpostHouse.spriteName = "spr_outposthouse";
buildings_Park.spriteName = "spr_botanicalgardens";
buildings_Park.mainTextures = ["spr_botanicalgardens","spr_indoorpark","spr_indoorpark_alt1"];
buildings_Park.openTime = 6.0;
buildings_Park.closeTime = 22;
buildings_Park.saveDefinition = "currentTexture$Int|currentMainTexture$Int";
buildings_ParkPod.spriteName = "spr_botanicalgardens";
buildings_ParkPod.mainTextures = ["spr_botanicalgardens","spr_indoorpark","spr_indoorpark_alt1"];
buildings_ParkPod.saveDefinition = "currentTexture$Int|currentMainTexture$Int";
buildings_Pub.spriteName = "spr_pub";
buildings_Pub.closeTime = 4.5;
buildings_Pub.saveDefinition = "markingTexture$String";
buildings_Restaurant.spriteName = "spr_restaurant";
buildings_Restaurant.closeTime = 0.5;
buildings_School.spriteName = "spr_school";
buildings_School.educationPerDay = 0.07;
buildings_School.educationCap = 1;
buildings_ScrapyardNightClub.spriteName = "spr_scrapyardnightclub";
buildings_ScrapyardNightClub.closeTime = 6;
buildings_ScrapyardNightClub.saveDefinition = "mainTextureLeft$Int|mainTextureOther$Int";
buildings_SecretSocietyHouse.spriteName = "spr_secretsocietyhouse";
buildings_SecretSocietyHouse.lastMission = 8;
buildings_SecretSocietyHouse.saveDefinition = "lastEventDoneOnDay$Int|doingEvent$Int|eventPhase$Int|currentMission$Int";
buildings_ShadyHome.spriteName = "spr_shadyhouse";
buildings_SpaciousHouse.spriteName = "spr_spacioushouse";
buildings_StatueGarden.spriteName = "spr_botanicalgardens";
buildings_StatueGarden.saveDefinition = "";
buildings_StatueOfHappiness.spriteName = "spr_botanicalgardens";
buildings_StatueOfHappiness.openTime = 0.0;
buildings_StatueOfHappiness.closeTime = 23.5;
buildings_StatueOfHappiness.saveDefinition = "";
buildings_StatueOfTheKey.spriteName = "spr_botanicalgardens";
buildings_StatueOfTheKey.openTime = 0.0;
buildings_StatueOfTheKey.closeTime = 23.5;
buildings_StatueOfTheKey.saveDefinition = "";
buildings_StoneMine.spriteName = "spr_stonemine";
buildings_StoneMine.normalStoneMinedPerAction = 0.2;
buildings_StoneMine.stoneMineTimeMin = 90;
buildings_StoneMine.stoneMineTimeMax = 120;
buildings_StoneResearchCenter.spriteName = "spr_stoneresearchcentre";
buildings_StoneResearchCenter.bonusDivider = 200;
buildings_StoneResearchCenter.bonusMultiplier = 0.075;
buildings_StoneResearchCenter.bonusMultiplierStart = 0.15;
buildings_StoneResearchCenter.bonusLogFactor = 2;
buildings_StoneResearchCenter.bonusDividerPT = 195;
buildings_StoneResearchCenter.bonusMultiplierPT = 0.1;
buildings_StoneResearchCenter.bonusLogFactorPT = 1.65;
buildings_StoneResearchCenter.linearBonusFactorPT = 2.5e-005;
buildings_StoneResearchCenter.saveDefinition = "totalKnowledgeGenerated$Float";
buildings_StoneTeleporter.spriteName = "spr_stoneteleporter";
buildings_StoneTeleporter.bigStoneInitialMaterials = 150;
buildings_StoneTeleporter.fossilChancePerIM = 0.00001;
buildings_StoneTeleporter.saveDefinition = "regrowProgress$Float|materialsLeft$Float|hasBigStone$Bool";
buildings_Supercomputer.spriteName = "spr_supercomputer";
buildings_Supercomputer.knowledgePerDayPerEmployee = 2;
buildings_Supercomputer.saveDefinition = "knowledgeSoFar$Float";
buildings_Teleporter.spriteName = "spr_teleporter";
buildings_Teleporter.saveDefinition = "timesUsed$Int|timesUsedTo$Int";
buildings_TheContraption.spriteName = "spr_contraption";
buildings_TheMachine.spriteName = "spr_secretsocietymachine";
buildings_TheMachine.saveDefinition = "animProgress$Float|lastDayReward$Int|thisDayMaterialReward$ds|totalMaterialReward$ds";
buildings_TinkerersHome.spriteName = "spr_tinkerershouse";
buildings_TinkerersHome.educationPerDay = 0.01;
buildings_TinkerersHome.educationCap = 1.25;
buildings_TinkerersHome.saveDefinition = "frontTextureUsed$Int|backTextureUsed$Int";
buildings_TreeHuggerBase.spriteName = "spr_bloomrestaurant";
buildings_TreePlantation.spriteName = "spr_treeplantation";
buildings_TreePlantation.workerRegrowBoost = 0.5;
buildings_TreePlantation.growWaitTimeMin = 120;
buildings_TreePlantation.growWaitTimeMax = 180;
buildings_TreePlantation.saveDefinition = "regrowProgress$Float|materialsLeft$Float";
buildings_Villa.spriteName = "spr_villa";
buildings_Villa.saveDefinition = "timesUsed$Int|timesUsedTo$Int";
buildings_WoodcuttingCentre.spriteName = "spr_woodcuttingcentre";
buildings_WoodcuttingCentre.woodCutPerAction = 0.2;
buildings_WoodcuttingCentre.woodCutTimeMin = 60;
buildings_WoodcuttingCentre.woodCutTimeMax = 90;
buildings_Workshop.spriteName = "spr_workshop";
buildings_Workshop.materialsMadePerWalkPerWorker = 0.075;
buildings_Workshop.woodToMachinePartsEfficiency = 2;
buildings_Workshop.knowledgePerWalk = 0.15;
buildings_Workshop.machinePartsFactorySpeedIncrease = 1.25;
buildings_Workshop.saveDefinition = "materialMade$Float|totalMaterialUsed$Float|totalKnowledgeGenerated$Float";
cityUpgrades_CityUpgrade.saveDefinition = "";
cityUpgrades_ChipBinning.extraFactorySpeed = 0.2;
cityUpgrades_MedicalMachineLearning.ageExtension = 0.05;
cityUpgrades_OptimizedChipLayouts.extraFactorySpeed = 0.33;
cityUpgrades_UniverseMapping.refinedMetalChance = 0.04;
common_AdHelper.adExpireTime = 18000;
common_AdHelper.adExpireTimeRewarded = 0;
common_AdHelper.adCapRemaining = 1000000;
common_AdHelper.minTimeBetweenRewarded = (function($this) {
	var $r;
	var _g = 5;
	$r = (function($this) {
		var $r;
		switch(_g) {
		case 3:
			$r = 18000;
			break;
		case 6:
			$r = 10800;
			break;
		default:
			$r = 18000;
		}
		return $r;
	}($this));
	return $r;
}(this));
common_AdHelper.standardAdExpireTime = (function($this) {
	var $r;
	var _g = 5;
	$r = (function($this) {
		var $r;
		switch(_g) {
		case 3:
			$r = 18000;
			break;
		case 6:
			$r = -1;
			break;
		case 7:
			$r = 9000;
			break;
		default:
			$r = 18000;
		}
		return $r;
	}($this));
	return $r;
}(this));
common_GogyAdsHelper.loadedCorrectly = false;
common_KongTools.highestHappinessReported = 0;
common_KongTools.highestHappinessKnown = 0;
common_KongTools.statTimeout = 0;
common_KongTools.kongJSLoaded = false;
common_Performance.frameTimeValues = [];
common_Performance.previousTime = 0;
common_PokiHelpers.isAdBlockEnabled = false;
common_PokiHelpers.isReportedAsGameplay = false;
common_Storage.knowsSupport = false;
common_Storage.hasSupport = false;
graphics_Particle.pool = [];
gui_GameMenu.canUndoReset = false;
gui_NinePatch.ninePatchTextureCache = new haxe_ds_ObjectMap();
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
pathfinder_PermanentPrioritizable.pool = [];
pooling_Int32ArrayPool.maxSize = 20;
pooling_Int32ArrayPool.maxPoolAmount = 10000;
pooling_Int32ArrayPool.pool = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 20) {
			var i = _g1++;
			_g.push([]);
		}
	}
	$r = _g;
	return $r;
}(this));
pooling__$PooledSprite_PooledSprite_$Impl_$.pool = new haxe_ds_ObjectMap();
progress_SandboxHelper.saveDefinition = "unlimitedResources$Bool|everPlayedWithUnlimitedResources$Bool";
progress_ScriptedStoryPart.saveDefinition = "";
progress_Story.saveDefinition = "storyName$String|disableDying$Bool|disableDestroy$Bool|hiddenBoost$Bool";
progress_Unlocks.saveDefinition = "unlockState$ds|explicityLocked$ds|unlockedDecorationTab$Bool|unlockedBuildingModeButton$Bool|unlockedManagementOptions$Bool|numberOfModernArtMuseumArtworksUnlocked$Int";
progress_scriptedStoryParts_AlienInvasion.saveDefinition = "timeUntilInvasion$Float|invasionProgress$Float|isInvasion$Bool|isInvasionFinished$Bool";
progress_scriptedStoryParts_SpawnCitizensRegularly.saveDefinition = "spawnNumber$Int|nextSpawn$Float|groupSizeMin$Int|groupSizeMax$Int|ageRangeMin$Int|ageRangeMax$Int|worldID$Int|timeBetweenMin$Int|timeBetweenMax$Int|afterDoneMessage$String";
simulation_BabyMaker.saveDefinition = "softPopLimit$Int|mode$ds|targetPopAmount$Int";
simulation_BonusResults.saveDefinition = "extraFoodFromFarms$Int|machinePartsFactorySpeed$Float|labSpeed$Float|indoorFarmSpeed$Float|fossilsCollected$Int";
simulation_BoostManager.enableExtraReward = true;
simulation_BoostManager.saveDefinition = "boostLeft$Float";
simulation_Eating.saveDefinition = "foodShortage$Float";
simulation_Fish.saveDefinition = "type$Int|relativeX$Float|relativeY$Float";
simulation_Happiness.saveDefinition = "happiness$Float|homeHappiness$Float|purposeHappiness$Float|entertainmentHappiness$Float|schoolHappiness$Float|medicalHappiness$Float|fullHappinessTime$Float|actualHappiness$Float|happinessEnthusiasmLevel$Int|lastShownVeryUnhappyWarning$Int|veryUnhappyFromDay$Int";
simulation_HappinessBoost.saveDefinition = "boostUntil$Float|boost$Float|text$String|canGoOverMax$Bool";
simulation_HouseAssigner.privateTeleportersLeft = [];
simulation_Stats.saveDefinition = "";
simulation_citizenSpecialActions_ClimbIntoTree.fromHour = 0;
simulation_citizenSpecialActions_ClimbIntoTree.toHour = 4;
simulation_citizenSpecialActions_ClimbOntoRuins.fromHour = 0.5;
simulation_citizenSpecialActions_ClimbOntoRuins.toHour = 4.5;
simulation_citizenSpecialActions_DanceOnBall.fromHour = 1;
simulation_citizenSpecialActions_DanceOnBall.toHour = 5;
simulation_citizenSpecialActions_DanceOnBall.moveSpeed = 0.5;
simulation_citizenSpecialActions_MoveToEdge.fromHour = 23;
simulation_citizenSpecialActions_MoveToEdge.toHour = 5;
simulation_citizenSpecialActions_Protester.fromHour = 0;
simulation_citizenSpecialActions_Protester.toHour = 4;
simulation_citizenSpecialActions_Protester.moveSpeed = 0.66666666666666663;
simulation_citizenSpecialActions_WatchStars.fromHour = 0;
simulation_citizenSpecialActions_WatchStars.toHour = 4;
simulation_festival_Festival.saveDefinition = "timeStart$Float|timeEnd$Float|started$Bool";
simulation_festival_MusicFestival.minCitizens = 100;
simulation_festival_MusicFestival.happinessBoostDuration = 10080;
simulation_festival_MusicFestival.happinessBoostGiven = 25;
simulation_festival_MusicFestival.citizensPerVenue = 20;
simulation_festival_MusicFestival.saveDefinition = "";
worldResources_AlienRuins.saveDefinition = "explored$Float|bonusesAwarded$Int|spriteName$String";
worldResources_LimitedWorldResource.saveDefinition = "materialsLeft$Float|regrowProgress$Float";
worldResources_Forest.saveDefinition = "managementMode$worldResources.ForestManagementMode";
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
